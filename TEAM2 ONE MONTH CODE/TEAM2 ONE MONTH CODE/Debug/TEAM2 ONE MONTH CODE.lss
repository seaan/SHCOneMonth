
TEAM2 ONE MONTH CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  000012f0  00001384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080200e  0080200e  00001392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001392  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  000013c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000082b6  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012d5  00000000  00000000  0000987e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003f9c  00000000  00000000  0000ab53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006a0  00000000  00000000  0000eaf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000297ea  00000000  00000000  0000f190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000028a6  00000000  00000000  0003897a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  0003b220  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009522  00000000  00000000  0003b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	1a c1       	rjmp	.+564    	; 0x23e <__bad_interrupt>
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	08 c1       	rjmp	.+528    	; 0x23e <__bad_interrupt>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	04 c1       	rjmp	.+520    	; 0x23e <__bad_interrupt>
      36:	00 00       	nop
      38:	02 c1       	rjmp	.+516    	; 0x23e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	00 c1       	rjmp	.+512    	; 0x23e <__bad_interrupt>
      3e:	00 00       	nop
      40:	fe c0       	rjmp	.+508    	; 0x23e <__bad_interrupt>
      42:	00 00       	nop
      44:	fc c0       	rjmp	.+504    	; 0x23e <__bad_interrupt>
      46:	00 00       	nop
      48:	fa c0       	rjmp	.+500    	; 0x23e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f8 c0       	rjmp	.+496    	; 0x23e <__bad_interrupt>
      4e:	00 00       	nop
      50:	f6 c0       	rjmp	.+492    	; 0x23e <__bad_interrupt>
      52:	00 00       	nop
      54:	f4 c0       	rjmp	.+488    	; 0x23e <__bad_interrupt>
      56:	00 00       	nop
      58:	f2 c0       	rjmp	.+484    	; 0x23e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f0 c0       	rjmp	.+480    	; 0x23e <__bad_interrupt>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	23 c2       	rjmp	.+1094   	; 0x4e4 <__vector_39>
      9e:	00 00       	nop
      a0:	5e c2       	rjmp	.+1212   	; 0x55e <__vector_40>
      a2:	00 00       	nop
      a4:	99 c2       	rjmp	.+1330   	; 0x5d8 <__vector_41>
      a6:	00 00       	nop
      a8:	d4 c2       	rjmp	.+1448   	; 0x652 <__vector_42>
      aa:	00 00       	nop
      ac:	c8 c0       	rjmp	.+400    	; 0x23e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c2 c0       	rjmp	.+388    	; 0x23e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c0 c0       	rjmp	.+384    	; 0x23e <__bad_interrupt>
      be:	00 00       	nop
      c0:	be c0       	rjmp	.+380    	; 0x23e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bc c0       	rjmp	.+376    	; 0x23e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ba c0       	rjmp	.+372    	; 0x23e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b8 c0       	rjmp	.+368    	; 0x23e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b6 c0       	rjmp	.+364    	; 0x23e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b4 c0       	rjmp	.+360    	; 0x23e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b2 c0       	rjmp	.+356    	; 0x23e <__bad_interrupt>
      da:	00 00       	nop
      dc:	b0 c0       	rjmp	.+352    	; 0x23e <__bad_interrupt>
      de:	00 00       	nop
      e0:	ae c0       	rjmp	.+348    	; 0x23e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	9e c0       	rjmp	.+316    	; 0x23e <__bad_interrupt>
     102:	00 00       	nop
     104:	9c c0       	rjmp	.+312    	; 0x23e <__bad_interrupt>
     106:	00 00       	nop
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ef c0       	rjmp	.+478    	; 0x2fc <__vector_71>
     11e:	00 00       	nop
     120:	2a c1       	rjmp	.+596    	; 0x376 <__vector_72>
     122:	00 00       	nop
     124:	65 c1       	rjmp	.+714    	; 0x3f0 <__vector_73>
     126:	00 00       	nop
     128:	a0 c1       	rjmp	.+832    	; 0x46a <__vector_74>
     12a:	00 00       	nop
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	84 c0       	rjmp	.+264    	; 0x23e <__bad_interrupt>
     136:	00 00       	nop
     138:	82 c0       	rjmp	.+260    	; 0x23e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	80 c0       	rjmp	.+256    	; 0x23e <__bad_interrupt>
     13e:	00 00       	nop
     140:	7e c0       	rjmp	.+252    	; 0x23e <__bad_interrupt>
     142:	00 00       	nop
     144:	7c c0       	rjmp	.+248    	; 0x23e <__bad_interrupt>
     146:	00 00       	nop
     148:	7a c0       	rjmp	.+244    	; 0x23e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	78 c0       	rjmp	.+240    	; 0x23e <__bad_interrupt>
     14e:	00 00       	nop
     150:	76 c0       	rjmp	.+236    	; 0x23e <__bad_interrupt>
     152:	00 00       	nop
     154:	74 c0       	rjmp	.+232    	; 0x23e <__bad_interrupt>
     156:	00 00       	nop
     158:	72 c0       	rjmp	.+228    	; 0x23e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	46 c0       	rjmp	.+140    	; 0x23e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	44 c0       	rjmp	.+136    	; 0x23e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	42 c0       	rjmp	.+132    	; 0x23e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	40 c0       	rjmp	.+128    	; 0x23e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3e c0       	rjmp	.+124    	; 0x23e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3c c0       	rjmp	.+120    	; 0x23e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
	...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df e3       	ldi	r29, 0x3F	; 63
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e0 ef       	ldi	r30, 0xF0	; 240
     214:	f2 e1       	ldi	r31, 0x12	; 18
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	ae 30       	cpi	r26, 0x0E	; 14
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
     228:	20 e2       	ldi	r18, 0x20	; 32
     22a:	ae e0       	ldi	r26, 0x0E	; 14
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
     230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
     232:	a3 32       	cpi	r26, 0x23	; 35
     234:	b2 07       	cpc	r27, r18
     236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
     238:	53 d6       	rcall	.+3238   	; 0xee0 <main>
     23a:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     240:	8f ef       	ldi	r24, 0xFF	; 255
     242:	80 93 70 00 	sts	0x0070, r24
     246:	80 93 71 00 	sts	0x0071, r24
     24a:	80 93 72 00 	sts	0x0072, r24
     24e:	80 93 73 00 	sts	0x0073, r24
     252:	80 93 74 00 	sts	0x0074, r24
     256:	80 93 75 00 	sts	0x0075, r24
     25a:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     25e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     260:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     262:	e0 e5       	ldi	r30, 0x50	; 80
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	90 81       	ld	r25, Z
     268:	92 60       	ori	r25, 0x02	; 2
     26a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     26c:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     26e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     270:	81 ff       	sbrs	r24, 1
     272:	fd cf       	rjmp	.-6      	; 0x26e <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	80 e4       	ldi	r24, 0x40	; 64
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	28 d2       	rcall	.+1104   	; 0x6cc <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     27c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     27e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     280:	e0 e5       	ldi	r30, 0x50	; 80
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	90 81       	ld	r25, Z
     286:	9e 7f       	andi	r25, 0xFE	; 254
     288:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     28a:	8f bf       	out	0x3f, r24	; 63
     28c:	08 95       	ret

0000028e <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     28e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     290:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     292:	e8 2f       	mov	r30, r24
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	e0 59       	subi	r30, 0x90	; 144
     298:	ff 4f       	sbci	r31, 0xFF	; 255
     29a:	60 95       	com	r22
     29c:	80 81       	ld	r24, Z
     29e:	68 23       	and	r22, r24
     2a0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2a2:	9f bf       	out	0x3f, r25	; 63
     2a4:	08 95       	ret

000002a6 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	1f 92       	push	r1
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2b0:	80 91 12 20 	lds	r24, 0x2012
     2b4:	90 91 13 20 	lds	r25, 0x2013
     2b8:	e0 91 0e 20 	lds	r30, 0x200E
     2bc:	f0 91 0f 20 	lds	r31, 0x200F
     2c0:	be 01       	movw	r22, r28
     2c2:	6f 5f       	subi	r22, 0xFF	; 255
     2c4:	7f 4f       	sbci	r23, 0xFF	; 255
     2c6:	19 95       	eicall
	return c;
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
}
     2ca:	99 27       	eor	r25, r25
     2cc:	87 fd       	sbrc	r24, 7
     2ce:	90 95       	com	r25
     2d0:	0f 90       	pop	r0
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     2d8:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     2da:	80 91 12 20 	lds	r24, 0x2012
     2de:	90 91 13 20 	lds	r25, 0x2013
     2e2:	e0 91 10 20 	lds	r30, 0x2010
     2e6:	f0 91 11 20 	lds	r31, 0x2011
     2ea:	19 95       	eicall
     2ec:	99 23       	and	r25, r25
     2ee:	1c f4       	brge	.+6      	; 0x2f6 <_write+0x1e>
		return -1;
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	9f ef       	ldi	r25, 0xFF	; 255
     2f4:	08 95       	ret
	}
	return 1;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
}
     2fa:	08 95       	ret

000002fc <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	08 b6       	in	r0, 0x38	; 56
     308:	0f 92       	push	r0
     30a:	18 be       	out	0x38, r1	; 56
     30c:	09 b6       	in	r0, 0x39	; 57
     30e:	0f 92       	push	r0
     310:	19 be       	out	0x39, r1	; 57
     312:	0b b6       	in	r0, 0x3b	; 59
     314:	0f 92       	push	r0
     316:	1b be       	out	0x3b, r1	; 59
     318:	2f 93       	push	r18
     31a:	3f 93       	push	r19
     31c:	4f 93       	push	r20
     31e:	5f 93       	push	r21
     320:	6f 93       	push	r22
     322:	7f 93       	push	r23
     324:	8f 93       	push	r24
     326:	9f 93       	push	r25
     328:	af 93       	push	r26
     32a:	bf 93       	push	r27
     32c:	ef 93       	push	r30
     32e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     330:	e0 e0       	ldi	r30, 0x00	; 0
     332:	f2 e0       	ldi	r31, 0x02	; 2
     334:	44 a1       	ldd	r20, Z+36	; 0x24
     336:	55 a1       	ldd	r21, Z+37	; 0x25
     338:	e0 91 16 20 	lds	r30, 0x2016
     33c:	f0 91 17 20 	lds	r31, 0x2017
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	19 95       	eicall
}
     348:	ff 91       	pop	r31
     34a:	ef 91       	pop	r30
     34c:	bf 91       	pop	r27
     34e:	af 91       	pop	r26
     350:	9f 91       	pop	r25
     352:	8f 91       	pop	r24
     354:	7f 91       	pop	r23
     356:	6f 91       	pop	r22
     358:	5f 91       	pop	r21
     35a:	4f 91       	pop	r20
     35c:	3f 91       	pop	r19
     35e:	2f 91       	pop	r18
     360:	0f 90       	pop	r0
     362:	0b be       	out	0x3b, r0	; 59
     364:	0f 90       	pop	r0
     366:	09 be       	out	0x39, r0	; 57
     368:	0f 90       	pop	r0
     36a:	08 be       	out	0x38, r0	; 56
     36c:	0f 90       	pop	r0
     36e:	0f be       	out	0x3f, r0	; 63
     370:	0f 90       	pop	r0
     372:	1f 90       	pop	r1
     374:	18 95       	reti

00000376 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	0f 92       	push	r0
     37e:	11 24       	eor	r1, r1
     380:	08 b6       	in	r0, 0x38	; 56
     382:	0f 92       	push	r0
     384:	18 be       	out	0x38, r1	; 56
     386:	09 b6       	in	r0, 0x39	; 57
     388:	0f 92       	push	r0
     38a:	19 be       	out	0x39, r1	; 57
     38c:	0b b6       	in	r0, 0x3b	; 59
     38e:	0f 92       	push	r0
     390:	1b be       	out	0x3b, r1	; 59
     392:	2f 93       	push	r18
     394:	3f 93       	push	r19
     396:	4f 93       	push	r20
     398:	5f 93       	push	r21
     39a:	6f 93       	push	r22
     39c:	7f 93       	push	r23
     39e:	8f 93       	push	r24
     3a0:	9f 93       	push	r25
     3a2:	af 93       	push	r26
     3a4:	bf 93       	push	r27
     3a6:	ef 93       	push	r30
     3a8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3aa:	e8 e2       	ldi	r30, 0x28	; 40
     3ac:	f2 e0       	ldi	r31, 0x02	; 2
     3ae:	44 81       	ldd	r20, Z+4	; 0x04
     3b0:	55 81       	ldd	r21, Z+5	; 0x05
     3b2:	e0 91 16 20 	lds	r30, 0x2016
     3b6:	f0 91 17 20 	lds	r31, 0x2017
     3ba:	62 e0       	ldi	r22, 0x02	; 2
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	19 95       	eicall
}
     3c2:	ff 91       	pop	r31
     3c4:	ef 91       	pop	r30
     3c6:	bf 91       	pop	r27
     3c8:	af 91       	pop	r26
     3ca:	9f 91       	pop	r25
     3cc:	8f 91       	pop	r24
     3ce:	7f 91       	pop	r23
     3d0:	6f 91       	pop	r22
     3d2:	5f 91       	pop	r21
     3d4:	4f 91       	pop	r20
     3d6:	3f 91       	pop	r19
     3d8:	2f 91       	pop	r18
     3da:	0f 90       	pop	r0
     3dc:	0b be       	out	0x3b, r0	; 59
     3de:	0f 90       	pop	r0
     3e0:	09 be       	out	0x39, r0	; 57
     3e2:	0f 90       	pop	r0
     3e4:	08 be       	out	0x38, r0	; 56
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	08 b6       	in	r0, 0x38	; 56
     3fc:	0f 92       	push	r0
     3fe:	18 be       	out	0x38, r1	; 56
     400:	09 b6       	in	r0, 0x39	; 57
     402:	0f 92       	push	r0
     404:	19 be       	out	0x39, r1	; 57
     406:	0b b6       	in	r0, 0x3b	; 59
     408:	0f 92       	push	r0
     40a:	1b be       	out	0x3b, r1	; 59
     40c:	2f 93       	push	r18
     40e:	3f 93       	push	r19
     410:	4f 93       	push	r20
     412:	5f 93       	push	r21
     414:	6f 93       	push	r22
     416:	7f 93       	push	r23
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	af 93       	push	r26
     41e:	bf 93       	push	r27
     420:	ef 93       	push	r30
     422:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     424:	e0 e3       	ldi	r30, 0x30	; 48
     426:	f2 e0       	ldi	r31, 0x02	; 2
     428:	44 81       	ldd	r20, Z+4	; 0x04
     42a:	55 81       	ldd	r21, Z+5	; 0x05
     42c:	e0 91 16 20 	lds	r30, 0x2016
     430:	f0 91 17 20 	lds	r31, 0x2017
     434:	64 e0       	ldi	r22, 0x04	; 4
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	19 95       	eicall
}
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	bf 91       	pop	r27
     442:	af 91       	pop	r26
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	7f 91       	pop	r23
     44a:	6f 91       	pop	r22
     44c:	5f 91       	pop	r21
     44e:	4f 91       	pop	r20
     450:	3f 91       	pop	r19
     452:	2f 91       	pop	r18
     454:	0f 90       	pop	r0
     456:	0b be       	out	0x3b, r0	; 59
     458:	0f 90       	pop	r0
     45a:	09 be       	out	0x39, r0	; 57
     45c:	0f 90       	pop	r0
     45e:	08 be       	out	0x38, r0	; 56
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     46a:	1f 92       	push	r1
     46c:	0f 92       	push	r0
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	0f 92       	push	r0
     472:	11 24       	eor	r1, r1
     474:	08 b6       	in	r0, 0x38	; 56
     476:	0f 92       	push	r0
     478:	18 be       	out	0x38, r1	; 56
     47a:	09 b6       	in	r0, 0x39	; 57
     47c:	0f 92       	push	r0
     47e:	19 be       	out	0x39, r1	; 57
     480:	0b b6       	in	r0, 0x3b	; 59
     482:	0f 92       	push	r0
     484:	1b be       	out	0x3b, r1	; 59
     486:	2f 93       	push	r18
     488:	3f 93       	push	r19
     48a:	4f 93       	push	r20
     48c:	5f 93       	push	r21
     48e:	6f 93       	push	r22
     490:	7f 93       	push	r23
     492:	8f 93       	push	r24
     494:	9f 93       	push	r25
     496:	af 93       	push	r26
     498:	bf 93       	push	r27
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     49e:	e8 e3       	ldi	r30, 0x38	; 56
     4a0:	f2 e0       	ldi	r31, 0x02	; 2
     4a2:	44 81       	ldd	r20, Z+4	; 0x04
     4a4:	55 81       	ldd	r21, Z+5	; 0x05
     4a6:	e0 91 16 20 	lds	r30, 0x2016
     4aa:	f0 91 17 20 	lds	r31, 0x2017
     4ae:	68 e0       	ldi	r22, 0x08	; 8
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	19 95       	eicall
}
     4b6:	ff 91       	pop	r31
     4b8:	ef 91       	pop	r30
     4ba:	bf 91       	pop	r27
     4bc:	af 91       	pop	r26
     4be:	9f 91       	pop	r25
     4c0:	8f 91       	pop	r24
     4c2:	7f 91       	pop	r23
     4c4:	6f 91       	pop	r22
     4c6:	5f 91       	pop	r21
     4c8:	4f 91       	pop	r20
     4ca:	3f 91       	pop	r19
     4cc:	2f 91       	pop	r18
     4ce:	0f 90       	pop	r0
     4d0:	0b be       	out	0x3b, r0	; 59
     4d2:	0f 90       	pop	r0
     4d4:	09 be       	out	0x39, r0	; 57
     4d6:	0f 90       	pop	r0
     4d8:	08 be       	out	0x38, r0	; 56
     4da:	0f 90       	pop	r0
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	0f 90       	pop	r0
     4e0:	1f 90       	pop	r1
     4e2:	18 95       	reti

000004e4 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     4e4:	1f 92       	push	r1
     4e6:	0f 92       	push	r0
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	0f 92       	push	r0
     4ec:	11 24       	eor	r1, r1
     4ee:	08 b6       	in	r0, 0x38	; 56
     4f0:	0f 92       	push	r0
     4f2:	18 be       	out	0x38, r1	; 56
     4f4:	09 b6       	in	r0, 0x39	; 57
     4f6:	0f 92       	push	r0
     4f8:	19 be       	out	0x39, r1	; 57
     4fa:	0b b6       	in	r0, 0x3b	; 59
     4fc:	0f 92       	push	r0
     4fe:	1b be       	out	0x3b, r1	; 59
     500:	2f 93       	push	r18
     502:	3f 93       	push	r19
     504:	4f 93       	push	r20
     506:	5f 93       	push	r21
     508:	6f 93       	push	r22
     50a:	7f 93       	push	r23
     50c:	8f 93       	push	r24
     50e:	9f 93       	push	r25
     510:	af 93       	push	r26
     512:	bf 93       	push	r27
     514:	ef 93       	push	r30
     516:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     518:	e0 e4       	ldi	r30, 0x40	; 64
     51a:	f2 e0       	ldi	r31, 0x02	; 2
     51c:	44 a1       	ldd	r20, Z+36	; 0x24
     51e:	55 a1       	ldd	r21, Z+37	; 0x25
     520:	e0 91 14 20 	lds	r30, 0x2014
     524:	f0 91 15 20 	lds	r31, 0x2015
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	80 e4       	ldi	r24, 0x40	; 64
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	19 95       	eicall
}
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	bf 91       	pop	r27
     536:	af 91       	pop	r26
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	7f 91       	pop	r23
     53e:	6f 91       	pop	r22
     540:	5f 91       	pop	r21
     542:	4f 91       	pop	r20
     544:	3f 91       	pop	r19
     546:	2f 91       	pop	r18
     548:	0f 90       	pop	r0
     54a:	0b be       	out	0x3b, r0	; 59
     54c:	0f 90       	pop	r0
     54e:	09 be       	out	0x39, r0	; 57
     550:	0f 90       	pop	r0
     552:	08 be       	out	0x38, r0	; 56
     554:	0f 90       	pop	r0
     556:	0f be       	out	0x3f, r0	; 63
     558:	0f 90       	pop	r0
     55a:	1f 90       	pop	r1
     55c:	18 95       	reti

0000055e <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	0f 92       	push	r0
     566:	11 24       	eor	r1, r1
     568:	08 b6       	in	r0, 0x38	; 56
     56a:	0f 92       	push	r0
     56c:	18 be       	out	0x38, r1	; 56
     56e:	09 b6       	in	r0, 0x39	; 57
     570:	0f 92       	push	r0
     572:	19 be       	out	0x39, r1	; 57
     574:	0b b6       	in	r0, 0x3b	; 59
     576:	0f 92       	push	r0
     578:	1b be       	out	0x3b, r1	; 59
     57a:	2f 93       	push	r18
     57c:	3f 93       	push	r19
     57e:	4f 93       	push	r20
     580:	5f 93       	push	r21
     582:	6f 93       	push	r22
     584:	7f 93       	push	r23
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
     58a:	af 93       	push	r26
     58c:	bf 93       	push	r27
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     592:	e8 e6       	ldi	r30, 0x68	; 104
     594:	f2 e0       	ldi	r31, 0x02	; 2
     596:	44 81       	ldd	r20, Z+4	; 0x04
     598:	55 81       	ldd	r21, Z+5	; 0x05
     59a:	e0 91 14 20 	lds	r30, 0x2014
     59e:	f0 91 15 20 	lds	r31, 0x2015
     5a2:	62 e0       	ldi	r22, 0x02	; 2
     5a4:	80 e4       	ldi	r24, 0x40	; 64
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	19 95       	eicall
}
     5aa:	ff 91       	pop	r31
     5ac:	ef 91       	pop	r30
     5ae:	bf 91       	pop	r27
     5b0:	af 91       	pop	r26
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	7f 91       	pop	r23
     5b8:	6f 91       	pop	r22
     5ba:	5f 91       	pop	r21
     5bc:	4f 91       	pop	r20
     5be:	3f 91       	pop	r19
     5c0:	2f 91       	pop	r18
     5c2:	0f 90       	pop	r0
     5c4:	0b be       	out	0x3b, r0	; 59
     5c6:	0f 90       	pop	r0
     5c8:	09 be       	out	0x39, r0	; 57
     5ca:	0f 90       	pop	r0
     5cc:	08 be       	out	0x38, r0	; 56
     5ce:	0f 90       	pop	r0
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	0f 90       	pop	r0
     5d4:	1f 90       	pop	r1
     5d6:	18 95       	reti

000005d8 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5d8:	1f 92       	push	r1
     5da:	0f 92       	push	r0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	0f 92       	push	r0
     5e0:	11 24       	eor	r1, r1
     5e2:	08 b6       	in	r0, 0x38	; 56
     5e4:	0f 92       	push	r0
     5e6:	18 be       	out	0x38, r1	; 56
     5e8:	09 b6       	in	r0, 0x39	; 57
     5ea:	0f 92       	push	r0
     5ec:	19 be       	out	0x39, r1	; 57
     5ee:	0b b6       	in	r0, 0x3b	; 59
     5f0:	0f 92       	push	r0
     5f2:	1b be       	out	0x3b, r1	; 59
     5f4:	2f 93       	push	r18
     5f6:	3f 93       	push	r19
     5f8:	4f 93       	push	r20
     5fa:	5f 93       	push	r21
     5fc:	6f 93       	push	r22
     5fe:	7f 93       	push	r23
     600:	8f 93       	push	r24
     602:	9f 93       	push	r25
     604:	af 93       	push	r26
     606:	bf 93       	push	r27
     608:	ef 93       	push	r30
     60a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     60c:	e0 e7       	ldi	r30, 0x70	; 112
     60e:	f2 e0       	ldi	r31, 0x02	; 2
     610:	44 81       	ldd	r20, Z+4	; 0x04
     612:	55 81       	ldd	r21, Z+5	; 0x05
     614:	e0 91 14 20 	lds	r30, 0x2014
     618:	f0 91 15 20 	lds	r31, 0x2015
     61c:	64 e0       	ldi	r22, 0x04	; 4
     61e:	80 e4       	ldi	r24, 0x40	; 64
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	19 95       	eicall
}
     624:	ff 91       	pop	r31
     626:	ef 91       	pop	r30
     628:	bf 91       	pop	r27
     62a:	af 91       	pop	r26
     62c:	9f 91       	pop	r25
     62e:	8f 91       	pop	r24
     630:	7f 91       	pop	r23
     632:	6f 91       	pop	r22
     634:	5f 91       	pop	r21
     636:	4f 91       	pop	r20
     638:	3f 91       	pop	r19
     63a:	2f 91       	pop	r18
     63c:	0f 90       	pop	r0
     63e:	0b be       	out	0x3b, r0	; 59
     640:	0f 90       	pop	r0
     642:	09 be       	out	0x39, r0	; 57
     644:	0f 90       	pop	r0
     646:	08 be       	out	0x38, r0	; 56
     648:	0f 90       	pop	r0
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	0f 90       	pop	r0
     64e:	1f 90       	pop	r1
     650:	18 95       	reti

00000652 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     652:	1f 92       	push	r1
     654:	0f 92       	push	r0
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	0f 92       	push	r0
     65a:	11 24       	eor	r1, r1
     65c:	08 b6       	in	r0, 0x38	; 56
     65e:	0f 92       	push	r0
     660:	18 be       	out	0x38, r1	; 56
     662:	09 b6       	in	r0, 0x39	; 57
     664:	0f 92       	push	r0
     666:	19 be       	out	0x39, r1	; 57
     668:	0b b6       	in	r0, 0x3b	; 59
     66a:	0f 92       	push	r0
     66c:	1b be       	out	0x3b, r1	; 59
     66e:	2f 93       	push	r18
     670:	3f 93       	push	r19
     672:	4f 93       	push	r20
     674:	5f 93       	push	r21
     676:	6f 93       	push	r22
     678:	7f 93       	push	r23
     67a:	8f 93       	push	r24
     67c:	9f 93       	push	r25
     67e:	af 93       	push	r26
     680:	bf 93       	push	r27
     682:	ef 93       	push	r30
     684:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     686:	e8 e7       	ldi	r30, 0x78	; 120
     688:	f2 e0       	ldi	r31, 0x02	; 2
     68a:	44 81       	ldd	r20, Z+4	; 0x04
     68c:	55 81       	ldd	r21, Z+5	; 0x05
     68e:	e0 91 14 20 	lds	r30, 0x2014
     692:	f0 91 15 20 	lds	r31, 0x2015
     696:	68 e0       	ldi	r22, 0x08	; 8
     698:	80 e4       	ldi	r24, 0x40	; 64
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	19 95       	eicall
}
     69e:	ff 91       	pop	r31
     6a0:	ef 91       	pop	r30
     6a2:	bf 91       	pop	r27
     6a4:	af 91       	pop	r26
     6a6:	9f 91       	pop	r25
     6a8:	8f 91       	pop	r24
     6aa:	7f 91       	pop	r23
     6ac:	6f 91       	pop	r22
     6ae:	5f 91       	pop	r21
     6b0:	4f 91       	pop	r20
     6b2:	3f 91       	pop	r19
     6b4:	2f 91       	pop	r18
     6b6:	0f 90       	pop	r0
     6b8:	0b be       	out	0x3b, r0	; 59
     6ba:	0f 90       	pop	r0
     6bc:	09 be       	out	0x39, r0	; 57
     6be:	0f 90       	pop	r0
     6c0:	08 be       	out	0x38, r0	; 56
     6c2:	0f 90       	pop	r0
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	0f 90       	pop	r0
     6c8:	1f 90       	pop	r1
     6ca:	18 95       	reti

000006cc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     6cc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     6ce:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     6d0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     6d2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     6d4:	60 83       	st	Z, r22
	ret                             // Return to caller
     6d6:	08 95       	ret

000006d8 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     6d8:	fc 01       	movw	r30, r24
     6da:	81 81       	ldd	r24, Z+1	; 0x01
     6dc:	85 ff       	sbrs	r24, 5
     6de:	fd cf       	rjmp	.-6      	; 0x6da <usart_putchar+0x2>
     6e0:	60 83       	st	Z, r22
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	08 95       	ret

000006e8 <usart_getchar>:
     6e8:	fc 01       	movw	r30, r24
     6ea:	81 81       	ldd	r24, Z+1	; 0x01
     6ec:	88 23       	and	r24, r24
     6ee:	ec f7       	brge	.-6      	; 0x6ea <usart_getchar+0x2>
     6f0:	80 81       	ld	r24, Z
     6f2:	08 95       	ret

000006f4 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     6f4:	4f 92       	push	r4
     6f6:	5f 92       	push	r5
     6f8:	6f 92       	push	r6
     6fa:	7f 92       	push	r7
     6fc:	8f 92       	push	r8
     6fe:	9f 92       	push	r9
     700:	af 92       	push	r10
     702:	bf 92       	push	r11
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	ec 01       	movw	r28, r24
     716:	4a 01       	movw	r8, r20
     718:	5b 01       	movw	r10, r22
     71a:	28 01       	movw	r4, r16
     71c:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     71e:	d9 01       	movw	r26, r18
     720:	c8 01       	movw	r24, r16
     722:	68 94       	set
     724:	12 f8       	bld	r1, 2
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	16 94       	lsr	r1
     730:	d1 f7       	brne	.-12     	; 0x726 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     732:	b9 01       	movw	r22, r18
     734:	a8 01       	movw	r20, r16
     736:	03 2e       	mov	r0, r19
     738:	36 e1       	ldi	r19, 0x16	; 22
     73a:	76 95       	lsr	r23
     73c:	67 95       	ror	r22
     73e:	57 95       	ror	r21
     740:	47 95       	ror	r20
     742:	3a 95       	dec	r19
     744:	d1 f7       	brne	.-12     	; 0x73a <usart_set_baudrate+0x46>
     746:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     748:	2c 81       	ldd	r18, Y+4	; 0x04
     74a:	22 fd       	sbrc	r18, 2
     74c:	08 c0       	rjmp	.+16     	; 0x75e <usart_set_baudrate+0x6a>
		max_rate /= 2;
     74e:	b6 95       	lsr	r27
     750:	a7 95       	ror	r26
     752:	97 95       	ror	r25
     754:	87 95       	ror	r24
		min_rate /= 2;
     756:	76 95       	lsr	r23
     758:	67 95       	ror	r22
     75a:	57 95       	ror	r21
     75c:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     75e:	88 15       	cp	r24, r8
     760:	99 05       	cpc	r25, r9
     762:	aa 05       	cpc	r26, r10
     764:	bb 05       	cpc	r27, r11
     766:	08 f4       	brcc	.+2      	; 0x76a <usart_set_baudrate+0x76>
     768:	a2 c0       	rjmp	.+324    	; 0x8ae <usart_set_baudrate+0x1ba>
     76a:	84 16       	cp	r8, r20
     76c:	95 06       	cpc	r9, r21
     76e:	a6 06       	cpc	r10, r22
     770:	b7 06       	cpc	r11, r23
     772:	08 f4       	brcc	.+2      	; 0x776 <usart_set_baudrate+0x82>
     774:	9e c0       	rjmp	.+316    	; 0x8b2 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     776:	8c 81       	ldd	r24, Y+4	; 0x04
     778:	82 fd       	sbrc	r24, 2
     77a:	04 c0       	rjmp	.+8      	; 0x784 <usart_set_baudrate+0x90>
		baud *= 2;
     77c:	88 0c       	add	r8, r8
     77e:	99 1c       	adc	r9, r9
     780:	aa 1c       	adc	r10, r10
     782:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     784:	c3 01       	movw	r24, r6
     786:	b2 01       	movw	r22, r4
     788:	a5 01       	movw	r20, r10
     78a:	94 01       	movw	r18, r8
     78c:	fb d3       	rcall	.+2038   	; 0xf84 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     78e:	2f 3f       	cpi	r18, 0xFF	; 255
     790:	31 05       	cpc	r19, r1
     792:	41 05       	cpc	r20, r1
     794:	51 05       	cpc	r21, r1
     796:	08 f4       	brcc	.+2      	; 0x79a <usart_set_baudrate+0xa6>
     798:	8e c0       	rjmp	.+284    	; 0x8b6 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     79a:	c1 2c       	mov	r12, r1
     79c:	d1 2c       	mov	r13, r1
     79e:	76 01       	movw	r14, r12
     7a0:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7a2:	19 ef       	ldi	r17, 0xF9	; 249
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
     7a6:	2c 15       	cp	r18, r12
     7a8:	3d 05       	cpc	r19, r13
     7aa:	4e 05       	cpc	r20, r14
     7ac:	5f 05       	cpc	r21, r15
     7ae:	68 f0       	brcs	.+26     	; 0x7ca <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
     7b0:	cc 0c       	add	r12, r12
     7b2:	dd 1c       	adc	r13, r13
     7b4:	ee 1c       	adc	r14, r14
     7b6:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     7b8:	1d 3f       	cpi	r17, 0xFD	; 253
     7ba:	14 f4       	brge	.+4      	; 0x7c0 <usart_set_baudrate+0xcc>
			limit |= 1;
     7bc:	68 94       	set
     7be:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7c0:	1f 5f       	subi	r17, 0xFF	; 255
     7c2:	17 30       	cpi	r17, 0x07	; 7
     7c4:	81 f7       	brne	.-32     	; 0x7a6 <usart_set_baudrate+0xb2>
     7c6:	21 2f       	mov	r18, r17
     7c8:	4e c0       	rjmp	.+156    	; 0x866 <usart_set_baudrate+0x172>
     7ca:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     7cc:	11 23       	and	r17, r17
     7ce:	0c f0       	brlt	.+2      	; 0x7d2 <usart_set_baudrate+0xde>
     7d0:	4a c0       	rjmp	.+148    	; 0x866 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     7d2:	d5 01       	movw	r26, r10
     7d4:	c4 01       	movw	r24, r8
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	aa 1f       	adc	r26, r26
     7dc:	bb 1f       	adc	r27, r27
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	aa 1f       	adc	r26, r26
     7e4:	bb 1f       	adc	r27, r27
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	aa 1f       	adc	r26, r26
     7ec:	bb 1f       	adc	r27, r27
     7ee:	48 1a       	sub	r4, r24
     7f0:	59 0a       	sbc	r5, r25
     7f2:	6a 0a       	sbc	r6, r26
     7f4:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     7f6:	1e 3f       	cpi	r17, 0xFE	; 254
     7f8:	ec f4       	brge	.+58     	; 0x834 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     7fa:	6d ef       	ldi	r22, 0xFD	; 253
     7fc:	7f ef       	ldi	r23, 0xFF	; 255
     7fe:	61 1b       	sub	r22, r17
     800:	71 09       	sbc	r23, r1
     802:	17 fd       	sbrc	r17, 7
     804:	73 95       	inc	r23
     806:	04 c0       	rjmp	.+8      	; 0x810 <usart_set_baudrate+0x11c>
     808:	44 0c       	add	r4, r4
     80a:	55 1c       	adc	r5, r5
     80c:	66 1c       	adc	r6, r6
     80e:	77 1c       	adc	r7, r7
     810:	6a 95       	dec	r22
     812:	d2 f7       	brpl	.-12     	; 0x808 <usart_set_baudrate+0x114>
     814:	d5 01       	movw	r26, r10
     816:	c4 01       	movw	r24, r8
     818:	b6 95       	lsr	r27
     81a:	a7 95       	ror	r26
     81c:	97 95       	ror	r25
     81e:	87 95       	ror	r24
     820:	bc 01       	movw	r22, r24
     822:	cd 01       	movw	r24, r26
     824:	64 0d       	add	r22, r4
     826:	75 1d       	adc	r23, r5
     828:	86 1d       	adc	r24, r6
     82a:	97 1d       	adc	r25, r7
     82c:	a5 01       	movw	r20, r10
     82e:	94 01       	movw	r18, r8
     830:	a9 d3       	rcall	.+1874   	; 0xf84 <__udivmodsi4>
     832:	34 c0       	rjmp	.+104    	; 0x89c <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
     834:	23 e0       	ldi	r18, 0x03	; 3
     836:	21 0f       	add	r18, r17
     838:	d5 01       	movw	r26, r10
     83a:	c4 01       	movw	r24, r8
     83c:	04 c0       	rjmp	.+8      	; 0x846 <usart_set_baudrate+0x152>
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	aa 1f       	adc	r26, r26
     844:	bb 1f       	adc	r27, r27
     846:	2a 95       	dec	r18
     848:	d2 f7       	brpl	.-12     	; 0x83e <usart_set_baudrate+0x14a>
     84a:	9c 01       	movw	r18, r24
     84c:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     84e:	b6 95       	lsr	r27
     850:	a7 95       	ror	r26
     852:	97 95       	ror	r25
     854:	87 95       	ror	r24
     856:	bc 01       	movw	r22, r24
     858:	cd 01       	movw	r24, r26
     85a:	64 0d       	add	r22, r4
     85c:	75 1d       	adc	r23, r5
     85e:	86 1d       	adc	r24, r6
     860:	97 1d       	adc	r25, r7
     862:	90 d3       	rcall	.+1824   	; 0xf84 <__udivmodsi4>
     864:	1b c0       	rjmp	.+54     	; 0x89c <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     866:	2d 5f       	subi	r18, 0xFD	; 253
     868:	d5 01       	movw	r26, r10
     86a:	c4 01       	movw	r24, r8
     86c:	04 c0       	rjmp	.+8      	; 0x876 <usart_set_baudrate+0x182>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <usart_set_baudrate+0x17a>
     87a:	9c 01       	movw	r18, r24
     87c:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     87e:	b6 95       	lsr	r27
     880:	a7 95       	ror	r26
     882:	97 95       	ror	r25
     884:	87 95       	ror	r24
     886:	bc 01       	movw	r22, r24
     888:	cd 01       	movw	r24, r26
     88a:	64 0d       	add	r22, r4
     88c:	75 1d       	adc	r23, r5
     88e:	86 1d       	adc	r24, r6
     890:	97 1d       	adc	r25, r7
     892:	78 d3       	rcall	.+1776   	; 0xf84 <__udivmodsi4>
     894:	21 50       	subi	r18, 0x01	; 1
     896:	31 09       	sbc	r19, r1
     898:	41 09       	sbc	r20, r1
     89a:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     89c:	83 2f       	mov	r24, r19
     89e:	8f 70       	andi	r24, 0x0F	; 15
     8a0:	12 95       	swap	r17
     8a2:	10 7f       	andi	r17, 0xF0	; 240
     8a4:	18 2b       	or	r17, r24
     8a6:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8a8:	2e 83       	std	Y+6, r18	; 0x06

	return true;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	18 c0       	rjmp	.+48     	; 0x8de <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	16 c0       	rjmp	.+44     	; 0x8de <usart_set_baudrate+0x1ea>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	14 c0       	rjmp	.+40     	; 0x8de <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8b6:	d5 01       	movw	r26, r10
     8b8:	c4 01       	movw	r24, r8
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	aa 1f       	adc	r26, r26
     8c0:	bb 1f       	adc	r27, r27
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	aa 1f       	adc	r26, r26
     8d0:	bb 1f       	adc	r27, r27
     8d2:	48 1a       	sub	r4, r24
     8d4:	59 0a       	sbc	r5, r25
     8d6:	6a 0a       	sbc	r6, r26
     8d8:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     8da:	19 ef       	ldi	r17, 0xF9	; 249
     8dc:	8e cf       	rjmp	.-228    	; 0x7fa <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	df 90       	pop	r13
     8ec:	cf 90       	pop	r12
     8ee:	bf 90       	pop	r11
     8f0:	af 90       	pop	r10
     8f2:	9f 90       	pop	r9
     8f4:	8f 90       	pop	r8
     8f6:	7f 90       	pop	r7
     8f8:	6f 90       	pop	r6
     8fa:	5f 90       	pop	r5
     8fc:	4f 90       	pop	r4
     8fe:	08 95       	ret

00000900 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	ec 01       	movw	r28, r24
     90a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     90c:	00 97       	sbiw	r24, 0x00	; 0
     90e:	09 f4       	brne	.+2      	; 0x912 <usart_init_rs232+0x12>
     910:	36 c1       	rjmp	.+620    	; 0xb7e <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     912:	80 3c       	cpi	r24, 0xC0	; 192
     914:	91 05       	cpc	r25, r1
     916:	21 f4       	brne	.+8      	; 0x920 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     918:	60 e1       	ldi	r22, 0x10	; 16
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	b8 dc       	rcall	.-1680   	; 0x28e <sysclk_enable_module>
     91e:	2f c1       	rjmp	.+606    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     920:	c0 34       	cpi	r28, 0x40	; 64
     922:	84 e0       	ldi	r24, 0x04	; 4
     924:	d8 07       	cpc	r29, r24
     926:	21 f4       	brne	.+8      	; 0x930 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     928:	68 e0       	ldi	r22, 0x08	; 8
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	b0 dc       	rcall	.-1696   	; 0x28e <sysclk_enable_module>
     92e:	27 c1       	rjmp	.+590    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     930:	c1 15       	cp	r28, r1
     932:	e4 e0       	ldi	r30, 0x04	; 4
     934:	de 07       	cpc	r29, r30
     936:	21 f4       	brne	.+8      	; 0x940 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     938:	64 e0       	ldi	r22, 0x04	; 4
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	a8 dc       	rcall	.-1712   	; 0x28e <sysclk_enable_module>
     93e:	1f c1       	rjmp	.+574    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     940:	c0 38       	cpi	r28, 0x80	; 128
     942:	f1 e0       	ldi	r31, 0x01	; 1
     944:	df 07       	cpc	r29, r31
     946:	21 f4       	brne	.+8      	; 0x950 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     948:	62 e0       	ldi	r22, 0x02	; 2
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	a0 dc       	rcall	.-1728   	; 0x28e <sysclk_enable_module>
     94e:	17 c1       	rjmp	.+558    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     950:	c1 15       	cp	r28, r1
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	d8 07       	cpc	r29, r24
     956:	21 f4       	brne	.+8      	; 0x960 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	98 dc       	rcall	.-1744   	; 0x28e <sysclk_enable_module>
     95e:	0f c1       	rjmp	.+542    	; 0xb7e <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     960:	c0 38       	cpi	r28, 0x80	; 128
     962:	e3 e0       	ldi	r30, 0x03	; 3
     964:	de 07       	cpc	r29, r30
     966:	21 f4       	brne	.+8      	; 0x970 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 dc       	rcall	.-1760   	; 0x28e <sysclk_enable_module>
     96e:	07 c1       	rjmp	.+526    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     970:	c0 39       	cpi	r28, 0x90	; 144
     972:	f3 e0       	ldi	r31, 0x03	; 3
     974:	df 07       	cpc	r29, r31
     976:	21 f4       	brne	.+8      	; 0x980 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	88 dc       	rcall	.-1776   	; 0x28e <sysclk_enable_module>
     97e:	ff c0       	rjmp	.+510    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     980:	c1 15       	cp	r28, r1
     982:	82 e0       	ldi	r24, 0x02	; 2
     984:	d8 07       	cpc	r29, r24
     986:	21 f4       	brne	.+8      	; 0x990 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     988:	62 e0       	ldi	r22, 0x02	; 2
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	80 dc       	rcall	.-1792   	; 0x28e <sysclk_enable_module>
     98e:	f7 c0       	rjmp	.+494    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     990:	c0 34       	cpi	r28, 0x40	; 64
     992:	e2 e0       	ldi	r30, 0x02	; 2
     994:	de 07       	cpc	r29, r30
     996:	21 f4       	brne	.+8      	; 0x9a0 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     998:	62 e0       	ldi	r22, 0x02	; 2
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	78 dc       	rcall	.-1808   	; 0x28e <sysclk_enable_module>
     99e:	ef c0       	rjmp	.+478    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     9a0:	c1 15       	cp	r28, r1
     9a2:	f3 e0       	ldi	r31, 0x03	; 3
     9a4:	df 07       	cpc	r29, r31
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     9a8:	64 e0       	ldi	r22, 0x04	; 4
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	70 dc       	rcall	.-1824   	; 0x28e <sysclk_enable_module>
     9ae:	e7 c0       	rjmp	.+462    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9b0:	c0 32       	cpi	r28, 0x20	; 32
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	d8 07       	cpc	r29, r24
     9b6:	21 f4       	brne	.+8      	; 0x9c0 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9b8:	64 e0       	ldi	r22, 0x04	; 4
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	68 dc       	rcall	.-1840   	; 0x28e <sysclk_enable_module>
     9be:	df c0       	rjmp	.+446    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9c0:	c1 15       	cp	r28, r1
     9c2:	e8 e0       	ldi	r30, 0x08	; 8
     9c4:	de 07       	cpc	r29, r30
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	60 dc       	rcall	.-1856   	; 0x28e <sysclk_enable_module>
     9ce:	d7 c0       	rjmp	.+430    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     9d0:	c1 15       	cp	r28, r1
     9d2:	f9 e0       	ldi	r31, 0x09	; 9
     9d4:	df 07       	cpc	r29, r31
     9d6:	21 f4       	brne	.+8      	; 0x9e0 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	84 e0       	ldi	r24, 0x04	; 4
     9dc:	58 dc       	rcall	.-1872   	; 0x28e <sysclk_enable_module>
     9de:	cf c0       	rjmp	.+414    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     9e0:	c1 15       	cp	r28, r1
     9e2:	8a e0       	ldi	r24, 0x0A	; 10
     9e4:	d8 07       	cpc	r29, r24
     9e6:	21 f4       	brne	.+8      	; 0x9f0 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	85 e0       	ldi	r24, 0x05	; 5
     9ec:	50 dc       	rcall	.-1888   	; 0x28e <sysclk_enable_module>
     9ee:	c7 c0       	rjmp	.+398    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     9f0:	c1 15       	cp	r28, r1
     9f2:	eb e0       	ldi	r30, 0x0B	; 11
     9f4:	de 07       	cpc	r29, r30
     9f6:	21 f4       	brne	.+8      	; 0xa00 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	86 e0       	ldi	r24, 0x06	; 6
     9fc:	48 dc       	rcall	.-1904   	; 0x28e <sysclk_enable_module>
     9fe:	bf c0       	rjmp	.+382    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     a00:	c0 34       	cpi	r28, 0x40	; 64
     a02:	f8 e0       	ldi	r31, 0x08	; 8
     a04:	df 07       	cpc	r29, r31
     a06:	21 f4       	brne	.+8      	; 0xa10 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a08:	62 e0       	ldi	r22, 0x02	; 2
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	40 dc       	rcall	.-1920   	; 0x28e <sysclk_enable_module>
     a0e:	b7 c0       	rjmp	.+366    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a10:	c0 34       	cpi	r28, 0x40	; 64
     a12:	89 e0       	ldi	r24, 0x09	; 9
     a14:	d8 07       	cpc	r29, r24
     a16:	21 f4       	brne	.+8      	; 0xa20 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a18:	62 e0       	ldi	r22, 0x02	; 2
     a1a:	84 e0       	ldi	r24, 0x04	; 4
     a1c:	38 dc       	rcall	.-1936   	; 0x28e <sysclk_enable_module>
     a1e:	af c0       	rjmp	.+350    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     a20:	c0 34       	cpi	r28, 0x40	; 64
     a22:	ea e0       	ldi	r30, 0x0A	; 10
     a24:	de 07       	cpc	r29, r30
     a26:	21 f4       	brne	.+8      	; 0xa30 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     a28:	62 e0       	ldi	r22, 0x02	; 2
     a2a:	85 e0       	ldi	r24, 0x05	; 5
     a2c:	30 dc       	rcall	.-1952   	; 0x28e <sysclk_enable_module>
     a2e:	a7 c0       	rjmp	.+334    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     a30:	c0 34       	cpi	r28, 0x40	; 64
     a32:	fb e0       	ldi	r31, 0x0B	; 11
     a34:	df 07       	cpc	r29, r31
     a36:	21 f4       	brne	.+8      	; 0xa40 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     a38:	62 e0       	ldi	r22, 0x02	; 2
     a3a:	86 e0       	ldi	r24, 0x06	; 6
     a3c:	28 dc       	rcall	.-1968   	; 0x28e <sysclk_enable_module>
     a3e:	9f c0       	rjmp	.+318    	; 0xb7e <usart_init_rs232+0x27e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a40:	c0 39       	cpi	r28, 0x90	; 144
     a42:	88 e0       	ldi	r24, 0x08	; 8
     a44:	d8 07       	cpc	r29, r24
     a46:	21 f4       	brne	.+8      	; 0xa50 <usart_init_rs232+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a48:	64 e0       	ldi	r22, 0x04	; 4
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	20 dc       	rcall	.-1984   	; 0x28e <sysclk_enable_module>
     a4e:	97 c0       	rjmp	.+302    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a50:	c0 39       	cpi	r28, 0x90	; 144
     a52:	e9 e0       	ldi	r30, 0x09	; 9
     a54:	de 07       	cpc	r29, r30
     a56:	21 f4       	brne	.+8      	; 0xa60 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a58:	64 e0       	ldi	r22, 0x04	; 4
     a5a:	84 e0       	ldi	r24, 0x04	; 4
     a5c:	18 dc       	rcall	.-2000   	; 0x28e <sysclk_enable_module>
     a5e:	8f c0       	rjmp	.+286    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a60:	c0 39       	cpi	r28, 0x90	; 144
     a62:	fa e0       	ldi	r31, 0x0A	; 10
     a64:	df 07       	cpc	r29, r31
     a66:	21 f4       	brne	.+8      	; 0xa70 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     a68:	64 e0       	ldi	r22, 0x04	; 4
     a6a:	85 e0       	ldi	r24, 0x05	; 5
     a6c:	10 dc       	rcall	.-2016   	; 0x28e <sysclk_enable_module>
     a6e:	87 c0       	rjmp	.+270    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     a70:	c0 39       	cpi	r28, 0x90	; 144
     a72:	8b e0       	ldi	r24, 0x0B	; 11
     a74:	d8 07       	cpc	r29, r24
     a76:	21 f4       	brne	.+8      	; 0xa80 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     a78:	64 e0       	ldi	r22, 0x04	; 4
     a7a:	86 e0       	ldi	r24, 0x06	; 6
     a7c:	08 dc       	rcall	.-2032   	; 0x28e <sysclk_enable_module>
     a7e:	7f c0       	rjmp	.+254    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     a80:	c0 3c       	cpi	r28, 0xC0	; 192
     a82:	e8 e0       	ldi	r30, 0x08	; 8
     a84:	de 07       	cpc	r29, r30
     a86:	21 f4       	brne	.+8      	; 0xa90 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     a88:	68 e0       	ldi	r22, 0x08	; 8
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	00 dc       	rcall	.-2048   	; 0x28e <sysclk_enable_module>
     a8e:	77 c0       	rjmp	.+238    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     a90:	c0 3c       	cpi	r28, 0xC0	; 192
     a92:	f9 e0       	ldi	r31, 0x09	; 9
     a94:	df 07       	cpc	r29, r31
     a96:	21 f4       	brne	.+8      	; 0xaa0 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     a98:	68 e0       	ldi	r22, 0x08	; 8
     a9a:	84 e0       	ldi	r24, 0x04	; 4
     a9c:	f8 db       	rcall	.-2064   	; 0x28e <sysclk_enable_module>
     a9e:	6f c0       	rjmp	.+222    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     aa0:	c0 3c       	cpi	r28, 0xC0	; 192
     aa2:	8a e0       	ldi	r24, 0x0A	; 10
     aa4:	d8 07       	cpc	r29, r24
     aa6:	21 f4       	brne	.+8      	; 0xab0 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     aa8:	68 e0       	ldi	r22, 0x08	; 8
     aaa:	85 e0       	ldi	r24, 0x05	; 5
     aac:	f0 db       	rcall	.-2080   	; 0x28e <sysclk_enable_module>
     aae:	67 c0       	rjmp	.+206    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     ab0:	c0 3c       	cpi	r28, 0xC0	; 192
     ab2:	eb e0       	ldi	r30, 0x0B	; 11
     ab4:	de 07       	cpc	r29, r30
     ab6:	21 f4       	brne	.+8      	; 0xac0 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     ab8:	68 e0       	ldi	r22, 0x08	; 8
     aba:	86 e0       	ldi	r24, 0x06	; 6
     abc:	e8 db       	rcall	.-2096   	; 0x28e <sysclk_enable_module>
     abe:	5f c0       	rjmp	.+190    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     ac0:	c0 3a       	cpi	r28, 0xA0	; 160
     ac2:	f8 e0       	ldi	r31, 0x08	; 8
     ac4:	df 07       	cpc	r29, r31
     ac6:	21 f4       	brne	.+8      	; 0xad0 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     ac8:	60 e1       	ldi	r22, 0x10	; 16
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	e0 db       	rcall	.-2112   	; 0x28e <sysclk_enable_module>
     ace:	57 c0       	rjmp	.+174    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     ad0:	c0 3a       	cpi	r28, 0xA0	; 160
     ad2:	89 e0       	ldi	r24, 0x09	; 9
     ad4:	d8 07       	cpc	r29, r24
     ad6:	21 f4       	brne	.+8      	; 0xae0 <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     ad8:	60 e1       	ldi	r22, 0x10	; 16
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	d8 db       	rcall	.-2128   	; 0x28e <sysclk_enable_module>
     ade:	4f c0       	rjmp	.+158    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     ae0:	c0 3a       	cpi	r28, 0xA0	; 160
     ae2:	ea e0       	ldi	r30, 0x0A	; 10
     ae4:	de 07       	cpc	r29, r30
     ae6:	21 f4       	brne	.+8      	; 0xaf0 <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     ae8:	60 e1       	ldi	r22, 0x10	; 16
     aea:	85 e0       	ldi	r24, 0x05	; 5
     aec:	d0 db       	rcall	.-2144   	; 0x28e <sysclk_enable_module>
     aee:	47 c0       	rjmp	.+142    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     af0:	c0 3a       	cpi	r28, 0xA0	; 160
     af2:	fb e0       	ldi	r31, 0x0B	; 11
     af4:	df 07       	cpc	r29, r31
     af6:	21 f4       	brne	.+8      	; 0xb00 <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     af8:	60 e1       	ldi	r22, 0x10	; 16
     afa:	86 e0       	ldi	r24, 0x06	; 6
     afc:	c8 db       	rcall	.-2160   	; 0x28e <sysclk_enable_module>
     afe:	3f c0       	rjmp	.+126    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     b00:	c0 3b       	cpi	r28, 0xB0	; 176
     b02:	88 e0       	ldi	r24, 0x08	; 8
     b04:	d8 07       	cpc	r29, r24
     b06:	21 f4       	brne	.+8      	; 0xb10 <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     b08:	60 e2       	ldi	r22, 0x20	; 32
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	c0 db       	rcall	.-2176   	; 0x28e <sysclk_enable_module>
     b0e:	37 c0       	rjmp	.+110    	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     b10:	c0 3b       	cpi	r28, 0xB0	; 176
     b12:	e9 e0       	ldi	r30, 0x09	; 9
     b14:	de 07       	cpc	r29, r30
     b16:	21 f4       	brne	.+8      	; 0xb20 <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b18:	60 e2       	ldi	r22, 0x20	; 32
     b1a:	84 e0       	ldi	r24, 0x04	; 4
     b1c:	b8 db       	rcall	.-2192   	; 0x28e <sysclk_enable_module>
     b1e:	2f c0       	rjmp	.+94     	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     b20:	c0 3b       	cpi	r28, 0xB0	; 176
     b22:	fa e0       	ldi	r31, 0x0A	; 10
     b24:	df 07       	cpc	r29, r31
     b26:	21 f4       	brne	.+8      	; 0xb30 <usart_init_rs232+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     b28:	60 e2       	ldi	r22, 0x20	; 32
     b2a:	85 e0       	ldi	r24, 0x05	; 5
     b2c:	b0 db       	rcall	.-2208   	; 0x28e <sysclk_enable_module>
     b2e:	27 c0       	rjmp	.+78     	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     b30:	c0 3b       	cpi	r28, 0xB0	; 176
     b32:	8b e0       	ldi	r24, 0x0B	; 11
     b34:	d8 07       	cpc	r29, r24
     b36:	21 f4       	brne	.+8      	; 0xb40 <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     b38:	60 e2       	ldi	r22, 0x20	; 32
     b3a:	86 e0       	ldi	r24, 0x06	; 6
     b3c:	a8 db       	rcall	.-2224   	; 0x28e <sysclk_enable_module>
     b3e:	1f c0       	rjmp	.+62     	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     b40:	c0 38       	cpi	r28, 0x80	; 128
     b42:	e4 e0       	ldi	r30, 0x04	; 4
     b44:	de 07       	cpc	r29, r30
     b46:	21 f4       	brne	.+8      	; 0xb50 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     b48:	60 e4       	ldi	r22, 0x40	; 64
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	a0 db       	rcall	.-2240   	; 0x28e <sysclk_enable_module>
     b4e:	17 c0       	rjmp	.+46     	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     b50:	c0 39       	cpi	r28, 0x90	; 144
     b52:	f4 e0       	ldi	r31, 0x04	; 4
     b54:	df 07       	cpc	r29, r31
     b56:	21 f4       	brne	.+8      	; 0xb60 <usart_init_rs232+0x260>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     b58:	60 e4       	ldi	r22, 0x40	; 64
     b5a:	84 e0       	ldi	r24, 0x04	; 4
     b5c:	98 db       	rcall	.-2256   	; 0x28e <sysclk_enable_module>
     b5e:	0f c0       	rjmp	.+30     	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     b60:	c0 3a       	cpi	r28, 0xA0	; 160
     b62:	84 e0       	ldi	r24, 0x04	; 4
     b64:	d8 07       	cpc	r29, r24
     b66:	21 f4       	brne	.+8      	; 0xb70 <usart_init_rs232+0x270>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     b68:	60 e4       	ldi	r22, 0x40	; 64
     b6a:	85 e0       	ldi	r24, 0x05	; 5
     b6c:	90 db       	rcall	.-2272   	; 0x28e <sysclk_enable_module>
     b6e:	07 c0       	rjmp	.+14     	; 0xb7e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     b70:	c0 3b       	cpi	r28, 0xB0	; 176
     b72:	e4 e0       	ldi	r30, 0x04	; 4
     b74:	de 07       	cpc	r29, r30
     b76:	19 f4       	brne	.+6      	; 0xb7e <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     b78:	60 e4       	ldi	r22, 0x40	; 64
     b7a:	86 e0       	ldi	r24, 0x06	; 6
     b7c:	88 db       	rcall	.-2288   	; 0x28e <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     b7e:	8d 81       	ldd	r24, Y+5	; 0x05
     b80:	8f 73       	andi	r24, 0x3F	; 63
     b82:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     b84:	f8 01       	movw	r30, r16
     b86:	94 81       	ldd	r25, Z+4	; 0x04
     b88:	85 81       	ldd	r24, Z+5	; 0x05
     b8a:	89 2b       	or	r24, r25
     b8c:	96 81       	ldd	r25, Z+6	; 0x06
     b8e:	99 23       	and	r25, r25
     b90:	11 f0       	breq	.+4      	; 0xb96 <usart_init_rs232+0x296>
     b92:	98 e0       	ldi	r25, 0x08	; 8
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <usart_init_rs232+0x298>
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	89 2b       	or	r24, r25
     b9a:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     b9c:	f8 01       	movw	r30, r16
     b9e:	40 81       	ld	r20, Z
     ba0:	51 81       	ldd	r21, Z+1	; 0x01
     ba2:	62 81       	ldd	r22, Z+2	; 0x02
     ba4:	73 81       	ldd	r23, Z+3	; 0x03
     ba6:	00 e0       	ldi	r16, 0x00	; 0
     ba8:	18 e4       	ldi	r17, 0x48	; 72
     baa:	28 ee       	ldi	r18, 0xE8	; 232
     bac:	31 e0       	ldi	r19, 0x01	; 1
     bae:	ce 01       	movw	r24, r28
     bb0:	a1 dd       	rcall	.-1214   	; 0x6f4 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	98 60       	ori	r25, 0x08	; 8
     bb6:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     bb8:	9c 81       	ldd	r25, Y+4	; 0x04
     bba:	90 61       	ori	r25, 0x10	; 16
     bbc:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	08 95       	ret

00000bc8 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     bce:	8c dd       	rcall	.-1256   	; 0x6e8 <usart_getchar>
     bd0:	88 83       	st	Y, r24
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     bd8:	7f cd       	rjmp	.-1282   	; 0x6d8 <usart_putchar>
}
     bda:	08 95       	ret

00000bdc <UART_Comms_Init>:
   to start the uart communications */

#include "conf_usart_serial.h" //Includes the information in the config file
#include <asf.h>

void UART_Comms_Init(void){
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	27 97       	sbiw	r28, 0x07	; 7
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	de bf       	out	0x3e, r29	; 62
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	//Must set TX pin as output
	PORTC.DIRSET=0b00001000;
     bea:	e0 e4       	ldi	r30, 0x40	; 64
     bec:	f6 e0       	ldi	r31, 0x06	; 6
     bee:	88 e0       	ldi	r24, 0x08	; 8
     bf0:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET=0b00001000;
     bf2:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUT=0xFF;
     bf4:	8f ef       	ldi	r24, 0xFF	; 255
     bf6:	84 83       	std	Z+4, r24	; 0x04
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     bf8:	80 ea       	ldi	r24, 0xA0	; 160
     bfa:	98 e0       	ldi	r25, 0x08	; 8
     bfc:	80 93 12 20 	sts	0x2012, r24
     c00:	90 93 13 20 	sts	0x2013, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     c04:	8c ee       	ldi	r24, 0xEC	; 236
     c06:	95 e0       	ldi	r25, 0x05	; 5
     c08:	80 93 10 20 	sts	0x2010, r24
     c0c:	90 93 11 20 	sts	0x2011, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     c10:	84 ee       	ldi	r24, 0xE4	; 228
     c12:	95 e0       	ldi	r25, 0x05	; 5
     c14:	80 93 0e 20 	sts	0x200E, r24
     c18:	90 93 0f 20 	sts	0x200F, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     c1c:	80 91 0a 20 	lds	r24, 0x200A
     c20:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     c22:	80 91 0b 20 	lds	r24, 0x200B
     c26:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     c28:	80 91 0c 20 	lds	r24, 0x200C
     c2c:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     c2e:	80 91 06 20 	lds	r24, 0x2006
     c32:	90 91 07 20 	lds	r25, 0x2007
     c36:	a0 91 08 20 	lds	r26, 0x2008
     c3a:	b0 91 09 20 	lds	r27, 0x2009
     c3e:	89 83       	std	Y+1, r24	; 0x01
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	ab 83       	std	Y+3, r26	; 0x03
     c44:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
     c46:	60 e1       	ldi	r22, 0x10	; 16
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	21 db       	rcall	.-2494   	; 0x28e <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     c4c:	be 01       	movw	r22, r28
     c4e:	6f 5f       	subi	r22, 0xFF	; 255
     c50:	7f 4f       	sbci	r23, 0xFF	; 255
     c52:	80 ea       	ldi	r24, 0xA0	; 160
     c54:	98 e0       	ldi	r25, 0x08	; 8
     c56:	54 de       	rcall	.-856    	; 0x900 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     c58:	63 e5       	ldi	r22, 0x53	; 83
     c5a:	71 e0       	ldi	r23, 0x01	; 1
     c5c:	8c e6       	ldi	r24, 0x6C	; 108
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	b3 d1       	rcall	.+870    	; 0xfc8 <fdevopen>

	stdio_serial_init(&USARTC0, &usart_options); //ASF function that initializes the UART peripheral
}
     c62:	27 96       	adiw	r28, 0x07	; 7
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	09 f4       	brne	.+2      	; 0xc74 <sysclk_enable_peripheral_clock+0x6>
     c72:	35 c1       	rjmp	.+618    	; 0xede <sysclk_enable_peripheral_clock+0x270>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     c74:	80 3c       	cpi	r24, 0xC0	; 192
     c76:	91 05       	cpc	r25, r1
     c78:	21 f4       	brne	.+8      	; 0xc82 <sysclk_enable_peripheral_clock+0x14>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     c7a:	60 e1       	ldi	r22, 0x10	; 16
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	07 cb       	rjmp	.-2546   	; 0x28e <sysclk_enable_module>
     c80:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     c82:	80 34       	cpi	r24, 0x40	; 64
     c84:	24 e0       	ldi	r18, 0x04	; 4
     c86:	92 07       	cpc	r25, r18
     c88:	21 f4       	brne	.+8      	; 0xc92 <sysclk_enable_peripheral_clock+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     c8a:	68 e0       	ldi	r22, 0x08	; 8
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	ff ca       	rjmp	.-2562   	; 0x28e <sysclk_enable_module>
     c90:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     c92:	81 15       	cp	r24, r1
     c94:	24 e0       	ldi	r18, 0x04	; 4
     c96:	92 07       	cpc	r25, r18
     c98:	21 f4       	brne	.+8      	; 0xca2 <sysclk_enable_peripheral_clock+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     c9a:	64 e0       	ldi	r22, 0x04	; 4
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	f7 ca       	rjmp	.-2578   	; 0x28e <sysclk_enable_module>
     ca0:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     ca2:	80 38       	cpi	r24, 0x80	; 128
     ca4:	21 e0       	ldi	r18, 0x01	; 1
     ca6:	92 07       	cpc	r25, r18
     ca8:	21 f4       	brne	.+8      	; 0xcb2 <sysclk_enable_peripheral_clock+0x44>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	ef ca       	rjmp	.-2594   	; 0x28e <sysclk_enable_module>
     cb0:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     cb2:	81 15       	cp	r24, r1
     cb4:	21 e0       	ldi	r18, 0x01	; 1
     cb6:	92 07       	cpc	r25, r18
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <sysclk_enable_peripheral_clock+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	e7 ca       	rjmp	.-2610   	; 0x28e <sysclk_enable_module>
     cc0:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     cc2:	80 38       	cpi	r24, 0x80	; 128
     cc4:	23 e0       	ldi	r18, 0x03	; 3
     cc6:	92 07       	cpc	r25, r18
     cc8:	21 f4       	brne	.+8      	; 0xcd2 <sysclk_enable_peripheral_clock+0x64>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	df ca       	rjmp	.-2626   	; 0x28e <sysclk_enable_module>
     cd0:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     cd2:	80 39       	cpi	r24, 0x90	; 144
     cd4:	23 e0       	ldi	r18, 0x03	; 3
     cd6:	92 07       	cpc	r25, r18
     cd8:	21 f4       	brne	.+8      	; 0xce2 <sysclk_enable_peripheral_clock+0x74>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	d7 ca       	rjmp	.-2642   	; 0x28e <sysclk_enable_module>
     ce0:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     ce2:	81 15       	cp	r24, r1
     ce4:	22 e0       	ldi	r18, 0x02	; 2
     ce6:	92 07       	cpc	r25, r18
     ce8:	21 f4       	brne	.+8      	; 0xcf2 <sysclk_enable_peripheral_clock+0x84>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     cea:	62 e0       	ldi	r22, 0x02	; 2
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	cf ca       	rjmp	.-2658   	; 0x28e <sysclk_enable_module>
     cf0:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     cf2:	80 34       	cpi	r24, 0x40	; 64
     cf4:	22 e0       	ldi	r18, 0x02	; 2
     cf6:	92 07       	cpc	r25, r18
     cf8:	21 f4       	brne	.+8      	; 0xd02 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     cfa:	62 e0       	ldi	r22, 0x02	; 2
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	c7 ca       	rjmp	.-2674   	; 0x28e <sysclk_enable_module>
     d00:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     d02:	81 15       	cp	r24, r1
     d04:	23 e0       	ldi	r18, 0x03	; 3
     d06:	92 07       	cpc	r25, r18
     d08:	21 f4       	brne	.+8      	; 0xd12 <sysclk_enable_peripheral_clock+0xa4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     d0a:	64 e0       	ldi	r22, 0x04	; 4
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	bf ca       	rjmp	.-2690   	; 0x28e <sysclk_enable_module>
     d10:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     d12:	80 32       	cpi	r24, 0x20	; 32
     d14:	23 e0       	ldi	r18, 0x03	; 3
     d16:	92 07       	cpc	r25, r18
     d18:	21 f4       	brne	.+8      	; 0xd22 <sysclk_enable_peripheral_clock+0xb4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     d1a:	64 e0       	ldi	r22, 0x04	; 4
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	b7 ca       	rjmp	.-2706   	; 0x28e <sysclk_enable_module>
     d20:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     d22:	81 15       	cp	r24, r1
     d24:	28 e0       	ldi	r18, 0x08	; 8
     d26:	92 07       	cpc	r25, r18
     d28:	21 f4       	brne	.+8      	; 0xd32 <sysclk_enable_peripheral_clock+0xc4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	83 e0       	ldi	r24, 0x03	; 3
     d2e:	af ca       	rjmp	.-2722   	; 0x28e <sysclk_enable_module>
     d30:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     d32:	81 15       	cp	r24, r1
     d34:	29 e0       	ldi	r18, 0x09	; 9
     d36:	92 07       	cpc	r25, r18
     d38:	21 f4       	brne	.+8      	; 0xd42 <sysclk_enable_peripheral_clock+0xd4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	84 e0       	ldi	r24, 0x04	; 4
     d3e:	a7 ca       	rjmp	.-2738   	; 0x28e <sysclk_enable_module>
     d40:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     d42:	81 15       	cp	r24, r1
     d44:	2a e0       	ldi	r18, 0x0A	; 10
     d46:	92 07       	cpc	r25, r18
     d48:	21 f4       	brne	.+8      	; 0xd52 <sysclk_enable_peripheral_clock+0xe4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	85 e0       	ldi	r24, 0x05	; 5
     d4e:	9f ca       	rjmp	.-2754   	; 0x28e <sysclk_enable_module>
     d50:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     d52:	81 15       	cp	r24, r1
     d54:	2b e0       	ldi	r18, 0x0B	; 11
     d56:	92 07       	cpc	r25, r18
     d58:	21 f4       	brne	.+8      	; 0xd62 <sysclk_enable_peripheral_clock+0xf4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	86 e0       	ldi	r24, 0x06	; 6
     d5e:	97 ca       	rjmp	.-2770   	; 0x28e <sysclk_enable_module>
     d60:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     d62:	80 34       	cpi	r24, 0x40	; 64
     d64:	28 e0       	ldi	r18, 0x08	; 8
     d66:	92 07       	cpc	r25, r18
     d68:	21 f4       	brne	.+8      	; 0xd72 <sysclk_enable_peripheral_clock+0x104>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     d6a:	62 e0       	ldi	r22, 0x02	; 2
     d6c:	83 e0       	ldi	r24, 0x03	; 3
     d6e:	8f ca       	rjmp	.-2786   	; 0x28e <sysclk_enable_module>
     d70:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     d72:	80 34       	cpi	r24, 0x40	; 64
     d74:	29 e0       	ldi	r18, 0x09	; 9
     d76:	92 07       	cpc	r25, r18
     d78:	21 f4       	brne	.+8      	; 0xd82 <sysclk_enable_peripheral_clock+0x114>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     d7a:	62 e0       	ldi	r22, 0x02	; 2
     d7c:	84 e0       	ldi	r24, 0x04	; 4
     d7e:	87 ca       	rjmp	.-2802   	; 0x28e <sysclk_enable_module>
     d80:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     d82:	80 34       	cpi	r24, 0x40	; 64
     d84:	2a e0       	ldi	r18, 0x0A	; 10
     d86:	92 07       	cpc	r25, r18
     d88:	21 f4       	brne	.+8      	; 0xd92 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     d8a:	62 e0       	ldi	r22, 0x02	; 2
     d8c:	85 e0       	ldi	r24, 0x05	; 5
     d8e:	7f ca       	rjmp	.-2818   	; 0x28e <sysclk_enable_module>
     d90:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     d92:	80 34       	cpi	r24, 0x40	; 64
     d94:	2b e0       	ldi	r18, 0x0B	; 11
     d96:	92 07       	cpc	r25, r18
     d98:	21 f4       	brne	.+8      	; 0xda2 <sysclk_enable_peripheral_clock+0x134>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     d9a:	62 e0       	ldi	r22, 0x02	; 2
     d9c:	86 e0       	ldi	r24, 0x06	; 6
     d9e:	77 ca       	rjmp	.-2834   	; 0x28e <sysclk_enable_module>
     da0:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     da2:	80 39       	cpi	r24, 0x90	; 144
     da4:	28 e0       	ldi	r18, 0x08	; 8
     da6:	92 07       	cpc	r25, r18
     da8:	21 f4       	brne	.+8      	; 0xdb2 <sysclk_enable_peripheral_clock+0x144>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     daa:	64 e0       	ldi	r22, 0x04	; 4
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	6f ca       	rjmp	.-2850   	; 0x28e <sysclk_enable_module>
     db0:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     db2:	80 39       	cpi	r24, 0x90	; 144
     db4:	29 e0       	ldi	r18, 0x09	; 9
     db6:	92 07       	cpc	r25, r18
     db8:	21 f4       	brne	.+8      	; 0xdc2 <sysclk_enable_peripheral_clock+0x154>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     dba:	64 e0       	ldi	r22, 0x04	; 4
     dbc:	84 e0       	ldi	r24, 0x04	; 4
     dbe:	67 ca       	rjmp	.-2866   	; 0x28e <sysclk_enable_module>
     dc0:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     dc2:	80 39       	cpi	r24, 0x90	; 144
     dc4:	2a e0       	ldi	r18, 0x0A	; 10
     dc6:	92 07       	cpc	r25, r18
     dc8:	21 f4       	brne	.+8      	; 0xdd2 <sysclk_enable_peripheral_clock+0x164>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     dca:	64 e0       	ldi	r22, 0x04	; 4
     dcc:	85 e0       	ldi	r24, 0x05	; 5
     dce:	5f ca       	rjmp	.-2882   	; 0x28e <sysclk_enable_module>
     dd0:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     dd2:	80 39       	cpi	r24, 0x90	; 144
     dd4:	2b e0       	ldi	r18, 0x0B	; 11
     dd6:	92 07       	cpc	r25, r18
     dd8:	21 f4       	brne	.+8      	; 0xde2 <sysclk_enable_peripheral_clock+0x174>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     dda:	64 e0       	ldi	r22, 0x04	; 4
     ddc:	86 e0       	ldi	r24, 0x06	; 6
     dde:	57 ca       	rjmp	.-2898   	; 0x28e <sysclk_enable_module>
     de0:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     de2:	80 3c       	cpi	r24, 0xC0	; 192
     de4:	28 e0       	ldi	r18, 0x08	; 8
     de6:	92 07       	cpc	r25, r18
     de8:	21 f4       	brne	.+8      	; 0xdf2 <sysclk_enable_peripheral_clock+0x184>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     dea:	68 e0       	ldi	r22, 0x08	; 8
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	4f ca       	rjmp	.-2914   	; 0x28e <sysclk_enable_module>
     df0:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     df2:	80 3c       	cpi	r24, 0xC0	; 192
     df4:	29 e0       	ldi	r18, 0x09	; 9
     df6:	92 07       	cpc	r25, r18
     df8:	21 f4       	brne	.+8      	; 0xe02 <sysclk_enable_peripheral_clock+0x194>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     dfa:	68 e0       	ldi	r22, 0x08	; 8
     dfc:	84 e0       	ldi	r24, 0x04	; 4
     dfe:	47 ca       	rjmp	.-2930   	; 0x28e <sysclk_enable_module>
     e00:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     e02:	80 3c       	cpi	r24, 0xC0	; 192
     e04:	2a e0       	ldi	r18, 0x0A	; 10
     e06:	92 07       	cpc	r25, r18
     e08:	21 f4       	brne	.+8      	; 0xe12 <sysclk_enable_peripheral_clock+0x1a4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     e0a:	68 e0       	ldi	r22, 0x08	; 8
     e0c:	85 e0       	ldi	r24, 0x05	; 5
     e0e:	3f ca       	rjmp	.-2946   	; 0x28e <sysclk_enable_module>
     e10:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     e12:	80 3c       	cpi	r24, 0xC0	; 192
     e14:	2b e0       	ldi	r18, 0x0B	; 11
     e16:	92 07       	cpc	r25, r18
     e18:	21 f4       	brne	.+8      	; 0xe22 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     e1a:	68 e0       	ldi	r22, 0x08	; 8
     e1c:	86 e0       	ldi	r24, 0x06	; 6
     e1e:	37 ca       	rjmp	.-2962   	; 0x28e <sysclk_enable_module>
     e20:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     e22:	80 3a       	cpi	r24, 0xA0	; 160
     e24:	28 e0       	ldi	r18, 0x08	; 8
     e26:	92 07       	cpc	r25, r18
     e28:	21 f4       	brne	.+8      	; 0xe32 <sysclk_enable_peripheral_clock+0x1c4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     e2a:	60 e1       	ldi	r22, 0x10	; 16
     e2c:	83 e0       	ldi	r24, 0x03	; 3
     e2e:	2f ca       	rjmp	.-2978   	; 0x28e <sysclk_enable_module>
     e30:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     e32:	80 3a       	cpi	r24, 0xA0	; 160
     e34:	29 e0       	ldi	r18, 0x09	; 9
     e36:	92 07       	cpc	r25, r18
     e38:	21 f4       	brne	.+8      	; 0xe42 <sysclk_enable_peripheral_clock+0x1d4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     e3a:	60 e1       	ldi	r22, 0x10	; 16
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	27 ca       	rjmp	.-2994   	; 0x28e <sysclk_enable_module>
     e40:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     e42:	80 3a       	cpi	r24, 0xA0	; 160
     e44:	2a e0       	ldi	r18, 0x0A	; 10
     e46:	92 07       	cpc	r25, r18
     e48:	21 f4       	brne	.+8      	; 0xe52 <sysclk_enable_peripheral_clock+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     e4a:	60 e1       	ldi	r22, 0x10	; 16
     e4c:	85 e0       	ldi	r24, 0x05	; 5
     e4e:	1f ca       	rjmp	.-3010   	; 0x28e <sysclk_enable_module>
     e50:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     e52:	80 3a       	cpi	r24, 0xA0	; 160
     e54:	2b e0       	ldi	r18, 0x0B	; 11
     e56:	92 07       	cpc	r25, r18
     e58:	21 f4       	brne	.+8      	; 0xe62 <sysclk_enable_peripheral_clock+0x1f4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     e5a:	60 e1       	ldi	r22, 0x10	; 16
     e5c:	86 e0       	ldi	r24, 0x06	; 6
     e5e:	17 ca       	rjmp	.-3026   	; 0x28e <sysclk_enable_module>
     e60:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     e62:	80 3b       	cpi	r24, 0xB0	; 176
     e64:	28 e0       	ldi	r18, 0x08	; 8
     e66:	92 07       	cpc	r25, r18
     e68:	21 f4       	brne	.+8      	; 0xe72 <sysclk_enable_peripheral_clock+0x204>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     e6a:	60 e2       	ldi	r22, 0x20	; 32
     e6c:	83 e0       	ldi	r24, 0x03	; 3
     e6e:	0f ca       	rjmp	.-3042   	; 0x28e <sysclk_enable_module>
     e70:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     e72:	80 3b       	cpi	r24, 0xB0	; 176
     e74:	29 e0       	ldi	r18, 0x09	; 9
     e76:	92 07       	cpc	r25, r18
     e78:	21 f4       	brne	.+8      	; 0xe82 <sysclk_enable_peripheral_clock+0x214>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     e7a:	60 e2       	ldi	r22, 0x20	; 32
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	07 ca       	rjmp	.-3058   	; 0x28e <sysclk_enable_module>
     e80:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     e82:	80 3b       	cpi	r24, 0xB0	; 176
     e84:	2a e0       	ldi	r18, 0x0A	; 10
     e86:	92 07       	cpc	r25, r18
     e88:	21 f4       	brne	.+8      	; 0xe92 <sysclk_enable_peripheral_clock+0x224>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     e8a:	60 e2       	ldi	r22, 0x20	; 32
     e8c:	85 e0       	ldi	r24, 0x05	; 5
     e8e:	ff c9       	rjmp	.-3074   	; 0x28e <sysclk_enable_module>
     e90:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     e92:	80 3b       	cpi	r24, 0xB0	; 176
     e94:	2b e0       	ldi	r18, 0x0B	; 11
     e96:	92 07       	cpc	r25, r18
     e98:	21 f4       	brne	.+8      	; 0xea2 <sysclk_enable_peripheral_clock+0x234>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     e9a:	60 e2       	ldi	r22, 0x20	; 32
     e9c:	86 e0       	ldi	r24, 0x06	; 6
     e9e:	f7 c9       	rjmp	.-3090   	; 0x28e <sysclk_enable_module>
     ea0:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     ea2:	80 38       	cpi	r24, 0x80	; 128
     ea4:	24 e0       	ldi	r18, 0x04	; 4
     ea6:	92 07       	cpc	r25, r18
     ea8:	21 f4       	brne	.+8      	; 0xeb2 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     eaa:	60 e4       	ldi	r22, 0x40	; 64
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	ef c9       	rjmp	.-3106   	; 0x28e <sysclk_enable_module>
     eb0:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     eb2:	80 39       	cpi	r24, 0x90	; 144
     eb4:	24 e0       	ldi	r18, 0x04	; 4
     eb6:	92 07       	cpc	r25, r18
     eb8:	21 f4       	brne	.+8      	; 0xec2 <sysclk_enable_peripheral_clock+0x254>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     eba:	60 e4       	ldi	r22, 0x40	; 64
     ebc:	84 e0       	ldi	r24, 0x04	; 4
     ebe:	e7 c9       	rjmp	.-3122   	; 0x28e <sysclk_enable_module>
     ec0:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     ec2:	80 3a       	cpi	r24, 0xA0	; 160
     ec4:	24 e0       	ldi	r18, 0x04	; 4
     ec6:	92 07       	cpc	r25, r18
     ec8:	21 f4       	brne	.+8      	; 0xed2 <sysclk_enable_peripheral_clock+0x264>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     eca:	60 e4       	ldi	r22, 0x40	; 64
     ecc:	85 e0       	ldi	r24, 0x05	; 5
     ece:	df c9       	rjmp	.-3138   	; 0x28e <sysclk_enable_module>
     ed0:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     ed2:	80 3b       	cpi	r24, 0xB0	; 176
     ed4:	94 40       	sbci	r25, 0x04	; 4
     ed6:	19 f4       	brne	.+6      	; 0xede <sysclk_enable_peripheral_clock+0x270>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     ed8:	60 e4       	ldi	r22, 0x40	; 64
     eda:	86 e0       	ldi	r24, 0x06	; 6
     edc:	d8 c9       	rjmp	.-3152   	; 0x28e <sysclk_enable_module>
     ede:	08 95       	ret

00000ee0 <main>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main (void)
{
	/* Initialize the system clock, 32MHz, this also turns off all peripheral clocks */
	sysclk_init();
     ee0:	af d9       	rcall	.-3234   	; 0x240 <sysclk_init>
	sysclk_enable_peripheral_clock(&USARTC0); //For every peripheral, you must enable the clock like shown here. Ex. Timer counters, SPI, ADCs
     ee2:	80 ea       	ldi	r24, 0xA0	; 160
     ee4:	98 e0       	ldi	r25, 0x08	; 8
     ee6:	c3 de       	rcall	.-634    	; 0xc6e <sysclk_enable_peripheral_clock>
	
	/* Example, Timer Counter on PORTE */
	sysclk_enable_peripheral_clock(&TCE0);
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	9a e0       	ldi	r25, 0x0A	; 10
     eec:	c0 de       	rcall	.-640    	; 0xc6e <sysclk_enable_peripheral_clock>
	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES); //You must have this line for every timer counter due to a flaw in the design of the chip
     eee:	64 e0       	ldi	r22, 0x04	; 4
     ef0:	85 e0       	ldi	r24, 0x05	; 5
     ef2:	cd d9       	rcall	.-3174   	; 0x28e <sysclk_enable_module>
	
	/* Initializations */;
	UART_Comms_Init();
     ef4:	73 de       	rcall	.-794    	; 0xbdc <UART_Comms_Init>
	
	/* Flight Code */
	
	sysclk_enable_peripheral_clock(&ADCA);
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	b9 de       	rcall	.-654    	; 0xc6e <sysclk_enable_peripheral_clock>
	
	PORTE.DIR = 0b11111111; //Sets all the pins on PORTE as an output.
     efc:	e0 e8       	ldi	r30, 0x80	; 128
     efe:	f6 e0       	ldi	r31, 0x06	; 6
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	80 83       	st	Z, r24
	PORTE.OUT = 0b00000000; //Sets all of the pins voltage levels to 0V, which is logic 0 in programming.
     f04:	14 82       	std	Z+4, r1	; 0x04
	
	while (1)
	{
		lightChase = 0b00000001;
     f06:	d1 e0       	ldi	r29, 0x01	; 1
		for(int i = 0; i < 4; i++){
			PORTE.OUT = ~lightChase;
			lightChase >>= 1;
     f08:	7a ea       	ldi	r23, 0xAA	; 170
     f0a:	61 e1       	ldi	r22, 0x11	; 17
     f0c:	54 e0       	ldi	r21, 0x04	; 4
     f0e:	40 e0       	ldi	r20, 0x00	; 0
			delay_ms(50);
		}
		lightChase = 0b1000000;
     f10:	c0 e4       	ldi	r28, 0x40	; 64
	PORTE.DIR = 0b11111111; //Sets all the pins on PORTE as an output.
	PORTE.OUT = 0b00000000; //Sets all of the pins voltage levels to 0V, which is logic 0 in programming.
	
	while (1)
	{
		lightChase = 0b00000001;
     f12:	d0 93 18 20 	sts	0x2018, r29
     f16:	24 e0       	ldi	r18, 0x04	; 4
     f18:	30 e0       	ldi	r19, 0x00	; 0
		for(int i = 0; i < 4; i++){
			PORTE.OUT = ~lightChase;
     f1a:	80 91 18 20 	lds	r24, 0x2018
     f1e:	98 2f       	mov	r25, r24
     f20:	90 95       	com	r25
     f22:	94 83       	std	Z+4, r25	; 0x04
			lightChase >>= 1;
     f24:	86 95       	lsr	r24
     f26:	80 93 18 20 	sts	0x2018, r24
     f2a:	87 2f       	mov	r24, r23
     f2c:	96 2f       	mov	r25, r22
     f2e:	a5 2f       	mov	r26, r21
     f30:	b4 2f       	mov	r27, r20
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	a1 09       	sbc	r26, r1
     f36:	b1 09       	sbc	r27, r1
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	a1 05       	cpc	r26, r1
     f3c:	b1 05       	cpc	r27, r1
     f3e:	c9 f7       	brne	.-14     	; 0xf32 <main+0x52>
     f40:	21 50       	subi	r18, 0x01	; 1
     f42:	31 09       	sbc	r19, r1
	PORTE.OUT = 0b00000000; //Sets all of the pins voltage levels to 0V, which is logic 0 in programming.
	
	while (1)
	{
		lightChase = 0b00000001;
		for(int i = 0; i < 4; i++){
     f44:	21 15       	cp	r18, r1
     f46:	31 05       	cpc	r19, r1
     f48:	41 f7       	brne	.-48     	; 0xf1a <main+0x3a>
			PORTE.OUT = ~lightChase;
			lightChase >>= 1;
			delay_ms(50);
		}
		lightChase = 0b1000000;
     f4a:	c0 93 18 20 	sts	0x2018, r28
     f4e:	24 e0       	ldi	r18, 0x04	; 4
     f50:	30 e0       	ldi	r19, 0x00	; 0
		for(int i = 0; i < 4; i++){
			PORTE.OUT = ~lightChase;
     f52:	80 91 18 20 	lds	r24, 0x2018
     f56:	98 2f       	mov	r25, r24
     f58:	90 95       	com	r25
     f5a:	94 83       	std	Z+4, r25	; 0x04
			lightChase <<= 1;
     f5c:	88 0f       	add	r24, r24
     f5e:	80 93 18 20 	sts	0x2018, r24
     f62:	87 2f       	mov	r24, r23
     f64:	96 2f       	mov	r25, r22
     f66:	a5 2f       	mov	r26, r21
     f68:	b4 2f       	mov	r27, r20
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	a1 09       	sbc	r26, r1
     f6e:	b1 09       	sbc	r27, r1
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	a1 05       	cpc	r26, r1
     f74:	b1 05       	cpc	r27, r1
     f76:	c9 f7       	brne	.-14     	; 0xf6a <main+0x8a>
     f78:	21 50       	subi	r18, 0x01	; 1
     f7a:	31 09       	sbc	r19, r1
			PORTE.OUT = ~lightChase;
			lightChase >>= 1;
			delay_ms(50);
		}
		lightChase = 0b1000000;
		for(int i = 0; i < 4; i++){
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	41 f7       	brne	.-48     	; 0xf52 <main+0x72>
     f82:	c7 cf       	rjmp	.-114    	; 0xf12 <main+0x32>

00000f84 <__udivmodsi4>:
     f84:	a1 e2       	ldi	r26, 0x21	; 33
     f86:	1a 2e       	mov	r1, r26
     f88:	aa 1b       	sub	r26, r26
     f8a:	bb 1b       	sub	r27, r27
     f8c:	fd 01       	movw	r30, r26
     f8e:	0d c0       	rjmp	.+26     	; 0xfaa <__udivmodsi4_ep>

00000f90 <__udivmodsi4_loop>:
     f90:	aa 1f       	adc	r26, r26
     f92:	bb 1f       	adc	r27, r27
     f94:	ee 1f       	adc	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	a2 17       	cp	r26, r18
     f9a:	b3 07       	cpc	r27, r19
     f9c:	e4 07       	cpc	r30, r20
     f9e:	f5 07       	cpc	r31, r21
     fa0:	20 f0       	brcs	.+8      	; 0xfaa <__udivmodsi4_ep>
     fa2:	a2 1b       	sub	r26, r18
     fa4:	b3 0b       	sbc	r27, r19
     fa6:	e4 0b       	sbc	r30, r20
     fa8:	f5 0b       	sbc	r31, r21

00000faa <__udivmodsi4_ep>:
     faa:	66 1f       	adc	r22, r22
     fac:	77 1f       	adc	r23, r23
     fae:	88 1f       	adc	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	1a 94       	dec	r1
     fb4:	69 f7       	brne	.-38     	; 0xf90 <__udivmodsi4_loop>
     fb6:	60 95       	com	r22
     fb8:	70 95       	com	r23
     fba:	80 95       	com	r24
     fbc:	90 95       	com	r25
     fbe:	9b 01       	movw	r18, r22
     fc0:	ac 01       	movw	r20, r24
     fc2:	bd 01       	movw	r22, r26
     fc4:	cf 01       	movw	r24, r30
     fc6:	08 95       	ret

00000fc8 <fdevopen>:
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	ec 01       	movw	r28, r24
     fd2:	8b 01       	movw	r16, r22
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	31 f4       	brne	.+12     	; 0xfe4 <fdevopen+0x1c>
     fd8:	61 15       	cp	r22, r1
     fda:	71 05       	cpc	r23, r1
     fdc:	19 f4       	brne	.+6      	; 0xfe4 <fdevopen+0x1c>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	37 c0       	rjmp	.+110    	; 0x1052 <fdevopen+0x8a>
     fe4:	6e e0       	ldi	r22, 0x0E	; 14
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	37 d0       	rcall	.+110    	; 0x105c <calloc>
     fee:	fc 01       	movw	r30, r24
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	a9 f3       	breq	.-22     	; 0xfde <fdevopen+0x16>
     ff4:	80 e8       	ldi	r24, 0x80	; 128
     ff6:	83 83       	std	Z+3, r24	; 0x03
     ff8:	01 15       	cp	r16, r1
     ffa:	11 05       	cpc	r17, r1
     ffc:	71 f0       	breq	.+28     	; 0x101a <fdevopen+0x52>
     ffe:	02 87       	std	Z+10, r16	; 0x0a
    1000:	13 87       	std	Z+11, r17	; 0x0b
    1002:	81 e8       	ldi	r24, 0x81	; 129
    1004:	83 83       	std	Z+3, r24	; 0x03
    1006:	80 91 19 20 	lds	r24, 0x2019
    100a:	90 91 1a 20 	lds	r25, 0x201A
    100e:	89 2b       	or	r24, r25
    1010:	21 f4       	brne	.+8      	; 0x101a <fdevopen+0x52>
    1012:	e0 93 19 20 	sts	0x2019, r30
    1016:	f0 93 1a 20 	sts	0x201A, r31
    101a:	20 97       	sbiw	r28, 0x00	; 0
    101c:	c9 f0       	breq	.+50     	; 0x1050 <fdevopen+0x88>
    101e:	c0 87       	std	Z+8, r28	; 0x08
    1020:	d1 87       	std	Z+9, r29	; 0x09
    1022:	83 81       	ldd	r24, Z+3	; 0x03
    1024:	82 60       	ori	r24, 0x02	; 2
    1026:	83 83       	std	Z+3, r24	; 0x03
    1028:	80 91 1b 20 	lds	r24, 0x201B
    102c:	90 91 1c 20 	lds	r25, 0x201C
    1030:	89 2b       	or	r24, r25
    1032:	71 f4       	brne	.+28     	; 0x1050 <fdevopen+0x88>
    1034:	e0 93 1b 20 	sts	0x201B, r30
    1038:	f0 93 1c 20 	sts	0x201C, r31
    103c:	80 91 1d 20 	lds	r24, 0x201D
    1040:	90 91 1e 20 	lds	r25, 0x201E
    1044:	89 2b       	or	r24, r25
    1046:	21 f4       	brne	.+8      	; 0x1050 <fdevopen+0x88>
    1048:	e0 93 1d 20 	sts	0x201D, r30
    104c:	f0 93 1e 20 	sts	0x201E, r31
    1050:	cf 01       	movw	r24, r30
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	08 95       	ret

0000105c <calloc>:
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	86 9f       	mul	r24, r22
    1066:	80 01       	movw	r16, r0
    1068:	87 9f       	mul	r24, r23
    106a:	10 0d       	add	r17, r0
    106c:	96 9f       	mul	r25, r22
    106e:	10 0d       	add	r17, r0
    1070:	11 24       	eor	r1, r1
    1072:	c8 01       	movw	r24, r16
    1074:	0d d0       	rcall	.+26     	; 0x1090 <malloc>
    1076:	ec 01       	movw	r28, r24
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	21 f0       	breq	.+8      	; 0x1084 <calloc+0x28>
    107c:	a8 01       	movw	r20, r16
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	2d d1       	rcall	.+602    	; 0x12de <memset>
    1084:	ce 01       	movw	r24, r28
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <malloc>:
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	91 05       	cpc	r25, r1
    1098:	10 f4       	brcc	.+4      	; 0x109e <malloc+0xe>
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	e0 91 21 20 	lds	r30, 0x2021
    10a2:	f0 91 22 20 	lds	r31, 0x2022
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	30 97       	sbiw	r30, 0x00	; 0
    10b0:	39 f1       	breq	.+78     	; 0x1100 <malloc+0x70>
    10b2:	40 81       	ld	r20, Z
    10b4:	51 81       	ldd	r21, Z+1	; 0x01
    10b6:	48 17       	cp	r20, r24
    10b8:	59 07       	cpc	r21, r25
    10ba:	b8 f0       	brcs	.+46     	; 0x10ea <malloc+0x5a>
    10bc:	48 17       	cp	r20, r24
    10be:	59 07       	cpc	r21, r25
    10c0:	71 f4       	brne	.+28     	; 0x10de <malloc+0x4e>
    10c2:	82 81       	ldd	r24, Z+2	; 0x02
    10c4:	93 81       	ldd	r25, Z+3	; 0x03
    10c6:	10 97       	sbiw	r26, 0x00	; 0
    10c8:	29 f0       	breq	.+10     	; 0x10d4 <malloc+0x44>
    10ca:	12 96       	adiw	r26, 0x02	; 2
    10cc:	8d 93       	st	X+, r24
    10ce:	9c 93       	st	X, r25
    10d0:	13 97       	sbiw	r26, 0x03	; 3
    10d2:	2c c0       	rjmp	.+88     	; 0x112c <malloc+0x9c>
    10d4:	80 93 21 20 	sts	0x2021, r24
    10d8:	90 93 22 20 	sts	0x2022, r25
    10dc:	27 c0       	rjmp	.+78     	; 0x112c <malloc+0x9c>
    10de:	21 15       	cp	r18, r1
    10e0:	31 05       	cpc	r19, r1
    10e2:	31 f0       	breq	.+12     	; 0x10f0 <malloc+0x60>
    10e4:	42 17       	cp	r20, r18
    10e6:	53 07       	cpc	r21, r19
    10e8:	18 f0       	brcs	.+6      	; 0x10f0 <malloc+0x60>
    10ea:	a9 01       	movw	r20, r18
    10ec:	db 01       	movw	r26, r22
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <malloc+0x62>
    10f0:	ef 01       	movw	r28, r30
    10f2:	9a 01       	movw	r18, r20
    10f4:	bd 01       	movw	r22, r26
    10f6:	df 01       	movw	r26, r30
    10f8:	02 80       	ldd	r0, Z+2	; 0x02
    10fa:	f3 81       	ldd	r31, Z+3	; 0x03
    10fc:	e0 2d       	mov	r30, r0
    10fe:	d7 cf       	rjmp	.-82     	; 0x10ae <malloc+0x1e>
    1100:	21 15       	cp	r18, r1
    1102:	31 05       	cpc	r19, r1
    1104:	f9 f0       	breq	.+62     	; 0x1144 <malloc+0xb4>
    1106:	28 1b       	sub	r18, r24
    1108:	39 0b       	sbc	r19, r25
    110a:	24 30       	cpi	r18, 0x04	; 4
    110c:	31 05       	cpc	r19, r1
    110e:	80 f4       	brcc	.+32     	; 0x1130 <malloc+0xa0>
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	9b 81       	ldd	r25, Y+3	; 0x03
    1114:	61 15       	cp	r22, r1
    1116:	71 05       	cpc	r23, r1
    1118:	21 f0       	breq	.+8      	; 0x1122 <malloc+0x92>
    111a:	fb 01       	movw	r30, r22
    111c:	82 83       	std	Z+2, r24	; 0x02
    111e:	93 83       	std	Z+3, r25	; 0x03
    1120:	04 c0       	rjmp	.+8      	; 0x112a <malloc+0x9a>
    1122:	80 93 21 20 	sts	0x2021, r24
    1126:	90 93 22 20 	sts	0x2022, r25
    112a:	fe 01       	movw	r30, r28
    112c:	32 96       	adiw	r30, 0x02	; 2
    112e:	44 c0       	rjmp	.+136    	; 0x11b8 <malloc+0x128>
    1130:	fe 01       	movw	r30, r28
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	81 93       	st	Z+, r24
    1138:	91 93       	st	Z+, r25
    113a:	22 50       	subi	r18, 0x02	; 2
    113c:	31 09       	sbc	r19, r1
    113e:	28 83       	st	Y, r18
    1140:	39 83       	std	Y+1, r19	; 0x01
    1142:	3a c0       	rjmp	.+116    	; 0x11b8 <malloc+0x128>
    1144:	20 91 1f 20 	lds	r18, 0x201F
    1148:	30 91 20 20 	lds	r19, 0x2020
    114c:	23 2b       	or	r18, r19
    114e:	41 f4       	brne	.+16     	; 0x1160 <malloc+0xd0>
    1150:	20 91 02 20 	lds	r18, 0x2002
    1154:	30 91 03 20 	lds	r19, 0x2003
    1158:	20 93 1f 20 	sts	0x201F, r18
    115c:	30 93 20 20 	sts	0x2020, r19
    1160:	20 91 00 20 	lds	r18, 0x2000
    1164:	30 91 01 20 	lds	r19, 0x2001
    1168:	21 15       	cp	r18, r1
    116a:	31 05       	cpc	r19, r1
    116c:	41 f4       	brne	.+16     	; 0x117e <malloc+0xee>
    116e:	2d b7       	in	r18, 0x3d	; 61
    1170:	3e b7       	in	r19, 0x3e	; 62
    1172:	40 91 04 20 	lds	r20, 0x2004
    1176:	50 91 05 20 	lds	r21, 0x2005
    117a:	24 1b       	sub	r18, r20
    117c:	35 0b       	sbc	r19, r21
    117e:	e0 91 1f 20 	lds	r30, 0x201F
    1182:	f0 91 20 20 	lds	r31, 0x2020
    1186:	e2 17       	cp	r30, r18
    1188:	f3 07       	cpc	r31, r19
    118a:	a0 f4       	brcc	.+40     	; 0x11b4 <malloc+0x124>
    118c:	2e 1b       	sub	r18, r30
    118e:	3f 0b       	sbc	r19, r31
    1190:	28 17       	cp	r18, r24
    1192:	39 07       	cpc	r19, r25
    1194:	78 f0       	brcs	.+30     	; 0x11b4 <malloc+0x124>
    1196:	ac 01       	movw	r20, r24
    1198:	4e 5f       	subi	r20, 0xFE	; 254
    119a:	5f 4f       	sbci	r21, 0xFF	; 255
    119c:	24 17       	cp	r18, r20
    119e:	35 07       	cpc	r19, r21
    11a0:	48 f0       	brcs	.+18     	; 0x11b4 <malloc+0x124>
    11a2:	4e 0f       	add	r20, r30
    11a4:	5f 1f       	adc	r21, r31
    11a6:	40 93 1f 20 	sts	0x201F, r20
    11aa:	50 93 20 20 	sts	0x2020, r21
    11ae:	81 93       	st	Z+, r24
    11b0:	91 93       	st	Z+, r25
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <malloc+0x128>
    11b4:	e0 e0       	ldi	r30, 0x00	; 0
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	cf 01       	movw	r24, r30
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <free>:
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	09 f4       	brne	.+2      	; 0x11ca <free+0xa>
    11c8:	87 c0       	rjmp	.+270    	; 0x12d8 <free+0x118>
    11ca:	fc 01       	movw	r30, r24
    11cc:	32 97       	sbiw	r30, 0x02	; 2
    11ce:	12 82       	std	Z+2, r1	; 0x02
    11d0:	13 82       	std	Z+3, r1	; 0x03
    11d2:	c0 91 21 20 	lds	r28, 0x2021
    11d6:	d0 91 22 20 	lds	r29, 0x2022
    11da:	20 97       	sbiw	r28, 0x00	; 0
    11dc:	81 f4       	brne	.+32     	; 0x11fe <free+0x3e>
    11de:	20 81       	ld	r18, Z
    11e0:	31 81       	ldd	r19, Z+1	; 0x01
    11e2:	28 0f       	add	r18, r24
    11e4:	39 1f       	adc	r19, r25
    11e6:	80 91 1f 20 	lds	r24, 0x201F
    11ea:	90 91 20 20 	lds	r25, 0x2020
    11ee:	82 17       	cp	r24, r18
    11f0:	93 07       	cpc	r25, r19
    11f2:	79 f5       	brne	.+94     	; 0x1252 <free+0x92>
    11f4:	e0 93 1f 20 	sts	0x201F, r30
    11f8:	f0 93 20 20 	sts	0x2020, r31
    11fc:	6d c0       	rjmp	.+218    	; 0x12d8 <free+0x118>
    11fe:	de 01       	movw	r26, r28
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	ae 17       	cp	r26, r30
    1206:	bf 07       	cpc	r27, r31
    1208:	50 f4       	brcc	.+20     	; 0x121e <free+0x5e>
    120a:	12 96       	adiw	r26, 0x02	; 2
    120c:	4d 91       	ld	r20, X+
    120e:	5c 91       	ld	r21, X
    1210:	13 97       	sbiw	r26, 0x03	; 3
    1212:	9d 01       	movw	r18, r26
    1214:	41 15       	cp	r20, r1
    1216:	51 05       	cpc	r21, r1
    1218:	09 f1       	breq	.+66     	; 0x125c <free+0x9c>
    121a:	da 01       	movw	r26, r20
    121c:	f3 cf       	rjmp	.-26     	; 0x1204 <free+0x44>
    121e:	a2 83       	std	Z+2, r26	; 0x02
    1220:	b3 83       	std	Z+3, r27	; 0x03
    1222:	40 81       	ld	r20, Z
    1224:	51 81       	ldd	r21, Z+1	; 0x01
    1226:	84 0f       	add	r24, r20
    1228:	95 1f       	adc	r25, r21
    122a:	8a 17       	cp	r24, r26
    122c:	9b 07       	cpc	r25, r27
    122e:	71 f4       	brne	.+28     	; 0x124c <free+0x8c>
    1230:	8d 91       	ld	r24, X+
    1232:	9c 91       	ld	r25, X
    1234:	11 97       	sbiw	r26, 0x01	; 1
    1236:	84 0f       	add	r24, r20
    1238:	95 1f       	adc	r25, r21
    123a:	02 96       	adiw	r24, 0x02	; 2
    123c:	80 83       	st	Z, r24
    123e:	91 83       	std	Z+1, r25	; 0x01
    1240:	12 96       	adiw	r26, 0x02	; 2
    1242:	8d 91       	ld	r24, X+
    1244:	9c 91       	ld	r25, X
    1246:	13 97       	sbiw	r26, 0x03	; 3
    1248:	82 83       	std	Z+2, r24	; 0x02
    124a:	93 83       	std	Z+3, r25	; 0x03
    124c:	21 15       	cp	r18, r1
    124e:	31 05       	cpc	r19, r1
    1250:	29 f4       	brne	.+10     	; 0x125c <free+0x9c>
    1252:	e0 93 21 20 	sts	0x2021, r30
    1256:	f0 93 22 20 	sts	0x2022, r31
    125a:	3e c0       	rjmp	.+124    	; 0x12d8 <free+0x118>
    125c:	d9 01       	movw	r26, r18
    125e:	12 96       	adiw	r26, 0x02	; 2
    1260:	ed 93       	st	X+, r30
    1262:	fc 93       	st	X, r31
    1264:	13 97       	sbiw	r26, 0x03	; 3
    1266:	4d 91       	ld	r20, X+
    1268:	5d 91       	ld	r21, X+
    126a:	a4 0f       	add	r26, r20
    126c:	b5 1f       	adc	r27, r21
    126e:	ea 17       	cp	r30, r26
    1270:	fb 07       	cpc	r31, r27
    1272:	79 f4       	brne	.+30     	; 0x1292 <free+0xd2>
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	84 0f       	add	r24, r20
    127a:	95 1f       	adc	r25, r21
    127c:	02 96       	adiw	r24, 0x02	; 2
    127e:	d9 01       	movw	r26, r18
    1280:	8d 93       	st	X+, r24
    1282:	9c 93       	st	X, r25
    1284:	11 97       	sbiw	r26, 0x01	; 1
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	12 96       	adiw	r26, 0x02	; 2
    128c:	8d 93       	st	X+, r24
    128e:	9c 93       	st	X, r25
    1290:	13 97       	sbiw	r26, 0x03	; 3
    1292:	e0 e0       	ldi	r30, 0x00	; 0
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	9b 81       	ldd	r25, Y+3	; 0x03
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	19 f0       	breq	.+6      	; 0x12a4 <free+0xe4>
    129e:	fe 01       	movw	r30, r28
    12a0:	ec 01       	movw	r28, r24
    12a2:	f9 cf       	rjmp	.-14     	; 0x1296 <free+0xd6>
    12a4:	ce 01       	movw	r24, r28
    12a6:	02 96       	adiw	r24, 0x02	; 2
    12a8:	28 81       	ld	r18, Y
    12aa:	39 81       	ldd	r19, Y+1	; 0x01
    12ac:	82 0f       	add	r24, r18
    12ae:	93 1f       	adc	r25, r19
    12b0:	20 91 1f 20 	lds	r18, 0x201F
    12b4:	30 91 20 20 	lds	r19, 0x2020
    12b8:	28 17       	cp	r18, r24
    12ba:	39 07       	cpc	r19, r25
    12bc:	69 f4       	brne	.+26     	; 0x12d8 <free+0x118>
    12be:	30 97       	sbiw	r30, 0x00	; 0
    12c0:	29 f4       	brne	.+10     	; 0x12cc <free+0x10c>
    12c2:	10 92 21 20 	sts	0x2021, r1
    12c6:	10 92 22 20 	sts	0x2022, r1
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <free+0x110>
    12cc:	12 82       	std	Z+2, r1	; 0x02
    12ce:	13 82       	std	Z+3, r1	; 0x03
    12d0:	c0 93 1f 20 	sts	0x201F, r28
    12d4:	d0 93 20 20 	sts	0x2020, r29
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	08 95       	ret

000012de <memset>:
    12de:	dc 01       	movw	r26, r24
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <memset+0x6>
    12e2:	6d 93       	st	X+, r22
    12e4:	41 50       	subi	r20, 0x01	; 1
    12e6:	50 40       	sbci	r21, 0x00	; 0
    12e8:	e0 f7       	brcc	.-8      	; 0x12e2 <memset+0x4>
    12ea:	08 95       	ret

000012ec <_exit>:
    12ec:	f8 94       	cli

000012ee <__stop_program>:
    12ee:	ff cf       	rjmp	.-2      	; 0x12ee <__stop_program>
