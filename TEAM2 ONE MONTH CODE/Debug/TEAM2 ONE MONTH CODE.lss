
TEAM2 ONE MONTH CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  000014ba  0000154e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080200e  0080200e  0000155c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000158c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  000015d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a385  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b95  00000000  00000000  0000bc8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006e1d  00000000  00000000  0000d822  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000091c  00000000  00000000  00014640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002a451  00000000  00000000  00014f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d99  00000000  00000000  0003f3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  00042148  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a50b  00000000  00000000  000423b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	1a c1       	rjmp	.+564    	; 0x23e <__bad_interrupt>
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	25 c1       	rjmp	.+586    	; 0x274 <__vector_10>
      2a:	00 00       	nop
      2c:	46 c1       	rjmp	.+652    	; 0x2ba <__vector_11>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	04 c1       	rjmp	.+520    	; 0x23e <__bad_interrupt>
      36:	00 00       	nop
      38:	02 c1       	rjmp	.+516    	; 0x23e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	00 c1       	rjmp	.+512    	; 0x23e <__bad_interrupt>
      3e:	00 00       	nop
      40:	fe c0       	rjmp	.+508    	; 0x23e <__bad_interrupt>
      42:	00 00       	nop
      44:	fc c0       	rjmp	.+504    	; 0x23e <__bad_interrupt>
      46:	00 00       	nop
      48:	fa c0       	rjmp	.+500    	; 0x23e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f8 c0       	rjmp	.+496    	; 0x23e <__bad_interrupt>
      4e:	00 00       	nop
      50:	f6 c0       	rjmp	.+492    	; 0x23e <__bad_interrupt>
      52:	00 00       	nop
      54:	f4 c0       	rjmp	.+488    	; 0x23e <__bad_interrupt>
      56:	00 00       	nop
      58:	f2 c0       	rjmp	.+484    	; 0x23e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f0 c0       	rjmp	.+480    	; 0x23e <__bad_interrupt>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ee c2       	rjmp	.+1500   	; 0x67a <__vector_39>
      9e:	00 00       	nop
      a0:	29 c3       	rjmp	.+1618   	; 0x6f4 <__vector_40>
      a2:	00 00       	nop
      a4:	64 c3       	rjmp	.+1736   	; 0x76e <__vector_41>
      a6:	00 00       	nop
      a8:	9f c3       	rjmp	.+1854   	; 0x7e8 <__vector_42>
      aa:	00 00       	nop
      ac:	c8 c0       	rjmp	.+400    	; 0x23e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c2 c0       	rjmp	.+388    	; 0x23e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c0 c0       	rjmp	.+384    	; 0x23e <__bad_interrupt>
      be:	00 00       	nop
      c0:	be c0       	rjmp	.+380    	; 0x23e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bc c0       	rjmp	.+376    	; 0x23e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ba c0       	rjmp	.+372    	; 0x23e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b8 c0       	rjmp	.+368    	; 0x23e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b6 c0       	rjmp	.+364    	; 0x23e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b4 c0       	rjmp	.+360    	; 0x23e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b2 c0       	rjmp	.+356    	; 0x23e <__bad_interrupt>
      da:	00 00       	nop
      dc:	b0 c0       	rjmp	.+352    	; 0x23e <__bad_interrupt>
      de:	00 00       	nop
      e0:	ae c0       	rjmp	.+348    	; 0x23e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	9e c0       	rjmp	.+316    	; 0x23e <__bad_interrupt>
     102:	00 00       	nop
     104:	9c c0       	rjmp	.+312    	; 0x23e <__bad_interrupt>
     106:	00 00       	nop
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ba c1       	rjmp	.+884    	; 0x492 <__vector_71>
     11e:	00 00       	nop
     120:	f5 c1       	rjmp	.+1002   	; 0x50c <__vector_72>
     122:	00 00       	nop
     124:	30 c2       	rjmp	.+1120   	; 0x586 <__vector_73>
     126:	00 00       	nop
     128:	6b c2       	rjmp	.+1238   	; 0x600 <__vector_74>
     12a:	00 00       	nop
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	84 c0       	rjmp	.+264    	; 0x23e <__bad_interrupt>
     136:	00 00       	nop
     138:	82 c0       	rjmp	.+260    	; 0x23e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	80 c0       	rjmp	.+256    	; 0x23e <__bad_interrupt>
     13e:	00 00       	nop
     140:	7e c0       	rjmp	.+252    	; 0x23e <__bad_interrupt>
     142:	00 00       	nop
     144:	7c c0       	rjmp	.+248    	; 0x23e <__bad_interrupt>
     146:	00 00       	nop
     148:	7a c0       	rjmp	.+244    	; 0x23e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	78 c0       	rjmp	.+240    	; 0x23e <__bad_interrupt>
     14e:	00 00       	nop
     150:	76 c0       	rjmp	.+236    	; 0x23e <__bad_interrupt>
     152:	00 00       	nop
     154:	74 c0       	rjmp	.+232    	; 0x23e <__bad_interrupt>
     156:	00 00       	nop
     158:	72 c0       	rjmp	.+228    	; 0x23e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	46 c0       	rjmp	.+140    	; 0x23e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	44 c0       	rjmp	.+136    	; 0x23e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	42 c0       	rjmp	.+132    	; 0x23e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	40 c0       	rjmp	.+128    	; 0x23e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3e c0       	rjmp	.+124    	; 0x23e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3c c0       	rjmp	.+120    	; 0x23e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
	...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df e3       	ldi	r29, 0x3F	; 63
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ea eb       	ldi	r30, 0xBA	; 186
     214:	f4 e1       	ldi	r31, 0x14	; 20
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	ae 30       	cpi	r26, 0x0E	; 14
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
     228:	20 e2       	ldi	r18, 0x20	; 32
     22a:	ae e0       	ldi	r26, 0x0E	; 14
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
     230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
     232:	a0 33       	cpi	r26, 0x30	; 48
     234:	b2 07       	cpc	r27, r18
     236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
     238:	5f d7       	rcall	.+3774   	; 0x10f8 <main>
     23a:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     240:	64 e0       	ldi	r22, 0x04	; 4
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	ef d0       	rcall	.+478    	; 0x424 <sysclk_enable_module>
	RTC.PER = 0xffff;
     246:	e0 e0       	ldi	r30, 0x00	; 0
     248:	f4 e0       	ldi	r31, 0x04	; 4
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	9f ef       	ldi	r25, 0xFF	; 255
     24e:	82 87       	std	Z+10, r24	; 0x0a
     250:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
     252:	10 86       	std	Z+8, r1	; 0x08
     254:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     256:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     258:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     25a:	a6 e1       	ldi	r26, 0x16	; 22
     25c:	b0 e2       	ldi	r27, 0x20	; 32
     25e:	13 96       	adiw	r26, 0x03	; 3
     260:	8c 91       	ld	r24, X
     262:	13 97       	sbiw	r26, 0x03	; 3
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	13 96       	adiw	r26, 0x03	; 3
     268:	8c 93       	st	X, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     26a:	9f bf       	out	0x3f, r25	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
     270:	80 83       	st	Z, r24
     272:	08 95       	ret

00000274 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     274:	1f 92       	push	r1
     276:	0f 92       	push	r0
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	0f 92       	push	r0
     27c:	11 24       	eor	r1, r1
     27e:	08 b6       	in	r0, 0x38	; 56
     280:	0f 92       	push	r0
     282:	18 be       	out	0x38, r1	; 56
     284:	0b b6       	in	r0, 0x3b	; 59
     286:	0f 92       	push	r0
     288:	1b be       	out	0x3b, r1	; 59
     28a:	8f 93       	push	r24
     28c:	9f 93       	push	r25
     28e:	ef 93       	push	r30
     290:	ff 93       	push	r31
	rtc_data.counter_high++;
     292:	ee e0       	ldi	r30, 0x0E	; 14
     294:	f0 e2       	ldi	r31, 0x20	; 32
     296:	80 81       	ld	r24, Z
     298:	91 81       	ldd	r25, Z+1	; 0x01
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	80 83       	st	Z, r24
     29e:	91 83       	std	Z+1, r25	; 0x01
}
     2a0:	ff 91       	pop	r31
     2a2:	ef 91       	pop	r30
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	0f 90       	pop	r0
     2aa:	0b be       	out	0x3b, r0	; 59
     2ac:	0f 90       	pop	r0
     2ae:	08 be       	out	0x38, r0	; 56
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	08 b6       	in	r0, 0x38	; 56
     2c6:	0f 92       	push	r0
     2c8:	18 be       	out	0x38, r1	; 56
     2ca:	09 b6       	in	r0, 0x39	; 57
     2cc:	0f 92       	push	r0
     2ce:	19 be       	out	0x39, r1	; 57
     2d0:	0b b6       	in	r0, 0x3b	; 59
     2d2:	0f 92       	push	r0
     2d4:	1b be       	out	0x3b, r1	; 59
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	2f 93       	push	r18
     2e4:	3f 93       	push	r19
     2e6:	4f 93       	push	r20
     2e8:	5f 93       	push	r21
     2ea:	6f 93       	push	r22
     2ec:	7f 93       	push	r23
     2ee:	8f 93       	push	r24
     2f0:	9f 93       	push	r25
     2f2:	af 93       	push	r26
     2f4:	bf 93       	push	r27
     2f6:	ef 93       	push	r30
     2f8:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     2fa:	ee e0       	ldi	r30, 0x0E	; 14
     2fc:	f0 e2       	ldi	r31, 0x20	; 32
     2fe:	80 81       	ld	r24, Z
     300:	91 81       	ldd	r25, Z+1	; 0x01
     302:	22 81       	ldd	r18, Z+2	; 0x02
     304:	33 81       	ldd	r19, Z+3	; 0x03
     306:	82 17       	cp	r24, r18
     308:	93 07       	cpc	r25, r19
     30a:	f0 f1       	brcs	.+124    	; 0x388 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     30c:	21 e0       	ldi	r18, 0x01	; 1
     30e:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     312:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <__data_end+0x6>
     316:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <__data_end+0x7>
     31a:	30 97       	sbiw	r30, 0x00	; 0
     31c:	a9 f1       	breq	.+106    	; 0x388 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     31e:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     322:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     326:	a0 e0       	ldi	r26, 0x00	; 0
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	dc 01       	movw	r26, r24
     32c:	99 27       	eor	r25, r25
     32e:	88 27       	eor	r24, r24
					| RTC.CNT;
     330:	ab 01       	movw	r20, r22
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     336:	8c 01       	movw	r16, r24
     338:	9d 01       	movw	r18, r26
     33a:	04 2b       	or	r16, r20
     33c:	15 2b       	or	r17, r21
     33e:	26 2b       	or	r18, r22
     340:	37 2b       	or	r19, r23
     342:	c9 01       	movw	r24, r18
     344:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     346:	ae e0       	ldi	r26, 0x0E	; 14
     348:	b0 e2       	ldi	r27, 0x20	; 32
     34a:	12 96       	adiw	r26, 0x02	; 2
     34c:	0d 91       	ld	r16, X+
     34e:	1c 91       	ld	r17, X
     350:	13 97       	sbiw	r26, 0x03	; 3
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	98 01       	movw	r18, r16
     358:	11 27       	eor	r17, r17
     35a:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     35c:	14 96       	adiw	r26, 0x04	; 4
     35e:	cd 90       	ld	r12, X+
     360:	dc 90       	ld	r13, X
     362:	15 97       	sbiw	r26, 0x05	; 5
     364:	e1 2c       	mov	r14, r1
     366:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     368:	0c 29       	or	r16, r12
     36a:	1d 29       	or	r17, r13
     36c:	2e 29       	or	r18, r14
     36e:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     370:	06 17       	cp	r16, r22
     372:	17 07       	cpc	r17, r23
     374:	28 07       	cpc	r18, r24
     376:	39 07       	cpc	r19, r25
     378:	30 f0       	brcs	.+12     	; 0x386 <__vector_11+0xcc>
				count = alarm + 1;
     37a:	c9 01       	movw	r24, r18
     37c:	b8 01       	movw	r22, r16
     37e:	6f 5f       	subi	r22, 0xFF	; 255
     380:	7f 4f       	sbci	r23, 0xFF	; 255
     382:	8f 4f       	sbci	r24, 0xFF	; 255
     384:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     386:	19 95       	eicall
		}
	}
}
     388:	ff 91       	pop	r31
     38a:	ef 91       	pop	r30
     38c:	bf 91       	pop	r27
     38e:	af 91       	pop	r26
     390:	9f 91       	pop	r25
     392:	8f 91       	pop	r24
     394:	7f 91       	pop	r23
     396:	6f 91       	pop	r22
     398:	5f 91       	pop	r21
     39a:	4f 91       	pop	r20
     39c:	3f 91       	pop	r19
     39e:	2f 91       	pop	r18
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	df 90       	pop	r13
     3aa:	cf 90       	pop	r12
     3ac:	0f 90       	pop	r0
     3ae:	0b be       	out	0x3b, r0	; 59
     3b0:	0f 90       	pop	r0
     3b2:	09 be       	out	0x39, r0	; 57
     3b4:	0f 90       	pop	r0
     3b6:	08 be       	out	0x38, r0	; 56
     3b8:	0f 90       	pop	r0
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	0f 90       	pop	r0
     3be:	1f 90       	pop	r1
     3c0:	18 95       	reti

000003c2 <SPI_init>:
 */ 
 #include "Drivers/SPI/SPI_driver.h"
 #include <asf.h>

 void SPI_init(void){
	SPIC.CTRL = 0b01000000; //Clock Double off, enable SPI, MSB DORD, slave mode, SPI transfer mode set to 0, prescalar set to clkper/4 (has no effect in slave mode).
     3c2:	e0 ec       	ldi	r30, 0xC0	; 192
     3c4:	f8 e0       	ldi	r31, 0x08	; 8
     3c6:	80 e4       	ldi	r24, 0x40	; 64
     3c8:	80 83       	st	Z, r24
	SPIC.INTCTRL = 0b00000010; //Medium level interrupt.
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	81 83       	std	Z+1, r24	; 0x01
     3ce:	08 95       	ret

000003d0 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     3d0:	8f ef       	ldi	r24, 0xFF	; 255
     3d2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     3d6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     3da:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     3de:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     3e2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     3e6:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     3ea:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     3ee:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     3f0:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     3f2:	e0 e5       	ldi	r30, 0x50	; 80
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	82 60       	ori	r24, 0x02	; 2
     3fa:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3fc:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     3fe:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     400:	81 ff       	sbrs	r24, 1
     402:	fd cf       	rjmp	.-6      	; 0x3fe <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	80 e4       	ldi	r24, 0x40	; 64
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	2b d2       	rcall	.+1110   	; 0x862 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     40c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     40e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     410:	e0 e5       	ldi	r30, 0x50	; 80
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	8e 7f       	andi	r24, 0xFE	; 254
     418:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     41a:	9f bf       	out	0x3f, r25	; 63
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
     422:	08 95       	ret

00000424 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     424:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     426:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     428:	e8 2f       	mov	r30, r24
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	e0 59       	subi	r30, 0x90	; 144
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	60 95       	com	r22
     432:	80 81       	ld	r24, Z
     434:	68 23       	and	r22, r24
     436:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     438:	9f bf       	out	0x3f, r25	; 63
     43a:	08 95       	ret

0000043c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	1f 92       	push	r1
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     446:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <stdio_base>
     44a:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <stdio_base+0x1>
     44e:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <ptr_get>
     452:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <ptr_get+0x1>
     456:	be 01       	movw	r22, r28
     458:	6f 5f       	subi	r22, 0xFF	; 255
     45a:	7f 4f       	sbci	r23, 0xFF	; 255
     45c:	19 95       	eicall
	return c;
     45e:	89 81       	ldd	r24, Y+1	; 0x01
}
     460:	08 2e       	mov	r0, r24
     462:	00 0c       	add	r0, r0
     464:	99 0b       	sbc	r25, r25
     466:	0f 90       	pop	r0
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     46e:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     470:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <stdio_base>
     474:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <stdio_base+0x1>
     478:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <ptr_put>
     47c:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <ptr_put+0x1>
     480:	19 95       	eicall
     482:	99 23       	and	r25, r25
     484:	1c f0       	brlt	.+6      	; 0x48c <_write+0x1e>
		return -1;
	}
	return 1;
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     48c:	8f ef       	ldi	r24, 0xFF	; 255
     48e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     490:	08 95       	ret

00000492 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	08 b6       	in	r0, 0x38	; 56
     49e:	0f 92       	push	r0
     4a0:	18 be       	out	0x38, r1	; 56
     4a2:	09 b6       	in	r0, 0x39	; 57
     4a4:	0f 92       	push	r0
     4a6:	19 be       	out	0x39, r1	; 57
     4a8:	0b b6       	in	r0, 0x3b	; 59
     4aa:	0f 92       	push	r0
     4ac:	1b be       	out	0x3b, r1	; 59
     4ae:	2f 93       	push	r18
     4b0:	3f 93       	push	r19
     4b2:	4f 93       	push	r20
     4b4:	5f 93       	push	r21
     4b6:	6f 93       	push	r22
     4b8:	7f 93       	push	r23
     4ba:	8f 93       	push	r24
     4bc:	9f 93       	push	r25
     4be:	af 93       	push	r26
     4c0:	bf 93       	push	r27
     4c2:	ef 93       	push	r30
     4c4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     4c6:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     4ca:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     4ce:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <adca_callback>
     4d2:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <adca_callback+0x1>
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	19 95       	eicall
}
     4de:	ff 91       	pop	r31
     4e0:	ef 91       	pop	r30
     4e2:	bf 91       	pop	r27
     4e4:	af 91       	pop	r26
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	7f 91       	pop	r23
     4ec:	6f 91       	pop	r22
     4ee:	5f 91       	pop	r21
     4f0:	4f 91       	pop	r20
     4f2:	3f 91       	pop	r19
     4f4:	2f 91       	pop	r18
     4f6:	0f 90       	pop	r0
     4f8:	0b be       	out	0x3b, r0	; 59
     4fa:	0f 90       	pop	r0
     4fc:	09 be       	out	0x39, r0	; 57
     4fe:	0f 90       	pop	r0
     500:	08 be       	out	0x38, r0	; 56
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	08 b6       	in	r0, 0x38	; 56
     518:	0f 92       	push	r0
     51a:	18 be       	out	0x38, r1	; 56
     51c:	09 b6       	in	r0, 0x39	; 57
     51e:	0f 92       	push	r0
     520:	19 be       	out	0x39, r1	; 57
     522:	0b b6       	in	r0, 0x3b	; 59
     524:	0f 92       	push	r0
     526:	1b be       	out	0x3b, r1	; 59
     528:	2f 93       	push	r18
     52a:	3f 93       	push	r19
     52c:	4f 93       	push	r20
     52e:	5f 93       	push	r21
     530:	6f 93       	push	r22
     532:	7f 93       	push	r23
     534:	8f 93       	push	r24
     536:	9f 93       	push	r25
     538:	af 93       	push	r26
     53a:	bf 93       	push	r27
     53c:	ef 93       	push	r30
     53e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     540:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     544:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     548:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <adca_callback>
     54c:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <adca_callback+0x1>
     550:	62 e0       	ldi	r22, 0x02	; 2
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	19 95       	eicall
}
     558:	ff 91       	pop	r31
     55a:	ef 91       	pop	r30
     55c:	bf 91       	pop	r27
     55e:	af 91       	pop	r26
     560:	9f 91       	pop	r25
     562:	8f 91       	pop	r24
     564:	7f 91       	pop	r23
     566:	6f 91       	pop	r22
     568:	5f 91       	pop	r21
     56a:	4f 91       	pop	r20
     56c:	3f 91       	pop	r19
     56e:	2f 91       	pop	r18
     570:	0f 90       	pop	r0
     572:	0b be       	out	0x3b, r0	; 59
     574:	0f 90       	pop	r0
     576:	09 be       	out	0x39, r0	; 57
     578:	0f 90       	pop	r0
     57a:	08 be       	out	0x38, r0	; 56
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     586:	1f 92       	push	r1
     588:	0f 92       	push	r0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	0f 92       	push	r0
     58e:	11 24       	eor	r1, r1
     590:	08 b6       	in	r0, 0x38	; 56
     592:	0f 92       	push	r0
     594:	18 be       	out	0x38, r1	; 56
     596:	09 b6       	in	r0, 0x39	; 57
     598:	0f 92       	push	r0
     59a:	19 be       	out	0x39, r1	; 57
     59c:	0b b6       	in	r0, 0x3b	; 59
     59e:	0f 92       	push	r0
     5a0:	1b be       	out	0x3b, r1	; 59
     5a2:	2f 93       	push	r18
     5a4:	3f 93       	push	r19
     5a6:	4f 93       	push	r20
     5a8:	5f 93       	push	r21
     5aa:	6f 93       	push	r22
     5ac:	7f 93       	push	r23
     5ae:	8f 93       	push	r24
     5b0:	9f 93       	push	r25
     5b2:	af 93       	push	r26
     5b4:	bf 93       	push	r27
     5b6:	ef 93       	push	r30
     5b8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     5ba:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     5be:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     5c2:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <adca_callback>
     5c6:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <adca_callback+0x1>
     5ca:	64 e0       	ldi	r22, 0x04	; 4
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	19 95       	eicall
}
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	bf 91       	pop	r27
     5d8:	af 91       	pop	r26
     5da:	9f 91       	pop	r25
     5dc:	8f 91       	pop	r24
     5de:	7f 91       	pop	r23
     5e0:	6f 91       	pop	r22
     5e2:	5f 91       	pop	r21
     5e4:	4f 91       	pop	r20
     5e6:	3f 91       	pop	r19
     5e8:	2f 91       	pop	r18
     5ea:	0f 90       	pop	r0
     5ec:	0b be       	out	0x3b, r0	; 59
     5ee:	0f 90       	pop	r0
     5f0:	09 be       	out	0x39, r0	; 57
     5f2:	0f 90       	pop	r0
     5f4:	08 be       	out	0x38, r0	; 56
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	08 b6       	in	r0, 0x38	; 56
     60c:	0f 92       	push	r0
     60e:	18 be       	out	0x38, r1	; 56
     610:	09 b6       	in	r0, 0x39	; 57
     612:	0f 92       	push	r0
     614:	19 be       	out	0x39, r1	; 57
     616:	0b b6       	in	r0, 0x3b	; 59
     618:	0f 92       	push	r0
     61a:	1b be       	out	0x3b, r1	; 59
     61c:	2f 93       	push	r18
     61e:	3f 93       	push	r19
     620:	4f 93       	push	r20
     622:	5f 93       	push	r21
     624:	6f 93       	push	r22
     626:	7f 93       	push	r23
     628:	8f 93       	push	r24
     62a:	9f 93       	push	r25
     62c:	af 93       	push	r26
     62e:	bf 93       	push	r27
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     634:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     638:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     63c:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <adca_callback>
     640:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <adca_callback+0x1>
     644:	68 e0       	ldi	r22, 0x08	; 8
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	19 95       	eicall
}
     64c:	ff 91       	pop	r31
     64e:	ef 91       	pop	r30
     650:	bf 91       	pop	r27
     652:	af 91       	pop	r26
     654:	9f 91       	pop	r25
     656:	8f 91       	pop	r24
     658:	7f 91       	pop	r23
     65a:	6f 91       	pop	r22
     65c:	5f 91       	pop	r21
     65e:	4f 91       	pop	r20
     660:	3f 91       	pop	r19
     662:	2f 91       	pop	r18
     664:	0f 90       	pop	r0
     666:	0b be       	out	0x3b, r0	; 59
     668:	0f 90       	pop	r0
     66a:	09 be       	out	0x39, r0	; 57
     66c:	0f 90       	pop	r0
     66e:	08 be       	out	0x38, r0	; 56
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti

0000067a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     67a:	1f 92       	push	r1
     67c:	0f 92       	push	r0
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	0f 92       	push	r0
     682:	11 24       	eor	r1, r1
     684:	08 b6       	in	r0, 0x38	; 56
     686:	0f 92       	push	r0
     688:	18 be       	out	0x38, r1	; 56
     68a:	09 b6       	in	r0, 0x39	; 57
     68c:	0f 92       	push	r0
     68e:	19 be       	out	0x39, r1	; 57
     690:	0b b6       	in	r0, 0x3b	; 59
     692:	0f 92       	push	r0
     694:	1b be       	out	0x3b, r1	; 59
     696:	2f 93       	push	r18
     698:	3f 93       	push	r19
     69a:	4f 93       	push	r20
     69c:	5f 93       	push	r21
     69e:	6f 93       	push	r22
     6a0:	7f 93       	push	r23
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
     6a6:	af 93       	push	r26
     6a8:	bf 93       	push	r27
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     6ae:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     6b2:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     6b6:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <adcb_callback>
     6ba:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <adcb_callback+0x1>
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	80 e4       	ldi	r24, 0x40	; 64
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	19 95       	eicall
}
     6c6:	ff 91       	pop	r31
     6c8:	ef 91       	pop	r30
     6ca:	bf 91       	pop	r27
     6cc:	af 91       	pop	r26
     6ce:	9f 91       	pop	r25
     6d0:	8f 91       	pop	r24
     6d2:	7f 91       	pop	r23
     6d4:	6f 91       	pop	r22
     6d6:	5f 91       	pop	r21
     6d8:	4f 91       	pop	r20
     6da:	3f 91       	pop	r19
     6dc:	2f 91       	pop	r18
     6de:	0f 90       	pop	r0
     6e0:	0b be       	out	0x3b, r0	; 59
     6e2:	0f 90       	pop	r0
     6e4:	09 be       	out	0x39, r0	; 57
     6e6:	0f 90       	pop	r0
     6e8:	08 be       	out	0x38, r0	; 56
     6ea:	0f 90       	pop	r0
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	0f 90       	pop	r0
     6f0:	1f 90       	pop	r1
     6f2:	18 95       	reti

000006f4 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	08 b6       	in	r0, 0x38	; 56
     700:	0f 92       	push	r0
     702:	18 be       	out	0x38, r1	; 56
     704:	09 b6       	in	r0, 0x39	; 57
     706:	0f 92       	push	r0
     708:	19 be       	out	0x39, r1	; 57
     70a:	0b b6       	in	r0, 0x3b	; 59
     70c:	0f 92       	push	r0
     70e:	1b be       	out	0x3b, r1	; 59
     710:	2f 93       	push	r18
     712:	3f 93       	push	r19
     714:	4f 93       	push	r20
     716:	5f 93       	push	r21
     718:	6f 93       	push	r22
     71a:	7f 93       	push	r23
     71c:	8f 93       	push	r24
     71e:	9f 93       	push	r25
     720:	af 93       	push	r26
     722:	bf 93       	push	r27
     724:	ef 93       	push	r30
     726:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     728:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     72c:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     730:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <adcb_callback>
     734:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <adcb_callback+0x1>
     738:	62 e0       	ldi	r22, 0x02	; 2
     73a:	80 e4       	ldi	r24, 0x40	; 64
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	19 95       	eicall
}
     740:	ff 91       	pop	r31
     742:	ef 91       	pop	r30
     744:	bf 91       	pop	r27
     746:	af 91       	pop	r26
     748:	9f 91       	pop	r25
     74a:	8f 91       	pop	r24
     74c:	7f 91       	pop	r23
     74e:	6f 91       	pop	r22
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	09 be       	out	0x39, r0	; 57
     760:	0f 90       	pop	r0
     762:	08 be       	out	0x38, r0	; 56
     764:	0f 90       	pop	r0
     766:	0f be       	out	0x3f, r0	; 63
     768:	0f 90       	pop	r0
     76a:	1f 90       	pop	r1
     76c:	18 95       	reti

0000076e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     76e:	1f 92       	push	r1
     770:	0f 92       	push	r0
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	0f 92       	push	r0
     776:	11 24       	eor	r1, r1
     778:	08 b6       	in	r0, 0x38	; 56
     77a:	0f 92       	push	r0
     77c:	18 be       	out	0x38, r1	; 56
     77e:	09 b6       	in	r0, 0x39	; 57
     780:	0f 92       	push	r0
     782:	19 be       	out	0x39, r1	; 57
     784:	0b b6       	in	r0, 0x3b	; 59
     786:	0f 92       	push	r0
     788:	1b be       	out	0x3b, r1	; 59
     78a:	2f 93       	push	r18
     78c:	3f 93       	push	r19
     78e:	4f 93       	push	r20
     790:	5f 93       	push	r21
     792:	6f 93       	push	r22
     794:	7f 93       	push	r23
     796:	8f 93       	push	r24
     798:	9f 93       	push	r25
     79a:	af 93       	push	r26
     79c:	bf 93       	push	r27
     79e:	ef 93       	push	r30
     7a0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     7a2:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     7a6:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     7aa:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <adcb_callback>
     7ae:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <adcb_callback+0x1>
     7b2:	64 e0       	ldi	r22, 0x04	; 4
     7b4:	80 e4       	ldi	r24, 0x40	; 64
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	19 95       	eicall
}
     7ba:	ff 91       	pop	r31
     7bc:	ef 91       	pop	r30
     7be:	bf 91       	pop	r27
     7c0:	af 91       	pop	r26
     7c2:	9f 91       	pop	r25
     7c4:	8f 91       	pop	r24
     7c6:	7f 91       	pop	r23
     7c8:	6f 91       	pop	r22
     7ca:	5f 91       	pop	r21
     7cc:	4f 91       	pop	r20
     7ce:	3f 91       	pop	r19
     7d0:	2f 91       	pop	r18
     7d2:	0f 90       	pop	r0
     7d4:	0b be       	out	0x3b, r0	; 59
     7d6:	0f 90       	pop	r0
     7d8:	09 be       	out	0x39, r0	; 57
     7da:	0f 90       	pop	r0
     7dc:	08 be       	out	0x38, r0	; 56
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	08 b6       	in	r0, 0x38	; 56
     7f4:	0f 92       	push	r0
     7f6:	18 be       	out	0x38, r1	; 56
     7f8:	09 b6       	in	r0, 0x39	; 57
     7fa:	0f 92       	push	r0
     7fc:	19 be       	out	0x39, r1	; 57
     7fe:	0b b6       	in	r0, 0x3b	; 59
     800:	0f 92       	push	r0
     802:	1b be       	out	0x3b, r1	; 59
     804:	2f 93       	push	r18
     806:	3f 93       	push	r19
     808:	4f 93       	push	r20
     80a:	5f 93       	push	r21
     80c:	6f 93       	push	r22
     80e:	7f 93       	push	r23
     810:	8f 93       	push	r24
     812:	9f 93       	push	r25
     814:	af 93       	push	r26
     816:	bf 93       	push	r27
     818:	ef 93       	push	r30
     81a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     81c:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     820:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     824:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <adcb_callback>
     828:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <adcb_callback+0x1>
     82c:	68 e0       	ldi	r22, 0x08	; 8
     82e:	80 e4       	ldi	r24, 0x40	; 64
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	19 95       	eicall
}
     834:	ff 91       	pop	r31
     836:	ef 91       	pop	r30
     838:	bf 91       	pop	r27
     83a:	af 91       	pop	r26
     83c:	9f 91       	pop	r25
     83e:	8f 91       	pop	r24
     840:	7f 91       	pop	r23
     842:	6f 91       	pop	r22
     844:	5f 91       	pop	r21
     846:	4f 91       	pop	r20
     848:	3f 91       	pop	r19
     84a:	2f 91       	pop	r18
     84c:	0f 90       	pop	r0
     84e:	0b be       	out	0x3b, r0	; 59
     850:	0f 90       	pop	r0
     852:	09 be       	out	0x39, r0	; 57
     854:	0f 90       	pop	r0
     856:	08 be       	out	0x38, r0	; 56
     858:	0f 90       	pop	r0
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	0f 90       	pop	r0
     85e:	1f 90       	pop	r1
     860:	18 95       	reti

00000862 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     862:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     864:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     866:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     868:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     86a:	60 83       	st	Z, r22
	ret                             // Return to caller
     86c:	08 95       	ret

0000086e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     86e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     872:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     874:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     876:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     87a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     87c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     880:	08 95       	ret

00000882 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     882:	fc 01       	movw	r30, r24
     884:	91 81       	ldd	r25, Z+1	; 0x01
     886:	95 ff       	sbrs	r25, 5
     888:	fd cf       	rjmp	.-6      	; 0x884 <usart_putchar+0x2>
     88a:	60 83       	st	Z, r22
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	08 95       	ret

00000892 <usart_getchar>:
     892:	fc 01       	movw	r30, r24
     894:	91 81       	ldd	r25, Z+1	; 0x01
     896:	99 23       	and	r25, r25
     898:	ec f7       	brge	.-6      	; 0x894 <usart_getchar+0x2>
     89a:	80 81       	ld	r24, Z
     89c:	08 95       	ret

0000089e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     89e:	2f 92       	push	r2
     8a0:	3f 92       	push	r3
     8a2:	4f 92       	push	r4
     8a4:	5f 92       	push	r5
     8a6:	6f 92       	push	r6
     8a8:	7f 92       	push	r7
     8aa:	8f 92       	push	r8
     8ac:	9f 92       	push	r9
     8ae:	af 92       	push	r10
     8b0:	bf 92       	push	r11
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	1c 01       	movw	r2, r24
     8c2:	2a 01       	movw	r4, r20
     8c4:	3b 01       	movw	r6, r22
     8c6:	48 01       	movw	r8, r16
     8c8:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     8ca:	d9 01       	movw	r26, r18
     8cc:	c8 01       	movw	r24, r16
     8ce:	68 94       	set
     8d0:	12 f8       	bld	r1, 2
     8d2:	b6 95       	lsr	r27
     8d4:	a7 95       	ror	r26
     8d6:	97 95       	ror	r25
     8d8:	87 95       	ror	r24
     8da:	16 94       	lsr	r1
     8dc:	d1 f7       	brne	.-12     	; 0x8d2 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     8de:	b9 01       	movw	r22, r18
     8e0:	a8 01       	movw	r20, r16
     8e2:	03 2e       	mov	r0, r19
     8e4:	36 e1       	ldi	r19, 0x16	; 22
     8e6:	76 95       	lsr	r23
     8e8:	67 95       	ror	r22
     8ea:	57 95       	ror	r21
     8ec:	47 95       	ror	r20
     8ee:	3a 95       	dec	r19
     8f0:	d1 f7       	brne	.-12     	; 0x8e6 <usart_set_baudrate+0x48>
     8f2:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     8f4:	f1 01       	movw	r30, r2
     8f6:	24 81       	ldd	r18, Z+4	; 0x04
     8f8:	22 fd       	sbrc	r18, 2
     8fa:	08 c0       	rjmp	.+16     	; 0x90c <usart_set_baudrate+0x6e>
		max_rate /= 2;
     8fc:	b6 95       	lsr	r27
     8fe:	a7 95       	ror	r26
     900:	97 95       	ror	r25
     902:	87 95       	ror	r24
		min_rate /= 2;
     904:	76 95       	lsr	r23
     906:	67 95       	ror	r22
     908:	57 95       	ror	r21
     90a:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     90c:	84 15       	cp	r24, r4
     90e:	95 05       	cpc	r25, r5
     910:	a6 05       	cpc	r26, r6
     912:	b7 05       	cpc	r27, r7
     914:	08 f4       	brcc	.+2      	; 0x918 <usart_set_baudrate+0x7a>
     916:	aa c0       	rjmp	.+340    	; 0xa6c <usart_set_baudrate+0x1ce>
     918:	44 16       	cp	r4, r20
     91a:	55 06       	cpc	r5, r21
     91c:	66 06       	cpc	r6, r22
     91e:	77 06       	cpc	r7, r23
     920:	08 f4       	brcc	.+2      	; 0x924 <usart_set_baudrate+0x86>
     922:	a6 c0       	rjmp	.+332    	; 0xa70 <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     924:	f1 01       	movw	r30, r2
     926:	84 81       	ldd	r24, Z+4	; 0x04
     928:	82 fd       	sbrc	r24, 2
     92a:	04 c0       	rjmp	.+8      	; 0x934 <usart_set_baudrate+0x96>
		baud *= 2;
     92c:	44 0c       	add	r4, r4
     92e:	55 1c       	adc	r5, r5
     930:	66 1c       	adc	r6, r6
     932:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     934:	c5 01       	movw	r24, r10
     936:	b4 01       	movw	r22, r8
     938:	a3 01       	movw	r20, r6
     93a:	92 01       	movw	r18, r4
     93c:	02 d4       	rcall	.+2052   	; 0x1142 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     93e:	2f 3f       	cpi	r18, 0xFF	; 255
     940:	31 05       	cpc	r19, r1
     942:	41 05       	cpc	r20, r1
     944:	51 05       	cpc	r21, r1
     946:	08 f4       	brcc	.+2      	; 0x94a <usart_set_baudrate+0xac>
     948:	95 c0       	rjmp	.+298    	; 0xa74 <usart_set_baudrate+0x1d6>
     94a:	c1 2c       	mov	r12, r1
     94c:	d1 2c       	mov	r13, r1
     94e:	76 01       	movw	r14, r12
     950:	ca 94       	dec	r12
     952:	c9 ef       	ldi	r28, 0xF9	; 249
     954:	05 c0       	rjmp	.+10     	; 0x960 <usart_set_baudrate+0xc2>
     956:	2c 15       	cp	r18, r12
     958:	3d 05       	cpc	r19, r13
     95a:	4e 05       	cpc	r20, r14
     95c:	5f 05       	cpc	r21, r15
     95e:	68 f0       	brcs	.+26     	; 0x97a <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
     960:	cc 0c       	add	r12, r12
     962:	dd 1c       	adc	r13, r13
     964:	ee 1c       	adc	r14, r14
     966:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     968:	cd 3f       	cpi	r28, 0xFD	; 253
     96a:	14 f4       	brge	.+4      	; 0x970 <usart_set_baudrate+0xd2>
			limit |= 1;
     96c:	68 94       	set
     96e:	c0 f8       	bld	r12, 0
     970:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     972:	c7 30       	cpi	r28, 0x07	; 7
     974:	81 f7       	brne	.-32     	; 0x956 <usart_set_baudrate+0xb8>
     976:	8c 2f       	mov	r24, r28
     978:	54 c0       	rjmp	.+168    	; 0xa22 <usart_set_baudrate+0x184>
     97a:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     97c:	cc 23       	and	r28, r28
     97e:	0c f0       	brlt	.+2      	; 0x982 <usart_set_baudrate+0xe4>
     980:	50 c0       	rjmp	.+160    	; 0xa22 <usart_set_baudrate+0x184>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     982:	d3 01       	movw	r26, r6
     984:	c2 01       	movw	r24, r4
     986:	88 0f       	add	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	aa 1f       	adc	r26, r26
     98c:	bb 1f       	adc	r27, r27
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	aa 1f       	adc	r26, r26
     994:	bb 1f       	adc	r27, r27
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	aa 1f       	adc	r26, r26
     99c:	bb 1f       	adc	r27, r27
     99e:	85 01       	movw	r16, r10
     9a0:	74 01       	movw	r14, r8
     9a2:	e8 1a       	sub	r14, r24
     9a4:	f9 0a       	sbc	r15, r25
     9a6:	0a 0b       	sbc	r16, r26
     9a8:	1b 0b       	sbc	r17, r27
     9aa:	d8 01       	movw	r26, r16
     9ac:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     9ae:	ce 3f       	cpi	r28, 0xFE	; 254
     9b0:	ec f4       	brge	.+58     	; 0x9ec <usart_set_baudrate+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     9b2:	2d ef       	ldi	r18, 0xFD	; 253
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	2c 1b       	sub	r18, r28
     9b8:	31 09       	sbc	r19, r1
     9ba:	c7 fd       	sbrc	r28, 7
     9bc:	33 95       	inc	r19
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <usart_set_baudrate+0x12a>
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	aa 1f       	adc	r26, r26
     9c6:	bb 1f       	adc	r27, r27
     9c8:	2a 95       	dec	r18
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <usart_set_baudrate+0x122>
     9cc:	73 01       	movw	r14, r6
     9ce:	62 01       	movw	r12, r4
     9d0:	f6 94       	lsr	r15
     9d2:	e7 94       	ror	r14
     9d4:	d7 94       	ror	r13
     9d6:	c7 94       	ror	r12
     9d8:	bc 01       	movw	r22, r24
     9da:	cd 01       	movw	r24, r26
     9dc:	6c 0d       	add	r22, r12
     9de:	7d 1d       	adc	r23, r13
     9e0:	8e 1d       	adc	r24, r14
     9e2:	9f 1d       	adc	r25, r15
     9e4:	a3 01       	movw	r20, r6
     9e6:	92 01       	movw	r18, r4
     9e8:	ac d3       	rcall	.+1880   	; 0x1142 <__udivmodsi4>
     9ea:	36 c0       	rjmp	.+108    	; 0xa58 <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
     9ec:	23 e0       	ldi	r18, 0x03	; 3
     9ee:	2c 0f       	add	r18, r28
     9f0:	83 01       	movw	r16, r6
     9f2:	72 01       	movw	r14, r4
     9f4:	04 c0       	rjmp	.+8      	; 0x9fe <usart_set_baudrate+0x160>
     9f6:	ee 0c       	add	r14, r14
     9f8:	ff 1c       	adc	r15, r15
     9fa:	00 1f       	adc	r16, r16
     9fc:	11 1f       	adc	r17, r17
     9fe:	2a 95       	dec	r18
     a00:	d2 f7       	brpl	.-12     	; 0x9f6 <usart_set_baudrate+0x158>
     a02:	a8 01       	movw	r20, r16
     a04:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
     a06:	67 01       	movw	r12, r14
     a08:	78 01       	movw	r14, r16
     a0a:	f6 94       	lsr	r15
     a0c:	e7 94       	ror	r14
     a0e:	d7 94       	ror	r13
     a10:	c7 94       	ror	r12
     a12:	bc 01       	movw	r22, r24
     a14:	cd 01       	movw	r24, r26
     a16:	6c 0d       	add	r22, r12
     a18:	7d 1d       	adc	r23, r13
     a1a:	8e 1d       	adc	r24, r14
     a1c:	9f 1d       	adc	r25, r15
     a1e:	91 d3       	rcall	.+1826   	; 0x1142 <__udivmodsi4>
     a20:	1b c0       	rjmp	.+54     	; 0xa58 <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     a22:	8d 5f       	subi	r24, 0xFD	; 253
     a24:	a3 01       	movw	r20, r6
     a26:	92 01       	movw	r18, r4
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <usart_set_baudrate+0x194>
     a2a:	22 0f       	add	r18, r18
     a2c:	33 1f       	adc	r19, r19
     a2e:	44 1f       	adc	r20, r20
     a30:	55 1f       	adc	r21, r21
     a32:	8a 95       	dec	r24
     a34:	d2 f7       	brpl	.-12     	; 0xa2a <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
     a36:	da 01       	movw	r26, r20
     a38:	c9 01       	movw	r24, r18
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	bc 01       	movw	r22, r24
     a44:	cd 01       	movw	r24, r26
     a46:	68 0d       	add	r22, r8
     a48:	79 1d       	adc	r23, r9
     a4a:	8a 1d       	adc	r24, r10
     a4c:	9b 1d       	adc	r25, r11
     a4e:	79 d3       	rcall	.+1778   	; 0x1142 <__udivmodsi4>
     a50:	21 50       	subi	r18, 0x01	; 1
     a52:	31 09       	sbc	r19, r1
     a54:	41 09       	sbc	r20, r1
     a56:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     a58:	83 2f       	mov	r24, r19
     a5a:	8f 70       	andi	r24, 0x0F	; 15
     a5c:	c2 95       	swap	r28
     a5e:	c0 7f       	andi	r28, 0xF0	; 240
     a60:	c8 2b       	or	r28, r24
     a62:	f1 01       	movw	r30, r2
     a64:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     a66:	26 83       	std	Z+6, r18	; 0x06

	return true;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	1c c0       	rjmp	.+56     	; 0xaa4 <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	1a c0       	rjmp	.+52     	; 0xaa4 <usart_set_baudrate+0x206>
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	18 c0       	rjmp	.+48     	; 0xaa4 <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     a74:	d3 01       	movw	r26, r6
     a76:	c2 01       	movw	r24, r4
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	aa 1f       	adc	r26, r26
     a7e:	bb 1f       	adc	r27, r27
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	aa 1f       	adc	r26, r26
     a86:	bb 1f       	adc	r27, r27
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	aa 1f       	adc	r26, r26
     a8e:	bb 1f       	adc	r27, r27
     a90:	85 01       	movw	r16, r10
     a92:	74 01       	movw	r14, r8
     a94:	e8 1a       	sub	r14, r24
     a96:	f9 0a       	sbc	r15, r25
     a98:	0a 0b       	sbc	r16, r26
     a9a:	1b 0b       	sbc	r17, r27
     a9c:	d8 01       	movw	r26, r16
     a9e:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     aa0:	c9 ef       	ldi	r28, 0xF9	; 249
     aa2:	87 cf       	rjmp	.-242    	; 0x9b2 <usart_set_baudrate+0x114>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	bf 90       	pop	r11
     ab4:	af 90       	pop	r10
     ab6:	9f 90       	pop	r9
     ab8:	8f 90       	pop	r8
     aba:	7f 90       	pop	r7
     abc:	6f 90       	pop	r6
     abe:	5f 90       	pop	r5
     ac0:	4f 90       	pop	r4
     ac2:	3f 90       	pop	r3
     ac4:	2f 90       	pop	r2
     ac6:	08 95       	ret

00000ac8 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	ec 01       	movw	r28, r24
     ad2:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	09 f4       	brne	.+2      	; 0xada <usart_init_rs232+0x12>
     ad8:	36 c1       	rjmp	.+620    	; 0xd46 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     ada:	80 3c       	cpi	r24, 0xC0	; 192
     adc:	91 05       	cpc	r25, r1
     ade:	21 f4       	brne	.+8      	; 0xae8 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     ae0:	60 e1       	ldi	r22, 0x10	; 16
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	9f dc       	rcall	.-1730   	; 0x424 <sysclk_enable_module>
     ae6:	2f c1       	rjmp	.+606    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     ae8:	c0 34       	cpi	r28, 0x40	; 64
     aea:	84 e0       	ldi	r24, 0x04	; 4
     aec:	d8 07       	cpc	r29, r24
     aee:	21 f4       	brne	.+8      	; 0xaf8 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     af0:	68 e0       	ldi	r22, 0x08	; 8
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	97 dc       	rcall	.-1746   	; 0x424 <sysclk_enable_module>
     af6:	27 c1       	rjmp	.+590    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     af8:	c1 15       	cp	r28, r1
     afa:	e4 e0       	ldi	r30, 0x04	; 4
     afc:	de 07       	cpc	r29, r30
     afe:	21 f4       	brne	.+8      	; 0xb08 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     b00:	64 e0       	ldi	r22, 0x04	; 4
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	8f dc       	rcall	.-1762   	; 0x424 <sysclk_enable_module>
     b06:	1f c1       	rjmp	.+574    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     b08:	c0 38       	cpi	r28, 0x80	; 128
     b0a:	f1 e0       	ldi	r31, 0x01	; 1
     b0c:	df 07       	cpc	r29, r31
     b0e:	21 f4       	brne	.+8      	; 0xb18 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     b10:	62 e0       	ldi	r22, 0x02	; 2
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	87 dc       	rcall	.-1778   	; 0x424 <sysclk_enable_module>
     b16:	17 c1       	rjmp	.+558    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     b18:	c1 15       	cp	r28, r1
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	d8 07       	cpc	r29, r24
     b1e:	21 f4       	brne	.+8      	; 0xb28 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	7f dc       	rcall	.-1794   	; 0x424 <sysclk_enable_module>
     b26:	0f c1       	rjmp	.+542    	; 0xd46 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     b28:	c0 38       	cpi	r28, 0x80	; 128
     b2a:	e3 e0       	ldi	r30, 0x03	; 3
     b2c:	de 07       	cpc	r29, r30
     b2e:	21 f4       	brne	.+8      	; 0xb38 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	77 dc       	rcall	.-1810   	; 0x424 <sysclk_enable_module>
     b36:	07 c1       	rjmp	.+526    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     b38:	c0 39       	cpi	r28, 0x90	; 144
     b3a:	f3 e0       	ldi	r31, 0x03	; 3
     b3c:	df 07       	cpc	r29, r31
     b3e:	21 f4       	brne	.+8      	; 0xb48 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	6f dc       	rcall	.-1826   	; 0x424 <sysclk_enable_module>
     b46:	ff c0       	rjmp	.+510    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     b48:	c1 15       	cp	r28, r1
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	d8 07       	cpc	r29, r24
     b4e:	21 f4       	brne	.+8      	; 0xb58 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	67 dc       	rcall	.-1842   	; 0x424 <sysclk_enable_module>
     b56:	f7 c0       	rjmp	.+494    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     b58:	c0 34       	cpi	r28, 0x40	; 64
     b5a:	e2 e0       	ldi	r30, 0x02	; 2
     b5c:	de 07       	cpc	r29, r30
     b5e:	21 f4       	brne	.+8      	; 0xb68 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     b60:	62 e0       	ldi	r22, 0x02	; 2
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	5f dc       	rcall	.-1858   	; 0x424 <sysclk_enable_module>
     b66:	ef c0       	rjmp	.+478    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     b68:	c1 15       	cp	r28, r1
     b6a:	f3 e0       	ldi	r31, 0x03	; 3
     b6c:	df 07       	cpc	r29, r31
     b6e:	21 f4       	brne	.+8      	; 0xb78 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     b70:	64 e0       	ldi	r22, 0x04	; 4
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	57 dc       	rcall	.-1874   	; 0x424 <sysclk_enable_module>
     b76:	e7 c0       	rjmp	.+462    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     b78:	c0 32       	cpi	r28, 0x20	; 32
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	d8 07       	cpc	r29, r24
     b7e:	21 f4       	brne	.+8      	; 0xb88 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     b80:	64 e0       	ldi	r22, 0x04	; 4
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	4f dc       	rcall	.-1890   	; 0x424 <sysclk_enable_module>
     b86:	df c0       	rjmp	.+446    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     b88:	c1 15       	cp	r28, r1
     b8a:	e8 e0       	ldi	r30, 0x08	; 8
     b8c:	de 07       	cpc	r29, r30
     b8e:	21 f4       	brne	.+8      	; 0xb98 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	47 dc       	rcall	.-1906   	; 0x424 <sysclk_enable_module>
     b96:	d7 c0       	rjmp	.+430    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     b98:	c1 15       	cp	r28, r1
     b9a:	f9 e0       	ldi	r31, 0x09	; 9
     b9c:	df 07       	cpc	r29, r31
     b9e:	21 f4       	brne	.+8      	; 0xba8 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	3f dc       	rcall	.-1922   	; 0x424 <sysclk_enable_module>
     ba6:	cf c0       	rjmp	.+414    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     ba8:	c1 15       	cp	r28, r1
     baa:	8a e0       	ldi	r24, 0x0A	; 10
     bac:	d8 07       	cpc	r29, r24
     bae:	21 f4       	brne	.+8      	; 0xbb8 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	85 e0       	ldi	r24, 0x05	; 5
     bb4:	37 dc       	rcall	.-1938   	; 0x424 <sysclk_enable_module>
     bb6:	c7 c0       	rjmp	.+398    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     bb8:	c1 15       	cp	r28, r1
     bba:	eb e0       	ldi	r30, 0x0B	; 11
     bbc:	de 07       	cpc	r29, r30
     bbe:	21 f4       	brne	.+8      	; 0xbc8 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	86 e0       	ldi	r24, 0x06	; 6
     bc4:	2f dc       	rcall	.-1954   	; 0x424 <sysclk_enable_module>
     bc6:	bf c0       	rjmp	.+382    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     bc8:	c0 34       	cpi	r28, 0x40	; 64
     bca:	f8 e0       	ldi	r31, 0x08	; 8
     bcc:	df 07       	cpc	r29, r31
     bce:	21 f4       	brne	.+8      	; 0xbd8 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     bd0:	62 e0       	ldi	r22, 0x02	; 2
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	27 dc       	rcall	.-1970   	; 0x424 <sysclk_enable_module>
     bd6:	b7 c0       	rjmp	.+366    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     bd8:	c0 34       	cpi	r28, 0x40	; 64
     bda:	89 e0       	ldi	r24, 0x09	; 9
     bdc:	d8 07       	cpc	r29, r24
     bde:	21 f4       	brne	.+8      	; 0xbe8 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     be0:	62 e0       	ldi	r22, 0x02	; 2
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	1f dc       	rcall	.-1986   	; 0x424 <sysclk_enable_module>
     be6:	af c0       	rjmp	.+350    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     be8:	c0 34       	cpi	r28, 0x40	; 64
     bea:	ea e0       	ldi	r30, 0x0A	; 10
     bec:	de 07       	cpc	r29, r30
     bee:	21 f4       	brne	.+8      	; 0xbf8 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     bf0:	62 e0       	ldi	r22, 0x02	; 2
     bf2:	85 e0       	ldi	r24, 0x05	; 5
     bf4:	17 dc       	rcall	.-2002   	; 0x424 <sysclk_enable_module>
     bf6:	a7 c0       	rjmp	.+334    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     bf8:	c0 34       	cpi	r28, 0x40	; 64
     bfa:	fb e0       	ldi	r31, 0x0B	; 11
     bfc:	df 07       	cpc	r29, r31
     bfe:	21 f4       	brne	.+8      	; 0xc08 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     c00:	62 e0       	ldi	r22, 0x02	; 2
     c02:	86 e0       	ldi	r24, 0x06	; 6
     c04:	0f dc       	rcall	.-2018   	; 0x424 <sysclk_enable_module>
     c06:	9f c0       	rjmp	.+318    	; 0xd46 <usart_init_rs232+0x27e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     c08:	c0 39       	cpi	r28, 0x90	; 144
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	d8 07       	cpc	r29, r24
     c0e:	21 f4       	brne	.+8      	; 0xc18 <usart_init_rs232+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     c10:	64 e0       	ldi	r22, 0x04	; 4
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	07 dc       	rcall	.-2034   	; 0x424 <sysclk_enable_module>
     c16:	97 c0       	rjmp	.+302    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     c18:	c0 39       	cpi	r28, 0x90	; 144
     c1a:	e9 e0       	ldi	r30, 0x09	; 9
     c1c:	de 07       	cpc	r29, r30
     c1e:	21 f4       	brne	.+8      	; 0xc28 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     c20:	64 e0       	ldi	r22, 0x04	; 4
     c22:	84 e0       	ldi	r24, 0x04	; 4
     c24:	ff db       	rcall	.-2050   	; 0x424 <sysclk_enable_module>
     c26:	8f c0       	rjmp	.+286    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     c28:	c0 39       	cpi	r28, 0x90	; 144
     c2a:	fa e0       	ldi	r31, 0x0A	; 10
     c2c:	df 07       	cpc	r29, r31
     c2e:	21 f4       	brne	.+8      	; 0xc38 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     c30:	64 e0       	ldi	r22, 0x04	; 4
     c32:	85 e0       	ldi	r24, 0x05	; 5
     c34:	f7 db       	rcall	.-2066   	; 0x424 <sysclk_enable_module>
     c36:	87 c0       	rjmp	.+270    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     c38:	c0 39       	cpi	r28, 0x90	; 144
     c3a:	8b e0       	ldi	r24, 0x0B	; 11
     c3c:	d8 07       	cpc	r29, r24
     c3e:	21 f4       	brne	.+8      	; 0xc48 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     c40:	64 e0       	ldi	r22, 0x04	; 4
     c42:	86 e0       	ldi	r24, 0x06	; 6
     c44:	ef db       	rcall	.-2082   	; 0x424 <sysclk_enable_module>
     c46:	7f c0       	rjmp	.+254    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     c48:	c0 3c       	cpi	r28, 0xC0	; 192
     c4a:	e8 e0       	ldi	r30, 0x08	; 8
     c4c:	de 07       	cpc	r29, r30
     c4e:	21 f4       	brne	.+8      	; 0xc58 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     c50:	68 e0       	ldi	r22, 0x08	; 8
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	e7 db       	rcall	.-2098   	; 0x424 <sysclk_enable_module>
     c56:	77 c0       	rjmp	.+238    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     c58:	c0 3c       	cpi	r28, 0xC0	; 192
     c5a:	f9 e0       	ldi	r31, 0x09	; 9
     c5c:	df 07       	cpc	r29, r31
     c5e:	21 f4       	brne	.+8      	; 0xc68 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     c60:	68 e0       	ldi	r22, 0x08	; 8
     c62:	84 e0       	ldi	r24, 0x04	; 4
     c64:	df db       	rcall	.-2114   	; 0x424 <sysclk_enable_module>
     c66:	6f c0       	rjmp	.+222    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     c68:	c0 3c       	cpi	r28, 0xC0	; 192
     c6a:	8a e0       	ldi	r24, 0x0A	; 10
     c6c:	d8 07       	cpc	r29, r24
     c6e:	21 f4       	brne	.+8      	; 0xc78 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     c70:	68 e0       	ldi	r22, 0x08	; 8
     c72:	85 e0       	ldi	r24, 0x05	; 5
     c74:	d7 db       	rcall	.-2130   	; 0x424 <sysclk_enable_module>
     c76:	67 c0       	rjmp	.+206    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     c78:	c0 3c       	cpi	r28, 0xC0	; 192
     c7a:	eb e0       	ldi	r30, 0x0B	; 11
     c7c:	de 07       	cpc	r29, r30
     c7e:	21 f4       	brne	.+8      	; 0xc88 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     c80:	68 e0       	ldi	r22, 0x08	; 8
     c82:	86 e0       	ldi	r24, 0x06	; 6
     c84:	cf db       	rcall	.-2146   	; 0x424 <sysclk_enable_module>
     c86:	5f c0       	rjmp	.+190    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     c88:	c0 3a       	cpi	r28, 0xA0	; 160
     c8a:	f8 e0       	ldi	r31, 0x08	; 8
     c8c:	df 07       	cpc	r29, r31
     c8e:	21 f4       	brne	.+8      	; 0xc98 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     c90:	60 e1       	ldi	r22, 0x10	; 16
     c92:	83 e0       	ldi	r24, 0x03	; 3
     c94:	c7 db       	rcall	.-2162   	; 0x424 <sysclk_enable_module>
     c96:	57 c0       	rjmp	.+174    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     c98:	c0 3a       	cpi	r28, 0xA0	; 160
     c9a:	89 e0       	ldi	r24, 0x09	; 9
     c9c:	d8 07       	cpc	r29, r24
     c9e:	21 f4       	brne	.+8      	; 0xca8 <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     ca0:	60 e1       	ldi	r22, 0x10	; 16
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	bf db       	rcall	.-2178   	; 0x424 <sysclk_enable_module>
     ca6:	4f c0       	rjmp	.+158    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     ca8:	c0 3a       	cpi	r28, 0xA0	; 160
     caa:	ea e0       	ldi	r30, 0x0A	; 10
     cac:	de 07       	cpc	r29, r30
     cae:	21 f4       	brne	.+8      	; 0xcb8 <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     cb0:	60 e1       	ldi	r22, 0x10	; 16
     cb2:	85 e0       	ldi	r24, 0x05	; 5
     cb4:	b7 db       	rcall	.-2194   	; 0x424 <sysclk_enable_module>
     cb6:	47 c0       	rjmp	.+142    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     cb8:	c0 3a       	cpi	r28, 0xA0	; 160
     cba:	fb e0       	ldi	r31, 0x0B	; 11
     cbc:	df 07       	cpc	r29, r31
     cbe:	21 f4       	brne	.+8      	; 0xcc8 <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     cc0:	60 e1       	ldi	r22, 0x10	; 16
     cc2:	86 e0       	ldi	r24, 0x06	; 6
     cc4:	af db       	rcall	.-2210   	; 0x424 <sysclk_enable_module>
     cc6:	3f c0       	rjmp	.+126    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     cc8:	c0 3b       	cpi	r28, 0xB0	; 176
     cca:	88 e0       	ldi	r24, 0x08	; 8
     ccc:	d8 07       	cpc	r29, r24
     cce:	21 f4       	brne	.+8      	; 0xcd8 <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     cd0:	60 e2       	ldi	r22, 0x20	; 32
     cd2:	83 e0       	ldi	r24, 0x03	; 3
     cd4:	a7 db       	rcall	.-2226   	; 0x424 <sysclk_enable_module>
     cd6:	37 c0       	rjmp	.+110    	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     cd8:	c0 3b       	cpi	r28, 0xB0	; 176
     cda:	e9 e0       	ldi	r30, 0x09	; 9
     cdc:	de 07       	cpc	r29, r30
     cde:	21 f4       	brne	.+8      	; 0xce8 <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     ce0:	60 e2       	ldi	r22, 0x20	; 32
     ce2:	84 e0       	ldi	r24, 0x04	; 4
     ce4:	9f db       	rcall	.-2242   	; 0x424 <sysclk_enable_module>
     ce6:	2f c0       	rjmp	.+94     	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     ce8:	c0 3b       	cpi	r28, 0xB0	; 176
     cea:	fa e0       	ldi	r31, 0x0A	; 10
     cec:	df 07       	cpc	r29, r31
     cee:	21 f4       	brne	.+8      	; 0xcf8 <usart_init_rs232+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     cf0:	60 e2       	ldi	r22, 0x20	; 32
     cf2:	85 e0       	ldi	r24, 0x05	; 5
     cf4:	97 db       	rcall	.-2258   	; 0x424 <sysclk_enable_module>
     cf6:	27 c0       	rjmp	.+78     	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     cf8:	c0 3b       	cpi	r28, 0xB0	; 176
     cfa:	8b e0       	ldi	r24, 0x0B	; 11
     cfc:	d8 07       	cpc	r29, r24
     cfe:	21 f4       	brne	.+8      	; 0xd08 <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     d00:	60 e2       	ldi	r22, 0x20	; 32
     d02:	86 e0       	ldi	r24, 0x06	; 6
     d04:	8f db       	rcall	.-2274   	; 0x424 <sysclk_enable_module>
     d06:	1f c0       	rjmp	.+62     	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     d08:	c0 38       	cpi	r28, 0x80	; 128
     d0a:	e4 e0       	ldi	r30, 0x04	; 4
     d0c:	de 07       	cpc	r29, r30
     d0e:	21 f4       	brne	.+8      	; 0xd18 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     d10:	60 e4       	ldi	r22, 0x40	; 64
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	87 db       	rcall	.-2290   	; 0x424 <sysclk_enable_module>
     d16:	17 c0       	rjmp	.+46     	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     d18:	c0 39       	cpi	r28, 0x90	; 144
     d1a:	f4 e0       	ldi	r31, 0x04	; 4
     d1c:	df 07       	cpc	r29, r31
     d1e:	21 f4       	brne	.+8      	; 0xd28 <usart_init_rs232+0x260>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     d20:	60 e4       	ldi	r22, 0x40	; 64
     d22:	84 e0       	ldi	r24, 0x04	; 4
     d24:	7f db       	rcall	.-2306   	; 0x424 <sysclk_enable_module>
     d26:	0f c0       	rjmp	.+30     	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     d28:	c0 3a       	cpi	r28, 0xA0	; 160
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	d8 07       	cpc	r29, r24
     d2e:	21 f4       	brne	.+8      	; 0xd38 <usart_init_rs232+0x270>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     d30:	60 e4       	ldi	r22, 0x40	; 64
     d32:	85 e0       	ldi	r24, 0x05	; 5
     d34:	77 db       	rcall	.-2322   	; 0x424 <sysclk_enable_module>
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     d38:	c0 3b       	cpi	r28, 0xB0	; 176
     d3a:	e4 e0       	ldi	r30, 0x04	; 4
     d3c:	de 07       	cpc	r29, r30
     d3e:	19 f4       	brne	.+6      	; 0xd46 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     d40:	60 e4       	ldi	r22, 0x40	; 64
     d42:	86 e0       	ldi	r24, 0x06	; 6
     d44:	6f db       	rcall	.-2338   	; 0x424 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	8f 73       	andi	r24, 0x3F	; 63
     d4a:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     d4c:	f8 01       	movw	r30, r16
     d4e:	94 81       	ldd	r25, Z+4	; 0x04
     d50:	85 81       	ldd	r24, Z+5	; 0x05
     d52:	89 2b       	or	r24, r25
     d54:	96 81       	ldd	r25, Z+6	; 0x06
     d56:	91 11       	cpse	r25, r1
     d58:	98 e0       	ldi	r25, 0x08	; 8
     d5a:	89 2b       	or	r24, r25
     d5c:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     d5e:	f8 01       	movw	r30, r16
     d60:	40 81       	ld	r20, Z
     d62:	51 81       	ldd	r21, Z+1	; 0x01
     d64:	62 81       	ldd	r22, Z+2	; 0x02
     d66:	73 81       	ldd	r23, Z+3	; 0x03
     d68:	00 e0       	ldi	r16, 0x00	; 0
     d6a:	18 e4       	ldi	r17, 0x48	; 72
     d6c:	28 ee       	ldi	r18, 0xE8	; 232
     d6e:	31 e0       	ldi	r19, 0x01	; 1
     d70:	ce 01       	movw	r24, r28
     d72:	95 dd       	rcall	.-1238   	; 0x89e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	98 60       	ori	r25, 0x08	; 8
     d78:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     d7a:	9c 81       	ldd	r25, Y+4	; 0x04
     d7c:	90 61       	ori	r25, 0x10	; 16
     d7e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	08 95       	ret

00000d8a <ADC_init>:
 */ 
#include <asf.h>
#include "Drivers/ADC/ADC_init.h"
/* This driver can be used to initialize any of the ADCs */

void ADC_init(void){
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
	ADCA.CTRLA = 0b00000001; //Enables the ADC.
     d94:	c0 e0       	ldi	r28, 0x00	; 0
     d96:	d2 e0       	ldi	r29, 0x02	; 2
     d98:	ff 24       	eor	r15, r15
     d9a:	f3 94       	inc	r15
     d9c:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000; //Unsigned 12 bit mode.
     d9e:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000; //Voltage reference of Vcc/1.6V
     da0:	80 e1       	ldi	r24, 0x10	; 16
     da2:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101; //This is automatic prescalar of 128 on the clock.
     da4:	85 e0       	ldi	r24, 0x05	; 5
     da6:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     da8:	61 e2       	ldi	r22, 0x21	; 33
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	5f dd       	rcall	.-1346   	; 0x86e <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     db0:	08 2f       	mov	r16, r24
     db2:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
     db4:	10 2f       	mov	r17, r16
     db6:	00 27       	eor	r16, r16
     db8:	60 e2       	ldi	r22, 0x20	; 32
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	57 dd       	rcall	.-1362   	; 0x86e <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
     dc0:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA); //Retrieve stored calibration data about the ADC.
     dc2:	0c 87       	std	Y+12, r16	; 0x0c
     dc4:	1d 87       	std	Y+13, r17	; 0x0d

	ADCA.CH0.CTRL = 0b00000001; //Single ended input
     dc6:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000000; //Reading ADCA pin 0.
     dc8:	19 a2       	std	Y+33, r1	; 0x21
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	08 95       	ret

00000dd6 <TCD0_init>:
	TCE0.CCB = TCE0.PER - (TCE0.PER/duty_cycle);
	TCE0.CCC = TCE0.PER - (TCE0.PER/duty_cycle);
	TCE0.CCD = TCE0.PER - (TCE0.PER/duty_cycle);
}
void TCD0_init(void){
	PORTD.DIR = 0b11111111; //sets to output.
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	TCD0.CTRLA = 0b00000110; //0110 is prescalar 256.
     ddc:	e0 e0       	ldi	r30, 0x00	; 0
     dde:	f9 e0       	ldi	r31, 0x09	; 9
     de0:	86 e0       	ldi	r24, 0x06	; 6
     de2:	80 83       	st	Z, r24
	TCD0.CTRLB = 0b10110011; //OCn output pin (currently set at 0) and single slope PWM.
     de4:	83 eb       	ldi	r24, 0xB3	; 179
     de6:	81 83       	std	Z+1, r24	; 0x01
     de8:	08 95       	ret

00000dea <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     df0:	50 dd       	rcall	.-1376   	; 0x892 <usart_getchar>
     df2:	88 83       	st	Y, r24
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     dfa:	43 cd       	rjmp	.-1402   	; 0x882 <usart_putchar>
}
     dfc:	08 95       	ret

00000dfe <UART_Comms_Init>:
   to start the uart communications */

#include "conf_usart_serial.h" //Includes the information in the config file
#include <asf.h>

void UART_Comms_Init(void){
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	27 97       	sbiw	r28, 0x07	; 7
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	de bf       	out	0x3e, r29	; 62
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	//Must set TX pin as output
	PORTC.DIRSET=0b00001000;
     e0c:	e0 e4       	ldi	r30, 0x40	; 64
     e0e:	f6 e0       	ldi	r31, 0x06	; 6
     e10:	88 e0       	ldi	r24, 0x08	; 8
     e12:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET=0b00001000;
     e14:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUT=0xFF;
     e16:	8f ef       	ldi	r24, 0xFF	; 255
     e18:	84 83       	std	Z+4, r24	; 0x04
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     e1a:	80 ea       	ldi	r24, 0xA0	; 160
     e1c:	98 e0       	ldi	r25, 0x08	; 8
     e1e:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <stdio_base>
     e22:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     e26:	8d ef       	ldi	r24, 0xFD	; 253
     e28:	96 e0       	ldi	r25, 0x06	; 6
     e2a:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <ptr_put>
     e2e:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     e32:	85 ef       	ldi	r24, 0xF5	; 245
     e34:	96 e0       	ldi	r25, 0x06	; 6
     e36:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <ptr_get>
     e3a:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     e3e:	e6 e0       	ldi	r30, 0x06	; 6
     e40:	f0 e2       	ldi	r31, 0x20	; 32
     e42:	84 81       	ldd	r24, Z+4	; 0x04
     e44:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     e46:	85 81       	ldd	r24, Z+5	; 0x05
     e48:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     e4a:	86 81       	ldd	r24, Z+6	; 0x06
     e4c:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     e4e:	80 81       	ld	r24, Z
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	a2 81       	ldd	r26, Z+2	; 0x02
     e54:	b3 81       	ldd	r27, Z+3	; 0x03
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	ab 83       	std	Y+3, r26	; 0x03
     e5c:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
     e5e:	60 e1       	ldi	r22, 0x10	; 16
     e60:	83 e0       	ldi	r24, 0x03	; 3
     e62:	e0 da       	rcall	.-2624   	; 0x424 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     e64:	be 01       	movw	r22, r28
     e66:	6f 5f       	subi	r22, 0xFF	; 255
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	80 ea       	ldi	r24, 0xA0	; 160
     e6c:	98 e0       	ldi	r25, 0x08	; 8
     e6e:	2c de       	rcall	.-936    	; 0xac8 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     e70:	6e e1       	ldi	r22, 0x1E	; 30
     e72:	72 e0       	ldi	r23, 0x02	; 2
     e74:	87 e3       	ldi	r24, 0x37	; 55
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	86 d1       	rcall	.+780    	; 0x1186 <fdevopen>

	stdio_serial_init(&USARTC0, &usart_options); //ASF function that initializes the UART peripheral
}
     e7a:	27 96       	adiw	r28, 0x07	; 7
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	09 f4       	brne	.+2      	; 0xe8c <sysclk_enable_peripheral_clock+0x6>
     e8a:	35 c1       	rjmp	.+618    	; 0x10f6 <sysclk_enable_peripheral_clock+0x270>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     e8c:	80 3c       	cpi	r24, 0xC0	; 192
     e8e:	91 05       	cpc	r25, r1
     e90:	21 f4       	brne	.+8      	; 0xe9a <sysclk_enable_peripheral_clock+0x14>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     e92:	60 e1       	ldi	r22, 0x10	; 16
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	c6 ca       	rjmp	.-2676   	; 0x424 <sysclk_enable_module>
     e98:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     e9a:	80 34       	cpi	r24, 0x40	; 64
     e9c:	24 e0       	ldi	r18, 0x04	; 4
     e9e:	92 07       	cpc	r25, r18
     ea0:	21 f4       	brne	.+8      	; 0xeaa <sysclk_enable_peripheral_clock+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     ea2:	68 e0       	ldi	r22, 0x08	; 8
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	be ca       	rjmp	.-2692   	; 0x424 <sysclk_enable_module>
     ea8:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     eaa:	81 15       	cp	r24, r1
     eac:	24 e0       	ldi	r18, 0x04	; 4
     eae:	92 07       	cpc	r25, r18
     eb0:	21 f4       	brne	.+8      	; 0xeba <sysclk_enable_peripheral_clock+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     eb2:	64 e0       	ldi	r22, 0x04	; 4
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	b6 ca       	rjmp	.-2708   	; 0x424 <sysclk_enable_module>
     eb8:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     eba:	80 38       	cpi	r24, 0x80	; 128
     ebc:	21 e0       	ldi	r18, 0x01	; 1
     ebe:	92 07       	cpc	r25, r18
     ec0:	21 f4       	brne	.+8      	; 0xeca <sysclk_enable_peripheral_clock+0x44>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     ec2:	62 e0       	ldi	r22, 0x02	; 2
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	ae ca       	rjmp	.-2724   	; 0x424 <sysclk_enable_module>
     ec8:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     eca:	81 15       	cp	r24, r1
     ecc:	21 e0       	ldi	r18, 0x01	; 1
     ece:	92 07       	cpc	r25, r18
     ed0:	21 f4       	brne	.+8      	; 0xeda <sysclk_enable_peripheral_clock+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	a6 ca       	rjmp	.-2740   	; 0x424 <sysclk_enable_module>
     ed8:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     eda:	80 38       	cpi	r24, 0x80	; 128
     edc:	23 e0       	ldi	r18, 0x03	; 3
     ede:	92 07       	cpc	r25, r18
     ee0:	21 f4       	brne	.+8      	; 0xeea <sysclk_enable_peripheral_clock+0x64>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	9e ca       	rjmp	.-2756   	; 0x424 <sysclk_enable_module>
     ee8:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     eea:	80 39       	cpi	r24, 0x90	; 144
     eec:	23 e0       	ldi	r18, 0x03	; 3
     eee:	92 07       	cpc	r25, r18
     ef0:	21 f4       	brne	.+8      	; 0xefa <sysclk_enable_peripheral_clock+0x74>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	96 ca       	rjmp	.-2772   	; 0x424 <sysclk_enable_module>
     ef8:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     efa:	81 15       	cp	r24, r1
     efc:	22 e0       	ldi	r18, 0x02	; 2
     efe:	92 07       	cpc	r25, r18
     f00:	21 f4       	brne	.+8      	; 0xf0a <sysclk_enable_peripheral_clock+0x84>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     f02:	62 e0       	ldi	r22, 0x02	; 2
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	8e ca       	rjmp	.-2788   	; 0x424 <sysclk_enable_module>
     f08:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     f0a:	80 34       	cpi	r24, 0x40	; 64
     f0c:	22 e0       	ldi	r18, 0x02	; 2
     f0e:	92 07       	cpc	r25, r18
     f10:	21 f4       	brne	.+8      	; 0xf1a <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     f12:	62 e0       	ldi	r22, 0x02	; 2
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	86 ca       	rjmp	.-2804   	; 0x424 <sysclk_enable_module>
     f18:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     f1a:	81 15       	cp	r24, r1
     f1c:	23 e0       	ldi	r18, 0x03	; 3
     f1e:	92 07       	cpc	r25, r18
     f20:	21 f4       	brne	.+8      	; 0xf2a <sysclk_enable_peripheral_clock+0xa4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     f22:	64 e0       	ldi	r22, 0x04	; 4
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	7e ca       	rjmp	.-2820   	; 0x424 <sysclk_enable_module>
     f28:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     f2a:	80 32       	cpi	r24, 0x20	; 32
     f2c:	23 e0       	ldi	r18, 0x03	; 3
     f2e:	92 07       	cpc	r25, r18
     f30:	21 f4       	brne	.+8      	; 0xf3a <sysclk_enable_peripheral_clock+0xb4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     f32:	64 e0       	ldi	r22, 0x04	; 4
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	76 ca       	rjmp	.-2836   	; 0x424 <sysclk_enable_module>
     f38:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     f3a:	81 15       	cp	r24, r1
     f3c:	28 e0       	ldi	r18, 0x08	; 8
     f3e:	92 07       	cpc	r25, r18
     f40:	21 f4       	brne	.+8      	; 0xf4a <sysclk_enable_peripheral_clock+0xc4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	83 e0       	ldi	r24, 0x03	; 3
     f46:	6e ca       	rjmp	.-2852   	; 0x424 <sysclk_enable_module>
     f48:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     f4a:	81 15       	cp	r24, r1
     f4c:	29 e0       	ldi	r18, 0x09	; 9
     f4e:	92 07       	cpc	r25, r18
     f50:	21 f4       	brne	.+8      	; 0xf5a <sysclk_enable_peripheral_clock+0xd4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	84 e0       	ldi	r24, 0x04	; 4
     f56:	66 ca       	rjmp	.-2868   	; 0x424 <sysclk_enable_module>
     f58:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     f5a:	81 15       	cp	r24, r1
     f5c:	2a e0       	ldi	r18, 0x0A	; 10
     f5e:	92 07       	cpc	r25, r18
     f60:	21 f4       	brne	.+8      	; 0xf6a <sysclk_enable_peripheral_clock+0xe4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	85 e0       	ldi	r24, 0x05	; 5
     f66:	5e ca       	rjmp	.-2884   	; 0x424 <sysclk_enable_module>
     f68:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     f6a:	81 15       	cp	r24, r1
     f6c:	2b e0       	ldi	r18, 0x0B	; 11
     f6e:	92 07       	cpc	r25, r18
     f70:	21 f4       	brne	.+8      	; 0xf7a <sysclk_enable_peripheral_clock+0xf4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     f72:	61 e0       	ldi	r22, 0x01	; 1
     f74:	86 e0       	ldi	r24, 0x06	; 6
     f76:	56 ca       	rjmp	.-2900   	; 0x424 <sysclk_enable_module>
     f78:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     f7a:	80 34       	cpi	r24, 0x40	; 64
     f7c:	28 e0       	ldi	r18, 0x08	; 8
     f7e:	92 07       	cpc	r25, r18
     f80:	21 f4       	brne	.+8      	; 0xf8a <sysclk_enable_peripheral_clock+0x104>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     f82:	62 e0       	ldi	r22, 0x02	; 2
     f84:	83 e0       	ldi	r24, 0x03	; 3
     f86:	4e ca       	rjmp	.-2916   	; 0x424 <sysclk_enable_module>
     f88:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     f8a:	80 34       	cpi	r24, 0x40	; 64
     f8c:	29 e0       	ldi	r18, 0x09	; 9
     f8e:	92 07       	cpc	r25, r18
     f90:	21 f4       	brne	.+8      	; 0xf9a <sysclk_enable_peripheral_clock+0x114>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     f92:	62 e0       	ldi	r22, 0x02	; 2
     f94:	84 e0       	ldi	r24, 0x04	; 4
     f96:	46 ca       	rjmp	.-2932   	; 0x424 <sysclk_enable_module>
     f98:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     f9a:	80 34       	cpi	r24, 0x40	; 64
     f9c:	2a e0       	ldi	r18, 0x0A	; 10
     f9e:	92 07       	cpc	r25, r18
     fa0:	21 f4       	brne	.+8      	; 0xfaa <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     fa2:	62 e0       	ldi	r22, 0x02	; 2
     fa4:	85 e0       	ldi	r24, 0x05	; 5
     fa6:	3e ca       	rjmp	.-2948   	; 0x424 <sysclk_enable_module>
     fa8:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	2b e0       	ldi	r18, 0x0B	; 11
     fae:	92 07       	cpc	r25, r18
     fb0:	21 f4       	brne	.+8      	; 0xfba <sysclk_enable_peripheral_clock+0x134>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     fb2:	62 e0       	ldi	r22, 0x02	; 2
     fb4:	86 e0       	ldi	r24, 0x06	; 6
     fb6:	36 ca       	rjmp	.-2964   	; 0x424 <sysclk_enable_module>
     fb8:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     fba:	80 39       	cpi	r24, 0x90	; 144
     fbc:	28 e0       	ldi	r18, 0x08	; 8
     fbe:	92 07       	cpc	r25, r18
     fc0:	21 f4       	brne	.+8      	; 0xfca <sysclk_enable_peripheral_clock+0x144>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     fc2:	64 e0       	ldi	r22, 0x04	; 4
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	2e ca       	rjmp	.-2980   	; 0x424 <sysclk_enable_module>
     fc8:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     fca:	80 39       	cpi	r24, 0x90	; 144
     fcc:	29 e0       	ldi	r18, 0x09	; 9
     fce:	92 07       	cpc	r25, r18
     fd0:	21 f4       	brne	.+8      	; 0xfda <sysclk_enable_peripheral_clock+0x154>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     fd2:	64 e0       	ldi	r22, 0x04	; 4
     fd4:	84 e0       	ldi	r24, 0x04	; 4
     fd6:	26 ca       	rjmp	.-2996   	; 0x424 <sysclk_enable_module>
     fd8:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     fda:	80 39       	cpi	r24, 0x90	; 144
     fdc:	2a e0       	ldi	r18, 0x0A	; 10
     fde:	92 07       	cpc	r25, r18
     fe0:	21 f4       	brne	.+8      	; 0xfea <sysclk_enable_peripheral_clock+0x164>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     fe2:	64 e0       	ldi	r22, 0x04	; 4
     fe4:	85 e0       	ldi	r24, 0x05	; 5
     fe6:	1e ca       	rjmp	.-3012   	; 0x424 <sysclk_enable_module>
     fe8:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     fea:	80 39       	cpi	r24, 0x90	; 144
     fec:	2b e0       	ldi	r18, 0x0B	; 11
     fee:	92 07       	cpc	r25, r18
     ff0:	21 f4       	brne	.+8      	; 0xffa <sysclk_enable_peripheral_clock+0x174>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     ff2:	64 e0       	ldi	r22, 0x04	; 4
     ff4:	86 e0       	ldi	r24, 0x06	; 6
     ff6:	16 ca       	rjmp	.-3028   	; 0x424 <sysclk_enable_module>
     ff8:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     ffa:	80 3c       	cpi	r24, 0xC0	; 192
     ffc:	28 e0       	ldi	r18, 0x08	; 8
     ffe:	92 07       	cpc	r25, r18
    1000:	21 f4       	brne	.+8      	; 0x100a <sysclk_enable_peripheral_clock+0x184>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1002:	68 e0       	ldi	r22, 0x08	; 8
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	0e ca       	rjmp	.-3044   	; 0x424 <sysclk_enable_module>
    1008:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    100a:	80 3c       	cpi	r24, 0xC0	; 192
    100c:	29 e0       	ldi	r18, 0x09	; 9
    100e:	92 07       	cpc	r25, r18
    1010:	21 f4       	brne	.+8      	; 0x101a <sysclk_enable_peripheral_clock+0x194>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1012:	68 e0       	ldi	r22, 0x08	; 8
    1014:	84 e0       	ldi	r24, 0x04	; 4
    1016:	06 ca       	rjmp	.-3060   	; 0x424 <sysclk_enable_module>
    1018:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    101a:	80 3c       	cpi	r24, 0xC0	; 192
    101c:	2a e0       	ldi	r18, 0x0A	; 10
    101e:	92 07       	cpc	r25, r18
    1020:	21 f4       	brne	.+8      	; 0x102a <sysclk_enable_peripheral_clock+0x1a4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1022:	68 e0       	ldi	r22, 0x08	; 8
    1024:	85 e0       	ldi	r24, 0x05	; 5
    1026:	fe c9       	rjmp	.-3076   	; 0x424 <sysclk_enable_module>
    1028:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    102a:	80 3c       	cpi	r24, 0xC0	; 192
    102c:	2b e0       	ldi	r18, 0x0B	; 11
    102e:	92 07       	cpc	r25, r18
    1030:	21 f4       	brne	.+8      	; 0x103a <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1032:	68 e0       	ldi	r22, 0x08	; 8
    1034:	86 e0       	ldi	r24, 0x06	; 6
    1036:	f6 c9       	rjmp	.-3092   	; 0x424 <sysclk_enable_module>
    1038:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    103a:	80 3a       	cpi	r24, 0xA0	; 160
    103c:	28 e0       	ldi	r18, 0x08	; 8
    103e:	92 07       	cpc	r25, r18
    1040:	21 f4       	brne	.+8      	; 0x104a <sysclk_enable_peripheral_clock+0x1c4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1042:	60 e1       	ldi	r22, 0x10	; 16
    1044:	83 e0       	ldi	r24, 0x03	; 3
    1046:	ee c9       	rjmp	.-3108   	; 0x424 <sysclk_enable_module>
    1048:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    104a:	80 3a       	cpi	r24, 0xA0	; 160
    104c:	29 e0       	ldi	r18, 0x09	; 9
    104e:	92 07       	cpc	r25, r18
    1050:	21 f4       	brne	.+8      	; 0x105a <sysclk_enable_peripheral_clock+0x1d4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1052:	60 e1       	ldi	r22, 0x10	; 16
    1054:	84 e0       	ldi	r24, 0x04	; 4
    1056:	e6 c9       	rjmp	.-3124   	; 0x424 <sysclk_enable_module>
    1058:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    105a:	80 3a       	cpi	r24, 0xA0	; 160
    105c:	2a e0       	ldi	r18, 0x0A	; 10
    105e:	92 07       	cpc	r25, r18
    1060:	21 f4       	brne	.+8      	; 0x106a <sysclk_enable_peripheral_clock+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1062:	60 e1       	ldi	r22, 0x10	; 16
    1064:	85 e0       	ldi	r24, 0x05	; 5
    1066:	de c9       	rjmp	.-3140   	; 0x424 <sysclk_enable_module>
    1068:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    106a:	80 3a       	cpi	r24, 0xA0	; 160
    106c:	2b e0       	ldi	r18, 0x0B	; 11
    106e:	92 07       	cpc	r25, r18
    1070:	21 f4       	brne	.+8      	; 0x107a <sysclk_enable_peripheral_clock+0x1f4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1072:	60 e1       	ldi	r22, 0x10	; 16
    1074:	86 e0       	ldi	r24, 0x06	; 6
    1076:	d6 c9       	rjmp	.-3156   	; 0x424 <sysclk_enable_module>
    1078:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    107a:	80 3b       	cpi	r24, 0xB0	; 176
    107c:	28 e0       	ldi	r18, 0x08	; 8
    107e:	92 07       	cpc	r25, r18
    1080:	21 f4       	brne	.+8      	; 0x108a <sysclk_enable_peripheral_clock+0x204>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1082:	60 e2       	ldi	r22, 0x20	; 32
    1084:	83 e0       	ldi	r24, 0x03	; 3
    1086:	ce c9       	rjmp	.-3172   	; 0x424 <sysclk_enable_module>
    1088:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    108a:	80 3b       	cpi	r24, 0xB0	; 176
    108c:	29 e0       	ldi	r18, 0x09	; 9
    108e:	92 07       	cpc	r25, r18
    1090:	21 f4       	brne	.+8      	; 0x109a <sysclk_enable_peripheral_clock+0x214>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1092:	60 e2       	ldi	r22, 0x20	; 32
    1094:	84 e0       	ldi	r24, 0x04	; 4
    1096:	c6 c9       	rjmp	.-3188   	; 0x424 <sysclk_enable_module>
    1098:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    109a:	80 3b       	cpi	r24, 0xB0	; 176
    109c:	2a e0       	ldi	r18, 0x0A	; 10
    109e:	92 07       	cpc	r25, r18
    10a0:	21 f4       	brne	.+8      	; 0x10aa <sysclk_enable_peripheral_clock+0x224>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    10a2:	60 e2       	ldi	r22, 0x20	; 32
    10a4:	85 e0       	ldi	r24, 0x05	; 5
    10a6:	be c9       	rjmp	.-3204   	; 0x424 <sysclk_enable_module>
    10a8:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    10aa:	80 3b       	cpi	r24, 0xB0	; 176
    10ac:	2b e0       	ldi	r18, 0x0B	; 11
    10ae:	92 07       	cpc	r25, r18
    10b0:	21 f4       	brne	.+8      	; 0x10ba <sysclk_enable_peripheral_clock+0x234>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    10b2:	60 e2       	ldi	r22, 0x20	; 32
    10b4:	86 e0       	ldi	r24, 0x06	; 6
    10b6:	b6 c9       	rjmp	.-3220   	; 0x424 <sysclk_enable_module>
    10b8:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    10ba:	80 38       	cpi	r24, 0x80	; 128
    10bc:	24 e0       	ldi	r18, 0x04	; 4
    10be:	92 07       	cpc	r25, r18
    10c0:	21 f4       	brne	.+8      	; 0x10ca <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    10c2:	60 e4       	ldi	r22, 0x40	; 64
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	ae c9       	rjmp	.-3236   	; 0x424 <sysclk_enable_module>
    10c8:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    10ca:	80 39       	cpi	r24, 0x90	; 144
    10cc:	24 e0       	ldi	r18, 0x04	; 4
    10ce:	92 07       	cpc	r25, r18
    10d0:	21 f4       	brne	.+8      	; 0x10da <sysclk_enable_peripheral_clock+0x254>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    10d2:	60 e4       	ldi	r22, 0x40	; 64
    10d4:	84 e0       	ldi	r24, 0x04	; 4
    10d6:	a6 c9       	rjmp	.-3252   	; 0x424 <sysclk_enable_module>
    10d8:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    10da:	80 3a       	cpi	r24, 0xA0	; 160
    10dc:	24 e0       	ldi	r18, 0x04	; 4
    10de:	92 07       	cpc	r25, r18
    10e0:	21 f4       	brne	.+8      	; 0x10ea <sysclk_enable_peripheral_clock+0x264>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    10e2:	60 e4       	ldi	r22, 0x40	; 64
    10e4:	85 e0       	ldi	r24, 0x05	; 5
    10e6:	9e c9       	rjmp	.-3268   	; 0x424 <sysclk_enable_module>
    10e8:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    10ea:	80 3b       	cpi	r24, 0xB0	; 176
    10ec:	94 40       	sbci	r25, 0x04	; 4
    10ee:	19 f4       	brne	.+6      	; 0x10f6 <sysclk_enable_peripheral_clock+0x270>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    10f0:	60 e4       	ldi	r22, 0x40	; 64
    10f2:	86 e0       	ldi	r24, 0x06	; 6
    10f4:	97 c9       	rjmp	.-3282   	; 0x424 <sysclk_enable_module>
    10f6:	08 95       	ret

000010f8 <main>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main (void)
{
	/* Initialize the system clock, 32MHz, this also turns off all peripheral clocks */
	sysclk_init();
    10f8:	6b d9       	rcall	.-3370   	; 0x3d0 <sysclk_init>
	rtc_init();
    10fa:	a2 d8       	rcall	.-3772   	; 0x240 <rtc_init>

	/* Peripheral clock inits */
	sysclk_enable_peripheral_clock(&USARTC0); //For every peripheral, you must enable the clock like shown here. Ex. Timer counters, SPI, ADCs
    10fc:	80 ea       	ldi	r24, 0xA0	; 160
    10fe:	98 e0       	ldi	r25, 0x08	; 8
    1100:	c2 de       	rcall	.-636    	; 0xe86 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&ADCA); //Analog to Digital Converter clock initialization.
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	bf de       	rcall	.-642    	; 0xe86 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCE0); //Timer Counter clock initialization
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	9a e0       	ldi	r25, 0x0A	; 10
    110c:	bc de       	rcall	.-648    	; 0xe86 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCD0);
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	99 e0       	ldi	r25, 0x09	; 9
    1112:	b9 de       	rcall	.-654    	; 0xe86 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCC0);
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	98 e0       	ldi	r25, 0x08	; 8
    1118:	b6 de       	rcall	.-660    	; 0xe86 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&SPIC); //Serial Port Interface initialization.
    111a:	80 ec       	ldi	r24, 0xC0	; 192
    111c:	98 e0       	ldi	r25, 0x08	; 8
    111e:	b3 de       	rcall	.-666    	; 0xe86 <sysclk_enable_peripheral_clock>
	
	/* Example, Timer Counter on PORTE */

	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES); //You must have this line for every timer counter due to a flaw in the design of the chip **************************
    1120:	64 e0       	ldi	r22, 0x04	; 4
    1122:	85 e0       	ldi	r24, 0x05	; 5
    1124:	7f d9       	rcall	.-3330   	; 0x424 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1126:	64 e0       	ldi	r22, 0x04	; 4
    1128:	84 e0       	ldi	r24, 0x04	; 4
    112a:	7c d9       	rcall	.-3336   	; 0x424 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C,PR_SPI_bm);
    112c:	68 e0       	ldi	r22, 0x08	; 8
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	79 d9       	rcall	.-3342   	; 0x424 <sysclk_enable_module>
	
	/* Initializations */;
	UART_Comms_Init();
    1132:	65 de       	rcall	.-822    	; 0xdfe <UART_Comms_Init>
	SPI_init();
    1134:	46 d9       	rcall	.-3444   	; 0x3c2 <SPI_init>
	//TCE0_init(12499,100);
	TCD0_init();
    1136:	4f de       	rcall	.-866    	; 0xdd6 <TCD0_init>
	ADC_init();
    1138:	28 de       	rcall	.-944    	; 0xd8a <ADC_init>

	PORTF.DIR = 0b00000011;
    113a:	83 e0       	ldi	r24, 0x03	; 3
    113c:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
		
		/*Already written TEST cases*/
		//printf("%i\n", ADC_test(250)); //Print the value that ADC_test returns, with a 250ms delay before the print.
		//lightChase(100); //Runs function lightChase with a 50ms delay before switching each light.

	}
    1140:	ff cf       	rjmp	.-2      	; 0x1140 <main+0x48>

00001142 <__udivmodsi4>:
    1142:	a1 e2       	ldi	r26, 0x21	; 33
    1144:	1a 2e       	mov	r1, r26
    1146:	aa 1b       	sub	r26, r26
    1148:	bb 1b       	sub	r27, r27
    114a:	fd 01       	movw	r30, r26
    114c:	0d c0       	rjmp	.+26     	; 0x1168 <__udivmodsi4_ep>

0000114e <__udivmodsi4_loop>:
    114e:	aa 1f       	adc	r26, r26
    1150:	bb 1f       	adc	r27, r27
    1152:	ee 1f       	adc	r30, r30
    1154:	ff 1f       	adc	r31, r31
    1156:	a2 17       	cp	r26, r18
    1158:	b3 07       	cpc	r27, r19
    115a:	e4 07       	cpc	r30, r20
    115c:	f5 07       	cpc	r31, r21
    115e:	20 f0       	brcs	.+8      	; 0x1168 <__udivmodsi4_ep>
    1160:	a2 1b       	sub	r26, r18
    1162:	b3 0b       	sbc	r27, r19
    1164:	e4 0b       	sbc	r30, r20
    1166:	f5 0b       	sbc	r31, r21

00001168 <__udivmodsi4_ep>:
    1168:	66 1f       	adc	r22, r22
    116a:	77 1f       	adc	r23, r23
    116c:	88 1f       	adc	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	1a 94       	dec	r1
    1172:	69 f7       	brne	.-38     	; 0x114e <__udivmodsi4_loop>
    1174:	60 95       	com	r22
    1176:	70 95       	com	r23
    1178:	80 95       	com	r24
    117a:	90 95       	com	r25
    117c:	9b 01       	movw	r18, r22
    117e:	ac 01       	movw	r20, r24
    1180:	bd 01       	movw	r22, r26
    1182:	cf 01       	movw	r24, r30
    1184:	08 95       	ret

00001186 <fdevopen>:
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	31 f4       	brne	.+12     	; 0x119e <fdevopen+0x18>
    1192:	61 15       	cp	r22, r1
    1194:	71 05       	cpc	r23, r1
    1196:	19 f4       	brne	.+6      	; 0x119e <fdevopen+0x18>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	39 c0       	rjmp	.+114    	; 0x1210 <fdevopen+0x8a>
    119e:	8b 01       	movw	r16, r22
    11a0:	ec 01       	movw	r28, r24
    11a2:	6e e0       	ldi	r22, 0x0E	; 14
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	37 d0       	rcall	.+110    	; 0x121a <calloc>
    11ac:	fc 01       	movw	r30, r24
    11ae:	89 2b       	or	r24, r25
    11b0:	99 f3       	breq	.-26     	; 0x1198 <fdevopen+0x12>
    11b2:	80 e8       	ldi	r24, 0x80	; 128
    11b4:	83 83       	std	Z+3, r24	; 0x03
    11b6:	01 15       	cp	r16, r1
    11b8:	11 05       	cpc	r17, r1
    11ba:	71 f0       	breq	.+28     	; 0x11d8 <fdevopen+0x52>
    11bc:	02 87       	std	Z+10, r16	; 0x0a
    11be:	13 87       	std	Z+11, r17	; 0x0b
    11c0:	81 e8       	ldi	r24, 0x81	; 129
    11c2:	83 83       	std	Z+3, r24	; 0x03
    11c4:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <__iob>
    11c8:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <__iob+0x1>
    11cc:	89 2b       	or	r24, r25
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <fdevopen+0x52>
    11d0:	e0 93 26 20 	sts	0x2026, r30	; 0x802026 <__iob>
    11d4:	f0 93 27 20 	sts	0x2027, r31	; 0x802027 <__iob+0x1>
    11d8:	20 97       	sbiw	r28, 0x00	; 0
    11da:	c9 f0       	breq	.+50     	; 0x120e <fdevopen+0x88>
    11dc:	c0 87       	std	Z+8, r28	; 0x08
    11de:	d1 87       	std	Z+9, r29	; 0x09
    11e0:	83 81       	ldd	r24, Z+3	; 0x03
    11e2:	82 60       	ori	r24, 0x02	; 2
    11e4:	83 83       	std	Z+3, r24	; 0x03
    11e6:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <__iob+0x2>
    11ea:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <__iob+0x3>
    11ee:	89 2b       	or	r24, r25
    11f0:	71 f4       	brne	.+28     	; 0x120e <fdevopen+0x88>
    11f2:	e0 93 28 20 	sts	0x2028, r30	; 0x802028 <__iob+0x2>
    11f6:	f0 93 29 20 	sts	0x2029, r31	; 0x802029 <__iob+0x3>
    11fa:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <__iob+0x4>
    11fe:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <__iob+0x5>
    1202:	89 2b       	or	r24, r25
    1204:	21 f4       	brne	.+8      	; 0x120e <fdevopen+0x88>
    1206:	e0 93 2a 20 	sts	0x202A, r30	; 0x80202a <__iob+0x4>
    120a:	f0 93 2b 20 	sts	0x202B, r31	; 0x80202b <__iob+0x5>
    120e:	cf 01       	movw	r24, r30
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	08 95       	ret

0000121a <calloc>:
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	86 9f       	mul	r24, r22
    1224:	80 01       	movw	r16, r0
    1226:	87 9f       	mul	r24, r23
    1228:	10 0d       	add	r17, r0
    122a:	96 9f       	mul	r25, r22
    122c:	10 0d       	add	r17, r0
    122e:	11 24       	eor	r1, r1
    1230:	c8 01       	movw	r24, r16
    1232:	0d d0       	rcall	.+26     	; 0x124e <malloc>
    1234:	ec 01       	movw	r28, r24
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	21 f0       	breq	.+8      	; 0x1242 <calloc+0x28>
    123a:	a8 01       	movw	r20, r16
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	33 d1       	rcall	.+614    	; 0x14a8 <memset>
    1242:	ce 01       	movw	r24, r28
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	08 95       	ret

0000124e <malloc>:
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	91 05       	cpc	r25, r1
    1256:	10 f4       	brcc	.+4      	; 0x125c <malloc+0xe>
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <__flp>
    1260:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <__flp+0x1>
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	c0 e0       	ldi	r28, 0x00	; 0
    126a:	d0 e0       	ldi	r29, 0x00	; 0
    126c:	30 97       	sbiw	r30, 0x00	; 0
    126e:	11 f1       	breq	.+68     	; 0x12b4 <malloc+0x66>
    1270:	40 81       	ld	r20, Z
    1272:	51 81       	ldd	r21, Z+1	; 0x01
    1274:	48 17       	cp	r20, r24
    1276:	59 07       	cpc	r21, r25
    1278:	c0 f0       	brcs	.+48     	; 0x12aa <malloc+0x5c>
    127a:	48 17       	cp	r20, r24
    127c:	59 07       	cpc	r21, r25
    127e:	61 f4       	brne	.+24     	; 0x1298 <malloc+0x4a>
    1280:	82 81       	ldd	r24, Z+2	; 0x02
    1282:	93 81       	ldd	r25, Z+3	; 0x03
    1284:	20 97       	sbiw	r28, 0x00	; 0
    1286:	19 f0       	breq	.+6      	; 0x128e <malloc+0x40>
    1288:	8a 83       	std	Y+2, r24	; 0x02
    128a:	9b 83       	std	Y+3, r25	; 0x03
    128c:	2b c0       	rjmp	.+86     	; 0x12e4 <malloc+0x96>
    128e:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <__flp>
    1292:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <__flp+0x1>
    1296:	26 c0       	rjmp	.+76     	; 0x12e4 <malloc+0x96>
    1298:	21 15       	cp	r18, r1
    129a:	31 05       	cpc	r19, r1
    129c:	19 f0       	breq	.+6      	; 0x12a4 <malloc+0x56>
    129e:	42 17       	cp	r20, r18
    12a0:	53 07       	cpc	r21, r19
    12a2:	18 f4       	brcc	.+6      	; 0x12aa <malloc+0x5c>
    12a4:	9a 01       	movw	r18, r20
    12a6:	be 01       	movw	r22, r28
    12a8:	df 01       	movw	r26, r30
    12aa:	ef 01       	movw	r28, r30
    12ac:	02 80       	ldd	r0, Z+2	; 0x02
    12ae:	f3 81       	ldd	r31, Z+3	; 0x03
    12b0:	e0 2d       	mov	r30, r0
    12b2:	dc cf       	rjmp	.-72     	; 0x126c <malloc+0x1e>
    12b4:	21 15       	cp	r18, r1
    12b6:	31 05       	cpc	r19, r1
    12b8:	09 f1       	breq	.+66     	; 0x12fc <malloc+0xae>
    12ba:	28 1b       	sub	r18, r24
    12bc:	39 0b       	sbc	r19, r25
    12be:	24 30       	cpi	r18, 0x04	; 4
    12c0:	31 05       	cpc	r19, r1
    12c2:	90 f4       	brcc	.+36     	; 0x12e8 <malloc+0x9a>
    12c4:	12 96       	adiw	r26, 0x02	; 2
    12c6:	8d 91       	ld	r24, X+
    12c8:	9c 91       	ld	r25, X
    12ca:	13 97       	sbiw	r26, 0x03	; 3
    12cc:	61 15       	cp	r22, r1
    12ce:	71 05       	cpc	r23, r1
    12d0:	21 f0       	breq	.+8      	; 0x12da <malloc+0x8c>
    12d2:	fb 01       	movw	r30, r22
    12d4:	82 83       	std	Z+2, r24	; 0x02
    12d6:	93 83       	std	Z+3, r25	; 0x03
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <malloc+0x94>
    12da:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <__flp>
    12de:	90 93 2f 20 	sts	0x202F, r25	; 0x80202f <__flp+0x1>
    12e2:	fd 01       	movw	r30, r26
    12e4:	32 96       	adiw	r30, 0x02	; 2
    12e6:	44 c0       	rjmp	.+136    	; 0x1370 <malloc+0x122>
    12e8:	fd 01       	movw	r30, r26
    12ea:	e2 0f       	add	r30, r18
    12ec:	f3 1f       	adc	r31, r19
    12ee:	81 93       	st	Z+, r24
    12f0:	91 93       	st	Z+, r25
    12f2:	22 50       	subi	r18, 0x02	; 2
    12f4:	31 09       	sbc	r19, r1
    12f6:	2d 93       	st	X+, r18
    12f8:	3c 93       	st	X, r19
    12fa:	3a c0       	rjmp	.+116    	; 0x1370 <malloc+0x122>
    12fc:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    1300:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    1304:	23 2b       	or	r18, r19
    1306:	41 f4       	brne	.+16     	; 0x1318 <malloc+0xca>
    1308:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    130c:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    1310:	20 93 2c 20 	sts	0x202C, r18	; 0x80202c <__brkval>
    1314:	30 93 2d 20 	sts	0x202D, r19	; 0x80202d <__brkval+0x1>
    1318:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    131c:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    1320:	21 15       	cp	r18, r1
    1322:	31 05       	cpc	r19, r1
    1324:	41 f4       	brne	.+16     	; 0x1336 <malloc+0xe8>
    1326:	2d b7       	in	r18, 0x3d	; 61
    1328:	3e b7       	in	r19, 0x3e	; 62
    132a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    132e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    1332:	24 1b       	sub	r18, r20
    1334:	35 0b       	sbc	r19, r21
    1336:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <__brkval>
    133a:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <__brkval+0x1>
    133e:	e2 17       	cp	r30, r18
    1340:	f3 07       	cpc	r31, r19
    1342:	a0 f4       	brcc	.+40     	; 0x136c <malloc+0x11e>
    1344:	2e 1b       	sub	r18, r30
    1346:	3f 0b       	sbc	r19, r31
    1348:	28 17       	cp	r18, r24
    134a:	39 07       	cpc	r19, r25
    134c:	78 f0       	brcs	.+30     	; 0x136c <malloc+0x11e>
    134e:	ac 01       	movw	r20, r24
    1350:	4e 5f       	subi	r20, 0xFE	; 254
    1352:	5f 4f       	sbci	r21, 0xFF	; 255
    1354:	24 17       	cp	r18, r20
    1356:	35 07       	cpc	r19, r21
    1358:	48 f0       	brcs	.+18     	; 0x136c <malloc+0x11e>
    135a:	4e 0f       	add	r20, r30
    135c:	5f 1f       	adc	r21, r31
    135e:	40 93 2c 20 	sts	0x202C, r20	; 0x80202c <__brkval>
    1362:	50 93 2d 20 	sts	0x202D, r21	; 0x80202d <__brkval+0x1>
    1366:	81 93       	st	Z+, r24
    1368:	91 93       	st	Z+, r25
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <malloc+0x122>
    136c:	e0 e0       	ldi	r30, 0x00	; 0
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	cf 01       	movw	r24, r30
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <free>:
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	09 f4       	brne	.+2      	; 0x1386 <free+0xe>
    1384:	8c c0       	rjmp	.+280    	; 0x149e <free+0x126>
    1386:	fc 01       	movw	r30, r24
    1388:	32 97       	sbiw	r30, 0x02	; 2
    138a:	12 82       	std	Z+2, r1	; 0x02
    138c:	13 82       	std	Z+3, r1	; 0x03
    138e:	00 91 2e 20 	lds	r16, 0x202E	; 0x80202e <__flp>
    1392:	10 91 2f 20 	lds	r17, 0x202F	; 0x80202f <__flp+0x1>
    1396:	01 15       	cp	r16, r1
    1398:	11 05       	cpc	r17, r1
    139a:	81 f4       	brne	.+32     	; 0x13bc <free+0x44>
    139c:	20 81       	ld	r18, Z
    139e:	31 81       	ldd	r19, Z+1	; 0x01
    13a0:	82 0f       	add	r24, r18
    13a2:	93 1f       	adc	r25, r19
    13a4:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    13a8:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    13ac:	28 17       	cp	r18, r24
    13ae:	39 07       	cpc	r19, r25
    13b0:	79 f5       	brne	.+94     	; 0x1410 <free+0x98>
    13b2:	e0 93 2c 20 	sts	0x202C, r30	; 0x80202c <__brkval>
    13b6:	f0 93 2d 20 	sts	0x202D, r31	; 0x80202d <__brkval+0x1>
    13ba:	71 c0       	rjmp	.+226    	; 0x149e <free+0x126>
    13bc:	d8 01       	movw	r26, r16
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	ae 17       	cp	r26, r30
    13c4:	bf 07       	cpc	r27, r31
    13c6:	50 f4       	brcc	.+20     	; 0x13dc <free+0x64>
    13c8:	12 96       	adiw	r26, 0x02	; 2
    13ca:	2d 91       	ld	r18, X+
    13cc:	3c 91       	ld	r19, X
    13ce:	13 97       	sbiw	r26, 0x03	; 3
    13d0:	ad 01       	movw	r20, r26
    13d2:	21 15       	cp	r18, r1
    13d4:	31 05       	cpc	r19, r1
    13d6:	09 f1       	breq	.+66     	; 0x141a <free+0xa2>
    13d8:	d9 01       	movw	r26, r18
    13da:	f3 cf       	rjmp	.-26     	; 0x13c2 <free+0x4a>
    13dc:	9d 01       	movw	r18, r26
    13de:	da 01       	movw	r26, r20
    13e0:	22 83       	std	Z+2, r18	; 0x02
    13e2:	33 83       	std	Z+3, r19	; 0x03
    13e4:	60 81       	ld	r22, Z
    13e6:	71 81       	ldd	r23, Z+1	; 0x01
    13e8:	86 0f       	add	r24, r22
    13ea:	97 1f       	adc	r25, r23
    13ec:	82 17       	cp	r24, r18
    13ee:	93 07       	cpc	r25, r19
    13f0:	69 f4       	brne	.+26     	; 0x140c <free+0x94>
    13f2:	ec 01       	movw	r28, r24
    13f4:	28 81       	ld	r18, Y
    13f6:	39 81       	ldd	r19, Y+1	; 0x01
    13f8:	26 0f       	add	r18, r22
    13fa:	37 1f       	adc	r19, r23
    13fc:	2e 5f       	subi	r18, 0xFE	; 254
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	20 83       	st	Z, r18
    1402:	31 83       	std	Z+1, r19	; 0x01
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	9b 81       	ldd	r25, Y+3	; 0x03
    1408:	82 83       	std	Z+2, r24	; 0x02
    140a:	93 83       	std	Z+3, r25	; 0x03
    140c:	45 2b       	or	r20, r21
    140e:	29 f4       	brne	.+10     	; 0x141a <free+0xa2>
    1410:	e0 93 2e 20 	sts	0x202E, r30	; 0x80202e <__flp>
    1414:	f0 93 2f 20 	sts	0x202F, r31	; 0x80202f <__flp+0x1>
    1418:	42 c0       	rjmp	.+132    	; 0x149e <free+0x126>
    141a:	12 96       	adiw	r26, 0x02	; 2
    141c:	ed 93       	st	X+, r30
    141e:	fc 93       	st	X, r31
    1420:	13 97       	sbiw	r26, 0x03	; 3
    1422:	ed 01       	movw	r28, r26
    1424:	49 91       	ld	r20, Y+
    1426:	59 91       	ld	r21, Y+
    1428:	9e 01       	movw	r18, r28
    142a:	24 0f       	add	r18, r20
    142c:	35 1f       	adc	r19, r21
    142e:	e2 17       	cp	r30, r18
    1430:	f3 07       	cpc	r31, r19
    1432:	71 f4       	brne	.+28     	; 0x1450 <free+0xd8>
    1434:	80 81       	ld	r24, Z
    1436:	91 81       	ldd	r25, Z+1	; 0x01
    1438:	84 0f       	add	r24, r20
    143a:	95 1f       	adc	r25, r21
    143c:	02 96       	adiw	r24, 0x02	; 2
    143e:	8d 93       	st	X+, r24
    1440:	9c 93       	st	X, r25
    1442:	11 97       	sbiw	r26, 0x01	; 1
    1444:	82 81       	ldd	r24, Z+2	; 0x02
    1446:	93 81       	ldd	r25, Z+3	; 0x03
    1448:	12 96       	adiw	r26, 0x02	; 2
    144a:	8d 93       	st	X+, r24
    144c:	9c 93       	st	X, r25
    144e:	13 97       	sbiw	r26, 0x03	; 3
    1450:	e0 e0       	ldi	r30, 0x00	; 0
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	d8 01       	movw	r26, r16
    1456:	12 96       	adiw	r26, 0x02	; 2
    1458:	8d 91       	ld	r24, X+
    145a:	9c 91       	ld	r25, X
    145c:	13 97       	sbiw	r26, 0x03	; 3
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	19 f0       	breq	.+6      	; 0x1468 <free+0xf0>
    1462:	f8 01       	movw	r30, r16
    1464:	8c 01       	movw	r16, r24
    1466:	f6 cf       	rjmp	.-20     	; 0x1454 <free+0xdc>
    1468:	8d 91       	ld	r24, X+
    146a:	9c 91       	ld	r25, X
    146c:	98 01       	movw	r18, r16
    146e:	2e 5f       	subi	r18, 0xFE	; 254
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
    1472:	82 0f       	add	r24, r18
    1474:	93 1f       	adc	r25, r19
    1476:	20 91 2c 20 	lds	r18, 0x202C	; 0x80202c <__brkval>
    147a:	30 91 2d 20 	lds	r19, 0x202D	; 0x80202d <__brkval+0x1>
    147e:	28 17       	cp	r18, r24
    1480:	39 07       	cpc	r19, r25
    1482:	69 f4       	brne	.+26     	; 0x149e <free+0x126>
    1484:	30 97       	sbiw	r30, 0x00	; 0
    1486:	29 f4       	brne	.+10     	; 0x1492 <free+0x11a>
    1488:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <__flp>
    148c:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <__flp+0x1>
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <free+0x11e>
    1492:	12 82       	std	Z+2, r1	; 0x02
    1494:	13 82       	std	Z+3, r1	; 0x03
    1496:	00 93 2c 20 	sts	0x202C, r16	; 0x80202c <__brkval>
    149a:	10 93 2d 20 	sts	0x202D, r17	; 0x80202d <__brkval+0x1>
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	08 95       	ret

000014a8 <memset>:
    14a8:	dc 01       	movw	r26, r24
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <memset+0x6>
    14ac:	6d 93       	st	X+, r22
    14ae:	41 50       	subi	r20, 0x01	; 1
    14b0:	50 40       	sbci	r21, 0x00	; 0
    14b2:	e0 f7       	brcc	.-8      	; 0x14ac <memset+0x4>
    14b4:	08 95       	ret

000014b6 <_exit>:
    14b6:	f8 94       	cli

000014b8 <__stop_program>:
    14b8:	ff cf       	rjmp	.-2      	; 0x14b8 <__stop_program>
