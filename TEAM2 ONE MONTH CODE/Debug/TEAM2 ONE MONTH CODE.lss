
TEAM2 ONE MONTH CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000245a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00802000  0000245a  000024ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00802054  00802054  00002542  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002542  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  000025e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c051  00000000  00000000  00002988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000216d  00000000  00000000  0000e9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008d5e  00000000  00000000  00010b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a60  00000000  00000000  000198a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002b207  00000000  00000000  0001a304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003228  00000000  00000000  0004550b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00048738  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b0f1  00000000  00000000  00048a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	26 c1       	rjmp	.+588    	; 0x24e <__ctors_end>
       2:	00 00       	nop
       4:	4a c1       	rjmp	.+660    	; 0x29a <__bad_interrupt>
       6:	00 00       	nop
       8:	48 c1       	rjmp	.+656    	; 0x29a <__bad_interrupt>
       a:	00 00       	nop
       c:	46 c1       	rjmp	.+652    	; 0x29a <__bad_interrupt>
       e:	00 00       	nop
      10:	44 c1       	rjmp	.+648    	; 0x29a <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__bad_interrupt>
      16:	00 00       	nop
      18:	40 c1       	rjmp	.+640    	; 0x29a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3e c1       	rjmp	.+636    	; 0x29a <__bad_interrupt>
      1e:	00 00       	nop
      20:	3c c1       	rjmp	.+632    	; 0x29a <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__bad_interrupt>
      26:	00 00       	nop
      28:	7f c1       	rjmp	.+766    	; 0x328 <__vector_10>
      2a:	00 00       	nop
      2c:	a0 c1       	rjmp	.+832    	; 0x36e <__vector_11>
      2e:	00 00       	nop
      30:	34 c1       	rjmp	.+616    	; 0x29a <__bad_interrupt>
      32:	00 00       	nop
      34:	32 c1       	rjmp	.+612    	; 0x29a <__bad_interrupt>
      36:	00 00       	nop
      38:	30 c1       	rjmp	.+608    	; 0x29a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2e c1       	rjmp	.+604    	; 0x29a <__bad_interrupt>
      3e:	00 00       	nop
      40:	2c c1       	rjmp	.+600    	; 0x29a <__bad_interrupt>
      42:	00 00       	nop
      44:	2a c1       	rjmp	.+596    	; 0x29a <__bad_interrupt>
      46:	00 00       	nop
      48:	28 c1       	rjmp	.+592    	; 0x29a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	26 c1       	rjmp	.+588    	; 0x29a <__bad_interrupt>
      4e:	00 00       	nop
      50:	24 c1       	rjmp	.+584    	; 0x29a <__bad_interrupt>
      52:	00 00       	nop
      54:	22 c1       	rjmp	.+580    	; 0x29a <__bad_interrupt>
      56:	00 00       	nop
      58:	20 c1       	rjmp	.+576    	; 0x29a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1e c1       	rjmp	.+572    	; 0x29a <__bad_interrupt>
      5e:	00 00       	nop
      60:	1c c1       	rjmp	.+568    	; 0x29a <__bad_interrupt>
      62:	00 00       	nop
      64:	1a c1       	rjmp	.+564    	; 0x29a <__bad_interrupt>
      66:	00 00       	nop
      68:	18 c1       	rjmp	.+560    	; 0x29a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	16 c1       	rjmp	.+556    	; 0x29a <__bad_interrupt>
      6e:	00 00       	nop
      70:	14 c1       	rjmp	.+552    	; 0x29a <__bad_interrupt>
      72:	00 00       	nop
      74:	12 c1       	rjmp	.+548    	; 0x29a <__bad_interrupt>
      76:	00 00       	nop
      78:	10 c1       	rjmp	.+544    	; 0x29a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0e c1       	rjmp	.+540    	; 0x29a <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c c1       	rjmp	.+536    	; 0x29a <__bad_interrupt>
      82:	00 00       	nop
      84:	0a c1       	rjmp	.+532    	; 0x29a <__bad_interrupt>
      86:	00 00       	nop
      88:	08 c1       	rjmp	.+528    	; 0x29a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 c1       	rjmp	.+524    	; 0x29a <__bad_interrupt>
      8e:	00 00       	nop
      90:	04 c1       	rjmp	.+520    	; 0x29a <__bad_interrupt>
      92:	00 00       	nop
      94:	02 c1       	rjmp	.+516    	; 0x29a <__bad_interrupt>
      96:	00 00       	nop
      98:	00 c1       	rjmp	.+512    	; 0x29a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	08 c4       	rjmp	.+2064   	; 0x8ae <__vector_39>
      9e:	00 00       	nop
      a0:	43 c4       	rjmp	.+2182   	; 0x928 <__vector_40>
      a2:	00 00       	nop
      a4:	7e c4       	rjmp	.+2300   	; 0x9a2 <__vector_41>
      a6:	00 00       	nop
      a8:	b9 c4       	rjmp	.+2418   	; 0xa1c <__vector_42>
      aa:	00 00       	nop
      ac:	f6 c0       	rjmp	.+492    	; 0x29a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f4 c0       	rjmp	.+488    	; 0x29a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f2 c0       	rjmp	.+484    	; 0x29a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f0 c0       	rjmp	.+480    	; 0x29a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ee c0       	rjmp	.+476    	; 0x29a <__bad_interrupt>
      be:	00 00       	nop
      c0:	ec c0       	rjmp	.+472    	; 0x29a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ea c0       	rjmp	.+468    	; 0x29a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e8 c0       	rjmp	.+464    	; 0x29a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e6 c0       	rjmp	.+460    	; 0x29a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e4 c0       	rjmp	.+456    	; 0x29a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e2 c0       	rjmp	.+452    	; 0x29a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e0 c0       	rjmp	.+448    	; 0x29a <__bad_interrupt>
      da:	00 00       	nop
      dc:	de c0       	rjmp	.+444    	; 0x29a <__bad_interrupt>
      de:	00 00       	nop
      e0:	dc c0       	rjmp	.+440    	; 0x29a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	da c0       	rjmp	.+436    	; 0x29a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	d8 c0       	rjmp	.+432    	; 0x29a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	d6 c0       	rjmp	.+428    	; 0x29a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d4 c0       	rjmp	.+424    	; 0x29a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d2 c0       	rjmp	.+420    	; 0x29a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d0 c0       	rjmp	.+416    	; 0x29a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ce c0       	rjmp	.+412    	; 0x29a <__bad_interrupt>
      fe:	00 00       	nop
     100:	cc c0       	rjmp	.+408    	; 0x29a <__bad_interrupt>
     102:	00 00       	nop
     104:	ca c0       	rjmp	.+404    	; 0x29a <__bad_interrupt>
     106:	00 00       	nop
     108:	c8 c0       	rjmp	.+400    	; 0x29a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	c6 c0       	rjmp	.+396    	; 0x29a <__bad_interrupt>
     10e:	00 00       	nop
     110:	c4 c0       	rjmp	.+392    	; 0x29a <__bad_interrupt>
     112:	00 00       	nop
     114:	c2 c0       	rjmp	.+388    	; 0x29a <__bad_interrupt>
     116:	00 00       	nop
     118:	c0 c0       	rjmp	.+384    	; 0x29a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d4 c2       	rjmp	.+1448   	; 0x6c6 <__vector_71>
     11e:	00 00       	nop
     120:	0f c3       	rjmp	.+1566   	; 0x740 <__vector_72>
     122:	00 00       	nop
     124:	4a c3       	rjmp	.+1684   	; 0x7ba <__vector_73>
     126:	00 00       	nop
     128:	85 c3       	rjmp	.+1802   	; 0x834 <__vector_74>
     12a:	00 00       	nop
     12c:	b6 c0       	rjmp	.+364    	; 0x29a <__bad_interrupt>
     12e:	00 00       	nop
     130:	b4 c0       	rjmp	.+360    	; 0x29a <__bad_interrupt>
     132:	00 00       	nop
     134:	b2 c0       	rjmp	.+356    	; 0x29a <__bad_interrupt>
     136:	00 00       	nop
     138:	b0 c0       	rjmp	.+352    	; 0x29a <__bad_interrupt>
     13a:	00 00       	nop
     13c:	ae c0       	rjmp	.+348    	; 0x29a <__bad_interrupt>
     13e:	00 00       	nop
     140:	ac c0       	rjmp	.+344    	; 0x29a <__bad_interrupt>
     142:	00 00       	nop
     144:	aa c0       	rjmp	.+340    	; 0x29a <__bad_interrupt>
     146:	00 00       	nop
     148:	a8 c0       	rjmp	.+336    	; 0x29a <__bad_interrupt>
     14a:	00 00       	nop
     14c:	a6 c0       	rjmp	.+332    	; 0x29a <__bad_interrupt>
     14e:	00 00       	nop
     150:	a4 c0       	rjmp	.+328    	; 0x29a <__bad_interrupt>
     152:	00 00       	nop
     154:	a2 c0       	rjmp	.+324    	; 0x29a <__bad_interrupt>
     156:	00 00       	nop
     158:	a0 c0       	rjmp	.+320    	; 0x29a <__bad_interrupt>
     15a:	00 00       	nop
     15c:	9e c0       	rjmp	.+316    	; 0x29a <__bad_interrupt>
     15e:	00 00       	nop
     160:	9c c0       	rjmp	.+312    	; 0x29a <__bad_interrupt>
     162:	00 00       	nop
     164:	9a c0       	rjmp	.+308    	; 0x29a <__bad_interrupt>
     166:	00 00       	nop
     168:	98 c0       	rjmp	.+304    	; 0x29a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	96 c0       	rjmp	.+300    	; 0x29a <__bad_interrupt>
     16e:	00 00       	nop
     170:	94 c0       	rjmp	.+296    	; 0x29a <__bad_interrupt>
     172:	00 00       	nop
     174:	92 c0       	rjmp	.+292    	; 0x29a <__bad_interrupt>
     176:	00 00       	nop
     178:	90 c0       	rjmp	.+288    	; 0x29a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	8e c0       	rjmp	.+284    	; 0x29a <__bad_interrupt>
     17e:	00 00       	nop
     180:	8c c0       	rjmp	.+280    	; 0x29a <__bad_interrupt>
     182:	00 00       	nop
     184:	8a c0       	rjmp	.+276    	; 0x29a <__bad_interrupt>
     186:	00 00       	nop
     188:	88 c0       	rjmp	.+272    	; 0x29a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	86 c0       	rjmp	.+268    	; 0x29a <__bad_interrupt>
     18e:	00 00       	nop
     190:	84 c0       	rjmp	.+264    	; 0x29a <__bad_interrupt>
     192:	00 00       	nop
     194:	82 c0       	rjmp	.+260    	; 0x29a <__bad_interrupt>
     196:	00 00       	nop
     198:	80 c0       	rjmp	.+256    	; 0x29a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	7e c0       	rjmp	.+252    	; 0x29a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	7c c0       	rjmp	.+248    	; 0x29a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	7a c0       	rjmp	.+244    	; 0x29a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	78 c0       	rjmp	.+240    	; 0x29a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	76 c0       	rjmp	.+236    	; 0x29a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	74 c0       	rjmp	.+232    	; 0x29a <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	72 c0       	rjmp	.+228    	; 0x29a <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	70 c0       	rjmp	.+224    	; 0x29a <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	6e c0       	rjmp	.+220    	; 0x29a <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	6c c0       	rjmp	.+216    	; 0x29a <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	6a c0       	rjmp	.+212    	; 0x29a <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	68 c0       	rjmp	.+208    	; 0x29a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	66 c0       	rjmp	.+204    	; 0x29a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	64 c0       	rjmp	.+200    	; 0x29a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	62 c0       	rjmp	.+196    	; 0x29a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	60 c0       	rjmp	.+192    	; 0x29a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	5e c0       	rjmp	.+188    	; 0x29a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	5c c0       	rjmp	.+184    	; 0x29a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	5a c0       	rjmp	.+180    	; 0x29a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	58 c0       	rjmp	.+176    	; 0x29a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	56 c0       	rjmp	.+172    	; 0x29a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	54 c0       	rjmp	.+168    	; 0x29a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	08 00       	.word	0x0008	; ????
     1f6:	00 00       	nop
     1f8:	be 92       	st	-X, r11
     1fa:	24 49       	sbci	r18, 0x94	; 148
     1fc:	12 3e       	cpi	r17, 0xE2	; 226
     1fe:	ab aa       	std	Y+51, r10	; 0x33
     200:	aa 2a       	or	r10, r26
     202:	be cd       	rjmp	.-1156   	; 0xfffffd80 <__eeprom_end+0xff7efd80>
     204:	cc cc       	rjmp	.-1640   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     206:	4c 3e       	cpi	r20, 0xEC	; 236
     208:	00 00       	nop
     20a:	00 80       	ld	r0, Z
     20c:	be ab       	std	Y+54, r27	; 0x36
     20e:	aa aa       	std	Y+50, r10	; 0x32
     210:	aa 3e       	cpi	r26, 0xEA	; 234
     212:	00 00       	nop
     214:	00 00       	nop
     216:	bf 00       	.word	0x00bf	; ????
     218:	00 00       	nop
     21a:	80 3f       	cpi	r24, 0xF0	; 240
     21c:	00 00       	nop
     21e:	00 00       	nop
     220:	00 08       	sbc	r0, r0
     222:	41 78       	andi	r20, 0x81	; 129
     224:	d3 bb       	out	0x13, r29	; 19
     226:	43 87       	std	Z+11, r20	; 0x0b
     228:	d1 13       	cpse	r29, r17
     22a:	3d 19       	sub	r19, r13
     22c:	0e 3c       	cpi	r16, 0xCE	; 206
     22e:	c3 bd       	out	0x23, r28	; 35
     230:	42 82       	std	Z+2, r4	; 0x02
     232:	ad 2b       	or	r26, r29
     234:	3e 68       	ori	r19, 0x8E	; 142
     236:	ec 82       	std	Y+4, r14	; 0x04
     238:	76 be       	out	0x36, r7	; 54
     23a:	d9 8f       	std	Y+25, r29	; 0x19
     23c:	e1 a9       	ldd	r30, Z+49	; 0x31
     23e:	3e 4c       	sbci	r19, 0xCE	; 206
     240:	80 ef       	ldi	r24, 0xF0	; 240
     242:	ff be       	out	0x3f, r15	; 63
     244:	01 c4       	rjmp	.+2050   	; 0xa48 <__vector_42+0x2c>
     246:	ff 7f       	andi	r31, 0xFF	; 255
     248:	3f 00       	.word	0x003f	; ????
     24a:	00 00       	nop
	...

0000024e <__ctors_end>:
     24e:	11 24       	eor	r1, r1
     250:	1f be       	out	0x3f, r1	; 63
     252:	cf ef       	ldi	r28, 0xFF	; 255
     254:	cd bf       	out	0x3d, r28	; 61
     256:	df e3       	ldi	r29, 0x3F	; 63
     258:	de bf       	out	0x3e, r29	; 62
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	0c bf       	out	0x3c, r16	; 60
     25e:	18 be       	out	0x38, r1	; 56
     260:	19 be       	out	0x39, r1	; 57
     262:	1a be       	out	0x3a, r1	; 58
     264:	1b be       	out	0x3b, r1	; 59

00000266 <__do_copy_data>:
     266:	10 e2       	ldi	r17, 0x20	; 32
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e2       	ldi	r27, 0x20	; 32
     26c:	ea e5       	ldi	r30, 0x5A	; 90
     26e:	f4 e2       	ldi	r31, 0x24	; 36
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	0b bf       	out	0x3b, r16	; 59
     274:	02 c0       	rjmp	.+4      	; 0x27a <__do_copy_data+0x14>
     276:	07 90       	elpm	r0, Z+
     278:	0d 92       	st	X+, r0
     27a:	a4 35       	cpi	r26, 0x54	; 84
     27c:	b1 07       	cpc	r27, r17
     27e:	d9 f7       	brne	.-10     	; 0x276 <__do_copy_data+0x10>
     280:	1b be       	out	0x3b, r1	; 59

00000282 <__do_clear_bss>:
     282:	20 e2       	ldi	r18, 0x20	; 32
     284:	a4 e5       	ldi	r26, 0x54	; 84
     286:	b0 e2       	ldi	r27, 0x20	; 32
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	ad 37       	cpi	r26, 0x7D	; 125
     28e:	b2 07       	cpc	r27, r18
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
     292:	0e 94 34 0a 	call	0x1468	; 0x1468 <main>
     296:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <_exit>

0000029a <__bad_interrupt>:
     29a:	b2 ce       	rjmp	.-668    	; 0x0 <__vectors>

0000029c <rtc_get_time>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	e0 e0       	ldi	r30, 0x00	; 0
     2a2:	f4 e0       	ldi	r31, 0x04	; 4
     2a4:	81 81       	ldd	r24, Z+1	; 0x01
     2a6:	80 fd       	sbrc	r24, 0
     2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <rtc_get_time+0x8>
     2aa:	2f b7       	in	r18, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	40 91 54 20 	lds	r20, 0x2054
     2b2:	50 91 55 20 	lds	r21, 0x2055
     2b6:	80 91 08 04 	lds	r24, 0x0408
     2ba:	90 91 09 04 	lds	r25, 0x0409
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	31 f4       	brne	.+12     	; 0x2ce <rtc_get_time+0x32>
     2c2:	30 91 03 04 	lds	r19, 0x0403
     2c6:	30 ff       	sbrs	r19, 0
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <rtc_get_time+0x32>
     2ca:	4f 5f       	subi	r20, 0xFF	; 255
     2cc:	5f 4f       	sbci	r21, 0xFF	; 255
     2ce:	2f bf       	out	0x3f, r18	; 63
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	ba 01       	movw	r22, r20
     2d6:	55 27       	eor	r21, r21
     2d8:	44 27       	eor	r20, r20
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b0 e0       	ldi	r27, 0x00	; 0
     2de:	8a 01       	movw	r16, r20
     2e0:	9b 01       	movw	r18, r22
     2e2:	08 2b       	or	r16, r24
     2e4:	19 2b       	or	r17, r25
     2e6:	2a 2b       	or	r18, r26
     2e8:	3b 2b       	or	r19, r27
     2ea:	c9 01       	movw	r24, r18
     2ec:	b8 01       	movw	r22, r16
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	08 95       	ret

000002f4 <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     2f4:	64 e0       	ldi	r22, 0x04	; 4
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	af d1       	rcall	.+862    	; 0x658 <sysclk_enable_module>
	RTC.PER = 0xffff;
     2fa:	e0 e0       	ldi	r30, 0x00	; 0
     2fc:	f4 e0       	ldi	r31, 0x04	; 4
     2fe:	8f ef       	ldi	r24, 0xFF	; 255
     300:	9f ef       	ldi	r25, 0xFF	; 255
     302:	82 87       	std	Z+10, r24	; 0x0a
     304:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
     306:	10 86       	std	Z+8, r1	; 0x08
     308:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     30a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     30c:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     30e:	a3 e6       	ldi	r26, 0x63	; 99
     310:	b0 e2       	ldi	r27, 0x20	; 32
     312:	13 96       	adiw	r26, 0x03	; 3
     314:	8c 91       	ld	r24, X
     316:	13 97       	sbiw	r26, 0x03	; 3
     318:	8f 5f       	subi	r24, 0xFF	; 255
     31a:	13 96       	adiw	r26, 0x03	; 3
     31c:	8c 93       	st	X, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     31e:	9f bf       	out	0x3f, r25	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
     324:	80 83       	st	Z, r24
     326:	08 95       	ret

00000328 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     328:	1f 92       	push	r1
     32a:	0f 92       	push	r0
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	0f 92       	push	r0
     330:	11 24       	eor	r1, r1
     332:	08 b6       	in	r0, 0x38	; 56
     334:	0f 92       	push	r0
     336:	18 be       	out	0x38, r1	; 56
     338:	0b b6       	in	r0, 0x3b	; 59
     33a:	0f 92       	push	r0
     33c:	1b be       	out	0x3b, r1	; 59
     33e:	8f 93       	push	r24
     340:	9f 93       	push	r25
     342:	ef 93       	push	r30
     344:	ff 93       	push	r31
	rtc_data.counter_high++;
     346:	e4 e5       	ldi	r30, 0x54	; 84
     348:	f0 e2       	ldi	r31, 0x20	; 32
     34a:	80 81       	ld	r24, Z
     34c:	91 81       	ldd	r25, Z+1	; 0x01
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	80 83       	st	Z, r24
     352:	91 83       	std	Z+1, r25	; 0x01
}
     354:	ff 91       	pop	r31
     356:	ef 91       	pop	r30
     358:	9f 91       	pop	r25
     35a:	8f 91       	pop	r24
     35c:	0f 90       	pop	r0
     35e:	0b be       	out	0x3b, r0	; 59
     360:	0f 90       	pop	r0
     362:	08 be       	out	0x38, r0	; 56
     364:	0f 90       	pop	r0
     366:	0f be       	out	0x3f, r0	; 63
     368:	0f 90       	pop	r0
     36a:	1f 90       	pop	r1
     36c:	18 95       	reti

0000036e <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	08 b6       	in	r0, 0x38	; 56
     37a:	0f 92       	push	r0
     37c:	18 be       	out	0x38, r1	; 56
     37e:	09 b6       	in	r0, 0x39	; 57
     380:	0f 92       	push	r0
     382:	19 be       	out	0x39, r1	; 57
     384:	0b b6       	in	r0, 0x3b	; 59
     386:	0f 92       	push	r0
     388:	1b be       	out	0x3b, r1	; 59
     38a:	cf 92       	push	r12
     38c:	df 92       	push	r13
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	2f 93       	push	r18
     398:	3f 93       	push	r19
     39a:	4f 93       	push	r20
     39c:	5f 93       	push	r21
     39e:	6f 93       	push	r22
     3a0:	7f 93       	push	r23
     3a2:	8f 93       	push	r24
     3a4:	9f 93       	push	r25
     3a6:	af 93       	push	r26
     3a8:	bf 93       	push	r27
     3aa:	ef 93       	push	r30
     3ac:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     3ae:	e4 e5       	ldi	r30, 0x54	; 84
     3b0:	f0 e2       	ldi	r31, 0x20	; 32
     3b2:	80 81       	ld	r24, Z
     3b4:	91 81       	ldd	r25, Z+1	; 0x01
     3b6:	22 81       	ldd	r18, Z+2	; 0x02
     3b8:	33 81       	ldd	r19, Z+3	; 0x03
     3ba:	82 17       	cp	r24, r18
     3bc:	93 07       	cpc	r25, r19
     3be:	f0 f1       	brcs	.+124    	; 0x43c <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	20 93 02 04 	sts	0x0402, r18
		if (rtc_data.callback) {
     3c6:	e0 91 5a 20 	lds	r30, 0x205A
     3ca:	f0 91 5b 20 	lds	r31, 0x205B
     3ce:	30 97       	sbiw	r30, 0x00	; 0
     3d0:	a9 f1       	breq	.+106    	; 0x43c <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     3d2:	60 91 08 04 	lds	r22, 0x0408
     3d6:	70 91 09 04 	lds	r23, 0x0409
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     3da:	a0 e0       	ldi	r26, 0x00	; 0
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
     3de:	dc 01       	movw	r26, r24
     3e0:	99 27       	eor	r25, r25
     3e2:	88 27       	eor	r24, r24
					| RTC.CNT;
     3e4:	ab 01       	movw	r20, r22
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     3ea:	8c 01       	movw	r16, r24
     3ec:	9d 01       	movw	r18, r26
     3ee:	04 2b       	or	r16, r20
     3f0:	15 2b       	or	r17, r21
     3f2:	26 2b       	or	r18, r22
     3f4:	37 2b       	or	r19, r23
     3f6:	c9 01       	movw	r24, r18
     3f8:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     3fa:	a4 e5       	ldi	r26, 0x54	; 84
     3fc:	b0 e2       	ldi	r27, 0x20	; 32
     3fe:	12 96       	adiw	r26, 0x02	; 2
     400:	0d 91       	ld	r16, X+
     402:	1c 91       	ld	r17, X
     404:	13 97       	sbiw	r26, 0x03	; 3
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	98 01       	movw	r18, r16
     40c:	11 27       	eor	r17, r17
     40e:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     410:	14 96       	adiw	r26, 0x04	; 4
     412:	cd 90       	ld	r12, X+
     414:	dc 90       	ld	r13, X
     416:	15 97       	sbiw	r26, 0x05	; 5
     418:	e1 2c       	mov	r14, r1
     41a:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     41c:	0c 29       	or	r16, r12
     41e:	1d 29       	or	r17, r13
     420:	2e 29       	or	r18, r14
     422:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     424:	06 17       	cp	r16, r22
     426:	17 07       	cpc	r17, r23
     428:	28 07       	cpc	r18, r24
     42a:	39 07       	cpc	r19, r25
     42c:	30 f0       	brcs	.+12     	; 0x43a <__vector_11+0xcc>
				count = alarm + 1;
     42e:	c9 01       	movw	r24, r18
     430:	b8 01       	movw	r22, r16
     432:	6f 5f       	subi	r22, 0xFF	; 255
     434:	7f 4f       	sbci	r23, 0xFF	; 255
     436:	8f 4f       	sbci	r24, 0xFF	; 255
     438:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     43a:	19 95       	eicall
		}
	}
}
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	bf 91       	pop	r27
     442:	af 91       	pop	r26
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	7f 91       	pop	r23
     44a:	6f 91       	pop	r22
     44c:	5f 91       	pop	r21
     44e:	4f 91       	pop	r20
     450:	3f 91       	pop	r19
     452:	2f 91       	pop	r18
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	cf 90       	pop	r12
     460:	0f 90       	pop	r0
     462:	0b be       	out	0x3b, r0	; 59
     464:	0f 90       	pop	r0
     466:	09 be       	out	0x39, r0	; 57
     468:	0f 90       	pop	r0
     46a:	08 be       	out	0x38, r0	; 56
     46c:	0f 90       	pop	r0
     46e:	0f be       	out	0x3f, r0	; 63
     470:	0f 90       	pop	r0
     472:	1f 90       	pop	r1
     474:	18 95       	reti

00000476 <LED>:
 */ 
  /* LED method for two XPEBGR-L1-0000-00G01-SB01 LEDs */
  #include <asf.h>
  #include "Drivers/Outputs/LED/LED_driver.h"
  void LED(uint32_t period,uint8_t duty_cycle){
	  PORTD.OUT |= 0b00000010; //out, high = 1, low = 0.
     476:	e0 e6       	ldi	r30, 0x60	; 96
     478:	f6 e0       	ldi	r31, 0x06	; 6
     47a:	24 81       	ldd	r18, Z+4	; 0x04
     47c:	22 60       	ori	r18, 0x02	; 2
     47e:	24 83       	std	Z+4, r18	; 0x04

	  TCD0.PER = period; //Set period of output.
     480:	e0 e0       	ldi	r30, 0x00	; 0
     482:	f9 e0       	ldi	r31, 0x09	; 9
     484:	66 a3       	std	Z+38, r22	; 0x26
     486:	77 a3       	std	Z+39, r23	; 0x27
	  TCD0.CCB = TCD0.PER - (TCD0.PER/duty_cycle); //Set duty cycle of output for Command Capture register A.
     488:	26 a1       	ldd	r18, Z+38	; 0x26
     48a:	37 a1       	ldd	r19, Z+39	; 0x27
     48c:	86 a1       	ldd	r24, Z+38	; 0x26
     48e:	97 a1       	ldd	r25, Z+39	; 0x27
     490:	64 2f       	mov	r22, r20
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__udivmodhi4>
     498:	26 1b       	sub	r18, r22
     49a:	37 0b       	sbc	r19, r23
     49c:	22 a7       	std	Z+42, r18	; 0x2a
     49e:	33 a7       	std	Z+43, r19	; 0x2b
     4a0:	08 95       	ret

000004a2 <SPI_init>:
 */ 
 #include "Drivers/SPI/SPI_driver.h"
 #include <asf.h>

 void SPI_init(void){
	PORTC.DIR |= 0b00000000; //Set port to input.
     4a2:	e0 e4       	ldi	r30, 0x40	; 64
     4a4:	f6 e0       	ldi	r31, 0x06	; 6
     4a6:	80 81       	ld	r24, Z
     4a8:	80 83       	st	Z, r24
	SPIC.CTRL = 0b01000000; //Clock Double off, enable SPI, MSB DORD, slave mode, SPI transfer mode set to 0, prescalar set to clkper/4 (has no effect in slave mode).
     4aa:	e0 ec       	ldi	r30, 0xC0	; 192
     4ac:	f8 e0       	ldi	r31, 0x08	; 8
     4ae:	80 e4       	ldi	r24, 0x40	; 64
     4b0:	80 83       	st	Z, r24
	SPIC.INTCTRL = 0b00000011; //High level interrupt.
     4b2:	83 e0       	ldi	r24, 0x03	; 3
     4b4:	81 83       	std	Z+1, r24	; 0x01
	PMIC.CTRL = 0b00000100; //Enable high-priority interrupts.
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	80 93 a2 00 	sts	0x00A2, r24
	sei(); //Enable global interrupts.
     4bc:	78 94       	sei
     4be:	08 95       	ret

000004c0 <lightChase>:
	
	return (uint16_t)(voltage*1000); //voltage*1000 converts it into millivolts.
	//If we hadn't multiplied by 1000, the typecast would've truncated the voltage reading to just the one's place.

	delay_ms(delay);
}
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	90 93 5e 20 	sts	0x205E, r25
     4da:	a1 2c       	mov	r10, r1
     4dc:	0f 2e       	mov	r0, r31
     4de:	f8 e4       	ldi	r31, 0x48	; 72
     4e0:	bf 2e       	mov	r11, r31
     4e2:	f0 2d       	mov	r31, r0
     4e4:	0f 2e       	mov	r0, r31
     4e6:	f8 ee       	ldi	r31, 0xE8	; 232
     4e8:	cf 2e       	mov	r12, r31
     4ea:	f0 2d       	mov	r31, r0
     4ec:	dd 24       	eor	r13, r13
     4ee:	d3 94       	inc	r13
     4f0:	e1 2c       	mov	r14, r1
     4f2:	f1 2c       	mov	r15, r1
     4f4:	00 e0       	ldi	r16, 0x00	; 0
     4f6:	10 e0       	ldi	r17, 0x00	; 0
     4f8:	28 2f       	mov	r18, r24
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <__muldi3>
     50c:	29 51       	subi	r18, 0x19	; 25
     50e:	3c 4f       	sbci	r19, 0xFC	; 252
     510:	4f 4f       	sbci	r20, 0xFF	; 255
     512:	5f 4f       	sbci	r21, 0xFF	; 255
     514:	6f 4f       	sbci	r22, 0xFF	; 255
     516:	7f 4f       	sbci	r23, 0xFF	; 255
     518:	8f 4f       	sbci	r24, 0xFF	; 255
     51a:	9f 4f       	sbci	r25, 0xFF	; 255
     51c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__floatundisf>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e8       	ldi	r19, 0x80	; 128
     524:	4b eb       	ldi	r20, 0xBB	; 187
     526:	55 e4       	ldi	r21, 0x45	; 69
     528:	0e 94 cd 0a 	call	0x159a	; 0x159a <__divsf3>
     52c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__fixunssfdi>
     530:	72 2f       	mov	r23, r18
     532:	63 2f       	mov	r22, r19
     534:	94 2f       	mov	r25, r20
     536:	85 2f       	mov	r24, r21
     538:	54 2f       	mov	r21, r20
     53a:	48 2f       	mov	r20, r24
     53c:	24 e0       	ldi	r18, 0x04	; 4
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	c0 e8       	ldi	r28, 0x80	; 128
     542:	d6 e0       	ldi	r29, 0x06	; 6
     544:	07 2f       	mov	r16, r23
     546:	16 2f       	mov	r17, r22
     548:	f9 2f       	mov	r31, r25
     54a:	e8 2f       	mov	r30, r24
     54c:	80 91 5e 20 	lds	r24, 0x205E
     550:	98 2f       	mov	r25, r24
     552:	90 95       	com	r25
     554:	9c 83       	std	Y+4, r25	; 0x04
     556:	88 0f       	add	r24, r24
     558:	80 93 5e 20 	sts	0x205E, r24
     55c:	80 2f       	mov	r24, r16
     55e:	91 2f       	mov	r25, r17
     560:	af 2f       	mov	r26, r31
     562:	be 2f       	mov	r27, r30
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	a1 09       	sbc	r26, r1
     568:	b1 09       	sbc	r27, r1
     56a:	e1 f7       	brne	.-8      	; 0x564 <lightChase+0xa4>
     56c:	21 50       	subi	r18, 0x01	; 1
     56e:	31 09       	sbc	r19, r1
     570:	69 f7       	brne	.-38     	; 0x54c <lightChase+0x8c>
     572:	80 e8       	ldi	r24, 0x80	; 128
     574:	80 93 5e 20 	sts	0x205E, r24
     578:	24 e0       	ldi	r18, 0x04	; 4
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	e0 e8       	ldi	r30, 0x80	; 128
     57e:	f6 e0       	ldi	r31, 0x06	; 6
     580:	80 91 5e 20 	lds	r24, 0x205E
     584:	98 2f       	mov	r25, r24
     586:	90 95       	com	r25
     588:	94 83       	std	Z+4, r25	; 0x04
     58a:	86 95       	lsr	r24
     58c:	80 93 5e 20 	sts	0x205E, r24
     590:	87 2f       	mov	r24, r23
     592:	96 2f       	mov	r25, r22
     594:	a5 2f       	mov	r26, r21
     596:	b4 2f       	mov	r27, r20
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	a1 09       	sbc	r26, r1
     59c:	b1 09       	sbc	r27, r1
     59e:	e1 f7       	brne	.-8      	; 0x598 <lightChase+0xd8>
     5a0:	21 50       	subi	r18, 0x01	; 1
     5a2:	31 09       	sbc	r19, r1
     5a4:	69 f7       	brne	.-38     	; 0x580 <lightChase+0xc0>
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	08 95       	ret

000005bc <test>:

void test(void){
	lightChase(100);
     5bc:	84 e6       	ldi	r24, 0x64	; 100
     5be:	80 df       	rcall	.-256    	; 0x4c0 <lightChase>
	printf("Test:\n");
     5c0:	8d e0       	ldi	r24, 0x0D	; 13
     5c2:	90 e2       	ldi	r25, 0x20	; 32
     5c4:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <puts>
	printf("For time:%i\n", rtc_get_time());
     5c8:	69 de       	rcall	.-814    	; 0x29c <rtc_get_time>
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	7f 93       	push	r23
     5d0:	6f 93       	push	r22
     5d2:	83 e1       	ldi	r24, 0x13	; 19
     5d4:	90 e2       	ldi	r25, 0x20	; 32
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <printf>
	//printf("Pressure is:%i\n",getPressure());  //PRESSURE NOT WORKING
	printf("Temperature is:%i\n",getTemperature());
     5de:	15 d5       	rcall	.+2602   	; 0x100a <getTemperature>
     5e0:	9f 93       	push	r25
     5e2:	8f 93       	push	r24
     5e4:	7f 93       	push	r23
     5e6:	6f 93       	push	r22
     5e8:	80 e2       	ldi	r24, 0x20	; 32
     5ea:	90 e2       	ldi	r25, 0x20	; 32
     5ec:	9f 93       	push	r25
     5ee:	8f 93       	push	r24
     5f0:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <printf>
	//printf("Altitude is:%i\n",getAltitude());
	//printf("and velocity is:%i\n",getVelocity());
	//printf("For time:%i\nPressure is:%i\nTemperature is:%f\nAltitude is: %f\nAnd velocity is:%f\n",rtc_get_time(),getPressure(),getTemperature(),getAltitude(),getVelocity());
	lightChase(100);
     5f4:	84 e6       	ldi	r24, 0x64	; 100
     5f6:	64 df       	rcall	.-312    	; 0x4c0 <lightChase>
     5f8:	8d b7       	in	r24, 0x3d	; 61
     5fa:	9e b7       	in	r25, 0x3e	; 62
     5fc:	0c 96       	adiw	r24, 0x0c	; 12
     5fe:	8d bf       	out	0x3d, r24	; 61
     600:	9e bf       	out	0x3e, r25	; 62
     602:	08 95       	ret

00000604 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     604:	8f ef       	ldi	r24, 0xFF	; 255
     606:	80 93 70 00 	sts	0x0070, r24
     60a:	80 93 71 00 	sts	0x0071, r24
     60e:	80 93 72 00 	sts	0x0072, r24
     612:	80 93 73 00 	sts	0x0073, r24
     616:	80 93 74 00 	sts	0x0074, r24
     61a:	80 93 75 00 	sts	0x0075, r24
     61e:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     622:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     624:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     626:	e0 e5       	ldi	r30, 0x50	; 80
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	82 60       	ori	r24, 0x02	; 2
     62e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     630:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     632:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     634:	81 ff       	sbrs	r24, 1
     636:	fd cf       	rjmp	.-6      	; 0x632 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	80 e4       	ldi	r24, 0x40	; 64
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	2b d2       	rcall	.+1110   	; 0xa96 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     640:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     642:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     644:	e0 e5       	ldi	r30, 0x50	; 80
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	8e 7f       	andi	r24, 0xFE	; 254
     64c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     64e:	9f bf       	out	0x3f, r25	; 63
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 43 00 	sts	0x0043, r24
     656:	08 95       	ret

00000658 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     658:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     65a:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     65c:	e8 2f       	mov	r30, r24
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	e0 59       	subi	r30, 0x90	; 144
     662:	ff 4f       	sbci	r31, 0xFF	; 255
     664:	60 95       	com	r22
     666:	80 81       	ld	r24, Z
     668:	68 23       	and	r22, r24
     66a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     66c:	9f bf       	out	0x3f, r25	; 63
     66e:	08 95       	ret

00000670 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	1f 92       	push	r1
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     67a:	80 91 6d 20 	lds	r24, 0x206D
     67e:	90 91 6e 20 	lds	r25, 0x206E
     682:	e0 91 69 20 	lds	r30, 0x2069
     686:	f0 91 6a 20 	lds	r31, 0x206A
     68a:	be 01       	movw	r22, r28
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	19 95       	eicall
	return c;
     692:	89 81       	ldd	r24, Y+1	; 0x01
}
     694:	08 2e       	mov	r0, r24
     696:	00 0c       	add	r0, r0
     698:	99 0b       	sbc	r25, r25
     69a:	0f 90       	pop	r0
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     6a2:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     6a4:	80 91 6d 20 	lds	r24, 0x206D
     6a8:	90 91 6e 20 	lds	r25, 0x206E
     6ac:	e0 91 6b 20 	lds	r30, 0x206B
     6b0:	f0 91 6c 20 	lds	r31, 0x206C
     6b4:	19 95       	eicall
     6b6:	99 23       	and	r25, r25
     6b8:	1c f0       	brlt	.+6      	; 0x6c0 <_write+0x1e>
		return -1;
	}
	return 1;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     6c0:	8f ef       	ldi	r24, 0xFF	; 255
     6c2:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     6c4:	08 95       	ret

000006c6 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     6c6:	1f 92       	push	r1
     6c8:	0f 92       	push	r0
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	0f 92       	push	r0
     6ce:	11 24       	eor	r1, r1
     6d0:	08 b6       	in	r0, 0x38	; 56
     6d2:	0f 92       	push	r0
     6d4:	18 be       	out	0x38, r1	; 56
     6d6:	09 b6       	in	r0, 0x39	; 57
     6d8:	0f 92       	push	r0
     6da:	19 be       	out	0x39, r1	; 57
     6dc:	0b b6       	in	r0, 0x3b	; 59
     6de:	0f 92       	push	r0
     6e0:	1b be       	out	0x3b, r1	; 59
     6e2:	2f 93       	push	r18
     6e4:	3f 93       	push	r19
     6e6:	4f 93       	push	r20
     6e8:	5f 93       	push	r21
     6ea:	6f 93       	push	r22
     6ec:	7f 93       	push	r23
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	ef 93       	push	r30
     6f8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     6fa:	40 91 24 02 	lds	r20, 0x0224
     6fe:	50 91 25 02 	lds	r21, 0x0225
     702:	e0 91 71 20 	lds	r30, 0x2071
     706:	f0 91 72 20 	lds	r31, 0x2072
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	19 95       	eicall
}
     712:	ff 91       	pop	r31
     714:	ef 91       	pop	r30
     716:	bf 91       	pop	r27
     718:	af 91       	pop	r26
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	7f 91       	pop	r23
     720:	6f 91       	pop	r22
     722:	5f 91       	pop	r21
     724:	4f 91       	pop	r20
     726:	3f 91       	pop	r19
     728:	2f 91       	pop	r18
     72a:	0f 90       	pop	r0
     72c:	0b be       	out	0x3b, r0	; 59
     72e:	0f 90       	pop	r0
     730:	09 be       	out	0x39, r0	; 57
     732:	0f 90       	pop	r0
     734:	08 be       	out	0x38, r0	; 56
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     740:	1f 92       	push	r1
     742:	0f 92       	push	r0
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	08 b6       	in	r0, 0x38	; 56
     74c:	0f 92       	push	r0
     74e:	18 be       	out	0x38, r1	; 56
     750:	09 b6       	in	r0, 0x39	; 57
     752:	0f 92       	push	r0
     754:	19 be       	out	0x39, r1	; 57
     756:	0b b6       	in	r0, 0x3b	; 59
     758:	0f 92       	push	r0
     75a:	1b be       	out	0x3b, r1	; 59
     75c:	2f 93       	push	r18
     75e:	3f 93       	push	r19
     760:	4f 93       	push	r20
     762:	5f 93       	push	r21
     764:	6f 93       	push	r22
     766:	7f 93       	push	r23
     768:	8f 93       	push	r24
     76a:	9f 93       	push	r25
     76c:	af 93       	push	r26
     76e:	bf 93       	push	r27
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     774:	40 91 2c 02 	lds	r20, 0x022C
     778:	50 91 2d 02 	lds	r21, 0x022D
     77c:	e0 91 71 20 	lds	r30, 0x2071
     780:	f0 91 72 20 	lds	r31, 0x2072
     784:	62 e0       	ldi	r22, 0x02	; 2
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	19 95       	eicall
}
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0b be       	out	0x3b, r0	; 59
     7a8:	0f 90       	pop	r0
     7aa:	09 be       	out	0x39, r0	; 57
     7ac:	0f 90       	pop	r0
     7ae:	08 be       	out	0x38, r0	; 56
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     7ba:	1f 92       	push	r1
     7bc:	0f 92       	push	r0
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	0f 92       	push	r0
     7c2:	11 24       	eor	r1, r1
     7c4:	08 b6       	in	r0, 0x38	; 56
     7c6:	0f 92       	push	r0
     7c8:	18 be       	out	0x38, r1	; 56
     7ca:	09 b6       	in	r0, 0x39	; 57
     7cc:	0f 92       	push	r0
     7ce:	19 be       	out	0x39, r1	; 57
     7d0:	0b b6       	in	r0, 0x3b	; 59
     7d2:	0f 92       	push	r0
     7d4:	1b be       	out	0x3b, r1	; 59
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     7ee:	40 91 34 02 	lds	r20, 0x0234
     7f2:	50 91 35 02 	lds	r21, 0x0235
     7f6:	e0 91 71 20 	lds	r30, 0x2071
     7fa:	f0 91 72 20 	lds	r31, 0x2072
     7fe:	64 e0       	ldi	r22, 0x04	; 4
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	19 95       	eicall
}
     806:	ff 91       	pop	r31
     808:	ef 91       	pop	r30
     80a:	bf 91       	pop	r27
     80c:	af 91       	pop	r26
     80e:	9f 91       	pop	r25
     810:	8f 91       	pop	r24
     812:	7f 91       	pop	r23
     814:	6f 91       	pop	r22
     816:	5f 91       	pop	r21
     818:	4f 91       	pop	r20
     81a:	3f 91       	pop	r19
     81c:	2f 91       	pop	r18
     81e:	0f 90       	pop	r0
     820:	0b be       	out	0x3b, r0	; 59
     822:	0f 90       	pop	r0
     824:	09 be       	out	0x39, r0	; 57
     826:	0f 90       	pop	r0
     828:	08 be       	out	0x38, r0	; 56
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	08 b6       	in	r0, 0x38	; 56
     840:	0f 92       	push	r0
     842:	18 be       	out	0x38, r1	; 56
     844:	09 b6       	in	r0, 0x39	; 57
     846:	0f 92       	push	r0
     848:	19 be       	out	0x39, r1	; 57
     84a:	0b b6       	in	r0, 0x3b	; 59
     84c:	0f 92       	push	r0
     84e:	1b be       	out	0x3b, r1	; 59
     850:	2f 93       	push	r18
     852:	3f 93       	push	r19
     854:	4f 93       	push	r20
     856:	5f 93       	push	r21
     858:	6f 93       	push	r22
     85a:	7f 93       	push	r23
     85c:	8f 93       	push	r24
     85e:	9f 93       	push	r25
     860:	af 93       	push	r26
     862:	bf 93       	push	r27
     864:	ef 93       	push	r30
     866:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     868:	40 91 3c 02 	lds	r20, 0x023C
     86c:	50 91 3d 02 	lds	r21, 0x023D
     870:	e0 91 71 20 	lds	r30, 0x2071
     874:	f0 91 72 20 	lds	r31, 0x2072
     878:	68 e0       	ldi	r22, 0x08	; 8
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	92 e0       	ldi	r25, 0x02	; 2
     87e:	19 95       	eicall
}
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	bf 91       	pop	r27
     886:	af 91       	pop	r26
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	7f 91       	pop	r23
     88e:	6f 91       	pop	r22
     890:	5f 91       	pop	r21
     892:	4f 91       	pop	r20
     894:	3f 91       	pop	r19
     896:	2f 91       	pop	r18
     898:	0f 90       	pop	r0
     89a:	0b be       	out	0x3b, r0	; 59
     89c:	0f 90       	pop	r0
     89e:	09 be       	out	0x39, r0	; 57
     8a0:	0f 90       	pop	r0
     8a2:	08 be       	out	0x38, r0	; 56
     8a4:	0f 90       	pop	r0
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	0f 90       	pop	r0
     8aa:	1f 90       	pop	r1
     8ac:	18 95       	reti

000008ae <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	11 24       	eor	r1, r1
     8b8:	08 b6       	in	r0, 0x38	; 56
     8ba:	0f 92       	push	r0
     8bc:	18 be       	out	0x38, r1	; 56
     8be:	09 b6       	in	r0, 0x39	; 57
     8c0:	0f 92       	push	r0
     8c2:	19 be       	out	0x39, r1	; 57
     8c4:	0b b6       	in	r0, 0x3b	; 59
     8c6:	0f 92       	push	r0
     8c8:	1b be       	out	0x3b, r1	; 59
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	4f 93       	push	r20
     8d0:	5f 93       	push	r21
     8d2:	6f 93       	push	r22
     8d4:	7f 93       	push	r23
     8d6:	8f 93       	push	r24
     8d8:	9f 93       	push	r25
     8da:	af 93       	push	r26
     8dc:	bf 93       	push	r27
     8de:	ef 93       	push	r30
     8e0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     8e2:	40 91 64 02 	lds	r20, 0x0264
     8e6:	50 91 65 02 	lds	r21, 0x0265
     8ea:	e0 91 6f 20 	lds	r30, 0x206F
     8ee:	f0 91 70 20 	lds	r31, 0x2070
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	80 e4       	ldi	r24, 0x40	; 64
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	19 95       	eicall
}
     8fa:	ff 91       	pop	r31
     8fc:	ef 91       	pop	r30
     8fe:	bf 91       	pop	r27
     900:	af 91       	pop	r26
     902:	9f 91       	pop	r25
     904:	8f 91       	pop	r24
     906:	7f 91       	pop	r23
     908:	6f 91       	pop	r22
     90a:	5f 91       	pop	r21
     90c:	4f 91       	pop	r20
     90e:	3f 91       	pop	r19
     910:	2f 91       	pop	r18
     912:	0f 90       	pop	r0
     914:	0b be       	out	0x3b, r0	; 59
     916:	0f 90       	pop	r0
     918:	09 be       	out	0x39, r0	; 57
     91a:	0f 90       	pop	r0
     91c:	08 be       	out	0x38, r0	; 56
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f 90       	pop	r0
     924:	1f 90       	pop	r1
     926:	18 95       	reti

00000928 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	08 b6       	in	r0, 0x38	; 56
     934:	0f 92       	push	r0
     936:	18 be       	out	0x38, r1	; 56
     938:	09 b6       	in	r0, 0x39	; 57
     93a:	0f 92       	push	r0
     93c:	19 be       	out	0x39, r1	; 57
     93e:	0b b6       	in	r0, 0x3b	; 59
     940:	0f 92       	push	r0
     942:	1b be       	out	0x3b, r1	; 59
     944:	2f 93       	push	r18
     946:	3f 93       	push	r19
     948:	4f 93       	push	r20
     94a:	5f 93       	push	r21
     94c:	6f 93       	push	r22
     94e:	7f 93       	push	r23
     950:	8f 93       	push	r24
     952:	9f 93       	push	r25
     954:	af 93       	push	r26
     956:	bf 93       	push	r27
     958:	ef 93       	push	r30
     95a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     95c:	40 91 6c 02 	lds	r20, 0x026C
     960:	50 91 6d 02 	lds	r21, 0x026D
     964:	e0 91 6f 20 	lds	r30, 0x206F
     968:	f0 91 70 20 	lds	r31, 0x2070
     96c:	62 e0       	ldi	r22, 0x02	; 2
     96e:	80 e4       	ldi	r24, 0x40	; 64
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	19 95       	eicall
}
     974:	ff 91       	pop	r31
     976:	ef 91       	pop	r30
     978:	bf 91       	pop	r27
     97a:	af 91       	pop	r26
     97c:	9f 91       	pop	r25
     97e:	8f 91       	pop	r24
     980:	7f 91       	pop	r23
     982:	6f 91       	pop	r22
     984:	5f 91       	pop	r21
     986:	4f 91       	pop	r20
     988:	3f 91       	pop	r19
     98a:	2f 91       	pop	r18
     98c:	0f 90       	pop	r0
     98e:	0b be       	out	0x3b, r0	; 59
     990:	0f 90       	pop	r0
     992:	09 be       	out	0x39, r0	; 57
     994:	0f 90       	pop	r0
     996:	08 be       	out	0x38, r0	; 56
     998:	0f 90       	pop	r0
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	0f 90       	pop	r0
     99e:	1f 90       	pop	r1
     9a0:	18 95       	reti

000009a2 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     9a2:	1f 92       	push	r1
     9a4:	0f 92       	push	r0
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	0f 92       	push	r0
     9aa:	11 24       	eor	r1, r1
     9ac:	08 b6       	in	r0, 0x38	; 56
     9ae:	0f 92       	push	r0
     9b0:	18 be       	out	0x38, r1	; 56
     9b2:	09 b6       	in	r0, 0x39	; 57
     9b4:	0f 92       	push	r0
     9b6:	19 be       	out	0x39, r1	; 57
     9b8:	0b b6       	in	r0, 0x3b	; 59
     9ba:	0f 92       	push	r0
     9bc:	1b be       	out	0x3b, r1	; 59
     9be:	2f 93       	push	r18
     9c0:	3f 93       	push	r19
     9c2:	4f 93       	push	r20
     9c4:	5f 93       	push	r21
     9c6:	6f 93       	push	r22
     9c8:	7f 93       	push	r23
     9ca:	8f 93       	push	r24
     9cc:	9f 93       	push	r25
     9ce:	af 93       	push	r26
     9d0:	bf 93       	push	r27
     9d2:	ef 93       	push	r30
     9d4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     9d6:	40 91 74 02 	lds	r20, 0x0274
     9da:	50 91 75 02 	lds	r21, 0x0275
     9de:	e0 91 6f 20 	lds	r30, 0x206F
     9e2:	f0 91 70 20 	lds	r31, 0x2070
     9e6:	64 e0       	ldi	r22, 0x04	; 4
     9e8:	80 e4       	ldi	r24, 0x40	; 64
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	19 95       	eicall
}
     9ee:	ff 91       	pop	r31
     9f0:	ef 91       	pop	r30
     9f2:	bf 91       	pop	r27
     9f4:	af 91       	pop	r26
     9f6:	9f 91       	pop	r25
     9f8:	8f 91       	pop	r24
     9fa:	7f 91       	pop	r23
     9fc:	6f 91       	pop	r22
     9fe:	5f 91       	pop	r21
     a00:	4f 91       	pop	r20
     a02:	3f 91       	pop	r19
     a04:	2f 91       	pop	r18
     a06:	0f 90       	pop	r0
     a08:	0b be       	out	0x3b, r0	; 59
     a0a:	0f 90       	pop	r0
     a0c:	09 be       	out	0x39, r0	; 57
     a0e:	0f 90       	pop	r0
     a10:	08 be       	out	0x38, r0	; 56
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f 90       	pop	r0
     a18:	1f 90       	pop	r1
     a1a:	18 95       	reti

00000a1c <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     a1c:	1f 92       	push	r1
     a1e:	0f 92       	push	r0
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	0f 92       	push	r0
     a24:	11 24       	eor	r1, r1
     a26:	08 b6       	in	r0, 0x38	; 56
     a28:	0f 92       	push	r0
     a2a:	18 be       	out	0x38, r1	; 56
     a2c:	09 b6       	in	r0, 0x39	; 57
     a2e:	0f 92       	push	r0
     a30:	19 be       	out	0x39, r1	; 57
     a32:	0b b6       	in	r0, 0x3b	; 59
     a34:	0f 92       	push	r0
     a36:	1b be       	out	0x3b, r1	; 59
     a38:	2f 93       	push	r18
     a3a:	3f 93       	push	r19
     a3c:	4f 93       	push	r20
     a3e:	5f 93       	push	r21
     a40:	6f 93       	push	r22
     a42:	7f 93       	push	r23
     a44:	8f 93       	push	r24
     a46:	9f 93       	push	r25
     a48:	af 93       	push	r26
     a4a:	bf 93       	push	r27
     a4c:	ef 93       	push	r30
     a4e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     a50:	40 91 7c 02 	lds	r20, 0x027C
     a54:	50 91 7d 02 	lds	r21, 0x027D
     a58:	e0 91 6f 20 	lds	r30, 0x206F
     a5c:	f0 91 70 20 	lds	r31, 0x2070
     a60:	68 e0       	ldi	r22, 0x08	; 8
     a62:	80 e4       	ldi	r24, 0x40	; 64
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	19 95       	eicall
}
     a68:	ff 91       	pop	r31
     a6a:	ef 91       	pop	r30
     a6c:	bf 91       	pop	r27
     a6e:	af 91       	pop	r26
     a70:	9f 91       	pop	r25
     a72:	8f 91       	pop	r24
     a74:	7f 91       	pop	r23
     a76:	6f 91       	pop	r22
     a78:	5f 91       	pop	r21
     a7a:	4f 91       	pop	r20
     a7c:	3f 91       	pop	r19
     a7e:	2f 91       	pop	r18
     a80:	0f 90       	pop	r0
     a82:	0b be       	out	0x3b, r0	; 59
     a84:	0f 90       	pop	r0
     a86:	09 be       	out	0x39, r0	; 57
     a88:	0f 90       	pop	r0
     a8a:	08 be       	out	0x38, r0	; 56
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	0f 90       	pop	r0
     a92:	1f 90       	pop	r1
     a94:	18 95       	reti

00000a96 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     a96:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     a98:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     a9a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     a9c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     a9e:	60 83       	st	Z, r22
	ret                             // Return to caller
     aa0:	08 95       	ret

00000aa2 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     aa2:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
     aa6:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     aa8:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     aaa:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
     aae:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     ab0:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     ab4:	08 95       	ret

00000ab6 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     ab6:	fc 01       	movw	r30, r24
     ab8:	91 81       	ldd	r25, Z+1	; 0x01
     aba:	95 ff       	sbrs	r25, 5
     abc:	fd cf       	rjmp	.-6      	; 0xab8 <usart_putchar+0x2>
     abe:	60 83       	st	Z, r22
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	08 95       	ret

00000ac6 <usart_getchar>:
     ac6:	fc 01       	movw	r30, r24
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	99 23       	and	r25, r25
     acc:	ec f7       	brge	.-6      	; 0xac8 <usart_getchar+0x2>
     ace:	80 81       	ld	r24, Z
     ad0:	08 95       	ret

00000ad2 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ad2:	2f 92       	push	r2
     ad4:	3f 92       	push	r3
     ad6:	4f 92       	push	r4
     ad8:	5f 92       	push	r5
     ada:	6f 92       	push	r6
     adc:	7f 92       	push	r7
     ade:	8f 92       	push	r8
     ae0:	9f 92       	push	r9
     ae2:	af 92       	push	r10
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	1c 01       	movw	r2, r24
     af6:	2a 01       	movw	r4, r20
     af8:	3b 01       	movw	r6, r22
     afa:	48 01       	movw	r8, r16
     afc:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     afe:	d9 01       	movw	r26, r18
     b00:	c8 01       	movw	r24, r16
     b02:	68 94       	set
     b04:	12 f8       	bld	r1, 2
     b06:	b6 95       	lsr	r27
     b08:	a7 95       	ror	r26
     b0a:	97 95       	ror	r25
     b0c:	87 95       	ror	r24
     b0e:	16 94       	lsr	r1
     b10:	d1 f7       	brne	.-12     	; 0xb06 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     b12:	b9 01       	movw	r22, r18
     b14:	a8 01       	movw	r20, r16
     b16:	03 2e       	mov	r0, r19
     b18:	36 e1       	ldi	r19, 0x16	; 22
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	3a 95       	dec	r19
     b24:	d1 f7       	brne	.-12     	; 0xb1a <usart_set_baudrate+0x48>
     b26:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     b28:	f1 01       	movw	r30, r2
     b2a:	24 81       	ldd	r18, Z+4	; 0x04
     b2c:	22 fd       	sbrc	r18, 2
     b2e:	08 c0       	rjmp	.+16     	; 0xb40 <usart_set_baudrate+0x6e>
		max_rate /= 2;
     b30:	b6 95       	lsr	r27
     b32:	a7 95       	ror	r26
     b34:	97 95       	ror	r25
     b36:	87 95       	ror	r24
		min_rate /= 2;
     b38:	76 95       	lsr	r23
     b3a:	67 95       	ror	r22
     b3c:	57 95       	ror	r21
     b3e:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     b40:	84 15       	cp	r24, r4
     b42:	95 05       	cpc	r25, r5
     b44:	a6 05       	cpc	r26, r6
     b46:	b7 05       	cpc	r27, r7
     b48:	08 f4       	brcc	.+2      	; 0xb4c <usart_set_baudrate+0x7a>
     b4a:	aa c0       	rjmp	.+340    	; 0xca0 <usart_set_baudrate+0x1ce>
     b4c:	44 16       	cp	r4, r20
     b4e:	55 06       	cpc	r5, r21
     b50:	66 06       	cpc	r6, r22
     b52:	77 06       	cpc	r7, r23
     b54:	08 f4       	brcc	.+2      	; 0xb58 <usart_set_baudrate+0x86>
     b56:	a6 c0       	rjmp	.+332    	; 0xca4 <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     b58:	f1 01       	movw	r30, r2
     b5a:	84 81       	ldd	r24, Z+4	; 0x04
     b5c:	82 fd       	sbrc	r24, 2
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <usart_set_baudrate+0x96>
		baud *= 2;
     b60:	44 0c       	add	r4, r4
     b62:	55 1c       	adc	r5, r5
     b64:	66 1c       	adc	r6, r6
     b66:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     b68:	c5 01       	movw	r24, r10
     b6a:	b4 01       	movw	r22, r8
     b6c:	a3 01       	movw	r20, r6
     b6e:	92 01       	movw	r18, r4
     b70:	81 d7       	rcall	.+3842   	; 0x1a74 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     b72:	2f 3f       	cpi	r18, 0xFF	; 255
     b74:	31 05       	cpc	r19, r1
     b76:	41 05       	cpc	r20, r1
     b78:	51 05       	cpc	r21, r1
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <usart_set_baudrate+0xac>
     b7c:	95 c0       	rjmp	.+298    	; 0xca8 <usart_set_baudrate+0x1d6>
     b7e:	c1 2c       	mov	r12, r1
     b80:	d1 2c       	mov	r13, r1
     b82:	76 01       	movw	r14, r12
     b84:	ca 94       	dec	r12
     b86:	c9 ef       	ldi	r28, 0xF9	; 249
     b88:	05 c0       	rjmp	.+10     	; 0xb94 <usart_set_baudrate+0xc2>
     b8a:	2c 15       	cp	r18, r12
     b8c:	3d 05       	cpc	r19, r13
     b8e:	4e 05       	cpc	r20, r14
     b90:	5f 05       	cpc	r21, r15
     b92:	68 f0       	brcs	.+26     	; 0xbae <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
     b94:	cc 0c       	add	r12, r12
     b96:	dd 1c       	adc	r13, r13
     b98:	ee 1c       	adc	r14, r14
     b9a:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     b9c:	cd 3f       	cpi	r28, 0xFD	; 253
     b9e:	14 f4       	brge	.+4      	; 0xba4 <usart_set_baudrate+0xd2>
			limit |= 1;
     ba0:	68 94       	set
     ba2:	c0 f8       	bld	r12, 0
     ba4:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     ba6:	c7 30       	cpi	r28, 0x07	; 7
     ba8:	81 f7       	brne	.-32     	; 0xb8a <usart_set_baudrate+0xb8>
     baa:	8c 2f       	mov	r24, r28
     bac:	54 c0       	rjmp	.+168    	; 0xc56 <usart_set_baudrate+0x184>
     bae:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     bb0:	cc 23       	and	r28, r28
     bb2:	0c f0       	brlt	.+2      	; 0xbb6 <usart_set_baudrate+0xe4>
     bb4:	50 c0       	rjmp	.+160    	; 0xc56 <usart_set_baudrate+0x184>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     bb6:	d3 01       	movw	r26, r6
     bb8:	c2 01       	movw	r24, r4
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	aa 1f       	adc	r26, r26
     bc0:	bb 1f       	adc	r27, r27
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	aa 1f       	adc	r26, r26
     bc8:	bb 1f       	adc	r27, r27
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	aa 1f       	adc	r26, r26
     bd0:	bb 1f       	adc	r27, r27
     bd2:	85 01       	movw	r16, r10
     bd4:	74 01       	movw	r14, r8
     bd6:	e8 1a       	sub	r14, r24
     bd8:	f9 0a       	sbc	r15, r25
     bda:	0a 0b       	sbc	r16, r26
     bdc:	1b 0b       	sbc	r17, r27
     bde:	d8 01       	movw	r26, r16
     be0:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     be2:	ce 3f       	cpi	r28, 0xFE	; 254
     be4:	ec f4       	brge	.+58     	; 0xc20 <usart_set_baudrate+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     be6:	2d ef       	ldi	r18, 0xFD	; 253
     be8:	3f ef       	ldi	r19, 0xFF	; 255
     bea:	2c 1b       	sub	r18, r28
     bec:	31 09       	sbc	r19, r1
     bee:	c7 fd       	sbrc	r28, 7
     bf0:	33 95       	inc	r19
     bf2:	04 c0       	rjmp	.+8      	; 0xbfc <usart_set_baudrate+0x12a>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	aa 1f       	adc	r26, r26
     bfa:	bb 1f       	adc	r27, r27
     bfc:	2a 95       	dec	r18
     bfe:	d2 f7       	brpl	.-12     	; 0xbf4 <usart_set_baudrate+0x122>
     c00:	73 01       	movw	r14, r6
     c02:	62 01       	movw	r12, r4
     c04:	f6 94       	lsr	r15
     c06:	e7 94       	ror	r14
     c08:	d7 94       	ror	r13
     c0a:	c7 94       	ror	r12
     c0c:	bc 01       	movw	r22, r24
     c0e:	cd 01       	movw	r24, r26
     c10:	6c 0d       	add	r22, r12
     c12:	7d 1d       	adc	r23, r13
     c14:	8e 1d       	adc	r24, r14
     c16:	9f 1d       	adc	r25, r15
     c18:	a3 01       	movw	r20, r6
     c1a:	92 01       	movw	r18, r4
     c1c:	2b d7       	rcall	.+3670   	; 0x1a74 <__udivmodsi4>
     c1e:	36 c0       	rjmp	.+108    	; 0xc8c <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
     c20:	23 e0       	ldi	r18, 0x03	; 3
     c22:	2c 0f       	add	r18, r28
     c24:	83 01       	movw	r16, r6
     c26:	72 01       	movw	r14, r4
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <usart_set_baudrate+0x160>
     c2a:	ee 0c       	add	r14, r14
     c2c:	ff 1c       	adc	r15, r15
     c2e:	00 1f       	adc	r16, r16
     c30:	11 1f       	adc	r17, r17
     c32:	2a 95       	dec	r18
     c34:	d2 f7       	brpl	.-12     	; 0xc2a <usart_set_baudrate+0x158>
     c36:	a8 01       	movw	r20, r16
     c38:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
     c3a:	67 01       	movw	r12, r14
     c3c:	78 01       	movw	r14, r16
     c3e:	f6 94       	lsr	r15
     c40:	e7 94       	ror	r14
     c42:	d7 94       	ror	r13
     c44:	c7 94       	ror	r12
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	6c 0d       	add	r22, r12
     c4c:	7d 1d       	adc	r23, r13
     c4e:	8e 1d       	adc	r24, r14
     c50:	9f 1d       	adc	r25, r15
     c52:	10 d7       	rcall	.+3616   	; 0x1a74 <__udivmodsi4>
     c54:	1b c0       	rjmp	.+54     	; 0xc8c <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     c56:	8d 5f       	subi	r24, 0xFD	; 253
     c58:	a3 01       	movw	r20, r6
     c5a:	92 01       	movw	r18, r4
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <usart_set_baudrate+0x194>
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	44 1f       	adc	r20, r20
     c64:	55 1f       	adc	r21, r21
     c66:	8a 95       	dec	r24
     c68:	d2 f7       	brpl	.-12     	; 0xc5e <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
     c6a:	da 01       	movw	r26, r20
     c6c:	c9 01       	movw	r24, r18
     c6e:	b6 95       	lsr	r27
     c70:	a7 95       	ror	r26
     c72:	97 95       	ror	r25
     c74:	87 95       	ror	r24
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	68 0d       	add	r22, r8
     c7c:	79 1d       	adc	r23, r9
     c7e:	8a 1d       	adc	r24, r10
     c80:	9b 1d       	adc	r25, r11
     c82:	f8 d6       	rcall	.+3568   	; 0x1a74 <__udivmodsi4>
     c84:	21 50       	subi	r18, 0x01	; 1
     c86:	31 09       	sbc	r19, r1
     c88:	41 09       	sbc	r20, r1
     c8a:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     c8c:	83 2f       	mov	r24, r19
     c8e:	8f 70       	andi	r24, 0x0F	; 15
     c90:	c2 95       	swap	r28
     c92:	c0 7f       	andi	r28, 0xF0	; 240
     c94:	c8 2b       	or	r28, r24
     c96:	f1 01       	movw	r30, r2
     c98:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     c9a:	26 83       	std	Z+6, r18	; 0x06

	return true;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	1c c0       	rjmp	.+56     	; 0xcd8 <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	1a c0       	rjmp	.+52     	; 0xcd8 <usart_set_baudrate+0x206>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	18 c0       	rjmp	.+48     	; 0xcd8 <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     ca8:	d3 01       	movw	r26, r6
     caa:	c2 01       	movw	r24, r4
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	aa 1f       	adc	r26, r26
     cb2:	bb 1f       	adc	r27, r27
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	aa 1f       	adc	r26, r26
     cba:	bb 1f       	adc	r27, r27
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	aa 1f       	adc	r26, r26
     cc2:	bb 1f       	adc	r27, r27
     cc4:	85 01       	movw	r16, r10
     cc6:	74 01       	movw	r14, r8
     cc8:	e8 1a       	sub	r14, r24
     cca:	f9 0a       	sbc	r15, r25
     ccc:	0a 0b       	sbc	r16, r26
     cce:	1b 0b       	sbc	r17, r27
     cd0:	d8 01       	movw	r26, r16
     cd2:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     cd4:	c9 ef       	ldi	r28, 0xF9	; 249
     cd6:	87 cf       	rjmp	.-242    	; 0xbe6 <usart_set_baudrate+0x114>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	9f 90       	pop	r9
     cec:	8f 90       	pop	r8
     cee:	7f 90       	pop	r7
     cf0:	6f 90       	pop	r6
     cf2:	5f 90       	pop	r5
     cf4:	4f 90       	pop	r4
     cf6:	3f 90       	pop	r3
     cf8:	2f 90       	pop	r2
     cfa:	08 95       	ret

00000cfc <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	ec 01       	movw	r28, r24
     d06:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	09 f4       	brne	.+2      	; 0xd0e <usart_init_rs232+0x12>
     d0c:	36 c1       	rjmp	.+620    	; 0xf7a <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     d0e:	80 3c       	cpi	r24, 0xC0	; 192
     d10:	91 05       	cpc	r25, r1
     d12:	21 f4       	brne	.+8      	; 0xd1c <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     d14:	60 e1       	ldi	r22, 0x10	; 16
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	9f dc       	rcall	.-1730   	; 0x658 <sysclk_enable_module>
     d1a:	2f c1       	rjmp	.+606    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     d1c:	c0 34       	cpi	r28, 0x40	; 64
     d1e:	84 e0       	ldi	r24, 0x04	; 4
     d20:	d8 07       	cpc	r29, r24
     d22:	21 f4       	brne	.+8      	; 0xd2c <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     d24:	68 e0       	ldi	r22, 0x08	; 8
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	97 dc       	rcall	.-1746   	; 0x658 <sysclk_enable_module>
     d2a:	27 c1       	rjmp	.+590    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     d2c:	c1 15       	cp	r28, r1
     d2e:	e4 e0       	ldi	r30, 0x04	; 4
     d30:	de 07       	cpc	r29, r30
     d32:	21 f4       	brne	.+8      	; 0xd3c <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     d34:	64 e0       	ldi	r22, 0x04	; 4
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	8f dc       	rcall	.-1762   	; 0x658 <sysclk_enable_module>
     d3a:	1f c1       	rjmp	.+574    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     d3c:	c0 38       	cpi	r28, 0x80	; 128
     d3e:	f1 e0       	ldi	r31, 0x01	; 1
     d40:	df 07       	cpc	r29, r31
     d42:	21 f4       	brne	.+8      	; 0xd4c <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     d44:	62 e0       	ldi	r22, 0x02	; 2
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	87 dc       	rcall	.-1778   	; 0x658 <sysclk_enable_module>
     d4a:	17 c1       	rjmp	.+558    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     d4c:	c1 15       	cp	r28, r1
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	d8 07       	cpc	r29, r24
     d52:	21 f4       	brne	.+8      	; 0xd5c <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	7f dc       	rcall	.-1794   	; 0x658 <sysclk_enable_module>
     d5a:	0f c1       	rjmp	.+542    	; 0xf7a <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     d5c:	c0 38       	cpi	r28, 0x80	; 128
     d5e:	e3 e0       	ldi	r30, 0x03	; 3
     d60:	de 07       	cpc	r29, r30
     d62:	21 f4       	brne	.+8      	; 0xd6c <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	77 dc       	rcall	.-1810   	; 0x658 <sysclk_enable_module>
     d6a:	07 c1       	rjmp	.+526    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     d6c:	c0 39       	cpi	r28, 0x90	; 144
     d6e:	f3 e0       	ldi	r31, 0x03	; 3
     d70:	df 07       	cpc	r29, r31
     d72:	21 f4       	brne	.+8      	; 0xd7c <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     d74:	61 e0       	ldi	r22, 0x01	; 1
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	6f dc       	rcall	.-1826   	; 0x658 <sysclk_enable_module>
     d7a:	ff c0       	rjmp	.+510    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     d7c:	c1 15       	cp	r28, r1
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	d8 07       	cpc	r29, r24
     d82:	21 f4       	brne	.+8      	; 0xd8c <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d84:	62 e0       	ldi	r22, 0x02	; 2
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	67 dc       	rcall	.-1842   	; 0x658 <sysclk_enable_module>
     d8a:	f7 c0       	rjmp	.+494    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     d8c:	c0 34       	cpi	r28, 0x40	; 64
     d8e:	e2 e0       	ldi	r30, 0x02	; 2
     d90:	de 07       	cpc	r29, r30
     d92:	21 f4       	brne	.+8      	; 0xd9c <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d94:	62 e0       	ldi	r22, 0x02	; 2
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	5f dc       	rcall	.-1858   	; 0x658 <sysclk_enable_module>
     d9a:	ef c0       	rjmp	.+478    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     d9c:	c1 15       	cp	r28, r1
     d9e:	f3 e0       	ldi	r31, 0x03	; 3
     da0:	df 07       	cpc	r29, r31
     da2:	21 f4       	brne	.+8      	; 0xdac <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     da4:	64 e0       	ldi	r22, 0x04	; 4
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	57 dc       	rcall	.-1874   	; 0x658 <sysclk_enable_module>
     daa:	e7 c0       	rjmp	.+462    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     dac:	c0 32       	cpi	r28, 0x20	; 32
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	d8 07       	cpc	r29, r24
     db2:	21 f4       	brne	.+8      	; 0xdbc <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     db4:	64 e0       	ldi	r22, 0x04	; 4
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	4f dc       	rcall	.-1890   	; 0x658 <sysclk_enable_module>
     dba:	df c0       	rjmp	.+446    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     dbc:	c1 15       	cp	r28, r1
     dbe:	e8 e0       	ldi	r30, 0x08	; 8
     dc0:	de 07       	cpc	r29, r30
     dc2:	21 f4       	brne	.+8      	; 0xdcc <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	47 dc       	rcall	.-1906   	; 0x658 <sysclk_enable_module>
     dca:	d7 c0       	rjmp	.+430    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     dcc:	c1 15       	cp	r28, r1
     dce:	f9 e0       	ldi	r31, 0x09	; 9
     dd0:	df 07       	cpc	r29, r31
     dd2:	21 f4       	brne	.+8      	; 0xddc <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	84 e0       	ldi	r24, 0x04	; 4
     dd8:	3f dc       	rcall	.-1922   	; 0x658 <sysclk_enable_module>
     dda:	cf c0       	rjmp	.+414    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     ddc:	c1 15       	cp	r28, r1
     dde:	8a e0       	ldi	r24, 0x0A	; 10
     de0:	d8 07       	cpc	r29, r24
     de2:	21 f4       	brne	.+8      	; 0xdec <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     de4:	61 e0       	ldi	r22, 0x01	; 1
     de6:	85 e0       	ldi	r24, 0x05	; 5
     de8:	37 dc       	rcall	.-1938   	; 0x658 <sysclk_enable_module>
     dea:	c7 c0       	rjmp	.+398    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     dec:	c1 15       	cp	r28, r1
     dee:	eb e0       	ldi	r30, 0x0B	; 11
     df0:	de 07       	cpc	r29, r30
     df2:	21 f4       	brne	.+8      	; 0xdfc <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	86 e0       	ldi	r24, 0x06	; 6
     df8:	2f dc       	rcall	.-1954   	; 0x658 <sysclk_enable_module>
     dfa:	bf c0       	rjmp	.+382    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     dfc:	c0 34       	cpi	r28, 0x40	; 64
     dfe:	f8 e0       	ldi	r31, 0x08	; 8
     e00:	df 07       	cpc	r29, r31
     e02:	21 f4       	brne	.+8      	; 0xe0c <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     e04:	62 e0       	ldi	r22, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	27 dc       	rcall	.-1970   	; 0x658 <sysclk_enable_module>
     e0a:	b7 c0       	rjmp	.+366    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     e0c:	c0 34       	cpi	r28, 0x40	; 64
     e0e:	89 e0       	ldi	r24, 0x09	; 9
     e10:	d8 07       	cpc	r29, r24
     e12:	21 f4       	brne	.+8      	; 0xe1c <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     e14:	62 e0       	ldi	r22, 0x02	; 2
     e16:	84 e0       	ldi	r24, 0x04	; 4
     e18:	1f dc       	rcall	.-1986   	; 0x658 <sysclk_enable_module>
     e1a:	af c0       	rjmp	.+350    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     e1c:	c0 34       	cpi	r28, 0x40	; 64
     e1e:	ea e0       	ldi	r30, 0x0A	; 10
     e20:	de 07       	cpc	r29, r30
     e22:	21 f4       	brne	.+8      	; 0xe2c <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     e24:	62 e0       	ldi	r22, 0x02	; 2
     e26:	85 e0       	ldi	r24, 0x05	; 5
     e28:	17 dc       	rcall	.-2002   	; 0x658 <sysclk_enable_module>
     e2a:	a7 c0       	rjmp	.+334    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     e2c:	c0 34       	cpi	r28, 0x40	; 64
     e2e:	fb e0       	ldi	r31, 0x0B	; 11
     e30:	df 07       	cpc	r29, r31
     e32:	21 f4       	brne	.+8      	; 0xe3c <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     e34:	62 e0       	ldi	r22, 0x02	; 2
     e36:	86 e0       	ldi	r24, 0x06	; 6
     e38:	0f dc       	rcall	.-2018   	; 0x658 <sysclk_enable_module>
     e3a:	9f c0       	rjmp	.+318    	; 0xf7a <usart_init_rs232+0x27e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     e3c:	c0 39       	cpi	r28, 0x90	; 144
     e3e:	88 e0       	ldi	r24, 0x08	; 8
     e40:	d8 07       	cpc	r29, r24
     e42:	21 f4       	brne	.+8      	; 0xe4c <usart_init_rs232+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     e44:	64 e0       	ldi	r22, 0x04	; 4
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	07 dc       	rcall	.-2034   	; 0x658 <sysclk_enable_module>
     e4a:	97 c0       	rjmp	.+302    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     e4c:	c0 39       	cpi	r28, 0x90	; 144
     e4e:	e9 e0       	ldi	r30, 0x09	; 9
     e50:	de 07       	cpc	r29, r30
     e52:	21 f4       	brne	.+8      	; 0xe5c <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     e54:	64 e0       	ldi	r22, 0x04	; 4
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	ff db       	rcall	.-2050   	; 0x658 <sysclk_enable_module>
     e5a:	8f c0       	rjmp	.+286    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     e5c:	c0 39       	cpi	r28, 0x90	; 144
     e5e:	fa e0       	ldi	r31, 0x0A	; 10
     e60:	df 07       	cpc	r29, r31
     e62:	21 f4       	brne	.+8      	; 0xe6c <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     e64:	64 e0       	ldi	r22, 0x04	; 4
     e66:	85 e0       	ldi	r24, 0x05	; 5
     e68:	f7 db       	rcall	.-2066   	; 0x658 <sysclk_enable_module>
     e6a:	87 c0       	rjmp	.+270    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     e6c:	c0 39       	cpi	r28, 0x90	; 144
     e6e:	8b e0       	ldi	r24, 0x0B	; 11
     e70:	d8 07       	cpc	r29, r24
     e72:	21 f4       	brne	.+8      	; 0xe7c <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     e74:	64 e0       	ldi	r22, 0x04	; 4
     e76:	86 e0       	ldi	r24, 0x06	; 6
     e78:	ef db       	rcall	.-2082   	; 0x658 <sysclk_enable_module>
     e7a:	7f c0       	rjmp	.+254    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     e7c:	c0 3c       	cpi	r28, 0xC0	; 192
     e7e:	e8 e0       	ldi	r30, 0x08	; 8
     e80:	de 07       	cpc	r29, r30
     e82:	21 f4       	brne	.+8      	; 0xe8c <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     e84:	68 e0       	ldi	r22, 0x08	; 8
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	e7 db       	rcall	.-2098   	; 0x658 <sysclk_enable_module>
     e8a:	77 c0       	rjmp	.+238    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     e8c:	c0 3c       	cpi	r28, 0xC0	; 192
     e8e:	f9 e0       	ldi	r31, 0x09	; 9
     e90:	df 07       	cpc	r29, r31
     e92:	21 f4       	brne	.+8      	; 0xe9c <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     e94:	68 e0       	ldi	r22, 0x08	; 8
     e96:	84 e0       	ldi	r24, 0x04	; 4
     e98:	df db       	rcall	.-2114   	; 0x658 <sysclk_enable_module>
     e9a:	6f c0       	rjmp	.+222    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     e9c:	c0 3c       	cpi	r28, 0xC0	; 192
     e9e:	8a e0       	ldi	r24, 0x0A	; 10
     ea0:	d8 07       	cpc	r29, r24
     ea2:	21 f4       	brne	.+8      	; 0xeac <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ea4:	68 e0       	ldi	r22, 0x08	; 8
     ea6:	85 e0       	ldi	r24, 0x05	; 5
     ea8:	d7 db       	rcall	.-2130   	; 0x658 <sysclk_enable_module>
     eaa:	67 c0       	rjmp	.+206    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     eac:	c0 3c       	cpi	r28, 0xC0	; 192
     eae:	eb e0       	ldi	r30, 0x0B	; 11
     eb0:	de 07       	cpc	r29, r30
     eb2:	21 f4       	brne	.+8      	; 0xebc <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     eb4:	68 e0       	ldi	r22, 0x08	; 8
     eb6:	86 e0       	ldi	r24, 0x06	; 6
     eb8:	cf db       	rcall	.-2146   	; 0x658 <sysclk_enable_module>
     eba:	5f c0       	rjmp	.+190    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     ebc:	c0 3a       	cpi	r28, 0xA0	; 160
     ebe:	f8 e0       	ldi	r31, 0x08	; 8
     ec0:	df 07       	cpc	r29, r31
     ec2:	21 f4       	brne	.+8      	; 0xecc <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     ec4:	60 e1       	ldi	r22, 0x10	; 16
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	c7 db       	rcall	.-2162   	; 0x658 <sysclk_enable_module>
     eca:	57 c0       	rjmp	.+174    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     ecc:	c0 3a       	cpi	r28, 0xA0	; 160
     ece:	89 e0       	ldi	r24, 0x09	; 9
     ed0:	d8 07       	cpc	r29, r24
     ed2:	21 f4       	brne	.+8      	; 0xedc <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     ed4:	60 e1       	ldi	r22, 0x10	; 16
     ed6:	84 e0       	ldi	r24, 0x04	; 4
     ed8:	bf db       	rcall	.-2178   	; 0x658 <sysclk_enable_module>
     eda:	4f c0       	rjmp	.+158    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     edc:	c0 3a       	cpi	r28, 0xA0	; 160
     ede:	ea e0       	ldi	r30, 0x0A	; 10
     ee0:	de 07       	cpc	r29, r30
     ee2:	21 f4       	brne	.+8      	; 0xeec <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     ee4:	60 e1       	ldi	r22, 0x10	; 16
     ee6:	85 e0       	ldi	r24, 0x05	; 5
     ee8:	b7 db       	rcall	.-2194   	; 0x658 <sysclk_enable_module>
     eea:	47 c0       	rjmp	.+142    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     eec:	c0 3a       	cpi	r28, 0xA0	; 160
     eee:	fb e0       	ldi	r31, 0x0B	; 11
     ef0:	df 07       	cpc	r29, r31
     ef2:	21 f4       	brne	.+8      	; 0xefc <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     ef4:	60 e1       	ldi	r22, 0x10	; 16
     ef6:	86 e0       	ldi	r24, 0x06	; 6
     ef8:	af db       	rcall	.-2210   	; 0x658 <sysclk_enable_module>
     efa:	3f c0       	rjmp	.+126    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     efc:	c0 3b       	cpi	r28, 0xB0	; 176
     efe:	88 e0       	ldi	r24, 0x08	; 8
     f00:	d8 07       	cpc	r29, r24
     f02:	21 f4       	brne	.+8      	; 0xf0c <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     f04:	60 e2       	ldi	r22, 0x20	; 32
     f06:	83 e0       	ldi	r24, 0x03	; 3
     f08:	a7 db       	rcall	.-2226   	; 0x658 <sysclk_enable_module>
     f0a:	37 c0       	rjmp	.+110    	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     f0c:	c0 3b       	cpi	r28, 0xB0	; 176
     f0e:	e9 e0       	ldi	r30, 0x09	; 9
     f10:	de 07       	cpc	r29, r30
     f12:	21 f4       	brne	.+8      	; 0xf1c <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     f14:	60 e2       	ldi	r22, 0x20	; 32
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	9f db       	rcall	.-2242   	; 0x658 <sysclk_enable_module>
     f1a:	2f c0       	rjmp	.+94     	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     f1c:	c0 3b       	cpi	r28, 0xB0	; 176
     f1e:	fa e0       	ldi	r31, 0x0A	; 10
     f20:	df 07       	cpc	r29, r31
     f22:	21 f4       	brne	.+8      	; 0xf2c <usart_init_rs232+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     f24:	60 e2       	ldi	r22, 0x20	; 32
     f26:	85 e0       	ldi	r24, 0x05	; 5
     f28:	97 db       	rcall	.-2258   	; 0x658 <sysclk_enable_module>
     f2a:	27 c0       	rjmp	.+78     	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     f2c:	c0 3b       	cpi	r28, 0xB0	; 176
     f2e:	8b e0       	ldi	r24, 0x0B	; 11
     f30:	d8 07       	cpc	r29, r24
     f32:	21 f4       	brne	.+8      	; 0xf3c <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     f34:	60 e2       	ldi	r22, 0x20	; 32
     f36:	86 e0       	ldi	r24, 0x06	; 6
     f38:	8f db       	rcall	.-2274   	; 0x658 <sysclk_enable_module>
     f3a:	1f c0       	rjmp	.+62     	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     f3c:	c0 38       	cpi	r28, 0x80	; 128
     f3e:	e4 e0       	ldi	r30, 0x04	; 4
     f40:	de 07       	cpc	r29, r30
     f42:	21 f4       	brne	.+8      	; 0xf4c <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     f44:	60 e4       	ldi	r22, 0x40	; 64
     f46:	83 e0       	ldi	r24, 0x03	; 3
     f48:	87 db       	rcall	.-2290   	; 0x658 <sysclk_enable_module>
     f4a:	17 c0       	rjmp	.+46     	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     f4c:	c0 39       	cpi	r28, 0x90	; 144
     f4e:	f4 e0       	ldi	r31, 0x04	; 4
     f50:	df 07       	cpc	r29, r31
     f52:	21 f4       	brne	.+8      	; 0xf5c <usart_init_rs232+0x260>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     f54:	60 e4       	ldi	r22, 0x40	; 64
     f56:	84 e0       	ldi	r24, 0x04	; 4
     f58:	7f db       	rcall	.-2306   	; 0x658 <sysclk_enable_module>
     f5a:	0f c0       	rjmp	.+30     	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     f5c:	c0 3a       	cpi	r28, 0xA0	; 160
     f5e:	84 e0       	ldi	r24, 0x04	; 4
     f60:	d8 07       	cpc	r29, r24
     f62:	21 f4       	brne	.+8      	; 0xf6c <usart_init_rs232+0x270>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     f64:	60 e4       	ldi	r22, 0x40	; 64
     f66:	85 e0       	ldi	r24, 0x05	; 5
     f68:	77 db       	rcall	.-2322   	; 0x658 <sysclk_enable_module>
     f6a:	07 c0       	rjmp	.+14     	; 0xf7a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     f6c:	c0 3b       	cpi	r28, 0xB0	; 176
     f6e:	e4 e0       	ldi	r30, 0x04	; 4
     f70:	de 07       	cpc	r29, r30
     f72:	19 f4       	brne	.+6      	; 0xf7a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     f74:	60 e4       	ldi	r22, 0x40	; 64
     f76:	86 e0       	ldi	r24, 0x06	; 6
     f78:	6f db       	rcall	.-2338   	; 0x658 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	8f 73       	andi	r24, 0x3F	; 63
     f7e:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     f80:	f8 01       	movw	r30, r16
     f82:	94 81       	ldd	r25, Z+4	; 0x04
     f84:	85 81       	ldd	r24, Z+5	; 0x05
     f86:	89 2b       	or	r24, r25
     f88:	96 81       	ldd	r25, Z+6	; 0x06
     f8a:	91 11       	cpse	r25, r1
     f8c:	98 e0       	ldi	r25, 0x08	; 8
     f8e:	89 2b       	or	r24, r25
     f90:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     f92:	f8 01       	movw	r30, r16
     f94:	40 81       	ld	r20, Z
     f96:	51 81       	ldd	r21, Z+1	; 0x01
     f98:	62 81       	ldd	r22, Z+2	; 0x02
     f9a:	73 81       	ldd	r23, Z+3	; 0x03
     f9c:	00 e0       	ldi	r16, 0x00	; 0
     f9e:	18 e4       	ldi	r17, 0x48	; 72
     fa0:	28 ee       	ldi	r18, 0xE8	; 232
     fa2:	31 e0       	ldi	r19, 0x01	; 1
     fa4:	ce 01       	movw	r24, r28
     fa6:	95 dd       	rcall	.-1238   	; 0xad2 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     fa8:	9c 81       	ldd	r25, Y+4	; 0x04
     faa:	98 60       	ori	r25, 0x08	; 8
     fac:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     fae:	9c 81       	ldd	r25, Y+4	; 0x04
     fb0:	90 61       	ori	r25, 0x10	; 16
     fb2:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <ADC_init>:
 */ 
#include <asf.h>
#include "Drivers/ADC/ADC_init.h"
/* This driver can be used to initialize any of the ADCs */

void ADC_init(void){
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
	ADCA.CTRLA = 0b00000001; //Enables the ADC.
     fc8:	c0 e0       	ldi	r28, 0x00	; 0
     fca:	d2 e0       	ldi	r29, 0x02	; 2
     fcc:	ff 24       	eor	r15, r15
     fce:	f3 94       	inc	r15
     fd0:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000; //Unsigned 12 bit mode.
     fd2:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000; //Voltage reference of Vcc/1.6V
     fd4:	80 e1       	ldi	r24, 0x10	; 16
     fd6:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101; //This is automatic prescalar of 128 on the clock.
     fd8:	85 e0       	ldi	r24, 0x05	; 5
     fda:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     fdc:	61 e2       	ldi	r22, 0x21	; 33
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	5f dd       	rcall	.-1346   	; 0xaa2 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     fe4:	08 2f       	mov	r16, r24
     fe6:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
     fe8:	10 2f       	mov	r17, r16
     fea:	00 27       	eor	r16, r16
     fec:	60 e2       	ldi	r22, 0x20	; 32
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	57 dd       	rcall	.-1362   	; 0xaa2 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
     ff4:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA); //Retrieve stored calibration data about the ADC.
     ff6:	0c 87       	std	Y+12, r16	; 0x0c
     ff8:	1d 87       	std	Y+13, r17	; 0x0d

	ADCA.CH0.CTRL = 0b00000001; //Single ended input
     ffa:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000000; //Reading ADCA pin 0.
     ffc:	19 a2       	std	Y+33, r1	; 0x21
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ff 90       	pop	r15
    1008:	08 95       	ret

0000100a <getTemperature>:
 #include <math.h>
 #include "Drivers/Temperature/getTemperature.h"

 /* getTemperature method for NTC Thermistor 10k Bead */

 float getTemperature(void){
    100a:	8f 92       	push	r8
    100c:	9f 92       	push	r9
    100e:	af 92       	push	r10
    1010:	bf 92       	push	r11
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
	ADCA.CH0.CTRL |= 0b10000000; //Start the conversion.. FOR THOMAS: THIS IS A BITWISE OPERATOR THAT KEEPS 1's and MODIFIES ZEROES.
    101e:	e0 e0       	ldi	r30, 0x00	; 0
    1020:	f2 e0       	ldi	r31, 0x02	; 2
    1022:	80 a1       	ldd	r24, Z+32	; 0x20
    1024:	80 68       	ori	r24, 0x80	; 128
    1026:	80 a3       	std	Z+32, r24	; 0x20
		
	while(ADCA.CH0.INTFLAGS == 0); //Wait until conversion is done.
    1028:	83 a1       	ldd	r24, Z+35	; 0x23
    102a:	88 23       	and	r24, r24
    102c:	e9 f3       	breq	.-6      	; 0x1028 <getTemperature+0x1e>
		
	uint16_t read_adc = ADCA.CH0.RES; //Save the result into variable called adcReading.
    102e:	c0 91 24 02 	lds	r28, 0x0224
    1032:	d0 91 25 02 	lds	r29, 0x0225
	printf("read adc: %i\n",read_adc);
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	83 e3       	ldi	r24, 0x33	; 51
    103c:	90 e2       	ldi	r25, 0x20	; 32
    103e:	9f 93       	push	r25
    1040:	8f 93       	push	r24
    1042:	e4 d5       	rcall	.+3016   	; 0x1c0c <printf>
	float voltage = (0.0005*read_adc - 0.0941);
    1044:	be 01       	movw	r22, r28
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	49 d3       	rcall	.+1682   	; 0x16de <__floatunsisf>
    104c:	2f e6       	ldi	r18, 0x6F	; 111
    104e:	32 e1       	ldi	r19, 0x12	; 18
    1050:	43 e0       	ldi	r20, 0x03	; 3
    1052:	5a e3       	ldi	r21, 0x3A	; 58
    1054:	65 d4       	rcall	.+2250   	; 0x1920 <__mulsf3>
    1056:	20 e8       	ldi	r18, 0x80	; 128
    1058:	37 eb       	ldi	r19, 0xB7	; 183
    105a:	40 ec       	ldi	r20, 0xC0	; 192
    105c:	5d e3       	ldi	r21, 0x3D	; 61
    105e:	38 d2       	rcall	.+1136   	; 0x14d0 <__subsf3>
    1060:	e6 2e       	mov	r14, r22
    1062:	f7 2e       	mov	r15, r23
    1064:	d8 2f       	mov	r29, r24
    1066:	c9 2f       	mov	r28, r25
	printf("volt: %i\n",voltage);  
    1068:	9f 93       	push	r25
    106a:	8f 93       	push	r24
    106c:	7f 93       	push	r23
    106e:	6f 93       	push	r22
    1070:	81 e4       	ldi	r24, 0x41	; 65
    1072:	90 e2       	ldi	r25, 0x20	; 32
    1074:	9f 93       	push	r25
    1076:	8f 93       	push	r24
    1078:	c9 d5       	rcall	.+2962   	; 0x1c0c <printf>
																/* 
																* This converts adcReading into an actual voltage based off of slope. NEED TO TEST AND FIND THE SLOPE! voltage*1000 converts it into millivolts.
																* If we hadn't multiplied by 1000, the typecast would've truncated the voltage reading to just the one's place.
															    */

	float resistance = (3.3*1000)/(voltage) - 1000; //Need to convert our voltage reading into the resistance across the thermistor. To find this we use Rb(Vin - Vout) / Vout
    107a:	2e 2d       	mov	r18, r14
    107c:	3f 2d       	mov	r19, r15
    107e:	4d 2f       	mov	r20, r29
    1080:	5c 2f       	mov	r21, r28
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e4       	ldi	r23, 0x40	; 64
    1086:	8e e4       	ldi	r24, 0x4E	; 78
    1088:	95 e4       	ldi	r25, 0x45	; 69
    108a:	87 d2       	rcall	.+1294   	; 0x159a <__divsf3>
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	4a e7       	ldi	r20, 0x7A	; 122
    1092:	54 e4       	ldi	r21, 0x44	; 68
    1094:	1d d2       	rcall	.+1082   	; 0x14d0 <__subsf3>
    1096:	e6 2e       	mov	r14, r22
    1098:	f7 2e       	mov	r15, r23
    109a:	d8 2f       	mov	r29, r24
    109c:	c9 2f       	mov	r28, r25
	printf("res: %i\n",resistance);
    109e:	9f 93       	push	r25
    10a0:	8f 93       	push	r24
    10a2:	7f 93       	push	r23
    10a4:	6f 93       	push	r22
    10a6:	8b e4       	ldi	r24, 0x4B	; 75
    10a8:	90 e2       	ldi	r25, 0x20	; 32
    10aa:	9f 93       	push	r25
    10ac:	8f 93       	push	r24
    10ae:	ae d5       	rcall	.+2908   	; 0x1c0c <printf>
	
	float a_const = 0.003354016; //A value for the NTCLE100E3103HT1 in the Steinhart-Hart equation (T = 1/(A + Bln(resistance) + Dln^3(resistance))
	float b_const = 0.000256985; //B value
	float d_const = 0.00000006383091; //D value.
	return 1/(a_const+ b_const*log(resistance/10000) + d_const*log(resistance/10000)*log(resistance/10000)*log(resistance/10000)) - 273.15 ; //Steinhart-Hart to find temperature then return it.
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e4       	ldi	r19, 0x40	; 64
    10b4:	4c e1       	ldi	r20, 0x1C	; 28
    10b6:	56 e4       	ldi	r21, 0x46	; 70
    10b8:	6e 2d       	mov	r22, r14
    10ba:	7f 2d       	mov	r23, r15
    10bc:	8d 2f       	mov	r24, r29
    10be:	9c 2f       	mov	r25, r28
    10c0:	6c d2       	rcall	.+1240   	; 0x159a <__divsf3>
    10c2:	ee d3       	rcall	.+2012   	; 0x18a0 <log>
    10c4:	6b 01       	movw	r12, r22
    10c6:	7c 01       	movw	r14, r24
    10c8:	21 ef       	ldi	r18, 0xF1	; 241
    10ca:	3b eb       	ldi	r19, 0xBB	; 187
    10cc:	46 e8       	ldi	r20, 0x86	; 134
    10ce:	59 e3       	ldi	r21, 0x39	; 57
    10d0:	27 d4       	rcall	.+2126   	; 0x1920 <__mulsf3>
    10d2:	2d e0       	ldi	r18, 0x0D	; 13
    10d4:	3f ec       	ldi	r19, 0xCF	; 207
    10d6:	4b e5       	ldi	r20, 0x5B	; 91
    10d8:	5b e3       	ldi	r21, 0x3B	; 59
    10da:	fb d1       	rcall	.+1014   	; 0x14d2 <__addsf3>
    10dc:	4b 01       	movw	r8, r22
    10de:	5c 01       	movw	r10, r24
    10e0:	2a e6       	ldi	r18, 0x6A	; 106
    10e2:	33 e1       	ldi	r19, 0x13	; 19
    10e4:	49 e8       	ldi	r20, 0x89	; 137
    10e6:	53 e3       	ldi	r21, 0x33	; 51
    10e8:	c7 01       	movw	r24, r14
    10ea:	b6 01       	movw	r22, r12
    10ec:	19 d4       	rcall	.+2098   	; 0x1920 <__mulsf3>
    10ee:	9b 01       	movw	r18, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	c7 01       	movw	r24, r14
    10f4:	b6 01       	movw	r22, r12
    10f6:	14 d4       	rcall	.+2088   	; 0x1920 <__mulsf3>
    10f8:	9b 01       	movw	r18, r22
    10fa:	ac 01       	movw	r20, r24
    10fc:	c7 01       	movw	r24, r14
    10fe:	b6 01       	movw	r22, r12
    1100:	0f d4       	rcall	.+2078   	; 0x1920 <__mulsf3>
    1102:	9b 01       	movw	r18, r22
    1104:	ac 01       	movw	r20, r24
    1106:	c5 01       	movw	r24, r10
    1108:	b4 01       	movw	r22, r8
    110a:	e3 d1       	rcall	.+966    	; 0x14d2 <__addsf3>
    110c:	9b 01       	movw	r18, r22
    110e:	ac 01       	movw	r20, r24
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	80 e8       	ldi	r24, 0x80	; 128
    1116:	9f e3       	ldi	r25, 0x3F	; 63
    1118:	40 d2       	rcall	.+1152   	; 0x159a <__divsf3>
    111a:	23 e3       	ldi	r18, 0x33	; 51
    111c:	33 e9       	ldi	r19, 0x93	; 147
    111e:	48 e8       	ldi	r20, 0x88	; 136
    1120:	53 e4       	ldi	r21, 0x43	; 67
    1122:	d6 d1       	rcall	.+940    	; 0x14d0 <__subsf3>
    1124:	2d b7       	in	r18, 0x3d	; 61
    1126:	3e b7       	in	r19, 0x3e	; 62
    1128:	20 5f       	subi	r18, 0xF0	; 240
    112a:	3f 4f       	sbci	r19, 0xFF	; 255
    112c:	2d bf       	out	0x3d, r18	; 61
    112e:	3e bf       	out	0x3e, r19	; 62
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	9f 90       	pop	r9
    1142:	8f 90       	pop	r8
    1144:	08 95       	ret

00001146 <TCD0_init>:
	TCE0.CCB = TCE0.PER - (TCE0.PER/duty_cycle);
	TCE0.CCC = TCE0.PER - (TCE0.PER/duty_cycle);
	TCE0.CCD = TCE0.PER - (TCE0.PER/duty_cycle);
}
void TCD0_init(void){
	PORTD.DIR = 0b11111111; //sets to output.
    1146:	8f ef       	ldi	r24, 0xFF	; 255
    1148:	80 93 60 06 	sts	0x0660, r24
	TCD0.CTRLA = 0b00000110; //0110 is prescalar 256.
    114c:	e0 e0       	ldi	r30, 0x00	; 0
    114e:	f9 e0       	ldi	r31, 0x09	; 9
    1150:	86 e0       	ldi	r24, 0x06	; 6
    1152:	80 83       	st	Z, r24
	TCD0.CTRLB = 0b10110011; //OCn output pin (currently set at 0) and single slope PWM.
    1154:	83 eb       	ldi	r24, 0xB3	; 179
    1156:	81 83       	std	Z+1, r24	; 0x01
    1158:	08 95       	ret

0000115a <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    1160:	b2 dc       	rcall	.-1692   	; 0xac6 <usart_getchar>
    1162:	88 83       	st	Y, r24
}
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    116a:	a5 cc       	rjmp	.-1718   	; 0xab6 <usart_putchar>
}
    116c:	08 95       	ret

0000116e <UART_Comms_Init>:
   to start the uart communications */

#include "conf_usart_serial.h" //Includes the information in the config file
#include <asf.h>

void UART_Comms_Init(void){
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	27 97       	sbiw	r28, 0x07	; 7
    1178:	cd bf       	out	0x3d, r28	; 61
    117a:	de bf       	out	0x3e, r29	; 62
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	//Must set TX pin as output
	PORTC.DIRSET=0b00001000;
    117c:	e0 e4       	ldi	r30, 0x40	; 64
    117e:	f6 e0       	ldi	r31, 0x06	; 6
    1180:	88 e0       	ldi	r24, 0x08	; 8
    1182:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET=0b00001000;
    1184:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUT=0xFF;
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	84 83       	std	Z+4, r24	; 0x04
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    118a:	80 ea       	ldi	r24, 0xA0	; 160
    118c:	98 e0       	ldi	r25, 0x08	; 8
    118e:	80 93 6d 20 	sts	0x206D, r24
    1192:	90 93 6e 20 	sts	0x206E, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1196:	85 eb       	ldi	r24, 0xB5	; 181
    1198:	98 e0       	ldi	r25, 0x08	; 8
    119a:	80 93 6b 20 	sts	0x206B, r24
    119e:	90 93 6c 20 	sts	0x206C, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    11a2:	8d ea       	ldi	r24, 0xAD	; 173
    11a4:	98 e0       	ldi	r25, 0x08	; 8
    11a6:	80 93 69 20 	sts	0x2069, r24
    11aa:	90 93 6a 20 	sts	0x206A, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    11ae:	e6 e0       	ldi	r30, 0x06	; 6
    11b0:	f0 e2       	ldi	r31, 0x20	; 32
    11b2:	84 81       	ldd	r24, Z+4	; 0x04
    11b4:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    11b6:	85 81       	ldd	r24, Z+5	; 0x05
    11b8:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    11ba:	86 81       	ldd	r24, Z+6	; 0x06
    11bc:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	a2 81       	ldd	r26, Z+2	; 0x02
    11c4:	b3 81       	ldd	r27, Z+3	; 0x03
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	ab 83       	std	Y+3, r26	; 0x03
    11cc:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    11ce:	60 e1       	ldi	r22, 0x10	; 16
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	42 da       	rcall	.-2940   	; 0x658 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    11d4:	be 01       	movw	r22, r28
    11d6:	6f 5f       	subi	r22, 0xFF	; 255
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	80 ea       	ldi	r24, 0xA0	; 160
    11dc:	98 e0       	ldi	r25, 0x08	; 8
    11de:	8e dd       	rcall	.-1252   	; 0xcfc <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    11e0:	68 e3       	ldi	r22, 0x38	; 56
    11e2:	73 e0       	ldi	r23, 0x03	; 3
    11e4:	81 e5       	ldi	r24, 0x51	; 81
    11e6:	93 e0       	ldi	r25, 0x03	; 3
    11e8:	c7 d4       	rcall	.+2446   	; 0x1b78 <fdevopen>

	stdio_serial_init(&USARTC0, &usart_options); //ASF function that initializes the UART peripheral
}
    11ea:	27 96       	adiw	r28, 0x07	; 7
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	08 95       	ret

000011f6 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	09 f4       	brne	.+2      	; 0x11fc <sysclk_enable_peripheral_clock+0x6>
    11fa:	35 c1       	rjmp	.+618    	; 0x1466 <sysclk_enable_peripheral_clock+0x270>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    11fc:	80 3c       	cpi	r24, 0xC0	; 192
    11fe:	91 05       	cpc	r25, r1
    1200:	21 f4       	brne	.+8      	; 0x120a <sysclk_enable_peripheral_clock+0x14>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1202:	60 e1       	ldi	r22, 0x10	; 16
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	28 ca       	rjmp	.-2992   	; 0x658 <sysclk_enable_module>
    1208:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    120a:	80 34       	cpi	r24, 0x40	; 64
    120c:	24 e0       	ldi	r18, 0x04	; 4
    120e:	92 07       	cpc	r25, r18
    1210:	21 f4       	brne	.+8      	; 0x121a <sysclk_enable_peripheral_clock+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1212:	68 e0       	ldi	r22, 0x08	; 8
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	20 ca       	rjmp	.-3008   	; 0x658 <sysclk_enable_module>
    1218:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    121a:	81 15       	cp	r24, r1
    121c:	24 e0       	ldi	r18, 0x04	; 4
    121e:	92 07       	cpc	r25, r18
    1220:	21 f4       	brne	.+8      	; 0x122a <sysclk_enable_peripheral_clock+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1222:	64 e0       	ldi	r22, 0x04	; 4
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	18 ca       	rjmp	.-3024   	; 0x658 <sysclk_enable_module>
    1228:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    122a:	80 38       	cpi	r24, 0x80	; 128
    122c:	21 e0       	ldi	r18, 0x01	; 1
    122e:	92 07       	cpc	r25, r18
    1230:	21 f4       	brne	.+8      	; 0x123a <sysclk_enable_peripheral_clock+0x44>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1232:	62 e0       	ldi	r22, 0x02	; 2
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	10 ca       	rjmp	.-3040   	; 0x658 <sysclk_enable_module>
    1238:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    123a:	81 15       	cp	r24, r1
    123c:	21 e0       	ldi	r18, 0x01	; 1
    123e:	92 07       	cpc	r25, r18
    1240:	21 f4       	brne	.+8      	; 0x124a <sysclk_enable_peripheral_clock+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1242:	61 e0       	ldi	r22, 0x01	; 1
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	08 ca       	rjmp	.-3056   	; 0x658 <sysclk_enable_module>
    1248:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    124a:	80 38       	cpi	r24, 0x80	; 128
    124c:	23 e0       	ldi	r18, 0x03	; 3
    124e:	92 07       	cpc	r25, r18
    1250:	21 f4       	brne	.+8      	; 0x125a <sysclk_enable_peripheral_clock+0x64>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	00 ca       	rjmp	.-3072   	; 0x658 <sysclk_enable_module>
    1258:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    125a:	80 39       	cpi	r24, 0x90	; 144
    125c:	23 e0       	ldi	r18, 0x03	; 3
    125e:	92 07       	cpc	r25, r18
    1260:	21 f4       	brne	.+8      	; 0x126a <sysclk_enable_peripheral_clock+0x74>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1262:	61 e0       	ldi	r22, 0x01	; 1
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	f8 c9       	rjmp	.-3088   	; 0x658 <sysclk_enable_module>
    1268:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    126a:	81 15       	cp	r24, r1
    126c:	22 e0       	ldi	r18, 0x02	; 2
    126e:	92 07       	cpc	r25, r18
    1270:	21 f4       	brne	.+8      	; 0x127a <sysclk_enable_peripheral_clock+0x84>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1272:	62 e0       	ldi	r22, 0x02	; 2
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	f0 c9       	rjmp	.-3104   	; 0x658 <sysclk_enable_module>
    1278:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    127a:	80 34       	cpi	r24, 0x40	; 64
    127c:	22 e0       	ldi	r18, 0x02	; 2
    127e:	92 07       	cpc	r25, r18
    1280:	21 f4       	brne	.+8      	; 0x128a <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1282:	62 e0       	ldi	r22, 0x02	; 2
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	e8 c9       	rjmp	.-3120   	; 0x658 <sysclk_enable_module>
    1288:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    128a:	81 15       	cp	r24, r1
    128c:	23 e0       	ldi	r18, 0x03	; 3
    128e:	92 07       	cpc	r25, r18
    1290:	21 f4       	brne	.+8      	; 0x129a <sysclk_enable_peripheral_clock+0xa4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1292:	64 e0       	ldi	r22, 0x04	; 4
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	e0 c9       	rjmp	.-3136   	; 0x658 <sysclk_enable_module>
    1298:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    129a:	80 32       	cpi	r24, 0x20	; 32
    129c:	23 e0       	ldi	r18, 0x03	; 3
    129e:	92 07       	cpc	r25, r18
    12a0:	21 f4       	brne	.+8      	; 0x12aa <sysclk_enable_peripheral_clock+0xb4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    12a2:	64 e0       	ldi	r22, 0x04	; 4
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	d8 c9       	rjmp	.-3152   	; 0x658 <sysclk_enable_module>
    12a8:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    12aa:	81 15       	cp	r24, r1
    12ac:	28 e0       	ldi	r18, 0x08	; 8
    12ae:	92 07       	cpc	r25, r18
    12b0:	21 f4       	brne	.+8      	; 0x12ba <sysclk_enable_peripheral_clock+0xc4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    12b2:	61 e0       	ldi	r22, 0x01	; 1
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	d0 c9       	rjmp	.-3168   	; 0x658 <sysclk_enable_module>
    12b8:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    12ba:	81 15       	cp	r24, r1
    12bc:	29 e0       	ldi	r18, 0x09	; 9
    12be:	92 07       	cpc	r25, r18
    12c0:	21 f4       	brne	.+8      	; 0x12ca <sysclk_enable_peripheral_clock+0xd4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	84 e0       	ldi	r24, 0x04	; 4
    12c6:	c8 c9       	rjmp	.-3184   	; 0x658 <sysclk_enable_module>
    12c8:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    12ca:	81 15       	cp	r24, r1
    12cc:	2a e0       	ldi	r18, 0x0A	; 10
    12ce:	92 07       	cpc	r25, r18
    12d0:	21 f4       	brne	.+8      	; 0x12da <sysclk_enable_peripheral_clock+0xe4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    12d2:	61 e0       	ldi	r22, 0x01	; 1
    12d4:	85 e0       	ldi	r24, 0x05	; 5
    12d6:	c0 c9       	rjmp	.-3200   	; 0x658 <sysclk_enable_module>
    12d8:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    12da:	81 15       	cp	r24, r1
    12dc:	2b e0       	ldi	r18, 0x0B	; 11
    12de:	92 07       	cpc	r25, r18
    12e0:	21 f4       	brne	.+8      	; 0x12ea <sysclk_enable_peripheral_clock+0xf4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    12e2:	61 e0       	ldi	r22, 0x01	; 1
    12e4:	86 e0       	ldi	r24, 0x06	; 6
    12e6:	b8 c9       	rjmp	.-3216   	; 0x658 <sysclk_enable_module>
    12e8:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    12ea:	80 34       	cpi	r24, 0x40	; 64
    12ec:	28 e0       	ldi	r18, 0x08	; 8
    12ee:	92 07       	cpc	r25, r18
    12f0:	21 f4       	brne	.+8      	; 0x12fa <sysclk_enable_peripheral_clock+0x104>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    12f2:	62 e0       	ldi	r22, 0x02	; 2
    12f4:	83 e0       	ldi	r24, 0x03	; 3
    12f6:	b0 c9       	rjmp	.-3232   	; 0x658 <sysclk_enable_module>
    12f8:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    12fa:	80 34       	cpi	r24, 0x40	; 64
    12fc:	29 e0       	ldi	r18, 0x09	; 9
    12fe:	92 07       	cpc	r25, r18
    1300:	21 f4       	brne	.+8      	; 0x130a <sysclk_enable_peripheral_clock+0x114>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1302:	62 e0       	ldi	r22, 0x02	; 2
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	a8 c9       	rjmp	.-3248   	; 0x658 <sysclk_enable_module>
    1308:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    130a:	80 34       	cpi	r24, 0x40	; 64
    130c:	2a e0       	ldi	r18, 0x0A	; 10
    130e:	92 07       	cpc	r25, r18
    1310:	21 f4       	brne	.+8      	; 0x131a <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1312:	62 e0       	ldi	r22, 0x02	; 2
    1314:	85 e0       	ldi	r24, 0x05	; 5
    1316:	a0 c9       	rjmp	.-3264   	; 0x658 <sysclk_enable_module>
    1318:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    131a:	80 34       	cpi	r24, 0x40	; 64
    131c:	2b e0       	ldi	r18, 0x0B	; 11
    131e:	92 07       	cpc	r25, r18
    1320:	21 f4       	brne	.+8      	; 0x132a <sysclk_enable_peripheral_clock+0x134>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1322:	62 e0       	ldi	r22, 0x02	; 2
    1324:	86 e0       	ldi	r24, 0x06	; 6
    1326:	98 c9       	rjmp	.-3280   	; 0x658 <sysclk_enable_module>
    1328:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    132a:	80 39       	cpi	r24, 0x90	; 144
    132c:	28 e0       	ldi	r18, 0x08	; 8
    132e:	92 07       	cpc	r25, r18
    1330:	21 f4       	brne	.+8      	; 0x133a <sysclk_enable_peripheral_clock+0x144>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1332:	64 e0       	ldi	r22, 0x04	; 4
    1334:	83 e0       	ldi	r24, 0x03	; 3
    1336:	90 c9       	rjmp	.-3296   	; 0x658 <sysclk_enable_module>
    1338:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    133a:	80 39       	cpi	r24, 0x90	; 144
    133c:	29 e0       	ldi	r18, 0x09	; 9
    133e:	92 07       	cpc	r25, r18
    1340:	21 f4       	brne	.+8      	; 0x134a <sysclk_enable_peripheral_clock+0x154>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1342:	64 e0       	ldi	r22, 0x04	; 4
    1344:	84 e0       	ldi	r24, 0x04	; 4
    1346:	88 c9       	rjmp	.-3312   	; 0x658 <sysclk_enable_module>
    1348:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    134a:	80 39       	cpi	r24, 0x90	; 144
    134c:	2a e0       	ldi	r18, 0x0A	; 10
    134e:	92 07       	cpc	r25, r18
    1350:	21 f4       	brne	.+8      	; 0x135a <sysclk_enable_peripheral_clock+0x164>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1352:	64 e0       	ldi	r22, 0x04	; 4
    1354:	85 e0       	ldi	r24, 0x05	; 5
    1356:	80 c9       	rjmp	.-3328   	; 0x658 <sysclk_enable_module>
    1358:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    135a:	80 39       	cpi	r24, 0x90	; 144
    135c:	2b e0       	ldi	r18, 0x0B	; 11
    135e:	92 07       	cpc	r25, r18
    1360:	21 f4       	brne	.+8      	; 0x136a <sysclk_enable_peripheral_clock+0x174>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1362:	64 e0       	ldi	r22, 0x04	; 4
    1364:	86 e0       	ldi	r24, 0x06	; 6
    1366:	78 c9       	rjmp	.-3344   	; 0x658 <sysclk_enable_module>
    1368:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    136a:	80 3c       	cpi	r24, 0xC0	; 192
    136c:	28 e0       	ldi	r18, 0x08	; 8
    136e:	92 07       	cpc	r25, r18
    1370:	21 f4       	brne	.+8      	; 0x137a <sysclk_enable_peripheral_clock+0x184>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1372:	68 e0       	ldi	r22, 0x08	; 8
    1374:	83 e0       	ldi	r24, 0x03	; 3
    1376:	70 c9       	rjmp	.-3360   	; 0x658 <sysclk_enable_module>
    1378:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    137a:	80 3c       	cpi	r24, 0xC0	; 192
    137c:	29 e0       	ldi	r18, 0x09	; 9
    137e:	92 07       	cpc	r25, r18
    1380:	21 f4       	brne	.+8      	; 0x138a <sysclk_enable_peripheral_clock+0x194>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1382:	68 e0       	ldi	r22, 0x08	; 8
    1384:	84 e0       	ldi	r24, 0x04	; 4
    1386:	68 c9       	rjmp	.-3376   	; 0x658 <sysclk_enable_module>
    1388:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    138a:	80 3c       	cpi	r24, 0xC0	; 192
    138c:	2a e0       	ldi	r18, 0x0A	; 10
    138e:	92 07       	cpc	r25, r18
    1390:	21 f4       	brne	.+8      	; 0x139a <sysclk_enable_peripheral_clock+0x1a4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1392:	68 e0       	ldi	r22, 0x08	; 8
    1394:	85 e0       	ldi	r24, 0x05	; 5
    1396:	60 c9       	rjmp	.-3392   	; 0x658 <sysclk_enable_module>
    1398:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    139a:	80 3c       	cpi	r24, 0xC0	; 192
    139c:	2b e0       	ldi	r18, 0x0B	; 11
    139e:	92 07       	cpc	r25, r18
    13a0:	21 f4       	brne	.+8      	; 0x13aa <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    13a2:	68 e0       	ldi	r22, 0x08	; 8
    13a4:	86 e0       	ldi	r24, 0x06	; 6
    13a6:	58 c9       	rjmp	.-3408   	; 0x658 <sysclk_enable_module>
    13a8:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    13aa:	80 3a       	cpi	r24, 0xA0	; 160
    13ac:	28 e0       	ldi	r18, 0x08	; 8
    13ae:	92 07       	cpc	r25, r18
    13b0:	21 f4       	brne	.+8      	; 0x13ba <sysclk_enable_peripheral_clock+0x1c4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    13b2:	60 e1       	ldi	r22, 0x10	; 16
    13b4:	83 e0       	ldi	r24, 0x03	; 3
    13b6:	50 c9       	rjmp	.-3424   	; 0x658 <sysclk_enable_module>
    13b8:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    13ba:	80 3a       	cpi	r24, 0xA0	; 160
    13bc:	29 e0       	ldi	r18, 0x09	; 9
    13be:	92 07       	cpc	r25, r18
    13c0:	21 f4       	brne	.+8      	; 0x13ca <sysclk_enable_peripheral_clock+0x1d4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    13c2:	60 e1       	ldi	r22, 0x10	; 16
    13c4:	84 e0       	ldi	r24, 0x04	; 4
    13c6:	48 c9       	rjmp	.-3440   	; 0x658 <sysclk_enable_module>
    13c8:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    13ca:	80 3a       	cpi	r24, 0xA0	; 160
    13cc:	2a e0       	ldi	r18, 0x0A	; 10
    13ce:	92 07       	cpc	r25, r18
    13d0:	21 f4       	brne	.+8      	; 0x13da <sysclk_enable_peripheral_clock+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    13d2:	60 e1       	ldi	r22, 0x10	; 16
    13d4:	85 e0       	ldi	r24, 0x05	; 5
    13d6:	40 c9       	rjmp	.-3456   	; 0x658 <sysclk_enable_module>
    13d8:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    13da:	80 3a       	cpi	r24, 0xA0	; 160
    13dc:	2b e0       	ldi	r18, 0x0B	; 11
    13de:	92 07       	cpc	r25, r18
    13e0:	21 f4       	brne	.+8      	; 0x13ea <sysclk_enable_peripheral_clock+0x1f4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    13e2:	60 e1       	ldi	r22, 0x10	; 16
    13e4:	86 e0       	ldi	r24, 0x06	; 6
    13e6:	38 c9       	rjmp	.-3472   	; 0x658 <sysclk_enable_module>
    13e8:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    13ea:	80 3b       	cpi	r24, 0xB0	; 176
    13ec:	28 e0       	ldi	r18, 0x08	; 8
    13ee:	92 07       	cpc	r25, r18
    13f0:	21 f4       	brne	.+8      	; 0x13fa <sysclk_enable_peripheral_clock+0x204>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    13f2:	60 e2       	ldi	r22, 0x20	; 32
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	30 c9       	rjmp	.-3488   	; 0x658 <sysclk_enable_module>
    13f8:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    13fa:	80 3b       	cpi	r24, 0xB0	; 176
    13fc:	29 e0       	ldi	r18, 0x09	; 9
    13fe:	92 07       	cpc	r25, r18
    1400:	21 f4       	brne	.+8      	; 0x140a <sysclk_enable_peripheral_clock+0x214>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1402:	60 e2       	ldi	r22, 0x20	; 32
    1404:	84 e0       	ldi	r24, 0x04	; 4
    1406:	28 c9       	rjmp	.-3504   	; 0x658 <sysclk_enable_module>
    1408:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    140a:	80 3b       	cpi	r24, 0xB0	; 176
    140c:	2a e0       	ldi	r18, 0x0A	; 10
    140e:	92 07       	cpc	r25, r18
    1410:	21 f4       	brne	.+8      	; 0x141a <sysclk_enable_peripheral_clock+0x224>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1412:	60 e2       	ldi	r22, 0x20	; 32
    1414:	85 e0       	ldi	r24, 0x05	; 5
    1416:	20 c9       	rjmp	.-3520   	; 0x658 <sysclk_enable_module>
    1418:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    141a:	80 3b       	cpi	r24, 0xB0	; 176
    141c:	2b e0       	ldi	r18, 0x0B	; 11
    141e:	92 07       	cpc	r25, r18
    1420:	21 f4       	brne	.+8      	; 0x142a <sysclk_enable_peripheral_clock+0x234>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1422:	60 e2       	ldi	r22, 0x20	; 32
    1424:	86 e0       	ldi	r24, 0x06	; 6
    1426:	18 c9       	rjmp	.-3536   	; 0x658 <sysclk_enable_module>
    1428:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    142a:	80 38       	cpi	r24, 0x80	; 128
    142c:	24 e0       	ldi	r18, 0x04	; 4
    142e:	92 07       	cpc	r25, r18
    1430:	21 f4       	brne	.+8      	; 0x143a <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1432:	60 e4       	ldi	r22, 0x40	; 64
    1434:	83 e0       	ldi	r24, 0x03	; 3
    1436:	10 c9       	rjmp	.-3552   	; 0x658 <sysclk_enable_module>
    1438:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    143a:	80 39       	cpi	r24, 0x90	; 144
    143c:	24 e0       	ldi	r18, 0x04	; 4
    143e:	92 07       	cpc	r25, r18
    1440:	21 f4       	brne	.+8      	; 0x144a <sysclk_enable_peripheral_clock+0x254>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1442:	60 e4       	ldi	r22, 0x40	; 64
    1444:	84 e0       	ldi	r24, 0x04	; 4
    1446:	08 c9       	rjmp	.-3568   	; 0x658 <sysclk_enable_module>
    1448:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    144a:	80 3a       	cpi	r24, 0xA0	; 160
    144c:	24 e0       	ldi	r18, 0x04	; 4
    144e:	92 07       	cpc	r25, r18
    1450:	21 f4       	brne	.+8      	; 0x145a <sysclk_enable_peripheral_clock+0x264>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1452:	60 e4       	ldi	r22, 0x40	; 64
    1454:	85 e0       	ldi	r24, 0x05	; 5
    1456:	00 c9       	rjmp	.-3584   	; 0x658 <sysclk_enable_module>
    1458:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    145a:	80 3b       	cpi	r24, 0xB0	; 176
    145c:	94 40       	sbci	r25, 0x04	; 4
    145e:	19 f4       	brne	.+6      	; 0x1466 <sysclk_enable_peripheral_clock+0x270>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1460:	60 e4       	ldi	r22, 0x40	; 64
    1462:	86 e0       	ldi	r24, 0x06	; 6
    1464:	f9 c8       	rjmp	.-3598   	; 0x658 <sysclk_enable_module>
    1466:	08 95       	ret

00001468 <main>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main (void)
{
	/* Initialize the system clock, 32MHz, this also turns off all peripheral clocks */
	sysclk_init();
    1468:	cd d8       	rcall	.-3686   	; 0x604 <sysclk_init>
	rtc_init();
    146a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <rtc_init>

	/* Peripheral clock inits */
	sysclk_enable_peripheral_clock(&USARTC0); //For every peripheral, you must enable the clock like shown here. Ex. Timer counters, SPI, ADCs
    146e:	80 ea       	ldi	r24, 0xA0	; 160
    1470:	98 e0       	ldi	r25, 0x08	; 8
    1472:	c1 de       	rcall	.-638    	; 0x11f6 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&ADCA); //Analog to Digital Converter clock initialization.
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	92 e0       	ldi	r25, 0x02	; 2
    1478:	be de       	rcall	.-644    	; 0x11f6 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCE0); //Timer Counter clock initialization
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	9a e0       	ldi	r25, 0x0A	; 10
    147e:	bb de       	rcall	.-650    	; 0x11f6 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCD0);
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	99 e0       	ldi	r25, 0x09	; 9
    1484:	b8 de       	rcall	.-656    	; 0x11f6 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCC0);
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	98 e0       	ldi	r25, 0x08	; 8
    148a:	b5 de       	rcall	.-662    	; 0x11f6 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&SPIC); //Serial Port Interface initialization.
    148c:	80 ec       	ldi	r24, 0xC0	; 192
    148e:	98 e0       	ldi	r25, 0x08	; 8
    1490:	b2 de       	rcall	.-668    	; 0x11f6 <sysclk_enable_peripheral_clock>
	
	/* Example, Timer Counter on PORTE */

	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES); //You must have this line for every timer counter due to a flaw in the design of the chip **************************
    1492:	64 e0       	ldi	r22, 0x04	; 4
    1494:	85 e0       	ldi	r24, 0x05	; 5
    1496:	e0 d8       	rcall	.-3648   	; 0x658 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1498:	64 e0       	ldi	r22, 0x04	; 4
    149a:	84 e0       	ldi	r24, 0x04	; 4
    149c:	dd d8       	rcall	.-3654   	; 0x658 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C,PR_SPI_bm);
    149e:	68 e0       	ldi	r22, 0x08	; 8
    14a0:	83 e0       	ldi	r24, 0x03	; 3
    14a2:	da d8       	rcall	.-3660   	; 0x658 <sysclk_enable_module>
	
	/* Initializations */;
	UART_Comms_Init();
    14a4:	64 de       	rcall	.-824    	; 0x116e <UART_Comms_Init>
	SPI_init();
    14a6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <SPI_init>
	//TCE0_init(12499,100);
	TCD0_init();
    14aa:	4d de       	rcall	.-870    	; 0x1146 <TCD0_init>
	ADC_init();
    14ac:	88 dd       	rcall	.-1264   	; 0xfbe <ADC_init>
	PORTD.DIR = 0b11111111;
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	80 93 60 06 	sts	0x0660, r24
	PORTE.DIR = 0b11111111;
    14b4:	80 93 80 06 	sts	0x0680, r24
	PORTF.DIR = 0b00000011;
    14b8:	83 e0       	ldi	r24, 0x03	; 3
    14ba:	80 93 a0 06 	sts	0x06A0, r24
	/* Flight States */
	//flightStateZero();
	//flightStateOne();
	//flightStateTwo();
	// flightStateThree();
	LED(12499,10);
    14be:	4a e0       	ldi	r20, 0x0A	; 10
    14c0:	63 ed       	ldi	r22, 0xD3	; 211
    14c2:	70 e3       	ldi	r23, 0x30	; 48
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 3b 02 	call	0x476	; 0x476 <LED>
	//buzzer(124,100);
	while (1){
		//printf("Hello, World!");
		//delay_ms(50);
		//lightChase(50);
		test();
    14cc:	77 d8       	rcall	.-3858   	; 0x5bc <test>
				EP_address = 0;
		}
		else
			printf("eeProm at %i reads %i",EP_address,nvm_eeprom_read_byte(EP_address));
		*/
	}
    14ce:	fe cf       	rjmp	.-4      	; 0x14cc <main+0x64>

000014d0 <__subsf3>:
    14d0:	50 58       	subi	r21, 0x80	; 128

000014d2 <__addsf3>:
    14d2:	bb 27       	eor	r27, r27
    14d4:	aa 27       	eor	r26, r26
    14d6:	0e d0       	rcall	.+28     	; 0x14f4 <__addsf3x>
    14d8:	a4 c1       	rjmp	.+840    	; 0x1822 <__fp_round>
    14da:	95 d1       	rcall	.+810    	; 0x1806 <__fp_pscA>
    14dc:	30 f0       	brcs	.+12     	; 0x14ea <__addsf3+0x18>
    14de:	9a d1       	rcall	.+820    	; 0x1814 <__fp_pscB>
    14e0:	20 f0       	brcs	.+8      	; 0x14ea <__addsf3+0x18>
    14e2:	31 f4       	brne	.+12     	; 0x14f0 <__addsf3+0x1e>
    14e4:	9f 3f       	cpi	r25, 0xFF	; 255
    14e6:	11 f4       	brne	.+4      	; 0x14ec <__addsf3+0x1a>
    14e8:	1e f4       	brtc	.+6      	; 0x14f0 <__addsf3+0x1e>
    14ea:	7a c1       	rjmp	.+756    	; 0x17e0 <__fp_nan>
    14ec:	0e f4       	brtc	.+2      	; 0x14f0 <__addsf3+0x1e>
    14ee:	e0 95       	com	r30
    14f0:	e7 fb       	bst	r30, 7
    14f2:	70 c1       	rjmp	.+736    	; 0x17d4 <__fp_inf>

000014f4 <__addsf3x>:
    14f4:	e9 2f       	mov	r30, r25
    14f6:	a6 d1       	rcall	.+844    	; 0x1844 <__fp_split3>
    14f8:	80 f3       	brcs	.-32     	; 0x14da <__addsf3+0x8>
    14fa:	ba 17       	cp	r27, r26
    14fc:	62 07       	cpc	r22, r18
    14fe:	73 07       	cpc	r23, r19
    1500:	84 07       	cpc	r24, r20
    1502:	95 07       	cpc	r25, r21
    1504:	18 f0       	brcs	.+6      	; 0x150c <__addsf3x+0x18>
    1506:	71 f4       	brne	.+28     	; 0x1524 <__addsf3x+0x30>
    1508:	9e f5       	brtc	.+102    	; 0x1570 <__addsf3x+0x7c>
    150a:	be c1       	rjmp	.+892    	; 0x1888 <__fp_zero>
    150c:	0e f4       	brtc	.+2      	; 0x1510 <__addsf3x+0x1c>
    150e:	e0 95       	com	r30
    1510:	0b 2e       	mov	r0, r27
    1512:	ba 2f       	mov	r27, r26
    1514:	a0 2d       	mov	r26, r0
    1516:	0b 01       	movw	r0, r22
    1518:	b9 01       	movw	r22, r18
    151a:	90 01       	movw	r18, r0
    151c:	0c 01       	movw	r0, r24
    151e:	ca 01       	movw	r24, r20
    1520:	a0 01       	movw	r20, r0
    1522:	11 24       	eor	r1, r1
    1524:	ff 27       	eor	r31, r31
    1526:	59 1b       	sub	r21, r25
    1528:	99 f0       	breq	.+38     	; 0x1550 <__addsf3x+0x5c>
    152a:	59 3f       	cpi	r21, 0xF9	; 249
    152c:	50 f4       	brcc	.+20     	; 0x1542 <__addsf3x+0x4e>
    152e:	50 3e       	cpi	r21, 0xE0	; 224
    1530:	68 f1       	brcs	.+90     	; 0x158c <__addsf3x+0x98>
    1532:	1a 16       	cp	r1, r26
    1534:	f0 40       	sbci	r31, 0x00	; 0
    1536:	a2 2f       	mov	r26, r18
    1538:	23 2f       	mov	r18, r19
    153a:	34 2f       	mov	r19, r20
    153c:	44 27       	eor	r20, r20
    153e:	58 5f       	subi	r21, 0xF8	; 248
    1540:	f3 cf       	rjmp	.-26     	; 0x1528 <__addsf3x+0x34>
    1542:	46 95       	lsr	r20
    1544:	37 95       	ror	r19
    1546:	27 95       	ror	r18
    1548:	a7 95       	ror	r26
    154a:	f0 40       	sbci	r31, 0x00	; 0
    154c:	53 95       	inc	r21
    154e:	c9 f7       	brne	.-14     	; 0x1542 <__addsf3x+0x4e>
    1550:	7e f4       	brtc	.+30     	; 0x1570 <__addsf3x+0x7c>
    1552:	1f 16       	cp	r1, r31
    1554:	ba 0b       	sbc	r27, r26
    1556:	62 0b       	sbc	r22, r18
    1558:	73 0b       	sbc	r23, r19
    155a:	84 0b       	sbc	r24, r20
    155c:	ba f0       	brmi	.+46     	; 0x158c <__addsf3x+0x98>
    155e:	91 50       	subi	r25, 0x01	; 1
    1560:	a1 f0       	breq	.+40     	; 0x158a <__addsf3x+0x96>
    1562:	ff 0f       	add	r31, r31
    1564:	bb 1f       	adc	r27, r27
    1566:	66 1f       	adc	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	c2 f7       	brpl	.-16     	; 0x155e <__addsf3x+0x6a>
    156e:	0e c0       	rjmp	.+28     	; 0x158c <__addsf3x+0x98>
    1570:	ba 0f       	add	r27, r26
    1572:	62 1f       	adc	r22, r18
    1574:	73 1f       	adc	r23, r19
    1576:	84 1f       	adc	r24, r20
    1578:	48 f4       	brcc	.+18     	; 0x158c <__addsf3x+0x98>
    157a:	87 95       	ror	r24
    157c:	77 95       	ror	r23
    157e:	67 95       	ror	r22
    1580:	b7 95       	ror	r27
    1582:	f7 95       	ror	r31
    1584:	9e 3f       	cpi	r25, 0xFE	; 254
    1586:	08 f0       	brcs	.+2      	; 0x158a <__addsf3x+0x96>
    1588:	b3 cf       	rjmp	.-154    	; 0x14f0 <__addsf3+0x1e>
    158a:	93 95       	inc	r25
    158c:	88 0f       	add	r24, r24
    158e:	08 f0       	brcs	.+2      	; 0x1592 <__addsf3x+0x9e>
    1590:	99 27       	eor	r25, r25
    1592:	ee 0f       	add	r30, r30
    1594:	97 95       	ror	r25
    1596:	87 95       	ror	r24
    1598:	08 95       	ret

0000159a <__divsf3>:
    159a:	0c d0       	rcall	.+24     	; 0x15b4 <__divsf3x>
    159c:	42 c1       	rjmp	.+644    	; 0x1822 <__fp_round>
    159e:	3a d1       	rcall	.+628    	; 0x1814 <__fp_pscB>
    15a0:	40 f0       	brcs	.+16     	; 0x15b2 <__divsf3+0x18>
    15a2:	31 d1       	rcall	.+610    	; 0x1806 <__fp_pscA>
    15a4:	30 f0       	brcs	.+12     	; 0x15b2 <__divsf3+0x18>
    15a6:	21 f4       	brne	.+8      	; 0x15b0 <__divsf3+0x16>
    15a8:	5f 3f       	cpi	r21, 0xFF	; 255
    15aa:	19 f0       	breq	.+6      	; 0x15b2 <__divsf3+0x18>
    15ac:	13 c1       	rjmp	.+550    	; 0x17d4 <__fp_inf>
    15ae:	51 11       	cpse	r21, r1
    15b0:	6c c1       	rjmp	.+728    	; 0x188a <__fp_szero>
    15b2:	16 c1       	rjmp	.+556    	; 0x17e0 <__fp_nan>

000015b4 <__divsf3x>:
    15b4:	47 d1       	rcall	.+654    	; 0x1844 <__fp_split3>
    15b6:	98 f3       	brcs	.-26     	; 0x159e <__divsf3+0x4>

000015b8 <__divsf3_pse>:
    15b8:	99 23       	and	r25, r25
    15ba:	c9 f3       	breq	.-14     	; 0x15ae <__divsf3+0x14>
    15bc:	55 23       	and	r21, r21
    15be:	b1 f3       	breq	.-20     	; 0x15ac <__divsf3+0x12>
    15c0:	95 1b       	sub	r25, r21
    15c2:	55 0b       	sbc	r21, r21
    15c4:	bb 27       	eor	r27, r27
    15c6:	aa 27       	eor	r26, r26
    15c8:	62 17       	cp	r22, r18
    15ca:	73 07       	cpc	r23, r19
    15cc:	84 07       	cpc	r24, r20
    15ce:	38 f0       	brcs	.+14     	; 0x15de <__divsf3_pse+0x26>
    15d0:	9f 5f       	subi	r25, 0xFF	; 255
    15d2:	5f 4f       	sbci	r21, 0xFF	; 255
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	44 1f       	adc	r20, r20
    15da:	aa 1f       	adc	r26, r26
    15dc:	a9 f3       	breq	.-22     	; 0x15c8 <__divsf3_pse+0x10>
    15de:	33 d0       	rcall	.+102    	; 0x1646 <__divsf3_pse+0x8e>
    15e0:	0e 2e       	mov	r0, r30
    15e2:	3a f0       	brmi	.+14     	; 0x15f2 <__divsf3_pse+0x3a>
    15e4:	e0 e8       	ldi	r30, 0x80	; 128
    15e6:	30 d0       	rcall	.+96     	; 0x1648 <__divsf3_pse+0x90>
    15e8:	91 50       	subi	r25, 0x01	; 1
    15ea:	50 40       	sbci	r21, 0x00	; 0
    15ec:	e6 95       	lsr	r30
    15ee:	00 1c       	adc	r0, r0
    15f0:	ca f7       	brpl	.-14     	; 0x15e4 <__divsf3_pse+0x2c>
    15f2:	29 d0       	rcall	.+82     	; 0x1646 <__divsf3_pse+0x8e>
    15f4:	fe 2f       	mov	r31, r30
    15f6:	27 d0       	rcall	.+78     	; 0x1646 <__divsf3_pse+0x8e>
    15f8:	66 0f       	add	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 1f       	adc	r24, r24
    15fe:	bb 1f       	adc	r27, r27
    1600:	26 17       	cp	r18, r22
    1602:	37 07       	cpc	r19, r23
    1604:	48 07       	cpc	r20, r24
    1606:	ab 07       	cpc	r26, r27
    1608:	b0 e8       	ldi	r27, 0x80	; 128
    160a:	09 f0       	breq	.+2      	; 0x160e <__divsf3_pse+0x56>
    160c:	bb 0b       	sbc	r27, r27
    160e:	80 2d       	mov	r24, r0
    1610:	bf 01       	movw	r22, r30
    1612:	ff 27       	eor	r31, r31
    1614:	93 58       	subi	r25, 0x83	; 131
    1616:	5f 4f       	sbci	r21, 0xFF	; 255
    1618:	2a f0       	brmi	.+10     	; 0x1624 <__divsf3_pse+0x6c>
    161a:	9e 3f       	cpi	r25, 0xFE	; 254
    161c:	51 05       	cpc	r21, r1
    161e:	68 f0       	brcs	.+26     	; 0x163a <__divsf3_pse+0x82>
    1620:	d9 c0       	rjmp	.+434    	; 0x17d4 <__fp_inf>
    1622:	33 c1       	rjmp	.+614    	; 0x188a <__fp_szero>
    1624:	5f 3f       	cpi	r21, 0xFF	; 255
    1626:	ec f3       	brlt	.-6      	; 0x1622 <__divsf3_pse+0x6a>
    1628:	98 3e       	cpi	r25, 0xE8	; 232
    162a:	dc f3       	brlt	.-10     	; 0x1622 <__divsf3_pse+0x6a>
    162c:	86 95       	lsr	r24
    162e:	77 95       	ror	r23
    1630:	67 95       	ror	r22
    1632:	b7 95       	ror	r27
    1634:	f7 95       	ror	r31
    1636:	9f 5f       	subi	r25, 0xFF	; 255
    1638:	c9 f7       	brne	.-14     	; 0x162c <__divsf3_pse+0x74>
    163a:	88 0f       	add	r24, r24
    163c:	91 1d       	adc	r25, r1
    163e:	96 95       	lsr	r25
    1640:	87 95       	ror	r24
    1642:	97 f9       	bld	r25, 7
    1644:	08 95       	ret
    1646:	e1 e0       	ldi	r30, 0x01	; 1
    1648:	66 0f       	add	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	88 1f       	adc	r24, r24
    164e:	bb 1f       	adc	r27, r27
    1650:	62 17       	cp	r22, r18
    1652:	73 07       	cpc	r23, r19
    1654:	84 07       	cpc	r24, r20
    1656:	ba 07       	cpc	r27, r26
    1658:	20 f0       	brcs	.+8      	; 0x1662 <__divsf3_pse+0xaa>
    165a:	62 1b       	sub	r22, r18
    165c:	73 0b       	sbc	r23, r19
    165e:	84 0b       	sbc	r24, r20
    1660:	ba 0b       	sbc	r27, r26
    1662:	ee 1f       	adc	r30, r30
    1664:	88 f7       	brcc	.-30     	; 0x1648 <__divsf3_pse+0x90>
    1666:	e0 95       	com	r30
    1668:	08 95       	ret

0000166a <__fixsfdi>:
    166a:	be e3       	ldi	r27, 0x3E	; 62
    166c:	04 d0       	rcall	.+8      	; 0x1676 <__fixunssfdi+0x2>
    166e:	08 f4       	brcc	.+2      	; 0x1672 <__fixsfdi+0x8>
    1670:	90 e8       	ldi	r25, 0x80	; 128
    1672:	08 95       	ret

00001674 <__fixunssfdi>:
    1674:	bf e3       	ldi	r27, 0x3F	; 63
    1676:	22 27       	eor	r18, r18
    1678:	33 27       	eor	r19, r19
    167a:	a9 01       	movw	r20, r18
    167c:	eb d0       	rcall	.+470    	; 0x1854 <__fp_splitA>
    167e:	58 f1       	brcs	.+86     	; 0x16d6 <__fixunssfdi+0x62>
    1680:	9f 57       	subi	r25, 0x7F	; 127
    1682:	40 f1       	brcs	.+80     	; 0x16d4 <__fixunssfdi+0x60>
    1684:	b9 17       	cp	r27, r25
    1686:	38 f1       	brcs	.+78     	; 0x16d6 <__fixunssfdi+0x62>
    1688:	bf e3       	ldi	r27, 0x3F	; 63
    168a:	b9 1b       	sub	r27, r25
    168c:	99 27       	eor	r25, r25
    168e:	b8 50       	subi	r27, 0x08	; 8
    1690:	3a f4       	brpl	.+14     	; 0x16a0 <__fixunssfdi+0x2c>
    1692:	66 0f       	add	r22, r22
    1694:	77 1f       	adc	r23, r23
    1696:	88 1f       	adc	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	b3 95       	inc	r27
    169c:	d2 f3       	brmi	.-12     	; 0x1692 <__fixunssfdi+0x1e>
    169e:	16 c0       	rjmp	.+44     	; 0x16cc <__fixunssfdi+0x58>
    16a0:	b8 50       	subi	r27, 0x08	; 8
    16a2:	4a f0       	brmi	.+18     	; 0x16b6 <__fixunssfdi+0x42>
    16a4:	23 2f       	mov	r18, r19
    16a6:	34 2f       	mov	r19, r20
    16a8:	45 2f       	mov	r20, r21
    16aa:	56 2f       	mov	r21, r22
    16ac:	67 2f       	mov	r22, r23
    16ae:	78 2f       	mov	r23, r24
    16b0:	88 27       	eor	r24, r24
    16b2:	b8 50       	subi	r27, 0x08	; 8
    16b4:	ba f7       	brpl	.-18     	; 0x16a4 <__fixunssfdi+0x30>
    16b6:	b8 5f       	subi	r27, 0xF8	; 248
    16b8:	49 f0       	breq	.+18     	; 0x16cc <__fixunssfdi+0x58>
    16ba:	86 95       	lsr	r24
    16bc:	77 95       	ror	r23
    16be:	67 95       	ror	r22
    16c0:	57 95       	ror	r21
    16c2:	47 95       	ror	r20
    16c4:	37 95       	ror	r19
    16c6:	27 95       	ror	r18
    16c8:	ba 95       	dec	r27
    16ca:	b9 f7       	brne	.-18     	; 0x16ba <__fixunssfdi+0x46>
    16cc:	0e f4       	brtc	.+2      	; 0x16d0 <__fixunssfdi+0x5c>
    16ce:	8b d0       	rcall	.+278    	; 0x17e6 <__fp_negdi>
    16d0:	88 94       	clc
    16d2:	08 95       	ret
    16d4:	88 94       	clc
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	cb 01       	movw	r24, r22
    16dc:	08 95       	ret

000016de <__floatunsisf>:
    16de:	e8 94       	clt
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <__floatsisf+0x12>

000016e2 <__floatsisf>:
    16e2:	97 fb       	bst	r25, 7
    16e4:	3e f4       	brtc	.+14     	; 0x16f4 <__floatsisf+0x12>
    16e6:	90 95       	com	r25
    16e8:	80 95       	com	r24
    16ea:	70 95       	com	r23
    16ec:	61 95       	neg	r22
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	8f 4f       	sbci	r24, 0xFF	; 255
    16f2:	9f 4f       	sbci	r25, 0xFF	; 255
    16f4:	99 23       	and	r25, r25
    16f6:	a9 f0       	breq	.+42     	; 0x1722 <__floatsisf+0x40>
    16f8:	f9 2f       	mov	r31, r25
    16fa:	96 e9       	ldi	r25, 0x96	; 150
    16fc:	bb 27       	eor	r27, r27
    16fe:	93 95       	inc	r25
    1700:	f6 95       	lsr	r31
    1702:	87 95       	ror	r24
    1704:	77 95       	ror	r23
    1706:	67 95       	ror	r22
    1708:	b7 95       	ror	r27
    170a:	f1 11       	cpse	r31, r1
    170c:	f8 cf       	rjmp	.-16     	; 0x16fe <__floatsisf+0x1c>
    170e:	fa f4       	brpl	.+62     	; 0x174e <__floatsisf+0x6c>
    1710:	bb 0f       	add	r27, r27
    1712:	11 f4       	brne	.+4      	; 0x1718 <__floatsisf+0x36>
    1714:	60 ff       	sbrs	r22, 0
    1716:	1b c0       	rjmp	.+54     	; 0x174e <__floatsisf+0x6c>
    1718:	6f 5f       	subi	r22, 0xFF	; 255
    171a:	7f 4f       	sbci	r23, 0xFF	; 255
    171c:	8f 4f       	sbci	r24, 0xFF	; 255
    171e:	9f 4f       	sbci	r25, 0xFF	; 255
    1720:	16 c0       	rjmp	.+44     	; 0x174e <__floatsisf+0x6c>
    1722:	88 23       	and	r24, r24
    1724:	11 f0       	breq	.+4      	; 0x172a <__floatsisf+0x48>
    1726:	96 e9       	ldi	r25, 0x96	; 150
    1728:	11 c0       	rjmp	.+34     	; 0x174c <__floatsisf+0x6a>
    172a:	77 23       	and	r23, r23
    172c:	21 f0       	breq	.+8      	; 0x1736 <__floatsisf+0x54>
    172e:	9e e8       	ldi	r25, 0x8E	; 142
    1730:	87 2f       	mov	r24, r23
    1732:	76 2f       	mov	r23, r22
    1734:	05 c0       	rjmp	.+10     	; 0x1740 <__floatsisf+0x5e>
    1736:	66 23       	and	r22, r22
    1738:	71 f0       	breq	.+28     	; 0x1756 <__floatsisf+0x74>
    173a:	96 e8       	ldi	r25, 0x86	; 134
    173c:	86 2f       	mov	r24, r22
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	2a f0       	brmi	.+10     	; 0x174e <__floatsisf+0x6c>
    1744:	9a 95       	dec	r25
    1746:	66 0f       	add	r22, r22
    1748:	77 1f       	adc	r23, r23
    174a:	88 1f       	adc	r24, r24
    174c:	da f7       	brpl	.-10     	; 0x1744 <__floatsisf+0x62>
    174e:	88 0f       	add	r24, r24
    1750:	96 95       	lsr	r25
    1752:	87 95       	ror	r24
    1754:	97 f9       	bld	r25, 7
    1756:	08 95       	ret

00001758 <__floatundisf>:
    1758:	e8 94       	clt

0000175a <__fp_di2sf>:
    175a:	f9 2f       	mov	r31, r25
    175c:	96 eb       	ldi	r25, 0xB6	; 182
    175e:	ff 23       	and	r31, r31
    1760:	81 f0       	breq	.+32     	; 0x1782 <__fp_di2sf+0x28>
    1762:	12 16       	cp	r1, r18
    1764:	13 06       	cpc	r1, r19
    1766:	14 06       	cpc	r1, r20
    1768:	44 0b       	sbc	r20, r20
    176a:	93 95       	inc	r25
    176c:	f6 95       	lsr	r31
    176e:	87 95       	ror	r24
    1770:	77 95       	ror	r23
    1772:	67 95       	ror	r22
    1774:	57 95       	ror	r21
    1776:	40 40       	sbci	r20, 0x00	; 0
    1778:	ff 23       	and	r31, r31
    177a:	b9 f7       	brne	.-18     	; 0x176a <__fp_di2sf+0x10>
    177c:	1b c0       	rjmp	.+54     	; 0x17b4 <__fp_di2sf+0x5a>
    177e:	99 27       	eor	r25, r25
    1780:	08 95       	ret
    1782:	88 23       	and	r24, r24
    1784:	51 f4       	brne	.+20     	; 0x179a <__fp_di2sf+0x40>
    1786:	98 50       	subi	r25, 0x08	; 8
    1788:	d2 f7       	brpl	.-12     	; 0x177e <__fp_di2sf+0x24>
    178a:	87 2b       	or	r24, r23
    178c:	76 2f       	mov	r23, r22
    178e:	65 2f       	mov	r22, r21
    1790:	54 2f       	mov	r21, r20
    1792:	43 2f       	mov	r20, r19
    1794:	32 2f       	mov	r19, r18
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	b1 f3       	breq	.-20     	; 0x1786 <__fp_di2sf+0x2c>
    179a:	12 16       	cp	r1, r18
    179c:	13 06       	cpc	r1, r19
    179e:	14 06       	cpc	r1, r20
    17a0:	44 0b       	sbc	r20, r20
    17a2:	88 23       	and	r24, r24
    17a4:	3a f0       	brmi	.+14     	; 0x17b4 <__fp_di2sf+0x5a>
    17a6:	9a 95       	dec	r25
    17a8:	44 0f       	add	r20, r20
    17aa:	55 1f       	adc	r21, r21
    17ac:	66 1f       	adc	r22, r22
    17ae:	77 1f       	adc	r23, r23
    17b0:	88 1f       	adc	r24, r24
    17b2:	ca f7       	brpl	.-14     	; 0x17a6 <__fp_di2sf+0x4c>
    17b4:	55 23       	and	r21, r21
    17b6:	4a f4       	brpl	.+18     	; 0x17ca <__fp_di2sf+0x70>
    17b8:	44 0f       	add	r20, r20
    17ba:	55 1f       	adc	r21, r21
    17bc:	11 f4       	brne	.+4      	; 0x17c2 <__fp_di2sf+0x68>
    17be:	60 ff       	sbrs	r22, 0
    17c0:	04 c0       	rjmp	.+8      	; 0x17ca <__fp_di2sf+0x70>
    17c2:	6f 5f       	subi	r22, 0xFF	; 255
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	8f 4f       	sbci	r24, 0xFF	; 255
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	88 0f       	add	r24, r24
    17cc:	96 95       	lsr	r25
    17ce:	87 95       	ror	r24
    17d0:	97 f9       	bld	r25, 7
    17d2:	08 95       	ret

000017d4 <__fp_inf>:
    17d4:	97 f9       	bld	r25, 7
    17d6:	9f 67       	ori	r25, 0x7F	; 127
    17d8:	80 e8       	ldi	r24, 0x80	; 128
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	08 95       	ret

000017e0 <__fp_nan>:
    17e0:	9f ef       	ldi	r25, 0xFF	; 255
    17e2:	80 ec       	ldi	r24, 0xC0	; 192
    17e4:	08 95       	ret

000017e6 <__fp_negdi>:
    17e6:	90 95       	com	r25
    17e8:	80 95       	com	r24
    17ea:	70 95       	com	r23
    17ec:	60 95       	com	r22
    17ee:	50 95       	com	r21
    17f0:	40 95       	com	r20
    17f2:	30 95       	com	r19
    17f4:	21 95       	neg	r18
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	4f 4f       	sbci	r20, 0xFF	; 255
    17fa:	5f 4f       	sbci	r21, 0xFF	; 255
    17fc:	6f 4f       	sbci	r22, 0xFF	; 255
    17fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1800:	8f 4f       	sbci	r24, 0xFF	; 255
    1802:	9f 4f       	sbci	r25, 0xFF	; 255
    1804:	08 95       	ret

00001806 <__fp_pscA>:
    1806:	00 24       	eor	r0, r0
    1808:	0a 94       	dec	r0
    180a:	16 16       	cp	r1, r22
    180c:	17 06       	cpc	r1, r23
    180e:	18 06       	cpc	r1, r24
    1810:	09 06       	cpc	r0, r25
    1812:	08 95       	ret

00001814 <__fp_pscB>:
    1814:	00 24       	eor	r0, r0
    1816:	0a 94       	dec	r0
    1818:	12 16       	cp	r1, r18
    181a:	13 06       	cpc	r1, r19
    181c:	14 06       	cpc	r1, r20
    181e:	05 06       	cpc	r0, r21
    1820:	08 95       	ret

00001822 <__fp_round>:
    1822:	09 2e       	mov	r0, r25
    1824:	03 94       	inc	r0
    1826:	00 0c       	add	r0, r0
    1828:	11 f4       	brne	.+4      	; 0x182e <__fp_round+0xc>
    182a:	88 23       	and	r24, r24
    182c:	52 f0       	brmi	.+20     	; 0x1842 <__fp_round+0x20>
    182e:	bb 0f       	add	r27, r27
    1830:	40 f4       	brcc	.+16     	; 0x1842 <__fp_round+0x20>
    1832:	bf 2b       	or	r27, r31
    1834:	11 f4       	brne	.+4      	; 0x183a <__fp_round+0x18>
    1836:	60 ff       	sbrs	r22, 0
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <__fp_round+0x20>
    183a:	6f 5f       	subi	r22, 0xFF	; 255
    183c:	7f 4f       	sbci	r23, 0xFF	; 255
    183e:	8f 4f       	sbci	r24, 0xFF	; 255
    1840:	9f 4f       	sbci	r25, 0xFF	; 255
    1842:	08 95       	ret

00001844 <__fp_split3>:
    1844:	57 fd       	sbrc	r21, 7
    1846:	90 58       	subi	r25, 0x80	; 128
    1848:	44 0f       	add	r20, r20
    184a:	55 1f       	adc	r21, r21
    184c:	59 f0       	breq	.+22     	; 0x1864 <__fp_splitA+0x10>
    184e:	5f 3f       	cpi	r21, 0xFF	; 255
    1850:	71 f0       	breq	.+28     	; 0x186e <__fp_splitA+0x1a>
    1852:	47 95       	ror	r20

00001854 <__fp_splitA>:
    1854:	88 0f       	add	r24, r24
    1856:	97 fb       	bst	r25, 7
    1858:	99 1f       	adc	r25, r25
    185a:	61 f0       	breq	.+24     	; 0x1874 <__fp_splitA+0x20>
    185c:	9f 3f       	cpi	r25, 0xFF	; 255
    185e:	79 f0       	breq	.+30     	; 0x187e <__fp_splitA+0x2a>
    1860:	87 95       	ror	r24
    1862:	08 95       	ret
    1864:	12 16       	cp	r1, r18
    1866:	13 06       	cpc	r1, r19
    1868:	14 06       	cpc	r1, r20
    186a:	55 1f       	adc	r21, r21
    186c:	f2 cf       	rjmp	.-28     	; 0x1852 <__fp_split3+0xe>
    186e:	46 95       	lsr	r20
    1870:	f1 df       	rcall	.-30     	; 0x1854 <__fp_splitA>
    1872:	08 c0       	rjmp	.+16     	; 0x1884 <__fp_splitA+0x30>
    1874:	16 16       	cp	r1, r22
    1876:	17 06       	cpc	r1, r23
    1878:	18 06       	cpc	r1, r24
    187a:	99 1f       	adc	r25, r25
    187c:	f1 cf       	rjmp	.-30     	; 0x1860 <__fp_splitA+0xc>
    187e:	86 95       	lsr	r24
    1880:	71 05       	cpc	r23, r1
    1882:	61 05       	cpc	r22, r1
    1884:	08 94       	sec
    1886:	08 95       	ret

00001888 <__fp_zero>:
    1888:	e8 94       	clt

0000188a <__fp_szero>:
    188a:	bb 27       	eor	r27, r27
    188c:	66 27       	eor	r22, r22
    188e:	77 27       	eor	r23, r23
    1890:	cb 01       	movw	r24, r22
    1892:	97 f9       	bld	r25, 7
    1894:	08 95       	ret
    1896:	0e f0       	brts	.+2      	; 0x189a <__fp_szero+0x10>
    1898:	a6 c0       	rjmp	.+332    	; 0x19e6 <__fp_mpack>
    189a:	a2 cf       	rjmp	.-188    	; 0x17e0 <__fp_nan>
    189c:	68 94       	set
    189e:	9a cf       	rjmp	.-204    	; 0x17d4 <__fp_inf>

000018a0 <log>:
    18a0:	d9 df       	rcall	.-78     	; 0x1854 <__fp_splitA>
    18a2:	c8 f3       	brcs	.-14     	; 0x1896 <__fp_szero+0xc>
    18a4:	99 23       	and	r25, r25
    18a6:	d1 f3       	breq	.-12     	; 0x189c <__fp_szero+0x12>
    18a8:	c6 f3       	brts	.-16     	; 0x189a <__fp_szero+0x10>
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	1f 93       	push	r17
    18b0:	0f 93       	push	r16
    18b2:	ff 92       	push	r15
    18b4:	c9 2f       	mov	r28, r25
    18b6:	dd 27       	eor	r29, r29
    18b8:	88 23       	and	r24, r24
    18ba:	2a f0       	brmi	.+10     	; 0x18c6 <log+0x26>
    18bc:	21 97       	sbiw	r28, 0x01	; 1
    18be:	66 0f       	add	r22, r22
    18c0:	77 1f       	adc	r23, r23
    18c2:	88 1f       	adc	r24, r24
    18c4:	da f7       	brpl	.-10     	; 0x18bc <log+0x1c>
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e8       	ldi	r20, 0x80	; 128
    18cc:	5f eb       	ldi	r21, 0xBF	; 191
    18ce:	9f e3       	ldi	r25, 0x3F	; 63
    18d0:	88 39       	cpi	r24, 0x98	; 152
    18d2:	20 f0       	brcs	.+8      	; 0x18dc <log+0x3c>
    18d4:	80 3e       	cpi	r24, 0xE0	; 224
    18d6:	30 f0       	brcs	.+12     	; 0x18e4 <log+0x44>
    18d8:	21 96       	adiw	r28, 0x01	; 1
    18da:	8f 77       	andi	r24, 0x7F	; 127
    18dc:	fa dd       	rcall	.-1036   	; 0x14d2 <__addsf3>
    18de:	e4 ef       	ldi	r30, 0xF4	; 244
    18e0:	f1 e0       	ldi	r31, 0x01	; 1
    18e2:	03 c0       	rjmp	.+6      	; 0x18ea <log+0x4a>
    18e4:	f6 dd       	rcall	.-1044   	; 0x14d2 <__addsf3>
    18e6:	e1 e2       	ldi	r30, 0x21	; 33
    18e8:	f2 e0       	ldi	r31, 0x02	; 2
    18ea:	8b d0       	rcall	.+278    	; 0x1a02 <__fp_powser>
    18ec:	8b 01       	movw	r16, r22
    18ee:	be 01       	movw	r22, r28
    18f0:	ec 01       	movw	r28, r24
    18f2:	fb 2e       	mov	r15, r27
    18f4:	6f 57       	subi	r22, 0x7F	; 127
    18f6:	71 09       	sbc	r23, r1
    18f8:	75 95       	asr	r23
    18fa:	77 1f       	adc	r23, r23
    18fc:	88 0b       	sbc	r24, r24
    18fe:	99 0b       	sbc	r25, r25
    1900:	f0 de       	rcall	.-544    	; 0x16e2 <__floatsisf>
    1902:	28 e1       	ldi	r18, 0x18	; 24
    1904:	32 e7       	ldi	r19, 0x72	; 114
    1906:	41 e3       	ldi	r20, 0x31	; 49
    1908:	5f e3       	ldi	r21, 0x3F	; 63
    190a:	16 d0       	rcall	.+44     	; 0x1938 <__mulsf3x>
    190c:	af 2d       	mov	r26, r15
    190e:	98 01       	movw	r18, r16
    1910:	ae 01       	movw	r20, r28
    1912:	ff 90       	pop	r15
    1914:	0f 91       	pop	r16
    1916:	1f 91       	pop	r17
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	eb dd       	rcall	.-1066   	; 0x14f4 <__addsf3x>
    191e:	81 cf       	rjmp	.-254    	; 0x1822 <__fp_round>

00001920 <__mulsf3>:
    1920:	0b d0       	rcall	.+22     	; 0x1938 <__mulsf3x>
    1922:	7f cf       	rjmp	.-258    	; 0x1822 <__fp_round>
    1924:	70 df       	rcall	.-288    	; 0x1806 <__fp_pscA>
    1926:	28 f0       	brcs	.+10     	; 0x1932 <__mulsf3+0x12>
    1928:	75 df       	rcall	.-278    	; 0x1814 <__fp_pscB>
    192a:	18 f0       	brcs	.+6      	; 0x1932 <__mulsf3+0x12>
    192c:	95 23       	and	r25, r21
    192e:	09 f0       	breq	.+2      	; 0x1932 <__mulsf3+0x12>
    1930:	51 cf       	rjmp	.-350    	; 0x17d4 <__fp_inf>
    1932:	56 cf       	rjmp	.-340    	; 0x17e0 <__fp_nan>
    1934:	11 24       	eor	r1, r1
    1936:	a9 cf       	rjmp	.-174    	; 0x188a <__fp_szero>

00001938 <__mulsf3x>:
    1938:	85 df       	rcall	.-246    	; 0x1844 <__fp_split3>
    193a:	a0 f3       	brcs	.-24     	; 0x1924 <__mulsf3+0x4>

0000193c <__mulsf3_pse>:
    193c:	95 9f       	mul	r25, r21
    193e:	d1 f3       	breq	.-12     	; 0x1934 <__mulsf3+0x14>
    1940:	95 0f       	add	r25, r21
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	55 1f       	adc	r21, r21
    1946:	62 9f       	mul	r22, r18
    1948:	f0 01       	movw	r30, r0
    194a:	72 9f       	mul	r23, r18
    194c:	bb 27       	eor	r27, r27
    194e:	f0 0d       	add	r31, r0
    1950:	b1 1d       	adc	r27, r1
    1952:	63 9f       	mul	r22, r19
    1954:	aa 27       	eor	r26, r26
    1956:	f0 0d       	add	r31, r0
    1958:	b1 1d       	adc	r27, r1
    195a:	aa 1f       	adc	r26, r26
    195c:	64 9f       	mul	r22, r20
    195e:	66 27       	eor	r22, r22
    1960:	b0 0d       	add	r27, r0
    1962:	a1 1d       	adc	r26, r1
    1964:	66 1f       	adc	r22, r22
    1966:	82 9f       	mul	r24, r18
    1968:	22 27       	eor	r18, r18
    196a:	b0 0d       	add	r27, r0
    196c:	a1 1d       	adc	r26, r1
    196e:	62 1f       	adc	r22, r18
    1970:	73 9f       	mul	r23, r19
    1972:	b0 0d       	add	r27, r0
    1974:	a1 1d       	adc	r26, r1
    1976:	62 1f       	adc	r22, r18
    1978:	83 9f       	mul	r24, r19
    197a:	a0 0d       	add	r26, r0
    197c:	61 1d       	adc	r22, r1
    197e:	22 1f       	adc	r18, r18
    1980:	74 9f       	mul	r23, r20
    1982:	33 27       	eor	r19, r19
    1984:	a0 0d       	add	r26, r0
    1986:	61 1d       	adc	r22, r1
    1988:	23 1f       	adc	r18, r19
    198a:	84 9f       	mul	r24, r20
    198c:	60 0d       	add	r22, r0
    198e:	21 1d       	adc	r18, r1
    1990:	82 2f       	mov	r24, r18
    1992:	76 2f       	mov	r23, r22
    1994:	6a 2f       	mov	r22, r26
    1996:	11 24       	eor	r1, r1
    1998:	9f 57       	subi	r25, 0x7F	; 127
    199a:	50 40       	sbci	r21, 0x00	; 0
    199c:	8a f0       	brmi	.+34     	; 0x19c0 <__mulsf3_pse+0x84>
    199e:	e1 f0       	breq	.+56     	; 0x19d8 <__mulsf3_pse+0x9c>
    19a0:	88 23       	and	r24, r24
    19a2:	4a f0       	brmi	.+18     	; 0x19b6 <__mulsf3_pse+0x7a>
    19a4:	ee 0f       	add	r30, r30
    19a6:	ff 1f       	adc	r31, r31
    19a8:	bb 1f       	adc	r27, r27
    19aa:	66 1f       	adc	r22, r22
    19ac:	77 1f       	adc	r23, r23
    19ae:	88 1f       	adc	r24, r24
    19b0:	91 50       	subi	r25, 0x01	; 1
    19b2:	50 40       	sbci	r21, 0x00	; 0
    19b4:	a9 f7       	brne	.-22     	; 0x19a0 <__mulsf3_pse+0x64>
    19b6:	9e 3f       	cpi	r25, 0xFE	; 254
    19b8:	51 05       	cpc	r21, r1
    19ba:	70 f0       	brcs	.+28     	; 0x19d8 <__mulsf3_pse+0x9c>
    19bc:	0b cf       	rjmp	.-490    	; 0x17d4 <__fp_inf>
    19be:	65 cf       	rjmp	.-310    	; 0x188a <__fp_szero>
    19c0:	5f 3f       	cpi	r21, 0xFF	; 255
    19c2:	ec f3       	brlt	.-6      	; 0x19be <__mulsf3_pse+0x82>
    19c4:	98 3e       	cpi	r25, 0xE8	; 232
    19c6:	dc f3       	brlt	.-10     	; 0x19be <__mulsf3_pse+0x82>
    19c8:	86 95       	lsr	r24
    19ca:	77 95       	ror	r23
    19cc:	67 95       	ror	r22
    19ce:	b7 95       	ror	r27
    19d0:	f7 95       	ror	r31
    19d2:	e7 95       	ror	r30
    19d4:	9f 5f       	subi	r25, 0xFF	; 255
    19d6:	c1 f7       	brne	.-16     	; 0x19c8 <__mulsf3_pse+0x8c>
    19d8:	fe 2b       	or	r31, r30
    19da:	88 0f       	add	r24, r24
    19dc:	91 1d       	adc	r25, r1
    19de:	96 95       	lsr	r25
    19e0:	87 95       	ror	r24
    19e2:	97 f9       	bld	r25, 7
    19e4:	08 95       	ret

000019e6 <__fp_mpack>:
    19e6:	9f 3f       	cpi	r25, 0xFF	; 255
    19e8:	31 f0       	breq	.+12     	; 0x19f6 <__fp_mpack_finite+0xc>

000019ea <__fp_mpack_finite>:
    19ea:	91 50       	subi	r25, 0x01	; 1
    19ec:	20 f4       	brcc	.+8      	; 0x19f6 <__fp_mpack_finite+0xc>
    19ee:	87 95       	ror	r24
    19f0:	77 95       	ror	r23
    19f2:	67 95       	ror	r22
    19f4:	b7 95       	ror	r27
    19f6:	88 0f       	add	r24, r24
    19f8:	91 1d       	adc	r25, r1
    19fa:	96 95       	lsr	r25
    19fc:	87 95       	ror	r24
    19fe:	97 f9       	bld	r25, 7
    1a00:	08 95       	ret

00001a02 <__fp_powser>:
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	1f 93       	push	r17
    1a08:	0f 93       	push	r16
    1a0a:	ff 92       	push	r15
    1a0c:	ef 92       	push	r14
    1a0e:	df 92       	push	r13
    1a10:	7b 01       	movw	r14, r22
    1a12:	8c 01       	movw	r16, r24
    1a14:	68 94       	set
    1a16:	05 c0       	rjmp	.+10     	; 0x1a22 <__fp_powser+0x20>
    1a18:	da 2e       	mov	r13, r26
    1a1a:	ef 01       	movw	r28, r30
    1a1c:	8d df       	rcall	.-230    	; 0x1938 <__mulsf3x>
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e8 94       	clt
    1a22:	a5 91       	lpm	r26, Z+
    1a24:	25 91       	lpm	r18, Z+
    1a26:	35 91       	lpm	r19, Z+
    1a28:	45 91       	lpm	r20, Z+
    1a2a:	55 91       	lpm	r21, Z+
    1a2c:	ae f3       	brts	.-22     	; 0x1a18 <__fp_powser+0x16>
    1a2e:	ef 01       	movw	r28, r30
    1a30:	61 dd       	rcall	.-1342   	; 0x14f4 <__addsf3x>
    1a32:	fe 01       	movw	r30, r28
    1a34:	97 01       	movw	r18, r14
    1a36:	a8 01       	movw	r20, r16
    1a38:	da 94       	dec	r13
    1a3a:	79 f7       	brne	.-34     	; 0x1a1a <__fp_powser+0x18>
    1a3c:	df 90       	pop	r13
    1a3e:	ef 90       	pop	r14
    1a40:	ff 90       	pop	r15
    1a42:	0f 91       	pop	r16
    1a44:	1f 91       	pop	r17
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <__udivmodhi4>:
    1a4c:	aa 1b       	sub	r26, r26
    1a4e:	bb 1b       	sub	r27, r27
    1a50:	51 e1       	ldi	r21, 0x11	; 17
    1a52:	07 c0       	rjmp	.+14     	; 0x1a62 <__udivmodhi4_ep>

00001a54 <__udivmodhi4_loop>:
    1a54:	aa 1f       	adc	r26, r26
    1a56:	bb 1f       	adc	r27, r27
    1a58:	a6 17       	cp	r26, r22
    1a5a:	b7 07       	cpc	r27, r23
    1a5c:	10 f0       	brcs	.+4      	; 0x1a62 <__udivmodhi4_ep>
    1a5e:	a6 1b       	sub	r26, r22
    1a60:	b7 0b       	sbc	r27, r23

00001a62 <__udivmodhi4_ep>:
    1a62:	88 1f       	adc	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	5a 95       	dec	r21
    1a68:	a9 f7       	brne	.-22     	; 0x1a54 <__udivmodhi4_loop>
    1a6a:	80 95       	com	r24
    1a6c:	90 95       	com	r25
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	08 95       	ret

00001a74 <__udivmodsi4>:
    1a74:	a1 e2       	ldi	r26, 0x21	; 33
    1a76:	1a 2e       	mov	r1, r26
    1a78:	aa 1b       	sub	r26, r26
    1a7a:	bb 1b       	sub	r27, r27
    1a7c:	fd 01       	movw	r30, r26
    1a7e:	0d c0       	rjmp	.+26     	; 0x1a9a <__udivmodsi4_ep>

00001a80 <__udivmodsi4_loop>:
    1a80:	aa 1f       	adc	r26, r26
    1a82:	bb 1f       	adc	r27, r27
    1a84:	ee 1f       	adc	r30, r30
    1a86:	ff 1f       	adc	r31, r31
    1a88:	a2 17       	cp	r26, r18
    1a8a:	b3 07       	cpc	r27, r19
    1a8c:	e4 07       	cpc	r30, r20
    1a8e:	f5 07       	cpc	r31, r21
    1a90:	20 f0       	brcs	.+8      	; 0x1a9a <__udivmodsi4_ep>
    1a92:	a2 1b       	sub	r26, r18
    1a94:	b3 0b       	sbc	r27, r19
    1a96:	e4 0b       	sbc	r30, r20
    1a98:	f5 0b       	sbc	r31, r21

00001a9a <__udivmodsi4_ep>:
    1a9a:	66 1f       	adc	r22, r22
    1a9c:	77 1f       	adc	r23, r23
    1a9e:	88 1f       	adc	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	1a 94       	dec	r1
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <__udivmodsi4_loop>
    1aa6:	60 95       	com	r22
    1aa8:	70 95       	com	r23
    1aaa:	80 95       	com	r24
    1aac:	90 95       	com	r25
    1aae:	9b 01       	movw	r18, r22
    1ab0:	ac 01       	movw	r20, r24
    1ab2:	bd 01       	movw	r22, r26
    1ab4:	cf 01       	movw	r24, r30
    1ab6:	08 95       	ret

00001ab8 <__muldi3>:
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	1f 93       	push	r17
    1abe:	0f 93       	push	r16
    1ac0:	9a 9d       	mul	r25, r10
    1ac2:	f0 2d       	mov	r31, r0
    1ac4:	21 9f       	mul	r18, r17
    1ac6:	f0 0d       	add	r31, r0
    1ac8:	8b 9d       	mul	r24, r11
    1aca:	f0 0d       	add	r31, r0
    1acc:	8a 9d       	mul	r24, r10
    1ace:	e0 2d       	mov	r30, r0
    1ad0:	f1 0d       	add	r31, r1
    1ad2:	03 9f       	mul	r16, r19
    1ad4:	f0 0d       	add	r31, r0
    1ad6:	02 9f       	mul	r16, r18
    1ad8:	e0 0d       	add	r30, r0
    1ada:	f1 1d       	adc	r31, r1
    1adc:	4e 9d       	mul	r20, r14
    1ade:	e0 0d       	add	r30, r0
    1ae0:	f1 1d       	adc	r31, r1
    1ae2:	5e 9d       	mul	r21, r14
    1ae4:	f0 0d       	add	r31, r0
    1ae6:	4f 9d       	mul	r20, r15
    1ae8:	f0 0d       	add	r31, r0
    1aea:	7f 93       	push	r23
    1aec:	6f 93       	push	r22
    1aee:	bf 92       	push	r11
    1af0:	af 92       	push	r10
    1af2:	5f 93       	push	r21
    1af4:	4f 93       	push	r20
    1af6:	d5 01       	movw	r26, r10
    1af8:	30 d0       	rcall	.+96     	; 0x1b5a <__umulhisi3>
    1afa:	8b 01       	movw	r16, r22
    1afc:	ac 01       	movw	r20, r24
    1afe:	d7 01       	movw	r26, r14
    1b00:	2c d0       	rcall	.+88     	; 0x1b5a <__umulhisi3>
    1b02:	eb 01       	movw	r28, r22
    1b04:	e8 0f       	add	r30, r24
    1b06:	f9 1f       	adc	r31, r25
    1b08:	d6 01       	movw	r26, r12
    1b0a:	1f d0       	rcall	.+62     	; 0x1b4a <__muldi3_6>
    1b0c:	2f 91       	pop	r18
    1b0e:	3f 91       	pop	r19
    1b10:	d6 01       	movw	r26, r12
    1b12:	23 d0       	rcall	.+70     	; 0x1b5a <__umulhisi3>
    1b14:	c6 0f       	add	r28, r22
    1b16:	d7 1f       	adc	r29, r23
    1b18:	e8 1f       	adc	r30, r24
    1b1a:	f9 1f       	adc	r31, r25
    1b1c:	af 91       	pop	r26
    1b1e:	bf 91       	pop	r27
    1b20:	14 d0       	rcall	.+40     	; 0x1b4a <__muldi3_6>
    1b22:	2f 91       	pop	r18
    1b24:	3f 91       	pop	r19
    1b26:	19 d0       	rcall	.+50     	; 0x1b5a <__umulhisi3>
    1b28:	c6 0f       	add	r28, r22
    1b2a:	d7 1f       	adc	r29, r23
    1b2c:	e8 1f       	adc	r30, r24
    1b2e:	f9 1f       	adc	r31, r25
    1b30:	d6 01       	movw	r26, r12
    1b32:	13 d0       	rcall	.+38     	; 0x1b5a <__umulhisi3>
    1b34:	e6 0f       	add	r30, r22
    1b36:	f7 1f       	adc	r31, r23
    1b38:	98 01       	movw	r18, r16
    1b3a:	be 01       	movw	r22, r28
    1b3c:	cf 01       	movw	r24, r30
    1b3e:	11 24       	eor	r1, r1
    1b40:	0f 91       	pop	r16
    1b42:	1f 91       	pop	r17
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <__muldi3_6>:
    1b4a:	07 d0       	rcall	.+14     	; 0x1b5a <__umulhisi3>
    1b4c:	46 0f       	add	r20, r22
    1b4e:	57 1f       	adc	r21, r23
    1b50:	c8 1f       	adc	r28, r24
    1b52:	d9 1f       	adc	r29, r25
    1b54:	08 f4       	brcc	.+2      	; 0x1b58 <__muldi3_6+0xe>
    1b56:	31 96       	adiw	r30, 0x01	; 1
    1b58:	08 95       	ret

00001b5a <__umulhisi3>:
    1b5a:	a2 9f       	mul	r26, r18
    1b5c:	b0 01       	movw	r22, r0
    1b5e:	b3 9f       	mul	r27, r19
    1b60:	c0 01       	movw	r24, r0
    1b62:	a3 9f       	mul	r26, r19
    1b64:	70 0d       	add	r23, r0
    1b66:	81 1d       	adc	r24, r1
    1b68:	11 24       	eor	r1, r1
    1b6a:	91 1d       	adc	r25, r1
    1b6c:	b2 9f       	mul	r27, r18
    1b6e:	70 0d       	add	r23, r0
    1b70:	81 1d       	adc	r24, r1
    1b72:	11 24       	eor	r1, r1
    1b74:	91 1d       	adc	r25, r1
    1b76:	08 95       	ret

00001b78 <fdevopen>:
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	31 f4       	brne	.+12     	; 0x1b90 <fdevopen+0x18>
    1b84:	61 15       	cp	r22, r1
    1b86:	71 05       	cpc	r23, r1
    1b88:	19 f4       	brne	.+6      	; 0x1b90 <fdevopen+0x18>
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	39 c0       	rjmp	.+114    	; 0x1c02 <fdevopen+0x8a>
    1b90:	8b 01       	movw	r16, r22
    1b92:	ec 01       	movw	r28, r24
    1b94:	6e e0       	ldi	r22, 0x0E	; 14
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	62 d2       	rcall	.+1220   	; 0x2062 <calloc>
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	89 2b       	or	r24, r25
    1ba2:	99 f3       	breq	.-26     	; 0x1b8a <fdevopen+0x12>
    1ba4:	80 e8       	ldi	r24, 0x80	; 128
    1ba6:	83 83       	std	Z+3, r24	; 0x03
    1ba8:	01 15       	cp	r16, r1
    1baa:	11 05       	cpc	r17, r1
    1bac:	71 f0       	breq	.+28     	; 0x1bca <fdevopen+0x52>
    1bae:	02 87       	std	Z+10, r16	; 0x0a
    1bb0:	13 87       	std	Z+11, r17	; 0x0b
    1bb2:	81 e8       	ldi	r24, 0x81	; 129
    1bb4:	83 83       	std	Z+3, r24	; 0x03
    1bb6:	80 91 73 20 	lds	r24, 0x2073
    1bba:	90 91 74 20 	lds	r25, 0x2074
    1bbe:	89 2b       	or	r24, r25
    1bc0:	21 f4       	brne	.+8      	; 0x1bca <fdevopen+0x52>
    1bc2:	e0 93 73 20 	sts	0x2073, r30
    1bc6:	f0 93 74 20 	sts	0x2074, r31
    1bca:	20 97       	sbiw	r28, 0x00	; 0
    1bcc:	c9 f0       	breq	.+50     	; 0x1c00 <fdevopen+0x88>
    1bce:	c0 87       	std	Z+8, r28	; 0x08
    1bd0:	d1 87       	std	Z+9, r29	; 0x09
    1bd2:	83 81       	ldd	r24, Z+3	; 0x03
    1bd4:	82 60       	ori	r24, 0x02	; 2
    1bd6:	83 83       	std	Z+3, r24	; 0x03
    1bd8:	80 91 75 20 	lds	r24, 0x2075
    1bdc:	90 91 76 20 	lds	r25, 0x2076
    1be0:	89 2b       	or	r24, r25
    1be2:	71 f4       	brne	.+28     	; 0x1c00 <fdevopen+0x88>
    1be4:	e0 93 75 20 	sts	0x2075, r30
    1be8:	f0 93 76 20 	sts	0x2076, r31
    1bec:	80 91 77 20 	lds	r24, 0x2077
    1bf0:	90 91 78 20 	lds	r25, 0x2078
    1bf4:	89 2b       	or	r24, r25
    1bf6:	21 f4       	brne	.+8      	; 0x1c00 <fdevopen+0x88>
    1bf8:	e0 93 77 20 	sts	0x2077, r30
    1bfc:	f0 93 78 20 	sts	0x2078, r31
    1c00:	cf 01       	movw	r24, r30
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	08 95       	ret

00001c0c <printf>:
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	ae 01       	movw	r20, r28
    1c16:	4a 5f       	subi	r20, 0xFA	; 250
    1c18:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1a:	fa 01       	movw	r30, r20
    1c1c:	61 91       	ld	r22, Z+
    1c1e:	71 91       	ld	r23, Z+
    1c20:	af 01       	movw	r20, r30
    1c22:	80 91 75 20 	lds	r24, 0x2075
    1c26:	90 91 76 20 	lds	r25, 0x2076
    1c2a:	33 d0       	rcall	.+102    	; 0x1c92 <vfprintf>
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	08 95       	ret

00001c32 <puts>:
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	e0 91 75 20 	lds	r30, 0x2075
    1c3e:	f0 91 76 20 	lds	r31, 0x2076
    1c42:	23 81       	ldd	r18, Z+3	; 0x03
    1c44:	21 ff       	sbrs	r18, 1
    1c46:	1b c0       	rjmp	.+54     	; 0x1c7e <puts+0x4c>
    1c48:	8c 01       	movw	r16, r24
    1c4a:	d0 e0       	ldi	r29, 0x00	; 0
    1c4c:	c0 e0       	ldi	r28, 0x00	; 0
    1c4e:	f8 01       	movw	r30, r16
    1c50:	81 91       	ld	r24, Z+
    1c52:	8f 01       	movw	r16, r30
    1c54:	60 91 75 20 	lds	r22, 0x2075
    1c58:	70 91 76 20 	lds	r23, 0x2076
    1c5c:	db 01       	movw	r26, r22
    1c5e:	18 96       	adiw	r26, 0x08	; 8
    1c60:	ed 91       	ld	r30, X+
    1c62:	fc 91       	ld	r31, X
    1c64:	19 97       	sbiw	r26, 0x09	; 9
    1c66:	88 23       	and	r24, r24
    1c68:	31 f0       	breq	.+12     	; 0x1c76 <puts+0x44>
    1c6a:	19 95       	eicall
    1c6c:	89 2b       	or	r24, r25
    1c6e:	79 f3       	breq	.-34     	; 0x1c4e <puts+0x1c>
    1c70:	df ef       	ldi	r29, 0xFF	; 255
    1c72:	cf ef       	ldi	r28, 0xFF	; 255
    1c74:	ec cf       	rjmp	.-40     	; 0x1c4e <puts+0x1c>
    1c76:	8a e0       	ldi	r24, 0x0A	; 10
    1c78:	19 95       	eicall
    1c7a:	89 2b       	or	r24, r25
    1c7c:	19 f0       	breq	.+6      	; 0x1c84 <puts+0x52>
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	9f ef       	ldi	r25, 0xFF	; 255
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <puts+0x56>
    1c84:	8d 2f       	mov	r24, r29
    1c86:	9c 2f       	mov	r25, r28
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	08 95       	ret

00001c92 <vfprintf>:
    1c92:	2f 92       	push	r2
    1c94:	3f 92       	push	r3
    1c96:	4f 92       	push	r4
    1c98:	5f 92       	push	r5
    1c9a:	6f 92       	push	r6
    1c9c:	7f 92       	push	r7
    1c9e:	8f 92       	push	r8
    1ca0:	9f 92       	push	r9
    1ca2:	af 92       	push	r10
    1ca4:	bf 92       	push	r11
    1ca6:	cf 92       	push	r12
    1ca8:	df 92       	push	r13
    1caa:	ef 92       	push	r14
    1cac:	ff 92       	push	r15
    1cae:	0f 93       	push	r16
    1cb0:	1f 93       	push	r17
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	2c 97       	sbiw	r28, 0x0c	; 12
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	7c 01       	movw	r14, r24
    1cc2:	6b 01       	movw	r12, r22
    1cc4:	8a 01       	movw	r16, r20
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	16 82       	std	Z+6, r1	; 0x06
    1cca:	17 82       	std	Z+7, r1	; 0x07
    1ccc:	83 81       	ldd	r24, Z+3	; 0x03
    1cce:	81 ff       	sbrs	r24, 1
    1cd0:	b0 c1       	rjmp	.+864    	; 0x2032 <vfprintf+0x3a0>
    1cd2:	ce 01       	movw	r24, r28
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	4c 01       	movw	r8, r24
    1cd8:	f7 01       	movw	r30, r14
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	f6 01       	movw	r30, r12
    1cde:	93 fd       	sbrc	r25, 3
    1ce0:	85 91       	lpm	r24, Z+
    1ce2:	93 ff       	sbrs	r25, 3
    1ce4:	81 91       	ld	r24, Z+
    1ce6:	6f 01       	movw	r12, r30
    1ce8:	88 23       	and	r24, r24
    1cea:	09 f4       	brne	.+2      	; 0x1cee <vfprintf+0x5c>
    1cec:	9e c1       	rjmp	.+828    	; 0x202a <vfprintf+0x398>
    1cee:	85 32       	cpi	r24, 0x25	; 37
    1cf0:	39 f4       	brne	.+14     	; 0x1d00 <vfprintf+0x6e>
    1cf2:	93 fd       	sbrc	r25, 3
    1cf4:	85 91       	lpm	r24, Z+
    1cf6:	93 ff       	sbrs	r25, 3
    1cf8:	81 91       	ld	r24, Z+
    1cfa:	6f 01       	movw	r12, r30
    1cfc:	85 32       	cpi	r24, 0x25	; 37
    1cfe:	21 f4       	brne	.+8      	; 0x1d08 <vfprintf+0x76>
    1d00:	b7 01       	movw	r22, r14
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	12 d3       	rcall	.+1572   	; 0x232a <fputc>
    1d06:	e8 cf       	rjmp	.-48     	; 0x1cd8 <vfprintf+0x46>
    1d08:	51 2c       	mov	r5, r1
    1d0a:	31 2c       	mov	r3, r1
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	20 32       	cpi	r18, 0x20	; 32
    1d10:	a0 f4       	brcc	.+40     	; 0x1d3a <vfprintf+0xa8>
    1d12:	8b 32       	cpi	r24, 0x2B	; 43
    1d14:	69 f0       	breq	.+26     	; 0x1d30 <vfprintf+0x9e>
    1d16:	30 f4       	brcc	.+12     	; 0x1d24 <vfprintf+0x92>
    1d18:	80 32       	cpi	r24, 0x20	; 32
    1d1a:	59 f0       	breq	.+22     	; 0x1d32 <vfprintf+0xa0>
    1d1c:	83 32       	cpi	r24, 0x23	; 35
    1d1e:	69 f4       	brne	.+26     	; 0x1d3a <vfprintf+0xa8>
    1d20:	20 61       	ori	r18, 0x10	; 16
    1d22:	2c c0       	rjmp	.+88     	; 0x1d7c <vfprintf+0xea>
    1d24:	8d 32       	cpi	r24, 0x2D	; 45
    1d26:	39 f0       	breq	.+14     	; 0x1d36 <vfprintf+0xa4>
    1d28:	80 33       	cpi	r24, 0x30	; 48
    1d2a:	39 f4       	brne	.+14     	; 0x1d3a <vfprintf+0xa8>
    1d2c:	21 60       	ori	r18, 0x01	; 1
    1d2e:	26 c0       	rjmp	.+76     	; 0x1d7c <vfprintf+0xea>
    1d30:	22 60       	ori	r18, 0x02	; 2
    1d32:	24 60       	ori	r18, 0x04	; 4
    1d34:	23 c0       	rjmp	.+70     	; 0x1d7c <vfprintf+0xea>
    1d36:	28 60       	ori	r18, 0x08	; 8
    1d38:	21 c0       	rjmp	.+66     	; 0x1d7c <vfprintf+0xea>
    1d3a:	27 fd       	sbrc	r18, 7
    1d3c:	27 c0       	rjmp	.+78     	; 0x1d8c <vfprintf+0xfa>
    1d3e:	30 ed       	ldi	r19, 0xD0	; 208
    1d40:	38 0f       	add	r19, r24
    1d42:	3a 30       	cpi	r19, 0x0A	; 10
    1d44:	78 f4       	brcc	.+30     	; 0x1d64 <vfprintf+0xd2>
    1d46:	26 ff       	sbrs	r18, 6
    1d48:	06 c0       	rjmp	.+12     	; 0x1d56 <vfprintf+0xc4>
    1d4a:	fa e0       	ldi	r31, 0x0A	; 10
    1d4c:	5f 9e       	mul	r5, r31
    1d4e:	30 0d       	add	r19, r0
    1d50:	11 24       	eor	r1, r1
    1d52:	53 2e       	mov	r5, r19
    1d54:	13 c0       	rjmp	.+38     	; 0x1d7c <vfprintf+0xea>
    1d56:	8a e0       	ldi	r24, 0x0A	; 10
    1d58:	38 9e       	mul	r3, r24
    1d5a:	30 0d       	add	r19, r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	33 2e       	mov	r3, r19
    1d60:	20 62       	ori	r18, 0x20	; 32
    1d62:	0c c0       	rjmp	.+24     	; 0x1d7c <vfprintf+0xea>
    1d64:	8e 32       	cpi	r24, 0x2E	; 46
    1d66:	21 f4       	brne	.+8      	; 0x1d70 <vfprintf+0xde>
    1d68:	26 fd       	sbrc	r18, 6
    1d6a:	5f c1       	rjmp	.+702    	; 0x202a <vfprintf+0x398>
    1d6c:	20 64       	ori	r18, 0x40	; 64
    1d6e:	06 c0       	rjmp	.+12     	; 0x1d7c <vfprintf+0xea>
    1d70:	8c 36       	cpi	r24, 0x6C	; 108
    1d72:	11 f4       	brne	.+4      	; 0x1d78 <vfprintf+0xe6>
    1d74:	20 68       	ori	r18, 0x80	; 128
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <vfprintf+0xea>
    1d78:	88 36       	cpi	r24, 0x68	; 104
    1d7a:	41 f4       	brne	.+16     	; 0x1d8c <vfprintf+0xfa>
    1d7c:	f6 01       	movw	r30, r12
    1d7e:	93 fd       	sbrc	r25, 3
    1d80:	85 91       	lpm	r24, Z+
    1d82:	93 ff       	sbrs	r25, 3
    1d84:	81 91       	ld	r24, Z+
    1d86:	6f 01       	movw	r12, r30
    1d88:	81 11       	cpse	r24, r1
    1d8a:	c1 cf       	rjmp	.-126    	; 0x1d0e <vfprintf+0x7c>
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	9f 7d       	andi	r25, 0xDF	; 223
    1d90:	95 54       	subi	r25, 0x45	; 69
    1d92:	93 30       	cpi	r25, 0x03	; 3
    1d94:	28 f4       	brcc	.+10     	; 0x1da0 <vfprintf+0x10e>
    1d96:	0c 5f       	subi	r16, 0xFC	; 252
    1d98:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9a:	ff e3       	ldi	r31, 0x3F	; 63
    1d9c:	f9 83       	std	Y+1, r31	; 0x01
    1d9e:	0d c0       	rjmp	.+26     	; 0x1dba <vfprintf+0x128>
    1da0:	83 36       	cpi	r24, 0x63	; 99
    1da2:	31 f0       	breq	.+12     	; 0x1db0 <vfprintf+0x11e>
    1da4:	83 37       	cpi	r24, 0x73	; 115
    1da6:	71 f0       	breq	.+28     	; 0x1dc4 <vfprintf+0x132>
    1da8:	83 35       	cpi	r24, 0x53	; 83
    1daa:	09 f0       	breq	.+2      	; 0x1dae <vfprintf+0x11c>
    1dac:	57 c0       	rjmp	.+174    	; 0x1e5c <vfprintf+0x1ca>
    1dae:	21 c0       	rjmp	.+66     	; 0x1df2 <vfprintf+0x160>
    1db0:	f8 01       	movw	r30, r16
    1db2:	80 81       	ld	r24, Z
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	0e 5f       	subi	r16, 0xFE	; 254
    1db8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dba:	44 24       	eor	r4, r4
    1dbc:	43 94       	inc	r4
    1dbe:	51 2c       	mov	r5, r1
    1dc0:	54 01       	movw	r10, r8
    1dc2:	14 c0       	rjmp	.+40     	; 0x1dec <vfprintf+0x15a>
    1dc4:	38 01       	movw	r6, r16
    1dc6:	f2 e0       	ldi	r31, 0x02	; 2
    1dc8:	6f 0e       	add	r6, r31
    1dca:	71 1c       	adc	r7, r1
    1dcc:	f8 01       	movw	r30, r16
    1dce:	a0 80       	ld	r10, Z
    1dd0:	b1 80       	ldd	r11, Z+1	; 0x01
    1dd2:	26 ff       	sbrs	r18, 6
    1dd4:	03 c0       	rjmp	.+6      	; 0x1ddc <vfprintf+0x14a>
    1dd6:	65 2d       	mov	r22, r5
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <vfprintf+0x14e>
    1ddc:	6f ef       	ldi	r22, 0xFF	; 255
    1dde:	7f ef       	ldi	r23, 0xFF	; 255
    1de0:	c5 01       	movw	r24, r10
    1de2:	2c 87       	std	Y+12, r18	; 0x0c
    1de4:	97 d2       	rcall	.+1326   	; 0x2314 <strnlen>
    1de6:	2c 01       	movw	r4, r24
    1de8:	83 01       	movw	r16, r6
    1dea:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dec:	2f 77       	andi	r18, 0x7F	; 127
    1dee:	22 2e       	mov	r2, r18
    1df0:	16 c0       	rjmp	.+44     	; 0x1e1e <vfprintf+0x18c>
    1df2:	38 01       	movw	r6, r16
    1df4:	f2 e0       	ldi	r31, 0x02	; 2
    1df6:	6f 0e       	add	r6, r31
    1df8:	71 1c       	adc	r7, r1
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	a0 80       	ld	r10, Z
    1dfe:	b1 80       	ldd	r11, Z+1	; 0x01
    1e00:	26 ff       	sbrs	r18, 6
    1e02:	03 c0       	rjmp	.+6      	; 0x1e0a <vfprintf+0x178>
    1e04:	65 2d       	mov	r22, r5
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <vfprintf+0x17c>
    1e0a:	6f ef       	ldi	r22, 0xFF	; 255
    1e0c:	7f ef       	ldi	r23, 0xFF	; 255
    1e0e:	c5 01       	movw	r24, r10
    1e10:	2c 87       	std	Y+12, r18	; 0x0c
    1e12:	6e d2       	rcall	.+1244   	; 0x22f0 <strnlen_P>
    1e14:	2c 01       	movw	r4, r24
    1e16:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e18:	20 68       	ori	r18, 0x80	; 128
    1e1a:	22 2e       	mov	r2, r18
    1e1c:	83 01       	movw	r16, r6
    1e1e:	23 fc       	sbrc	r2, 3
    1e20:	19 c0       	rjmp	.+50     	; 0x1e54 <vfprintf+0x1c2>
    1e22:	83 2d       	mov	r24, r3
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	48 16       	cp	r4, r24
    1e28:	59 06       	cpc	r5, r25
    1e2a:	a0 f4       	brcc	.+40     	; 0x1e54 <vfprintf+0x1c2>
    1e2c:	b7 01       	movw	r22, r14
    1e2e:	80 e2       	ldi	r24, 0x20	; 32
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	7b d2       	rcall	.+1270   	; 0x232a <fputc>
    1e34:	3a 94       	dec	r3
    1e36:	f5 cf       	rjmp	.-22     	; 0x1e22 <vfprintf+0x190>
    1e38:	f5 01       	movw	r30, r10
    1e3a:	27 fc       	sbrc	r2, 7
    1e3c:	85 91       	lpm	r24, Z+
    1e3e:	27 fe       	sbrs	r2, 7
    1e40:	81 91       	ld	r24, Z+
    1e42:	5f 01       	movw	r10, r30
    1e44:	b7 01       	movw	r22, r14
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	70 d2       	rcall	.+1248   	; 0x232a <fputc>
    1e4a:	31 10       	cpse	r3, r1
    1e4c:	3a 94       	dec	r3
    1e4e:	f1 e0       	ldi	r31, 0x01	; 1
    1e50:	4f 1a       	sub	r4, r31
    1e52:	51 08       	sbc	r5, r1
    1e54:	41 14       	cp	r4, r1
    1e56:	51 04       	cpc	r5, r1
    1e58:	79 f7       	brne	.-34     	; 0x1e38 <vfprintf+0x1a6>
    1e5a:	de c0       	rjmp	.+444    	; 0x2018 <vfprintf+0x386>
    1e5c:	84 36       	cpi	r24, 0x64	; 100
    1e5e:	11 f0       	breq	.+4      	; 0x1e64 <vfprintf+0x1d2>
    1e60:	89 36       	cpi	r24, 0x69	; 105
    1e62:	31 f5       	brne	.+76     	; 0x1eb0 <vfprintf+0x21e>
    1e64:	f8 01       	movw	r30, r16
    1e66:	27 ff       	sbrs	r18, 7
    1e68:	07 c0       	rjmp	.+14     	; 0x1e78 <vfprintf+0x1e6>
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	93 81       	ldd	r25, Z+3	; 0x03
    1e72:	0c 5f       	subi	r16, 0xFC	; 252
    1e74:	1f 4f       	sbci	r17, 0xFF	; 255
    1e76:	08 c0       	rjmp	.+16     	; 0x1e88 <vfprintf+0x1f6>
    1e78:	60 81       	ld	r22, Z
    1e7a:	71 81       	ldd	r23, Z+1	; 0x01
    1e7c:	07 2e       	mov	r0, r23
    1e7e:	00 0c       	add	r0, r0
    1e80:	88 0b       	sbc	r24, r24
    1e82:	99 0b       	sbc	r25, r25
    1e84:	0e 5f       	subi	r16, 0xFE	; 254
    1e86:	1f 4f       	sbci	r17, 0xFF	; 255
    1e88:	2f 76       	andi	r18, 0x6F	; 111
    1e8a:	72 2e       	mov	r7, r18
    1e8c:	97 ff       	sbrs	r25, 7
    1e8e:	09 c0       	rjmp	.+18     	; 0x1ea2 <vfprintf+0x210>
    1e90:	90 95       	com	r25
    1e92:	80 95       	com	r24
    1e94:	70 95       	com	r23
    1e96:	61 95       	neg	r22
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	20 68       	ori	r18, 0x80	; 128
    1ea0:	72 2e       	mov	r7, r18
    1ea2:	2a e0       	ldi	r18, 0x0A	; 10
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	a4 01       	movw	r20, r8
    1ea8:	78 d2       	rcall	.+1264   	; 0x239a <__ultoa_invert>
    1eaa:	a8 2e       	mov	r10, r24
    1eac:	a8 18       	sub	r10, r8
    1eae:	43 c0       	rjmp	.+134    	; 0x1f36 <vfprintf+0x2a4>
    1eb0:	85 37       	cpi	r24, 0x75	; 117
    1eb2:	29 f4       	brne	.+10     	; 0x1ebe <vfprintf+0x22c>
    1eb4:	2f 7e       	andi	r18, 0xEF	; 239
    1eb6:	b2 2e       	mov	r11, r18
    1eb8:	2a e0       	ldi	r18, 0x0A	; 10
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	25 c0       	rjmp	.+74     	; 0x1f08 <vfprintf+0x276>
    1ebe:	f2 2f       	mov	r31, r18
    1ec0:	f9 7f       	andi	r31, 0xF9	; 249
    1ec2:	bf 2e       	mov	r11, r31
    1ec4:	8f 36       	cpi	r24, 0x6F	; 111
    1ec6:	c1 f0       	breq	.+48     	; 0x1ef8 <vfprintf+0x266>
    1ec8:	18 f4       	brcc	.+6      	; 0x1ed0 <vfprintf+0x23e>
    1eca:	88 35       	cpi	r24, 0x58	; 88
    1ecc:	79 f0       	breq	.+30     	; 0x1eec <vfprintf+0x25a>
    1ece:	ad c0       	rjmp	.+346    	; 0x202a <vfprintf+0x398>
    1ed0:	80 37       	cpi	r24, 0x70	; 112
    1ed2:	19 f0       	breq	.+6      	; 0x1eda <vfprintf+0x248>
    1ed4:	88 37       	cpi	r24, 0x78	; 120
    1ed6:	21 f0       	breq	.+8      	; 0x1ee0 <vfprintf+0x24e>
    1ed8:	a8 c0       	rjmp	.+336    	; 0x202a <vfprintf+0x398>
    1eda:	2f 2f       	mov	r18, r31
    1edc:	20 61       	ori	r18, 0x10	; 16
    1ede:	b2 2e       	mov	r11, r18
    1ee0:	b4 fe       	sbrs	r11, 4
    1ee2:	0d c0       	rjmp	.+26     	; 0x1efe <vfprintf+0x26c>
    1ee4:	8b 2d       	mov	r24, r11
    1ee6:	84 60       	ori	r24, 0x04	; 4
    1ee8:	b8 2e       	mov	r11, r24
    1eea:	09 c0       	rjmp	.+18     	; 0x1efe <vfprintf+0x26c>
    1eec:	24 ff       	sbrs	r18, 4
    1eee:	0a c0       	rjmp	.+20     	; 0x1f04 <vfprintf+0x272>
    1ef0:	9f 2f       	mov	r25, r31
    1ef2:	96 60       	ori	r25, 0x06	; 6
    1ef4:	b9 2e       	mov	r11, r25
    1ef6:	06 c0       	rjmp	.+12     	; 0x1f04 <vfprintf+0x272>
    1ef8:	28 e0       	ldi	r18, 0x08	; 8
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <vfprintf+0x276>
    1efe:	20 e1       	ldi	r18, 0x10	; 16
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <vfprintf+0x276>
    1f04:	20 e1       	ldi	r18, 0x10	; 16
    1f06:	32 e0       	ldi	r19, 0x02	; 2
    1f08:	f8 01       	movw	r30, r16
    1f0a:	b7 fe       	sbrs	r11, 7
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <vfprintf+0x28a>
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	0c 5f       	subi	r16, 0xFC	; 252
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	06 c0       	rjmp	.+12     	; 0x1f28 <vfprintf+0x296>
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 5f       	subi	r16, 0xFE	; 254
    1f26:	1f 4f       	sbci	r17, 0xFF	; 255
    1f28:	a4 01       	movw	r20, r8
    1f2a:	37 d2       	rcall	.+1134   	; 0x239a <__ultoa_invert>
    1f2c:	a8 2e       	mov	r10, r24
    1f2e:	a8 18       	sub	r10, r8
    1f30:	fb 2d       	mov	r31, r11
    1f32:	ff 77       	andi	r31, 0x7F	; 127
    1f34:	7f 2e       	mov	r7, r31
    1f36:	76 fe       	sbrs	r7, 6
    1f38:	0b c0       	rjmp	.+22     	; 0x1f50 <vfprintf+0x2be>
    1f3a:	37 2d       	mov	r19, r7
    1f3c:	3e 7f       	andi	r19, 0xFE	; 254
    1f3e:	a5 14       	cp	r10, r5
    1f40:	50 f4       	brcc	.+20     	; 0x1f56 <vfprintf+0x2c4>
    1f42:	74 fe       	sbrs	r7, 4
    1f44:	0a c0       	rjmp	.+20     	; 0x1f5a <vfprintf+0x2c8>
    1f46:	72 fc       	sbrc	r7, 2
    1f48:	08 c0       	rjmp	.+16     	; 0x1f5a <vfprintf+0x2c8>
    1f4a:	37 2d       	mov	r19, r7
    1f4c:	3e 7e       	andi	r19, 0xEE	; 238
    1f4e:	05 c0       	rjmp	.+10     	; 0x1f5a <vfprintf+0x2c8>
    1f50:	ba 2c       	mov	r11, r10
    1f52:	37 2d       	mov	r19, r7
    1f54:	03 c0       	rjmp	.+6      	; 0x1f5c <vfprintf+0x2ca>
    1f56:	ba 2c       	mov	r11, r10
    1f58:	01 c0       	rjmp	.+2      	; 0x1f5c <vfprintf+0x2ca>
    1f5a:	b5 2c       	mov	r11, r5
    1f5c:	34 ff       	sbrs	r19, 4
    1f5e:	0d c0       	rjmp	.+26     	; 0x1f7a <vfprintf+0x2e8>
    1f60:	fe 01       	movw	r30, r28
    1f62:	ea 0d       	add	r30, r10
    1f64:	f1 1d       	adc	r31, r1
    1f66:	80 81       	ld	r24, Z
    1f68:	80 33       	cpi	r24, 0x30	; 48
    1f6a:	11 f4       	brne	.+4      	; 0x1f70 <vfprintf+0x2de>
    1f6c:	39 7e       	andi	r19, 0xE9	; 233
    1f6e:	09 c0       	rjmp	.+18     	; 0x1f82 <vfprintf+0x2f0>
    1f70:	32 ff       	sbrs	r19, 2
    1f72:	06 c0       	rjmp	.+12     	; 0x1f80 <vfprintf+0x2ee>
    1f74:	b3 94       	inc	r11
    1f76:	b3 94       	inc	r11
    1f78:	04 c0       	rjmp	.+8      	; 0x1f82 <vfprintf+0x2f0>
    1f7a:	83 2f       	mov	r24, r19
    1f7c:	86 78       	andi	r24, 0x86	; 134
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <vfprintf+0x2f0>
    1f80:	b3 94       	inc	r11
    1f82:	33 fd       	sbrc	r19, 3
    1f84:	12 c0       	rjmp	.+36     	; 0x1faa <vfprintf+0x318>
    1f86:	30 ff       	sbrs	r19, 0
    1f88:	06 c0       	rjmp	.+12     	; 0x1f96 <vfprintf+0x304>
    1f8a:	5a 2c       	mov	r5, r10
    1f8c:	b3 14       	cp	r11, r3
    1f8e:	18 f4       	brcc	.+6      	; 0x1f96 <vfprintf+0x304>
    1f90:	53 0c       	add	r5, r3
    1f92:	5b 18       	sub	r5, r11
    1f94:	b3 2c       	mov	r11, r3
    1f96:	b3 14       	cp	r11, r3
    1f98:	60 f4       	brcc	.+24     	; 0x1fb2 <vfprintf+0x320>
    1f9a:	b7 01       	movw	r22, r14
    1f9c:	80 e2       	ldi	r24, 0x20	; 32
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	3c 87       	std	Y+12, r19	; 0x0c
    1fa2:	c3 d1       	rcall	.+902    	; 0x232a <fputc>
    1fa4:	b3 94       	inc	r11
    1fa6:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fa8:	f6 cf       	rjmp	.-20     	; 0x1f96 <vfprintf+0x304>
    1faa:	b3 14       	cp	r11, r3
    1fac:	10 f4       	brcc	.+4      	; 0x1fb2 <vfprintf+0x320>
    1fae:	3b 18       	sub	r3, r11
    1fb0:	01 c0       	rjmp	.+2      	; 0x1fb4 <vfprintf+0x322>
    1fb2:	31 2c       	mov	r3, r1
    1fb4:	34 ff       	sbrs	r19, 4
    1fb6:	11 c0       	rjmp	.+34     	; 0x1fda <vfprintf+0x348>
    1fb8:	b7 01       	movw	r22, r14
    1fba:	80 e3       	ldi	r24, 0x30	; 48
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	3c 87       	std	Y+12, r19	; 0x0c
    1fc0:	b4 d1       	rcall	.+872    	; 0x232a <fputc>
    1fc2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fc4:	32 ff       	sbrs	r19, 2
    1fc6:	16 c0       	rjmp	.+44     	; 0x1ff4 <vfprintf+0x362>
    1fc8:	31 fd       	sbrc	r19, 1
    1fca:	03 c0       	rjmp	.+6      	; 0x1fd2 <vfprintf+0x340>
    1fcc:	88 e7       	ldi	r24, 0x78	; 120
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <vfprintf+0x344>
    1fd2:	88 e5       	ldi	r24, 0x58	; 88
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	b7 01       	movw	r22, r14
    1fd8:	0c c0       	rjmp	.+24     	; 0x1ff2 <vfprintf+0x360>
    1fda:	83 2f       	mov	r24, r19
    1fdc:	86 78       	andi	r24, 0x86	; 134
    1fde:	51 f0       	breq	.+20     	; 0x1ff4 <vfprintf+0x362>
    1fe0:	31 ff       	sbrs	r19, 1
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <vfprintf+0x356>
    1fe4:	8b e2       	ldi	r24, 0x2B	; 43
    1fe6:	01 c0       	rjmp	.+2      	; 0x1fea <vfprintf+0x358>
    1fe8:	80 e2       	ldi	r24, 0x20	; 32
    1fea:	37 fd       	sbrc	r19, 7
    1fec:	8d e2       	ldi	r24, 0x2D	; 45
    1fee:	b7 01       	movw	r22, r14
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	9b d1       	rcall	.+822    	; 0x232a <fputc>
    1ff4:	a5 14       	cp	r10, r5
    1ff6:	30 f4       	brcc	.+12     	; 0x2004 <vfprintf+0x372>
    1ff8:	b7 01       	movw	r22, r14
    1ffa:	80 e3       	ldi	r24, 0x30	; 48
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	95 d1       	rcall	.+810    	; 0x232a <fputc>
    2000:	5a 94       	dec	r5
    2002:	f8 cf       	rjmp	.-16     	; 0x1ff4 <vfprintf+0x362>
    2004:	aa 94       	dec	r10
    2006:	f4 01       	movw	r30, r8
    2008:	ea 0d       	add	r30, r10
    200a:	f1 1d       	adc	r31, r1
    200c:	80 81       	ld	r24, Z
    200e:	b7 01       	movw	r22, r14
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	8b d1       	rcall	.+790    	; 0x232a <fputc>
    2014:	a1 10       	cpse	r10, r1
    2016:	f6 cf       	rjmp	.-20     	; 0x2004 <vfprintf+0x372>
    2018:	33 20       	and	r3, r3
    201a:	09 f4       	brne	.+2      	; 0x201e <vfprintf+0x38c>
    201c:	5d ce       	rjmp	.-838    	; 0x1cd8 <vfprintf+0x46>
    201e:	b7 01       	movw	r22, r14
    2020:	80 e2       	ldi	r24, 0x20	; 32
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	82 d1       	rcall	.+772    	; 0x232a <fputc>
    2026:	3a 94       	dec	r3
    2028:	f7 cf       	rjmp	.-18     	; 0x2018 <vfprintf+0x386>
    202a:	f7 01       	movw	r30, r14
    202c:	86 81       	ldd	r24, Z+6	; 0x06
    202e:	97 81       	ldd	r25, Z+7	; 0x07
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <vfprintf+0x3a4>
    2032:	8f ef       	ldi	r24, 0xFF	; 255
    2034:	9f ef       	ldi	r25, 0xFF	; 255
    2036:	2c 96       	adiw	r28, 0x0c	; 12
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	ff 90       	pop	r15
    2046:	ef 90       	pop	r14
    2048:	df 90       	pop	r13
    204a:	cf 90       	pop	r12
    204c:	bf 90       	pop	r11
    204e:	af 90       	pop	r10
    2050:	9f 90       	pop	r9
    2052:	8f 90       	pop	r8
    2054:	7f 90       	pop	r7
    2056:	6f 90       	pop	r6
    2058:	5f 90       	pop	r5
    205a:	4f 90       	pop	r4
    205c:	3f 90       	pop	r3
    205e:	2f 90       	pop	r2
    2060:	08 95       	ret

00002062 <calloc>:
    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	86 9f       	mul	r24, r22
    206c:	80 01       	movw	r16, r0
    206e:	87 9f       	mul	r24, r23
    2070:	10 0d       	add	r17, r0
    2072:	96 9f       	mul	r25, r22
    2074:	10 0d       	add	r17, r0
    2076:	11 24       	eor	r1, r1
    2078:	c8 01       	movw	r24, r16
    207a:	0d d0       	rcall	.+26     	; 0x2096 <malloc>
    207c:	ec 01       	movw	r28, r24
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	21 f0       	breq	.+8      	; 0x208a <calloc+0x28>
    2082:	a8 01       	movw	r20, r16
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	3e d1       	rcall	.+636    	; 0x2306 <memset>
    208a:	ce 01       	movw	r24, r28
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	08 95       	ret

00002096 <malloc>:
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	82 30       	cpi	r24, 0x02	; 2
    209c:	91 05       	cpc	r25, r1
    209e:	10 f4       	brcc	.+4      	; 0x20a4 <malloc+0xe>
    20a0:	82 e0       	ldi	r24, 0x02	; 2
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	e0 91 7b 20 	lds	r30, 0x207B
    20a8:	f0 91 7c 20 	lds	r31, 0x207C
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	c0 e0       	ldi	r28, 0x00	; 0
    20b2:	d0 e0       	ldi	r29, 0x00	; 0
    20b4:	30 97       	sbiw	r30, 0x00	; 0
    20b6:	11 f1       	breq	.+68     	; 0x20fc <malloc+0x66>
    20b8:	40 81       	ld	r20, Z
    20ba:	51 81       	ldd	r21, Z+1	; 0x01
    20bc:	48 17       	cp	r20, r24
    20be:	59 07       	cpc	r21, r25
    20c0:	c0 f0       	brcs	.+48     	; 0x20f2 <malloc+0x5c>
    20c2:	48 17       	cp	r20, r24
    20c4:	59 07       	cpc	r21, r25
    20c6:	61 f4       	brne	.+24     	; 0x20e0 <malloc+0x4a>
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	20 97       	sbiw	r28, 0x00	; 0
    20ce:	19 f0       	breq	.+6      	; 0x20d6 <malloc+0x40>
    20d0:	8a 83       	std	Y+2, r24	; 0x02
    20d2:	9b 83       	std	Y+3, r25	; 0x03
    20d4:	2b c0       	rjmp	.+86     	; 0x212c <malloc+0x96>
    20d6:	80 93 7b 20 	sts	0x207B, r24
    20da:	90 93 7c 20 	sts	0x207C, r25
    20de:	26 c0       	rjmp	.+76     	; 0x212c <malloc+0x96>
    20e0:	21 15       	cp	r18, r1
    20e2:	31 05       	cpc	r19, r1
    20e4:	19 f0       	breq	.+6      	; 0x20ec <malloc+0x56>
    20e6:	42 17       	cp	r20, r18
    20e8:	53 07       	cpc	r21, r19
    20ea:	18 f4       	brcc	.+6      	; 0x20f2 <malloc+0x5c>
    20ec:	9a 01       	movw	r18, r20
    20ee:	be 01       	movw	r22, r28
    20f0:	df 01       	movw	r26, r30
    20f2:	ef 01       	movw	r28, r30
    20f4:	02 80       	ldd	r0, Z+2	; 0x02
    20f6:	f3 81       	ldd	r31, Z+3	; 0x03
    20f8:	e0 2d       	mov	r30, r0
    20fa:	dc cf       	rjmp	.-72     	; 0x20b4 <malloc+0x1e>
    20fc:	21 15       	cp	r18, r1
    20fe:	31 05       	cpc	r19, r1
    2100:	09 f1       	breq	.+66     	; 0x2144 <malloc+0xae>
    2102:	28 1b       	sub	r18, r24
    2104:	39 0b       	sbc	r19, r25
    2106:	24 30       	cpi	r18, 0x04	; 4
    2108:	31 05       	cpc	r19, r1
    210a:	90 f4       	brcc	.+36     	; 0x2130 <malloc+0x9a>
    210c:	12 96       	adiw	r26, 0x02	; 2
    210e:	8d 91       	ld	r24, X+
    2110:	9c 91       	ld	r25, X
    2112:	13 97       	sbiw	r26, 0x03	; 3
    2114:	61 15       	cp	r22, r1
    2116:	71 05       	cpc	r23, r1
    2118:	21 f0       	breq	.+8      	; 0x2122 <malloc+0x8c>
    211a:	fb 01       	movw	r30, r22
    211c:	82 83       	std	Z+2, r24	; 0x02
    211e:	93 83       	std	Z+3, r25	; 0x03
    2120:	04 c0       	rjmp	.+8      	; 0x212a <malloc+0x94>
    2122:	80 93 7b 20 	sts	0x207B, r24
    2126:	90 93 7c 20 	sts	0x207C, r25
    212a:	fd 01       	movw	r30, r26
    212c:	32 96       	adiw	r30, 0x02	; 2
    212e:	44 c0       	rjmp	.+136    	; 0x21b8 <malloc+0x122>
    2130:	fd 01       	movw	r30, r26
    2132:	e2 0f       	add	r30, r18
    2134:	f3 1f       	adc	r31, r19
    2136:	81 93       	st	Z+, r24
    2138:	91 93       	st	Z+, r25
    213a:	22 50       	subi	r18, 0x02	; 2
    213c:	31 09       	sbc	r19, r1
    213e:	2d 93       	st	X+, r18
    2140:	3c 93       	st	X, r19
    2142:	3a c0       	rjmp	.+116    	; 0x21b8 <malloc+0x122>
    2144:	20 91 79 20 	lds	r18, 0x2079
    2148:	30 91 7a 20 	lds	r19, 0x207A
    214c:	23 2b       	or	r18, r19
    214e:	41 f4       	brne	.+16     	; 0x2160 <malloc+0xca>
    2150:	20 91 02 20 	lds	r18, 0x2002
    2154:	30 91 03 20 	lds	r19, 0x2003
    2158:	20 93 79 20 	sts	0x2079, r18
    215c:	30 93 7a 20 	sts	0x207A, r19
    2160:	20 91 00 20 	lds	r18, 0x2000
    2164:	30 91 01 20 	lds	r19, 0x2001
    2168:	21 15       	cp	r18, r1
    216a:	31 05       	cpc	r19, r1
    216c:	41 f4       	brne	.+16     	; 0x217e <malloc+0xe8>
    216e:	2d b7       	in	r18, 0x3d	; 61
    2170:	3e b7       	in	r19, 0x3e	; 62
    2172:	40 91 04 20 	lds	r20, 0x2004
    2176:	50 91 05 20 	lds	r21, 0x2005
    217a:	24 1b       	sub	r18, r20
    217c:	35 0b       	sbc	r19, r21
    217e:	e0 91 79 20 	lds	r30, 0x2079
    2182:	f0 91 7a 20 	lds	r31, 0x207A
    2186:	e2 17       	cp	r30, r18
    2188:	f3 07       	cpc	r31, r19
    218a:	a0 f4       	brcc	.+40     	; 0x21b4 <malloc+0x11e>
    218c:	2e 1b       	sub	r18, r30
    218e:	3f 0b       	sbc	r19, r31
    2190:	28 17       	cp	r18, r24
    2192:	39 07       	cpc	r19, r25
    2194:	78 f0       	brcs	.+30     	; 0x21b4 <malloc+0x11e>
    2196:	ac 01       	movw	r20, r24
    2198:	4e 5f       	subi	r20, 0xFE	; 254
    219a:	5f 4f       	sbci	r21, 0xFF	; 255
    219c:	24 17       	cp	r18, r20
    219e:	35 07       	cpc	r19, r21
    21a0:	48 f0       	brcs	.+18     	; 0x21b4 <malloc+0x11e>
    21a2:	4e 0f       	add	r20, r30
    21a4:	5f 1f       	adc	r21, r31
    21a6:	40 93 79 20 	sts	0x2079, r20
    21aa:	50 93 7a 20 	sts	0x207A, r21
    21ae:	81 93       	st	Z+, r24
    21b0:	91 93       	st	Z+, r25
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <malloc+0x122>
    21b4:	e0 e0       	ldi	r30, 0x00	; 0
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	cf 01       	movw	r24, r30
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	08 95       	ret

000021c0 <free>:
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	09 f4       	brne	.+2      	; 0x21ce <free+0xe>
    21cc:	8c c0       	rjmp	.+280    	; 0x22e6 <free+0x126>
    21ce:	fc 01       	movw	r30, r24
    21d0:	32 97       	sbiw	r30, 0x02	; 2
    21d2:	12 82       	std	Z+2, r1	; 0x02
    21d4:	13 82       	std	Z+3, r1	; 0x03
    21d6:	00 91 7b 20 	lds	r16, 0x207B
    21da:	10 91 7c 20 	lds	r17, 0x207C
    21de:	01 15       	cp	r16, r1
    21e0:	11 05       	cpc	r17, r1
    21e2:	81 f4       	brne	.+32     	; 0x2204 <free+0x44>
    21e4:	20 81       	ld	r18, Z
    21e6:	31 81       	ldd	r19, Z+1	; 0x01
    21e8:	82 0f       	add	r24, r18
    21ea:	93 1f       	adc	r25, r19
    21ec:	20 91 79 20 	lds	r18, 0x2079
    21f0:	30 91 7a 20 	lds	r19, 0x207A
    21f4:	28 17       	cp	r18, r24
    21f6:	39 07       	cpc	r19, r25
    21f8:	79 f5       	brne	.+94     	; 0x2258 <free+0x98>
    21fa:	e0 93 79 20 	sts	0x2079, r30
    21fe:	f0 93 7a 20 	sts	0x207A, r31
    2202:	71 c0       	rjmp	.+226    	; 0x22e6 <free+0x126>
    2204:	d8 01       	movw	r26, r16
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	ae 17       	cp	r26, r30
    220c:	bf 07       	cpc	r27, r31
    220e:	50 f4       	brcc	.+20     	; 0x2224 <free+0x64>
    2210:	12 96       	adiw	r26, 0x02	; 2
    2212:	2d 91       	ld	r18, X+
    2214:	3c 91       	ld	r19, X
    2216:	13 97       	sbiw	r26, 0x03	; 3
    2218:	ad 01       	movw	r20, r26
    221a:	21 15       	cp	r18, r1
    221c:	31 05       	cpc	r19, r1
    221e:	09 f1       	breq	.+66     	; 0x2262 <free+0xa2>
    2220:	d9 01       	movw	r26, r18
    2222:	f3 cf       	rjmp	.-26     	; 0x220a <free+0x4a>
    2224:	9d 01       	movw	r18, r26
    2226:	da 01       	movw	r26, r20
    2228:	22 83       	std	Z+2, r18	; 0x02
    222a:	33 83       	std	Z+3, r19	; 0x03
    222c:	60 81       	ld	r22, Z
    222e:	71 81       	ldd	r23, Z+1	; 0x01
    2230:	86 0f       	add	r24, r22
    2232:	97 1f       	adc	r25, r23
    2234:	82 17       	cp	r24, r18
    2236:	93 07       	cpc	r25, r19
    2238:	69 f4       	brne	.+26     	; 0x2254 <free+0x94>
    223a:	ec 01       	movw	r28, r24
    223c:	28 81       	ld	r18, Y
    223e:	39 81       	ldd	r19, Y+1	; 0x01
    2240:	26 0f       	add	r18, r22
    2242:	37 1f       	adc	r19, r23
    2244:	2e 5f       	subi	r18, 0xFE	; 254
    2246:	3f 4f       	sbci	r19, 0xFF	; 255
    2248:	20 83       	st	Z, r18
    224a:	31 83       	std	Z+1, r19	; 0x01
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	9b 81       	ldd	r25, Y+3	; 0x03
    2250:	82 83       	std	Z+2, r24	; 0x02
    2252:	93 83       	std	Z+3, r25	; 0x03
    2254:	45 2b       	or	r20, r21
    2256:	29 f4       	brne	.+10     	; 0x2262 <free+0xa2>
    2258:	e0 93 7b 20 	sts	0x207B, r30
    225c:	f0 93 7c 20 	sts	0x207C, r31
    2260:	42 c0       	rjmp	.+132    	; 0x22e6 <free+0x126>
    2262:	12 96       	adiw	r26, 0x02	; 2
    2264:	ed 93       	st	X+, r30
    2266:	fc 93       	st	X, r31
    2268:	13 97       	sbiw	r26, 0x03	; 3
    226a:	ed 01       	movw	r28, r26
    226c:	49 91       	ld	r20, Y+
    226e:	59 91       	ld	r21, Y+
    2270:	9e 01       	movw	r18, r28
    2272:	24 0f       	add	r18, r20
    2274:	35 1f       	adc	r19, r21
    2276:	e2 17       	cp	r30, r18
    2278:	f3 07       	cpc	r31, r19
    227a:	71 f4       	brne	.+28     	; 0x2298 <free+0xd8>
    227c:	80 81       	ld	r24, Z
    227e:	91 81       	ldd	r25, Z+1	; 0x01
    2280:	84 0f       	add	r24, r20
    2282:	95 1f       	adc	r25, r21
    2284:	02 96       	adiw	r24, 0x02	; 2
    2286:	8d 93       	st	X+, r24
    2288:	9c 93       	st	X, r25
    228a:	11 97       	sbiw	r26, 0x01	; 1
    228c:	82 81       	ldd	r24, Z+2	; 0x02
    228e:	93 81       	ldd	r25, Z+3	; 0x03
    2290:	12 96       	adiw	r26, 0x02	; 2
    2292:	8d 93       	st	X+, r24
    2294:	9c 93       	st	X, r25
    2296:	13 97       	sbiw	r26, 0x03	; 3
    2298:	e0 e0       	ldi	r30, 0x00	; 0
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	d8 01       	movw	r26, r16
    229e:	12 96       	adiw	r26, 0x02	; 2
    22a0:	8d 91       	ld	r24, X+
    22a2:	9c 91       	ld	r25, X
    22a4:	13 97       	sbiw	r26, 0x03	; 3
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	19 f0       	breq	.+6      	; 0x22b0 <free+0xf0>
    22aa:	f8 01       	movw	r30, r16
    22ac:	8c 01       	movw	r16, r24
    22ae:	f6 cf       	rjmp	.-20     	; 0x229c <free+0xdc>
    22b0:	8d 91       	ld	r24, X+
    22b2:	9c 91       	ld	r25, X
    22b4:	98 01       	movw	r18, r16
    22b6:	2e 5f       	subi	r18, 0xFE	; 254
    22b8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ba:	82 0f       	add	r24, r18
    22bc:	93 1f       	adc	r25, r19
    22be:	20 91 79 20 	lds	r18, 0x2079
    22c2:	30 91 7a 20 	lds	r19, 0x207A
    22c6:	28 17       	cp	r18, r24
    22c8:	39 07       	cpc	r19, r25
    22ca:	69 f4       	brne	.+26     	; 0x22e6 <free+0x126>
    22cc:	30 97       	sbiw	r30, 0x00	; 0
    22ce:	29 f4       	brne	.+10     	; 0x22da <free+0x11a>
    22d0:	10 92 7b 20 	sts	0x207B, r1
    22d4:	10 92 7c 20 	sts	0x207C, r1
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <free+0x11e>
    22da:	12 82       	std	Z+2, r1	; 0x02
    22dc:	13 82       	std	Z+3, r1	; 0x03
    22de:	00 93 79 20 	sts	0x2079, r16
    22e2:	10 93 7a 20 	sts	0x207A, r17
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	08 95       	ret

000022f0 <strnlen_P>:
    22f0:	fc 01       	movw	r30, r24
    22f2:	05 90       	lpm	r0, Z+
    22f4:	61 50       	subi	r22, 0x01	; 1
    22f6:	70 40       	sbci	r23, 0x00	; 0
    22f8:	01 10       	cpse	r0, r1
    22fa:	d8 f7       	brcc	.-10     	; 0x22f2 <strnlen_P+0x2>
    22fc:	80 95       	com	r24
    22fe:	90 95       	com	r25
    2300:	8e 0f       	add	r24, r30
    2302:	9f 1f       	adc	r25, r31
    2304:	08 95       	ret

00002306 <memset>:
    2306:	dc 01       	movw	r26, r24
    2308:	01 c0       	rjmp	.+2      	; 0x230c <memset+0x6>
    230a:	6d 93       	st	X+, r22
    230c:	41 50       	subi	r20, 0x01	; 1
    230e:	50 40       	sbci	r21, 0x00	; 0
    2310:	e0 f7       	brcc	.-8      	; 0x230a <memset+0x4>
    2312:	08 95       	ret

00002314 <strnlen>:
    2314:	fc 01       	movw	r30, r24
    2316:	61 50       	subi	r22, 0x01	; 1
    2318:	70 40       	sbci	r23, 0x00	; 0
    231a:	01 90       	ld	r0, Z+
    231c:	01 10       	cpse	r0, r1
    231e:	d8 f7       	brcc	.-10     	; 0x2316 <strnlen+0x2>
    2320:	80 95       	com	r24
    2322:	90 95       	com	r25
    2324:	8e 0f       	add	r24, r30
    2326:	9f 1f       	adc	r25, r31
    2328:	08 95       	ret

0000232a <fputc>:
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	fb 01       	movw	r30, r22
    2334:	23 81       	ldd	r18, Z+3	; 0x03
    2336:	21 fd       	sbrc	r18, 1
    2338:	03 c0       	rjmp	.+6      	; 0x2340 <fputc+0x16>
    233a:	8f ef       	ldi	r24, 0xFF	; 255
    233c:	9f ef       	ldi	r25, 0xFF	; 255
    233e:	28 c0       	rjmp	.+80     	; 0x2390 <fputc+0x66>
    2340:	22 ff       	sbrs	r18, 2
    2342:	16 c0       	rjmp	.+44     	; 0x2370 <fputc+0x46>
    2344:	46 81       	ldd	r20, Z+6	; 0x06
    2346:	57 81       	ldd	r21, Z+7	; 0x07
    2348:	24 81       	ldd	r18, Z+4	; 0x04
    234a:	35 81       	ldd	r19, Z+5	; 0x05
    234c:	42 17       	cp	r20, r18
    234e:	53 07       	cpc	r21, r19
    2350:	44 f4       	brge	.+16     	; 0x2362 <fputc+0x38>
    2352:	a0 81       	ld	r26, Z
    2354:	b1 81       	ldd	r27, Z+1	; 0x01
    2356:	9d 01       	movw	r18, r26
    2358:	2f 5f       	subi	r18, 0xFF	; 255
    235a:	3f 4f       	sbci	r19, 0xFF	; 255
    235c:	20 83       	st	Z, r18
    235e:	31 83       	std	Z+1, r19	; 0x01
    2360:	8c 93       	st	X, r24
    2362:	26 81       	ldd	r18, Z+6	; 0x06
    2364:	37 81       	ldd	r19, Z+7	; 0x07
    2366:	2f 5f       	subi	r18, 0xFF	; 255
    2368:	3f 4f       	sbci	r19, 0xFF	; 255
    236a:	26 83       	std	Z+6, r18	; 0x06
    236c:	37 83       	std	Z+7, r19	; 0x07
    236e:	10 c0       	rjmp	.+32     	; 0x2390 <fputc+0x66>
    2370:	eb 01       	movw	r28, r22
    2372:	09 2f       	mov	r16, r25
    2374:	18 2f       	mov	r17, r24
    2376:	00 84       	ldd	r0, Z+8	; 0x08
    2378:	f1 85       	ldd	r31, Z+9	; 0x09
    237a:	e0 2d       	mov	r30, r0
    237c:	19 95       	eicall
    237e:	89 2b       	or	r24, r25
    2380:	e1 f6       	brne	.-72     	; 0x233a <fputc+0x10>
    2382:	8e 81       	ldd	r24, Y+6	; 0x06
    2384:	9f 81       	ldd	r25, Y+7	; 0x07
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	8e 83       	std	Y+6, r24	; 0x06
    238a:	9f 83       	std	Y+7, r25	; 0x07
    238c:	81 2f       	mov	r24, r17
    238e:	90 2f       	mov	r25, r16
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	08 95       	ret

0000239a <__ultoa_invert>:
    239a:	fa 01       	movw	r30, r20
    239c:	aa 27       	eor	r26, r26
    239e:	28 30       	cpi	r18, 0x08	; 8
    23a0:	51 f1       	breq	.+84     	; 0x23f6 <__ultoa_invert+0x5c>
    23a2:	20 31       	cpi	r18, 0x10	; 16
    23a4:	81 f1       	breq	.+96     	; 0x2406 <__ultoa_invert+0x6c>
    23a6:	e8 94       	clt
    23a8:	6f 93       	push	r22
    23aa:	6e 7f       	andi	r22, 0xFE	; 254
    23ac:	6e 5f       	subi	r22, 0xFE	; 254
    23ae:	7f 4f       	sbci	r23, 0xFF	; 255
    23b0:	8f 4f       	sbci	r24, 0xFF	; 255
    23b2:	9f 4f       	sbci	r25, 0xFF	; 255
    23b4:	af 4f       	sbci	r26, 0xFF	; 255
    23b6:	b1 e0       	ldi	r27, 0x01	; 1
    23b8:	3e d0       	rcall	.+124    	; 0x2436 <__ultoa_invert+0x9c>
    23ba:	b4 e0       	ldi	r27, 0x04	; 4
    23bc:	3c d0       	rcall	.+120    	; 0x2436 <__ultoa_invert+0x9c>
    23be:	67 0f       	add	r22, r23
    23c0:	78 1f       	adc	r23, r24
    23c2:	89 1f       	adc	r24, r25
    23c4:	9a 1f       	adc	r25, r26
    23c6:	a1 1d       	adc	r26, r1
    23c8:	68 0f       	add	r22, r24
    23ca:	79 1f       	adc	r23, r25
    23cc:	8a 1f       	adc	r24, r26
    23ce:	91 1d       	adc	r25, r1
    23d0:	a1 1d       	adc	r26, r1
    23d2:	6a 0f       	add	r22, r26
    23d4:	71 1d       	adc	r23, r1
    23d6:	81 1d       	adc	r24, r1
    23d8:	91 1d       	adc	r25, r1
    23da:	a1 1d       	adc	r26, r1
    23dc:	20 d0       	rcall	.+64     	; 0x241e <__ultoa_invert+0x84>
    23de:	09 f4       	brne	.+2      	; 0x23e2 <__ultoa_invert+0x48>
    23e0:	68 94       	set
    23e2:	3f 91       	pop	r19
    23e4:	2a e0       	ldi	r18, 0x0A	; 10
    23e6:	26 9f       	mul	r18, r22
    23e8:	11 24       	eor	r1, r1
    23ea:	30 19       	sub	r19, r0
    23ec:	30 5d       	subi	r19, 0xD0	; 208
    23ee:	31 93       	st	Z+, r19
    23f0:	de f6       	brtc	.-74     	; 0x23a8 <__ultoa_invert+0xe>
    23f2:	cf 01       	movw	r24, r30
    23f4:	08 95       	ret
    23f6:	46 2f       	mov	r20, r22
    23f8:	47 70       	andi	r20, 0x07	; 7
    23fa:	40 5d       	subi	r20, 0xD0	; 208
    23fc:	41 93       	st	Z+, r20
    23fe:	b3 e0       	ldi	r27, 0x03	; 3
    2400:	0f d0       	rcall	.+30     	; 0x2420 <__ultoa_invert+0x86>
    2402:	c9 f7       	brne	.-14     	; 0x23f6 <__ultoa_invert+0x5c>
    2404:	f6 cf       	rjmp	.-20     	; 0x23f2 <__ultoa_invert+0x58>
    2406:	46 2f       	mov	r20, r22
    2408:	4f 70       	andi	r20, 0x0F	; 15
    240a:	40 5d       	subi	r20, 0xD0	; 208
    240c:	4a 33       	cpi	r20, 0x3A	; 58
    240e:	18 f0       	brcs	.+6      	; 0x2416 <__ultoa_invert+0x7c>
    2410:	49 5d       	subi	r20, 0xD9	; 217
    2412:	31 fd       	sbrc	r19, 1
    2414:	40 52       	subi	r20, 0x20	; 32
    2416:	41 93       	st	Z+, r20
    2418:	02 d0       	rcall	.+4      	; 0x241e <__ultoa_invert+0x84>
    241a:	a9 f7       	brne	.-22     	; 0x2406 <__ultoa_invert+0x6c>
    241c:	ea cf       	rjmp	.-44     	; 0x23f2 <__ultoa_invert+0x58>
    241e:	b4 e0       	ldi	r27, 0x04	; 4
    2420:	a6 95       	lsr	r26
    2422:	97 95       	ror	r25
    2424:	87 95       	ror	r24
    2426:	77 95       	ror	r23
    2428:	67 95       	ror	r22
    242a:	ba 95       	dec	r27
    242c:	c9 f7       	brne	.-14     	; 0x2420 <__ultoa_invert+0x86>
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	61 05       	cpc	r22, r1
    2432:	71 05       	cpc	r23, r1
    2434:	08 95       	ret
    2436:	9b 01       	movw	r18, r22
    2438:	ac 01       	movw	r20, r24
    243a:	0a 2e       	mov	r0, r26
    243c:	06 94       	lsr	r0
    243e:	57 95       	ror	r21
    2440:	47 95       	ror	r20
    2442:	37 95       	ror	r19
    2444:	27 95       	ror	r18
    2446:	ba 95       	dec	r27
    2448:	c9 f7       	brne	.-14     	; 0x243c <__ultoa_invert+0xa2>
    244a:	62 0f       	add	r22, r18
    244c:	73 1f       	adc	r23, r19
    244e:	84 1f       	adc	r24, r20
    2450:	95 1f       	adc	r25, r21
    2452:	a0 1d       	adc	r26, r0
    2454:	08 95       	ret

00002456 <_exit>:
    2456:	f8 94       	cli

00002458 <__stop_program>:
    2458:	ff cf       	rjmp	.-2      	; 0x2458 <__stop_program>
