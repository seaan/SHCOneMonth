
TEAM2 ONE MONTH CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00802000  00003274  00003308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00802062  00802062  0000336a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000336a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00003408  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cf45  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002507  00000000  00000000  0001074d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009f2b  00000000  00000000  00012c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c0c  00000000  00000000  0001cb80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002a9d1  00000000  00000000  0001d78c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000038f1  00000000  00000000  0004815d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0004ba50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b92f  00000000  00000000  0004bd80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a7 c1       	rjmp	.+846    	; 0x350 <__ctors_end>
       2:	00 00       	nop
       4:	cb c1       	rjmp	.+918    	; 0x39c <__bad_interrupt>
       6:	00 00       	nop
       8:	c9 c1       	rjmp	.+914    	; 0x39c <__bad_interrupt>
       a:	00 00       	nop
       c:	c7 c1       	rjmp	.+910    	; 0x39c <__bad_interrupt>
       e:	00 00       	nop
      10:	c5 c1       	rjmp	.+906    	; 0x39c <__bad_interrupt>
      12:	00 00       	nop
      14:	c3 c1       	rjmp	.+902    	; 0x39c <__bad_interrupt>
      16:	00 00       	nop
      18:	c1 c1       	rjmp	.+898    	; 0x39c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bf c1       	rjmp	.+894    	; 0x39c <__bad_interrupt>
      1e:	00 00       	nop
      20:	bd c1       	rjmp	.+890    	; 0x39c <__bad_interrupt>
      22:	00 00       	nop
      24:	bb c1       	rjmp	.+886    	; 0x39c <__bad_interrupt>
      26:	00 00       	nop
      28:	ba c1       	rjmp	.+884    	; 0x39e <__vector_10>
      2a:	00 00       	nop
      2c:	db c1       	rjmp	.+950    	; 0x3e4 <__vector_11>
      2e:	00 00       	nop
      30:	b5 c1       	rjmp	.+874    	; 0x39c <__bad_interrupt>
      32:	00 00       	nop
      34:	b3 c1       	rjmp	.+870    	; 0x39c <__bad_interrupt>
      36:	00 00       	nop
      38:	b1 c1       	rjmp	.+866    	; 0x39c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	af c1       	rjmp	.+862    	; 0x39c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ad c1       	rjmp	.+858    	; 0x39c <__bad_interrupt>
      42:	00 00       	nop
      44:	ab c1       	rjmp	.+854    	; 0x39c <__bad_interrupt>
      46:	00 00       	nop
      48:	a9 c1       	rjmp	.+850    	; 0x39c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a7 c1       	rjmp	.+846    	; 0x39c <__bad_interrupt>
      4e:	00 00       	nop
      50:	a5 c1       	rjmp	.+842    	; 0x39c <__bad_interrupt>
      52:	00 00       	nop
      54:	a3 c1       	rjmp	.+838    	; 0x39c <__bad_interrupt>
      56:	00 00       	nop
      58:	a1 c1       	rjmp	.+834    	; 0x39c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9f c1       	rjmp	.+830    	; 0x39c <__bad_interrupt>
      5e:	00 00       	nop
      60:	9d c1       	rjmp	.+826    	; 0x39c <__bad_interrupt>
      62:	00 00       	nop
      64:	9b c1       	rjmp	.+822    	; 0x39c <__bad_interrupt>
      66:	00 00       	nop
      68:	99 c1       	rjmp	.+818    	; 0x39c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	97 c1       	rjmp	.+814    	; 0x39c <__bad_interrupt>
      6e:	00 00       	nop
      70:	95 c1       	rjmp	.+810    	; 0x39c <__bad_interrupt>
      72:	00 00       	nop
      74:	93 c1       	rjmp	.+806    	; 0x39c <__bad_interrupt>
      76:	00 00       	nop
      78:	91 c1       	rjmp	.+802    	; 0x39c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8f c1       	rjmp	.+798    	; 0x39c <__bad_interrupt>
      7e:	00 00       	nop
      80:	8d c1       	rjmp	.+794    	; 0x39c <__bad_interrupt>
      82:	00 00       	nop
      84:	8b c1       	rjmp	.+790    	; 0x39c <__bad_interrupt>
      86:	00 00       	nop
      88:	89 c1       	rjmp	.+786    	; 0x39c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	87 c1       	rjmp	.+782    	; 0x39c <__bad_interrupt>
      8e:	00 00       	nop
      90:	85 c1       	rjmp	.+778    	; 0x39c <__bad_interrupt>
      92:	00 00       	nop
      94:	83 c1       	rjmp	.+774    	; 0x39c <__bad_interrupt>
      96:	00 00       	nop
      98:	81 c1       	rjmp	.+770    	; 0x39c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c0 c5       	rjmp	.+2944   	; 0xc1e <__vector_39>
      9e:	00 00       	nop
      a0:	fb c5       	rjmp	.+3062   	; 0xc98 <__vector_40>
      a2:	00 00       	nop
      a4:	36 c6       	rjmp	.+3180   	; 0xd12 <__vector_41>
      a6:	00 00       	nop
      a8:	71 c6       	rjmp	.+3298   	; 0xd8c <__vector_42>
      aa:	00 00       	nop
      ac:	77 c1       	rjmp	.+750    	; 0x39c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	75 c1       	rjmp	.+746    	; 0x39c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	73 c1       	rjmp	.+742    	; 0x39c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	71 c1       	rjmp	.+738    	; 0x39c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	6f c1       	rjmp	.+734    	; 0x39c <__bad_interrupt>
      be:	00 00       	nop
      c0:	6d c1       	rjmp	.+730    	; 0x39c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	6b c1       	rjmp	.+726    	; 0x39c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	69 c1       	rjmp	.+722    	; 0x39c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	67 c1       	rjmp	.+718    	; 0x39c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	65 c1       	rjmp	.+714    	; 0x39c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	63 c1       	rjmp	.+710    	; 0x39c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	61 c1       	rjmp	.+706    	; 0x39c <__bad_interrupt>
      da:	00 00       	nop
      dc:	5f c1       	rjmp	.+702    	; 0x39c <__bad_interrupt>
      de:	00 00       	nop
      e0:	5d c1       	rjmp	.+698    	; 0x39c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5b c1       	rjmp	.+694    	; 0x39c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	59 c1       	rjmp	.+690    	; 0x39c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	57 c1       	rjmp	.+686    	; 0x39c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	55 c1       	rjmp	.+682    	; 0x39c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	53 c1       	rjmp	.+678    	; 0x39c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	51 c1       	rjmp	.+674    	; 0x39c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	4f c1       	rjmp	.+670    	; 0x39c <__bad_interrupt>
      fe:	00 00       	nop
     100:	4d c1       	rjmp	.+666    	; 0x39c <__bad_interrupt>
     102:	00 00       	nop
     104:	4b c1       	rjmp	.+662    	; 0x39c <__bad_interrupt>
     106:	00 00       	nop
     108:	49 c1       	rjmp	.+658    	; 0x39c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	47 c1       	rjmp	.+654    	; 0x39c <__bad_interrupt>
     10e:	00 00       	nop
     110:	45 c1       	rjmp	.+650    	; 0x39c <__bad_interrupt>
     112:	00 00       	nop
     114:	43 c1       	rjmp	.+646    	; 0x39c <__bad_interrupt>
     116:	00 00       	nop
     118:	41 c1       	rjmp	.+642    	; 0x39c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8c c4       	rjmp	.+2328   	; 0xa36 <__vector_71>
     11e:	00 00       	nop
     120:	c7 c4       	rjmp	.+2446   	; 0xab0 <__vector_72>
     122:	00 00       	nop
     124:	02 c5       	rjmp	.+2564   	; 0xb2a <__vector_73>
     126:	00 00       	nop
     128:	3d c5       	rjmp	.+2682   	; 0xba4 <__vector_74>
     12a:	00 00       	nop
     12c:	37 c1       	rjmp	.+622    	; 0x39c <__bad_interrupt>
     12e:	00 00       	nop
     130:	35 c1       	rjmp	.+618    	; 0x39c <__bad_interrupt>
     132:	00 00       	nop
     134:	33 c1       	rjmp	.+614    	; 0x39c <__bad_interrupt>
     136:	00 00       	nop
     138:	31 c1       	rjmp	.+610    	; 0x39c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	2f c1       	rjmp	.+606    	; 0x39c <__bad_interrupt>
     13e:	00 00       	nop
     140:	2d c1       	rjmp	.+602    	; 0x39c <__bad_interrupt>
     142:	00 00       	nop
     144:	2b c1       	rjmp	.+598    	; 0x39c <__bad_interrupt>
     146:	00 00       	nop
     148:	29 c1       	rjmp	.+594    	; 0x39c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	27 c1       	rjmp	.+590    	; 0x39c <__bad_interrupt>
     14e:	00 00       	nop
     150:	25 c1       	rjmp	.+586    	; 0x39c <__bad_interrupt>
     152:	00 00       	nop
     154:	23 c1       	rjmp	.+582    	; 0x39c <__bad_interrupt>
     156:	00 00       	nop
     158:	21 c1       	rjmp	.+578    	; 0x39c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	1f c1       	rjmp	.+574    	; 0x39c <__bad_interrupt>
     15e:	00 00       	nop
     160:	1d c1       	rjmp	.+570    	; 0x39c <__bad_interrupt>
     162:	00 00       	nop
     164:	1b c1       	rjmp	.+566    	; 0x39c <__bad_interrupt>
     166:	00 00       	nop
     168:	19 c1       	rjmp	.+562    	; 0x39c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	17 c1       	rjmp	.+558    	; 0x39c <__bad_interrupt>
     16e:	00 00       	nop
     170:	15 c1       	rjmp	.+554    	; 0x39c <__bad_interrupt>
     172:	00 00       	nop
     174:	13 c1       	rjmp	.+550    	; 0x39c <__bad_interrupt>
     176:	00 00       	nop
     178:	11 c1       	rjmp	.+546    	; 0x39c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	0f c1       	rjmp	.+542    	; 0x39c <__bad_interrupt>
     17e:	00 00       	nop
     180:	0d c1       	rjmp	.+538    	; 0x39c <__bad_interrupt>
     182:	00 00       	nop
     184:	0b c1       	rjmp	.+534    	; 0x39c <__bad_interrupt>
     186:	00 00       	nop
     188:	09 c1       	rjmp	.+530    	; 0x39c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	07 c1       	rjmp	.+526    	; 0x39c <__bad_interrupt>
     18e:	00 00       	nop
     190:	05 c1       	rjmp	.+522    	; 0x39c <__bad_interrupt>
     192:	00 00       	nop
     194:	03 c1       	rjmp	.+518    	; 0x39c <__bad_interrupt>
     196:	00 00       	nop
     198:	01 c1       	rjmp	.+514    	; 0x39c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	ff c0       	rjmp	.+510    	; 0x39c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	fd c0       	rjmp	.+506    	; 0x39c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	fb c0       	rjmp	.+502    	; 0x39c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	f9 c0       	rjmp	.+498    	; 0x39c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	f7 c0       	rjmp	.+494    	; 0x39c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	f5 c0       	rjmp	.+490    	; 0x39c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	f3 c0       	rjmp	.+486    	; 0x39c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	f1 c0       	rjmp	.+482    	; 0x39c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	ef c0       	rjmp	.+478    	; 0x39c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	ed c0       	rjmp	.+474    	; 0x39c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	eb c0       	rjmp	.+470    	; 0x39c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	e9 c0       	rjmp	.+466    	; 0x39c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	e7 c0       	rjmp	.+462    	; 0x39c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	e5 c0       	rjmp	.+458    	; 0x39c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	e3 c0       	rjmp	.+454    	; 0x39c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	e1 c0       	rjmp	.+450    	; 0x39c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	df c0       	rjmp	.+446    	; 0x39c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	dd c0       	rjmp	.+442    	; 0x39c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	db c0       	rjmp	.+438    	; 0x39c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	d9 c0       	rjmp	.+434    	; 0x39c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	d7 c0       	rjmp	.+430    	; 0x39c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	d5 c0       	rjmp	.+426    	; 0x39c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	08 00       	.word	0x0008	; ????
     1f6:	00 00       	nop
     1f8:	be 92       	st	-X, r11
     1fa:	24 49       	sbci	r18, 0x94	; 148
     1fc:	12 3e       	cpi	r17, 0xE2	; 226
     1fe:	ab aa       	std	Y+51, r10	; 0x33
     200:	aa 2a       	or	r10, r26
     202:	be cd       	rjmp	.-1156   	; 0xfffffd80 <__eeprom_end+0xff7efd80>
     204:	cc cc       	rjmp	.-1640   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     206:	4c 3e       	cpi	r20, 0xEC	; 236
     208:	00 00       	nop
     20a:	00 80       	ld	r0, Z
     20c:	be ab       	std	Y+54, r27	; 0x36
     20e:	aa aa       	std	Y+50, r10	; 0x32
     210:	aa 3e       	cpi	r26, 0xEA	; 234
     212:	00 00       	nop
     214:	00 00       	nop
     216:	bf 00       	.word	0x00bf	; ????
     218:	00 00       	nop
     21a:	80 3f       	cpi	r24, 0xF0	; 240
     21c:	00 00       	nop
     21e:	00 00       	nop
     220:	00 08       	sbc	r0, r0
     222:	41 78       	andi	r20, 0x81	; 129
     224:	d3 bb       	out	0x13, r29	; 19
     226:	43 87       	std	Z+11, r20	; 0x0b
     228:	d1 13       	cpse	r29, r17
     22a:	3d 19       	sub	r19, r13
     22c:	0e 3c       	cpi	r16, 0xCE	; 206
     22e:	c3 bd       	out	0x23, r28	; 35
     230:	42 82       	std	Z+2, r4	; 0x02
     232:	ad 2b       	or	r26, r29
     234:	3e 68       	ori	r19, 0x8E	; 142
     236:	ec 82       	std	Y+4, r14	; 0x04
     238:	76 be       	out	0x36, r7	; 54
     23a:	d9 8f       	std	Y+25, r29	; 0x19
     23c:	e1 a9       	ldd	r30, Z+49	; 0x31
     23e:	3e 4c       	sbci	r19, 0xCE	; 206
     240:	80 ef       	ldi	r24, 0xF0	; 240
     242:	ff be       	out	0x3f, r15	; 63
     244:	01 c4       	rjmp	.+2050   	; 0xa48 <__vector_71+0x12>
     246:	ff 7f       	andi	r31, 0xFF	; 255
     248:	3f 00       	.word	0x003f	; ????
     24a:	00 00       	nop
	...

0000024e <__trampolines_end>:
     24e:	6e 61       	ori	r22, 0x1E	; 30
     250:	6e 00       	.word	0x006e	; ????

00000252 <__c.2240>:
     252:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     262:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     272:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     282:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     292:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2a2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2b2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2c2:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2d2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2e2:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2f2:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     302:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     312:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     322:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     332:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     342:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000350 <__ctors_end>:
     350:	11 24       	eor	r1, r1
     352:	1f be       	out	0x3f, r1	; 63
     354:	cf ef       	ldi	r28, 0xFF	; 255
     356:	cd bf       	out	0x3d, r28	; 61
     358:	df e3       	ldi	r29, 0x3F	; 63
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	00 e0       	ldi	r16, 0x00	; 0
     35e:	0c bf       	out	0x3c, r16	; 60
     360:	18 be       	out	0x38, r1	; 56
     362:	19 be       	out	0x39, r1	; 57
     364:	1a be       	out	0x3a, r1	; 58
     366:	1b be       	out	0x3b, r1	; 59

00000368 <__do_copy_data>:
     368:	10 e2       	ldi	r17, 0x20	; 32
     36a:	a0 e0       	ldi	r26, 0x00	; 0
     36c:	b0 e2       	ldi	r27, 0x20	; 32
     36e:	e4 e7       	ldi	r30, 0x74	; 116
     370:	f2 e3       	ldi	r31, 0x32	; 50
     372:	00 e0       	ldi	r16, 0x00	; 0
     374:	0b bf       	out	0x3b, r16	; 59
     376:	02 c0       	rjmp	.+4      	; 0x37c <__do_copy_data+0x14>
     378:	07 90       	elpm	r0, Z+
     37a:	0d 92       	st	X+, r0
     37c:	a2 36       	cpi	r26, 0x62	; 98
     37e:	b1 07       	cpc	r27, r17
     380:	d9 f7       	brne	.-10     	; 0x378 <__do_copy_data+0x10>
     382:	1b be       	out	0x3b, r1	; 59

00000384 <__do_clear_bss>:
     384:	20 e2       	ldi	r18, 0x20	; 32
     386:	a2 e6       	ldi	r26, 0x62	; 98
     388:	b0 e2       	ldi	r27, 0x20	; 32
     38a:	01 c0       	rjmp	.+2      	; 0x38e <.do_clear_bss_start>

0000038c <.do_clear_bss_loop>:
     38c:	1d 92       	st	X+, r1

0000038e <.do_clear_bss_start>:
     38e:	a7 39       	cpi	r26, 0x97	; 151
     390:	b2 07       	cpc	r27, r18
     392:	e1 f7       	brne	.-8      	; 0x38c <.do_clear_bss_loop>
     394:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <main>
     398:	0c 94 38 19 	jmp	0x3270	; 0x3270 <_exit>

0000039c <__bad_interrupt>:
     39c:	31 ce       	rjmp	.-926    	; 0x0 <__vectors>

0000039e <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	08 b6       	in	r0, 0x38	; 56
     3aa:	0f 92       	push	r0
     3ac:	18 be       	out	0x38, r1	; 56
     3ae:	0b b6       	in	r0, 0x3b	; 59
     3b0:	0f 92       	push	r0
     3b2:	1b be       	out	0x3b, r1	; 59
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
     3b8:	ef 93       	push	r30
     3ba:	ff 93       	push	r31
	rtc_data.counter_high++;
     3bc:	e8 e6       	ldi	r30, 0x68	; 104
     3be:	f0 e2       	ldi	r31, 0x20	; 32
     3c0:	80 81       	ld	r24, Z
     3c2:	91 81       	ldd	r25, Z+1	; 0x01
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	80 83       	st	Z, r24
     3c8:	91 83       	std	Z+1, r25	; 0x01
}
     3ca:	ff 91       	pop	r31
     3cc:	ef 91       	pop	r30
     3ce:	9f 91       	pop	r25
     3d0:	8f 91       	pop	r24
     3d2:	0f 90       	pop	r0
     3d4:	0b be       	out	0x3b, r0	; 59
     3d6:	0f 90       	pop	r0
     3d8:	08 be       	out	0x38, r0	; 56
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	08 b6       	in	r0, 0x38	; 56
     3f0:	0f 92       	push	r0
     3f2:	18 be       	out	0x38, r1	; 56
     3f4:	09 b6       	in	r0, 0x39	; 57
     3f6:	0f 92       	push	r0
     3f8:	19 be       	out	0x39, r1	; 57
     3fa:	0b b6       	in	r0, 0x3b	; 59
     3fc:	0f 92       	push	r0
     3fe:	1b be       	out	0x3b, r1	; 59
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	2f 93       	push	r18
     40e:	3f 93       	push	r19
     410:	4f 93       	push	r20
     412:	5f 93       	push	r21
     414:	6f 93       	push	r22
     416:	7f 93       	push	r23
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	af 93       	push	r26
     41e:	bf 93       	push	r27
     420:	ef 93       	push	r30
     422:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     424:	e8 e6       	ldi	r30, 0x68	; 104
     426:	f0 e2       	ldi	r31, 0x20	; 32
     428:	80 81       	ld	r24, Z
     42a:	91 81       	ldd	r25, Z+1	; 0x01
     42c:	22 81       	ldd	r18, Z+2	; 0x02
     42e:	33 81       	ldd	r19, Z+3	; 0x03
     430:	82 17       	cp	r24, r18
     432:	93 07       	cpc	r25, r19
     434:	f0 f1       	brcs	.+124    	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     43c:	e0 91 6e 20 	lds	r30, 0x206E	; 0x80206e <rtc_data+0x6>
     440:	f0 91 6f 20 	lds	r31, 0x206F	; 0x80206f <rtc_data+0x7>
     444:	30 97       	sbiw	r30, 0x00	; 0
     446:	a9 f1       	breq	.+106    	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     448:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     44c:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     450:	a0 e0       	ldi	r26, 0x00	; 0
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	dc 01       	movw	r26, r24
     456:	99 27       	eor	r25, r25
     458:	88 27       	eor	r24, r24
					| RTC.CNT;
     45a:	ab 01       	movw	r20, r22
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     460:	8c 01       	movw	r16, r24
     462:	9d 01       	movw	r18, r26
     464:	04 2b       	or	r16, r20
     466:	15 2b       	or	r17, r21
     468:	26 2b       	or	r18, r22
     46a:	37 2b       	or	r19, r23
     46c:	c9 01       	movw	r24, r18
     46e:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     470:	a8 e6       	ldi	r26, 0x68	; 104
     472:	b0 e2       	ldi	r27, 0x20	; 32
     474:	12 96       	adiw	r26, 0x02	; 2
     476:	0d 91       	ld	r16, X+
     478:	1c 91       	ld	r17, X
     47a:	13 97       	sbiw	r26, 0x03	; 3
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	98 01       	movw	r18, r16
     482:	11 27       	eor	r17, r17
     484:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     486:	14 96       	adiw	r26, 0x04	; 4
     488:	cd 90       	ld	r12, X+
     48a:	dc 90       	ld	r13, X
     48c:	15 97       	sbiw	r26, 0x05	; 5
     48e:	e1 2c       	mov	r14, r1
     490:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     492:	0c 29       	or	r16, r12
     494:	1d 29       	or	r17, r13
     496:	2e 29       	or	r18, r14
     498:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     49a:	06 17       	cp	r16, r22
     49c:	17 07       	cpc	r17, r23
     49e:	28 07       	cpc	r18, r24
     4a0:	39 07       	cpc	r19, r25
     4a2:	30 f0       	brcs	.+12     	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
				count = alarm + 1;
     4a4:	c9 01       	movw	r24, r18
     4a6:	b8 01       	movw	r22, r16
     4a8:	6f 5f       	subi	r22, 0xFF	; 255
     4aa:	7f 4f       	sbci	r23, 0xFF	; 255
     4ac:	8f 4f       	sbci	r24, 0xFF	; 255
     4ae:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     4b0:	19 95       	eicall
		}
	}
}
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	bf 91       	pop	r27
     4b8:	af 91       	pop	r26
     4ba:	9f 91       	pop	r25
     4bc:	8f 91       	pop	r24
     4be:	7f 91       	pop	r23
     4c0:	6f 91       	pop	r22
     4c2:	5f 91       	pop	r21
     4c4:	4f 91       	pop	r20
     4c6:	3f 91       	pop	r19
     4c8:	2f 91       	pop	r18
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	df 90       	pop	r13
     4d4:	cf 90       	pop	r12
     4d6:	0f 90       	pop	r0
     4d8:	0b be       	out	0x3b, r0	; 59
     4da:	0f 90       	pop	r0
     4dc:	09 be       	out	0x39, r0	; 57
     4de:	0f 90       	pop	r0
     4e0:	08 be       	out	0x38, r0	; 56
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <getAltitude>:
 #include <asf.h>
 #include <math.h>
 #include "Calculations/Altitude/getAltitude.h"
 #include "Drivers/Pressure/getPressure.h"
 #include "Drivers/Temperature/getTemperature.h"
 float getAltitude(void){
     4ec:	8f 92       	push	r8
     4ee:	9f 92       	push	r9
     4f0:	af 92       	push	r10
     4f2:	bf 92       	push	r11
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15

	float temperature = getTemperature();
     4fc:	0e 94 1b 0c 	call	0x1836	; 0x1836 <getTemperature>
     500:	4b 01       	movw	r8, r22
     502:	5c 01       	movw	r10, r24
	float pressure = (float)getPressure();
     504:	e3 d7       	rcall	.+4038   	; 0x14cc <getPressure>
     506:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__floatsisf>
     50a:	9b 01       	movw	r18, r22
     50c:	ac 01       	movw	r20, r24
	
	float alt2 = log(pconst/pressure);

	//printf("pressure: %f\ntemperature: %f\nalt1:%f\nalt2:%f\n",pressure,temperature,alt1,alt2);

	return ((R * temperature)/g)*log(pconst/pressure);  //Equation found here: https://en.wikipedia.org/wiki/Hypsometric_equation 
     50e:	60 e8       	ldi	r22, 0x80	; 128
     510:	76 ee       	ldi	r23, 0xE6	; 230
     512:	85 ec       	ldi	r24, 0xC5	; 197
     514:	97 e4       	ldi	r25, 0x47	; 71
     516:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__divsf3>
     51a:	0e 94 80 10 	call	0x2100	; 0x2100 <log>
     51e:	6b 01       	movw	r12, r22
     520:	7c 01       	movw	r14, r24
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e8       	ldi	r19, 0x80	; 128
     526:	4f e8       	ldi	r20, 0x8F	; 143
     528:	53 e4       	ldi	r21, 0x43	; 67
     52a:	c5 01       	movw	r24, r10
     52c:	b4 01       	movw	r22, r8
     52e:	0e 94 c0 10 	call	0x2180	; 0x2180 <__mulsf3>
     532:	2a e0       	ldi	r18, 0x0A	; 10
     534:	38 ee       	ldi	r19, 0xE8	; 232
     536:	4c e1       	ldi	r20, 0x1C	; 28
     538:	51 e4       	ldi	r21, 0x41	; 65
     53a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__divsf3>
     53e:	a7 01       	movw	r20, r14
     540:	96 01       	movw	r18, r12
     542:	0e 94 c0 10 	call	0x2180	; 0x2180 <__mulsf3>
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	bf 90       	pop	r11
     550:	af 90       	pop	r10
     552:	9f 90       	pop	r9
     554:	8f 90       	pop	r8
     556:	08 95       	ret

00000558 <getVelocity>:
 #include "Calculations/Altitude/getAltitude.h"

 float exponentialSmoothing(float p_smth_vel, float current_vel);

 //Velocity function
 float getVelocity(void){
     558:	2f 92       	push	r2
     55a:	3f 92       	push	r3
     55c:	4f 92       	push	r4
     55e:	5f 92       	push	r5
     560:	6f 92       	push	r6
     562:	7f 92       	push	r7
     564:	8f 92       	push	r8
     566:	9f 92       	push	r9
     568:	af 92       	push	r10
     56a:	bf 92       	push	r11
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	c4 59       	subi	r28, 0x94	; 148
     582:	d1 40       	sbci	r29, 0x01	; 1
     584:	cd bf       	out	0x3d, r28	; 61
     586:	de bf       	out	0x3e, r29	; 62
	float perms = 3.1249523;	
	float arr_alt[25]; //Creates an array of size 25 for altitude.
	float arr_vel[25]; //Velocity array.
	float arr_time[25]; //time array
	while (TCF0.CNT != TCF0.PER); //wait until interrupt is done.
     588:	e0 e0       	ldi	r30, 0x00	; 0
     58a:	fb e0       	ldi	r31, 0x0B	; 11
     58c:	20 a1       	ldd	r18, Z+32	; 0x20
     58e:	31 a1       	ldd	r19, Z+33	; 0x21
     590:	86 a1       	ldd	r24, Z+38	; 0x26
     592:	97 a1       	ldd	r25, Z+39	; 0x27
     594:	28 17       	cp	r18, r24
     596:	39 07       	cpc	r19, r25
     598:	c9 f7       	brne	.-14     	; 0x58c <getVelocity+0x34>
	float final_alt = getAltitude(); //sets final altitude for the loop to the current altitude.
     59a:	a8 df       	rcall	.-176    	; 0x4ec <getAltitude>
     59c:	2b 01       	movw	r4, r22
     59e:	3c 01       	movw	r6, r24
     5a0:	8e 01       	movw	r16, r28
     5a2:	0f 5f       	subi	r16, 0xFF	; 255
     5a4:	1f 4f       	sbci	r17, 0xFF	; 255
     5a6:	5e 01       	movw	r10, r28
     5a8:	89 ec       	ldi	r24, 0xC9	; 201
     5aa:	a8 0e       	add	r10, r24
     5ac:	b1 1c       	adc	r11, r1
     5ae:	4e 01       	movw	r8, r28
     5b0:	a5 e6       	ldi	r26, 0x65	; 101
     5b2:	8a 0e       	add	r8, r26
     5b4:	91 1c       	adc	r9, r1
     5b6:	68 01       	movw	r12, r16
	for(int i = 0; i < 25; i++){ //For each element in altTable
		while (TCF0.CNT != TCF0.PER); //wait until TCF0 overflows, which will take 10ms
     5b8:	0f 2e       	mov	r0, r31
     5ba:	e1 2c       	mov	r14, r1
     5bc:	fb e0       	ldi	r31, 0x0B	; 11
     5be:	ff 2e       	mov	r15, r31
     5c0:	f0 2d       	mov	r31, r0
     5c2:	f7 01       	movw	r30, r14
     5c4:	20 a1       	ldd	r18, Z+32	; 0x20
     5c6:	31 a1       	ldd	r19, Z+33	; 0x21
     5c8:	86 a1       	ldd	r24, Z+38	; 0x26
     5ca:	97 a1       	ldd	r25, Z+39	; 0x27
     5cc:	28 17       	cp	r18, r24
     5ce:	39 07       	cpc	r19, r25
     5d0:	c1 f7       	brne	.-16     	; 0x5c2 <getVelocity+0x6a>
		
		//delay_ms(10); //Delay for 10ms, creates a sample rate for velocity of 100Hz. 
		arr_alt[i] = final_alt - getAltitude(); //Set the current element to the delta altitude found with final altitude of the previous iteration subtracted by the current altitude.
     5d2:	8c df       	rcall	.-232    	; 0x4ec <getAltitude>
     5d4:	9b 01       	movw	r18, r22
     5d6:	ac 01       	movw	r20, r24
     5d8:	c3 01       	movw	r24, r6
     5da:	b2 01       	movw	r22, r4
     5dc:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__subsf3>
     5e0:	d6 01       	movw	r26, r12
     5e2:	6d 93       	st	X+, r22
     5e4:	7d 93       	st	X+, r23
     5e6:	8d 93       	st	X+, r24
     5e8:	9d 93       	st	X+, r25
     5ea:	6d 01       	movw	r12, r26

		arr_time[i] = TCF0.CNT/perms + 10; //time element array is one ahead so we can record the change in time + 10ms for the timer counter.
     5ec:	f7 01       	movw	r30, r14
     5ee:	60 a1       	ldd	r22, Z+32	; 0x20
     5f0:	71 a1       	ldd	r23, Z+33	; 0x21
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <__floatunsisf>
     5fa:	28 e3       	ldi	r18, 0x38	; 56
     5fc:	3f ef       	ldi	r19, 0xFF	; 255
     5fe:	47 e4       	ldi	r20, 0x47	; 71
     600:	50 e4       	ldi	r21, 0x40	; 64
     602:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__divsf3>
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	40 e2       	ldi	r20, 0x20	; 32
     60c:	51 e4       	ldi	r21, 0x41	; 65
     60e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__addsf3>
     612:	d5 01       	movw	r26, r10
     614:	6d 93       	st	X+, r22
     616:	7d 93       	st	X+, r23
     618:	8d 93       	st	X+, r24
     61a:	9d 93       	st	X+, r25
     61c:	5d 01       	movw	r10, r26
		
		final_alt = getAltitude(); //Sets the final altitude for the iteration to the current altitude.
     61e:	66 df       	rcall	.-308    	; 0x4ec <getAltitude>
     620:	2b 01       	movw	r4, r22
     622:	3c 01       	movw	r6, r24
	float arr_alt[25]; //Creates an array of size 25 for altitude.
	float arr_vel[25]; //Velocity array.
	float arr_time[25]; //time array
	while (TCF0.CNT != TCF0.PER); //wait until interrupt is done.
	float final_alt = getAltitude(); //sets final altitude for the loop to the current altitude.
	for(int i = 0; i < 25; i++){ //For each element in altTable
     624:	c8 14       	cp	r12, r8
     626:	d9 04       	cpc	r13, r9
     628:	61 f6       	brne	.-104    	; 0x5c2 <getVelocity+0x6a>
     62a:	4e 01       	movw	r8, r28
     62c:	bd ec       	ldi	r27, 0xCD	; 205
     62e:	8b 0e       	add	r8, r27
     630:	91 1c       	adc	r9, r1
     632:	5e 01       	movw	r10, r28
     634:	e9 e6       	ldi	r30, 0x69	; 105
     636:	ae 0e       	add	r10, r30
     638:	b1 1c       	adc	r11, r1
     63a:	1e 01       	movw	r2, r28
     63c:	f1 e6       	ldi	r31, 0x61	; 97
     63e:	2f 0e       	add	r2, r31
     640:	31 1c       	adc	r3, r1
     642:	35 01       	movw	r6, r10
     644:	f8 01       	movw	r30, r16
     646:	0c 5f       	subi	r16, 0xFC	; 252
     648:	1f 4f       	sbci	r17, 0xFF	; 255
		final_alt = getAltitude(); //Sets the final altitude for the iteration to the current altitude.
	}

	//Attempt at numerical differentiation.
	for(int z = 1; z < 25; z++){
		arr_vel[z] = (arr_alt[z+1] - arr_alt[z-1])/(2*arr_time[z]); //Approximated velocity using a centered difference scheme, reduces noise from taking the derivative.
     64a:	d4 01       	movw	r26, r8
     64c:	cd 90       	ld	r12, X+
     64e:	dd 90       	ld	r13, X+
     650:	ed 90       	ld	r14, X+
     652:	fd 90       	ld	r15, X+
     654:	4d 01       	movw	r8, r26
     656:	20 81       	ld	r18, Z
     658:	31 81       	ldd	r19, Z+1	; 0x01
     65a:	42 81       	ldd	r20, Z+2	; 0x02
     65c:	53 81       	ldd	r21, Z+3	; 0x03
     65e:	60 85       	ldd	r22, Z+8	; 0x08
     660:	71 85       	ldd	r23, Z+9	; 0x09
     662:	82 85       	ldd	r24, Z+10	; 0x0a
     664:	93 85       	ldd	r25, Z+11	; 0x0b
     666:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__subsf3>
     66a:	cf 56       	subi	r28, 0x6F	; 111
     66c:	de 4f       	sbci	r29, 0xFE	; 254
     66e:	68 83       	st	Y, r22
     670:	79 83       	std	Y+1, r23	; 0x01
     672:	8a 83       	std	Y+2, r24	; 0x02
     674:	9b 83       	std	Y+3, r25	; 0x03
     676:	c1 59       	subi	r28, 0x91	; 145
     678:	d1 40       	sbci	r29, 0x01	; 1
     67a:	a7 01       	movw	r20, r14
     67c:	96 01       	movw	r18, r12
     67e:	c7 01       	movw	r24, r14
     680:	b6 01       	movw	r22, r12
     682:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__addsf3>
     686:	9b 01       	movw	r18, r22
     688:	ac 01       	movw	r20, r24
     68a:	cf 56       	subi	r28, 0x6F	; 111
     68c:	de 4f       	sbci	r29, 0xFE	; 254
     68e:	68 81       	ld	r22, Y
     690:	79 81       	ldd	r23, Y+1	; 0x01
     692:	8a 81       	ldd	r24, Y+2	; 0x02
     694:	9b 81       	ldd	r25, Y+3	; 0x03
     696:	c1 59       	subi	r28, 0x91	; 145
     698:	d1 40       	sbci	r29, 0x01	; 1
     69a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__divsf3>
     69e:	f3 01       	movw	r30, r6
     6a0:	61 93       	st	Z+, r22
     6a2:	71 93       	st	Z+, r23
     6a4:	81 93       	st	Z+, r24
     6a6:	91 93       	st	Z+, r25
     6a8:	3f 01       	movw	r6, r30
		
		final_alt = getAltitude(); //Sets the final altitude for the iteration to the current altitude.
	}

	//Attempt at numerical differentiation.
	for(int z = 1; z < 25; z++){
     6aa:	02 15       	cp	r16, r2
     6ac:	13 05       	cpc	r17, r3
     6ae:	51 f6       	brne	.-108    	; 0x644 <getVelocity+0xec>
		arr_vel[z] = (arr_alt[z+1] - arr_alt[z-1])/(2*arr_time[z]); //Approximated velocity using a centered difference scheme, reduces noise from taking the derivative.
	}

	arr_vel[0] = arr_alt[0]/(arr_time[0] + 10); //Still need to get the first velocity, time was missing ~10ms.
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	40 e2       	ldi	r20, 0x20	; 32
     6b6:	51 e4       	ldi	r21, 0x41	; 65
     6b8:	c7 53       	subi	r28, 0x37	; 55
     6ba:	df 4f       	sbci	r29, 0xFF	; 255
     6bc:	68 81       	ld	r22, Y
     6be:	79 81       	ldd	r23, Y+1	; 0x01
     6c0:	8a 81       	ldd	r24, Y+2	; 0x02
     6c2:	9b 81       	ldd	r25, Y+3	; 0x03
     6c4:	c9 5c       	subi	r28, 0xC9	; 201
     6c6:	d0 40       	sbci	r29, 0x00	; 0
     6c8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__addsf3>
     6cc:	9b 01       	movw	r18, r22
     6ce:	ac 01       	movw	r20, r24
     6d0:	69 81       	ldd	r22, Y+1	; 0x01
     6d2:	7a 81       	ldd	r23, Y+2	; 0x02
     6d4:	8b 81       	ldd	r24, Y+3	; 0x03
     6d6:	9c 81       	ldd	r25, Y+4	; 0x04
     6d8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__divsf3>
     6dc:	a9 96       	adiw	r28, 0x29	; 41
     6de:	6c af       	std	Y+60, r22	; 0x3c
     6e0:	7d af       	std	Y+61, r23	; 0x3d
     6e2:	8e af       	std	Y+62, r24	; 0x3e
     6e4:	9f af       	std	Y+63, r25	; 0x3f
     6e6:	a9 97       	sbiw	r28, 0x29	; 41

	//Now we know the velocity for 25 different samples over a total of 250ms. We now need to exponentially smooth the data to reduce noise again.

	float a_smooth[25]; //Smoothed velocity table of size 25.
	a_smooth[0] = arr_vel[0]; //Sets the initial smoothed value to the first velocity taken.
     6e8:	c3 5d       	subi	r28, 0xD3	; 211
     6ea:	de 4f       	sbci	r29, 0xFE	; 254
     6ec:	68 83       	st	Y, r22
     6ee:	79 83       	std	Y+1, r23	; 0x01
     6f0:	8a 83       	std	Y+2, r24	; 0x02
     6f2:	9b 83       	std	Y+3, r25	; 0x03
     6f4:	cd 52       	subi	r28, 0x2D	; 45
     6f6:	d1 40       	sbci	r29, 0x01	; 1
     6f8:	8e 01       	movw	r16, r28
     6fa:	03 5d       	subi	r16, 0xD3	; 211
     6fc:	1e 4f       	sbci	r17, 0xFE	; 254
     6fe:	7e 01       	movw	r14, r28
     700:	f3 e7       	ldi	r31, 0x73	; 115
     702:	ef 1a       	sub	r14, r31
     704:	fe ef       	ldi	r31, 0xFE	; 254
     706:	ff 0a       	sbc	r15, r31
	for(int j = 1; j < 25; j++){ //For our 24 elements of velocity..
		a_smooth[j] = exponentialSmoothing(a_smooth[j - 1], arr_vel[j]); //For the current element of smoothed velocity, set it equal to the value that our exponential smoothing function gives us. We input the previous value for the smoothed table as our forecast/second variable, then the element of velocity at the current position. 
     708:	d5 01       	movw	r26, r10
     70a:	6d 91       	ld	r22, X+
     70c:	7d 91       	ld	r23, X+
     70e:	8d 91       	ld	r24, X+
     710:	9d 91       	ld	r25, X+
     712:	5d 01       	movw	r10, r26
     714:	f8 01       	movw	r30, r16
     716:	41 90       	ld	r4, Z+
     718:	51 90       	ld	r5, Z+
     71a:	61 90       	ld	r6, Z+
     71c:	71 90       	ld	r7, Z+
     71e:	8f 01       	movw	r16, r30
	return s_vel/24; //The function finally ends with returning the average, or the sum of our 24 elements of velocity divided by 24.
 }

 float exponentialSmoothing(float p_smth_vel, float current_vel){ //We need the previous smoothed value as well as the current un-smoothed value, as indicated by the equation on this page: https://en.wikipedia.org/wiki/Exponential_smoothing#Basic_exponential_smoothing
	float smooth_factor = .2; //20% smoothing factor, needs to be tested.
	return (current_vel * smooth_factor) + (p_smth_vel * (1 - smooth_factor)); //returns the smoothed velocity for the current position of our table! That wasn't so hard, was it?
     720:	2d ec       	ldi	r18, 0xCD	; 205
     722:	3c ec       	ldi	r19, 0xCC	; 204
     724:	4c e4       	ldi	r20, 0x4C	; 76
     726:	5e e3       	ldi	r21, 0x3E	; 62
     728:	0e 94 c0 10 	call	0x2180	; 0x2180 <__mulsf3>
     72c:	cf 56       	subi	r28, 0x6F	; 111
     72e:	de 4f       	sbci	r29, 0xFE	; 254
     730:	68 83       	st	Y, r22
     732:	79 83       	std	Y+1, r23	; 0x01
     734:	8a 83       	std	Y+2, r24	; 0x02
     736:	9b 83       	std	Y+3, r25	; 0x03
     738:	c1 59       	subi	r28, 0x91	; 145
     73a:	d1 40       	sbci	r29, 0x01	; 1
     73c:	2d ec       	ldi	r18, 0xCD	; 205
     73e:	3c ec       	ldi	r19, 0xCC	; 204
     740:	4c e4       	ldi	r20, 0x4C	; 76
     742:	5f e3       	ldi	r21, 0x3F	; 63
     744:	c3 01       	movw	r24, r6
     746:	b2 01       	movw	r22, r4
     748:	0e 94 c0 10 	call	0x2180	; 0x2180 <__mulsf3>
     74c:	9b 01       	movw	r18, r22
     74e:	ac 01       	movw	r20, r24
     750:	cf 56       	subi	r28, 0x6F	; 111
     752:	de 4f       	sbci	r29, 0xFE	; 254
     754:	68 81       	ld	r22, Y
     756:	79 81       	ldd	r23, Y+1	; 0x01
     758:	8a 81       	ldd	r24, Y+2	; 0x02
     75a:	9b 81       	ldd	r25, Y+3	; 0x03
     75c:	c1 59       	subi	r28, 0x91	; 145
     75e:	d1 40       	sbci	r29, 0x01	; 1
     760:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__addsf3>
	//Now we know the velocity for 25 different samples over a total of 250ms. We now need to exponentially smooth the data to reduce noise again.

	float a_smooth[25]; //Smoothed velocity table of size 25.
	a_smooth[0] = arr_vel[0]; //Sets the initial smoothed value to the first velocity taken.
	for(int j = 1; j < 25; j++){ //For our 24 elements of velocity..
		a_smooth[j] = exponentialSmoothing(a_smooth[j - 1], arr_vel[j]); //For the current element of smoothed velocity, set it equal to the value that our exponential smoothing function gives us. We input the previous value for the smoothed table as our forecast/second variable, then the element of velocity at the current position. 
     764:	d8 01       	movw	r26, r16
     766:	6d 93       	st	X+, r22
     768:	7d 93       	st	X+, r23
     76a:	8d 93       	st	X+, r24
     76c:	9c 93       	st	X, r25
     76e:	13 97       	sbiw	r26, 0x03	; 3

	//Now we know the velocity for 25 different samples over a total of 250ms. We now need to exponentially smooth the data to reduce noise again.

	float a_smooth[25]; //Smoothed velocity table of size 25.
	a_smooth[0] = arr_vel[0]; //Sets the initial smoothed value to the first velocity taken.
	for(int j = 1; j < 25; j++){ //For our 24 elements of velocity..
     770:	0e 15       	cp	r16, r14
     772:	1f 05       	cpc	r17, r15
     774:	49 f6       	brne	.-110    	; 0x708 <getVelocity+0x1b0>
     776:	8e 01       	movw	r16, r28
     778:	0f 5c       	subi	r16, 0xCF	; 207
     77a:	1e 4f       	sbci	r17, 0xFE	; 254
     77c:	7e 01       	movw	r14, r28
     77e:	bf e6       	ldi	r27, 0x6F	; 111
     780:	eb 1a       	sub	r14, r27
     782:	be ef       	ldi	r27, 0xFE	; 254
     784:	fb 0a       	sbc	r15, r27
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	cb 01       	movw	r24, r22
		a_smooth[j] = exponentialSmoothing(a_smooth[j - 1], arr_vel[j]); //For the current element of smoothed velocity, set it equal to the value that our exponential smoothing function gives us. We input the previous value for the smoothed table as our forecast/second variable, then the element of velocity at the current position. 
	}
	float s_vel = 0; //Summed velocity so we can average it.
	for(int b = 1; b < 25; b++) //For our size 25 smoothed velocity table, we want to ignore the first value because it is a duplicate, then iterate through every other value.
		s_vel += a_smooth[b]; //Set the sum of velocity equal to itself plus the element at our current position. Sums up all of the values in our table.
     78c:	f8 01       	movw	r30, r16
     78e:	21 91       	ld	r18, Z+
     790:	31 91       	ld	r19, Z+
     792:	41 91       	ld	r20, Z+
     794:	51 91       	ld	r21, Z+
     796:	8f 01       	movw	r16, r30
     798:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__addsf3>
	a_smooth[0] = arr_vel[0]; //Sets the initial smoothed value to the first velocity taken.
	for(int j = 1; j < 25; j++){ //For our 24 elements of velocity..
		a_smooth[j] = exponentialSmoothing(a_smooth[j - 1], arr_vel[j]); //For the current element of smoothed velocity, set it equal to the value that our exponential smoothing function gives us. We input the previous value for the smoothed table as our forecast/second variable, then the element of velocity at the current position. 
	}
	float s_vel = 0; //Summed velocity so we can average it.
	for(int b = 1; b < 25; b++) //For our size 25 smoothed velocity table, we want to ignore the first value because it is a duplicate, then iterate through every other value.
     79c:	0e 15       	cp	r16, r14
     79e:	1f 05       	cpc	r17, r15
     7a0:	a9 f7       	brne	.-22     	; 0x78c <getVelocity+0x234>
		s_vel += a_smooth[b]; //Set the sum of velocity equal to itself plus the element at our current position. Sums up all of the values in our table.
	return s_vel/24; //The function finally ends with returning the average, or the sum of our 24 elements of velocity divided by 24.
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 ec       	ldi	r20, 0xC0	; 192
     7a8:	51 e4       	ldi	r21, 0x41	; 65
     7aa:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__divsf3>
 }
     7ae:	cc 56       	subi	r28, 0x6C	; 108
     7b0:	de 4f       	sbci	r29, 0xFE	; 254
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	df 90       	pop	r13
     7c4:	cf 90       	pop	r12
     7c6:	bf 90       	pop	r11
     7c8:	af 90       	pop	r10
     7ca:	9f 90       	pop	r9
     7cc:	8f 90       	pop	r8
     7ce:	7f 90       	pop	r7
     7d0:	6f 90       	pop	r6
     7d2:	5f 90       	pop	r5
     7d4:	4f 90       	pop	r4
     7d6:	3f 90       	pop	r3
     7d8:	2f 90       	pop	r2
     7da:	08 95       	ret

000007dc <LED>:
 *  Author: seanw
 */ 
  /* LED method for two XPEBGR-L1-0000-00G01-SB01 LEDs */
  #include <asf.h>
  #include "Drivers/Outputs/LED/LED_driver.h"
  void LED(uint16_t period,uint8_t duty_cycle){
     7dc:	9c 01       	movw	r18, r24
	  PORTD.OUT |= 0b00000010; //out, high = 1, low = 0.
     7de:	e0 e6       	ldi	r30, 0x60	; 96
     7e0:	f6 e0       	ldi	r31, 0x06	; 6
     7e2:	94 81       	ldd	r25, Z+4	; 0x04
     7e4:	92 60       	ori	r25, 0x02	; 2
     7e6:	94 83       	std	Z+4, r25	; 0x04

	  TCD0.PER = period; //Set period of output.
     7e8:	e0 e0       	ldi	r30, 0x00	; 0
     7ea:	f9 e0       	ldi	r31, 0x09	; 9
     7ec:	26 a3       	std	Z+38, r18	; 0x26
     7ee:	37 a3       	std	Z+39, r19	; 0x27
	  TCD0.CCB = TCD0.PER - (TCD0.PER/duty_cycle); //Set duty cycle of output for Command Capture register A.
     7f0:	26 a1       	ldd	r18, Z+38	; 0x26
     7f2:	37 a1       	ldd	r19, Z+39	; 0x27
     7f4:	86 a1       	ldd	r24, Z+38	; 0x26
     7f6:	97 a1       	ldd	r25, Z+39	; 0x27
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__udivmodhi4>
     7fe:	26 1b       	sub	r18, r22
     800:	37 0b       	sbc	r19, r23
     802:	22 a7       	std	Z+42, r18	; 0x2a
     804:	33 a7       	std	Z+43, r19	; 0x2b
     806:	08 95       	ret

00000808 <lightChase>:
	
	return (uint16_t)(voltage*1000); //voltage*1000 converts it into millivolts.
	//If we hadn't multiplied by 1000, the typecast would've truncated the voltage reading to just the one's place.

	delay_ms(delay);
}
     808:	af 92       	push	r10
     80a:	bf 92       	push	r11
     80c:	cf 92       	push	r12
     80e:	df 92       	push	r13
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	90 93 72 20 	sts	0x2072, r25	; 0x802072 <lightNumber>
     822:	a1 2c       	mov	r10, r1
     824:	0f 2e       	mov	r0, r31
     826:	f8 e4       	ldi	r31, 0x48	; 72
     828:	bf 2e       	mov	r11, r31
     82a:	f0 2d       	mov	r31, r0
     82c:	0f 2e       	mov	r0, r31
     82e:	f8 ee       	ldi	r31, 0xE8	; 232
     830:	cf 2e       	mov	r12, r31
     832:	f0 2d       	mov	r31, r0
     834:	dd 24       	eor	r13, r13
     836:	d3 94       	inc	r13
     838:	e1 2c       	mov	r14, r1
     83a:	f1 2c       	mov	r15, r1
     83c:	00 e0       	ldi	r16, 0x00	; 0
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	28 2f       	mov	r18, r24
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__muldi3>
     854:	29 51       	subi	r18, 0x19	; 25
     856:	3c 4f       	sbci	r19, 0xFC	; 252
     858:	4f 4f       	sbci	r20, 0xFF	; 255
     85a:	5f 4f       	sbci	r21, 0xFF	; 255
     85c:	6f 4f       	sbci	r22, 0xFF	; 255
     85e:	7f 4f       	sbci	r23, 0xFF	; 255
     860:	8f 4f       	sbci	r24, 0xFF	; 255
     862:	9f 4f       	sbci	r25, 0xFF	; 255
     864:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__floatundisf>
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e8       	ldi	r19, 0x80	; 128
     86c:	4b eb       	ldi	r20, 0xBB	; 187
     86e:	55 e4       	ldi	r21, 0x45	; 69
     870:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__divsf3>
     874:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <__fixunssfdi>
     878:	72 2f       	mov	r23, r18
     87a:	63 2f       	mov	r22, r19
     87c:	94 2f       	mov	r25, r20
     87e:	85 2f       	mov	r24, r21
     880:	54 2f       	mov	r21, r20
     882:	48 2f       	mov	r20, r24
     884:	24 e0       	ldi	r18, 0x04	; 4
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	c0 e8       	ldi	r28, 0x80	; 128
     88a:	d6 e0       	ldi	r29, 0x06	; 6
     88c:	07 2f       	mov	r16, r23
     88e:	16 2f       	mov	r17, r22
     890:	f9 2f       	mov	r31, r25
     892:	e8 2f       	mov	r30, r24
     894:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <lightNumber>
     898:	98 2f       	mov	r25, r24
     89a:	90 95       	com	r25
     89c:	9c 83       	std	Y+4, r25	; 0x04
     89e:	88 0f       	add	r24, r24
     8a0:	80 93 72 20 	sts	0x2072, r24	; 0x802072 <lightNumber>
     8a4:	80 2f       	mov	r24, r16
     8a6:	91 2f       	mov	r25, r17
     8a8:	af 2f       	mov	r26, r31
     8aa:	be 2f       	mov	r27, r30
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	a1 09       	sbc	r26, r1
     8b0:	b1 09       	sbc	r27, r1
     8b2:	e1 f7       	brne	.-8      	; 0x8ac <lightChase+0xa4>
     8b4:	21 50       	subi	r18, 0x01	; 1
     8b6:	31 09       	sbc	r19, r1
     8b8:	69 f7       	brne	.-38     	; 0x894 <lightChase+0x8c>
     8ba:	80 e8       	ldi	r24, 0x80	; 128
     8bc:	80 93 72 20 	sts	0x2072, r24	; 0x802072 <lightNumber>
     8c0:	24 e0       	ldi	r18, 0x04	; 4
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	e0 e8       	ldi	r30, 0x80	; 128
     8c6:	f6 e0       	ldi	r31, 0x06	; 6
     8c8:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <lightNumber>
     8cc:	98 2f       	mov	r25, r24
     8ce:	90 95       	com	r25
     8d0:	94 83       	std	Z+4, r25	; 0x04
     8d2:	86 95       	lsr	r24
     8d4:	80 93 72 20 	sts	0x2072, r24	; 0x802072 <lightNumber>
     8d8:	87 2f       	mov	r24, r23
     8da:	96 2f       	mov	r25, r22
     8dc:	a5 2f       	mov	r26, r21
     8de:	b4 2f       	mov	r27, r20
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	a1 09       	sbc	r26, r1
     8e4:	b1 09       	sbc	r27, r1
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <lightChase+0xd8>
     8e8:	21 50       	subi	r18, 0x01	; 1
     8ea:	31 09       	sbc	r19, r1
     8ec:	69 f7       	brne	.-38     	; 0x8c8 <lightChase+0xc0>
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	bf 90       	pop	r11
     900:	af 90       	pop	r10
     902:	08 95       	ret

00000904 <test>:

void test(void){
	lightChase(100);
     904:	84 e6       	ldi	r24, 0x64	; 100
     906:	80 df       	rcall	.-256    	; 0x808 <lightChase>
	printf("Test:\n");
     908:	8d e0       	ldi	r24, 0x0D	; 13
     90a:	90 e2       	ldi	r25, 0x20	; 32
     90c:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <puts>
	printf("Pressure is:%li\n",getPressure());
     910:	dd d5       	rcall	.+3002   	; 0x14cc <getPressure>
     912:	9f 93       	push	r25
     914:	8f 93       	push	r24
     916:	7f 93       	push	r23
     918:	6f 93       	push	r22
     91a:	83 e1       	ldi	r24, 0x13	; 19
     91c:	90 e2       	ldi	r25, 0x20	; 32
     91e:	9f 93       	push	r25
     920:	8f 93       	push	r24
     922:	0e 94 49 17 	call	0x2e92	; 0x2e92 <printf>
	printf("Temperature is:%.2f\n",getTemperature());
     926:	87 d7       	rcall	.+3854   	; 0x1836 <getTemperature>
     928:	9f 93       	push	r25
     92a:	8f 93       	push	r24
     92c:	7f 93       	push	r23
     92e:	6f 93       	push	r22
     930:	84 e2       	ldi	r24, 0x24	; 36
     932:	90 e2       	ldi	r25, 0x20	; 32
     934:	9f 93       	push	r25
     936:	8f 93       	push	r24
     938:	0e 94 49 17 	call	0x2e92	; 0x2e92 <printf>
	printf("Altitude is:%.2f\n",getAltitude());
     93c:	d7 dd       	rcall	.-1106   	; 0x4ec <getAltitude>
     93e:	9f 93       	push	r25
     940:	8f 93       	push	r24
     942:	7f 93       	push	r23
     944:	6f 93       	push	r22
     946:	89 e3       	ldi	r24, 0x39	; 57
     948:	90 e2       	ldi	r25, 0x20	; 32
     94a:	9f 93       	push	r25
     94c:	8f 93       	push	r24
     94e:	0e 94 49 17 	call	0x2e92	; 0x2e92 <printf>
	printf("and velocity is:%.2f\n",getVelocity());
     952:	02 de       	rcall	.-1020   	; 0x558 <getVelocity>
     954:	9f 93       	push	r25
     956:	8f 93       	push	r24
     958:	7f 93       	push	r23
     95a:	6f 93       	push	r22
     95c:	8b e4       	ldi	r24, 0x4B	; 75
     95e:	90 e2       	ldi	r25, 0x20	; 32
     960:	9f 93       	push	r25
     962:	8f 93       	push	r24
     964:	0e 94 49 17 	call	0x2e92	; 0x2e92 <printf>
     968:	8d b7       	in	r24, 0x3d	; 61
     96a:	9e b7       	in	r25, 0x3e	; 62
     96c:	48 96       	adiw	r24, 0x18	; 24
     96e:	8d bf       	out	0x3d, r24	; 61
     970:	9e bf       	out	0x3e, r25	; 62
     972:	08 95       	ret

00000974 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     97a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     97e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     982:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     986:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     98a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     98e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     992:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     994:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     996:	e0 e5       	ldi	r30, 0x50	; 80
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	82 60       	ori	r24, 0x02	; 2
     99e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9a0:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     9a2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     9a4:	81 ff       	sbrs	r24, 1
     9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     9a8:	61 e0       	ldi	r22, 0x01	; 1
     9aa:	80 e4       	ldi	r24, 0x40	; 64
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	2b d2       	rcall	.+1110   	; 0xe06 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     9b0:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     9b2:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     9b4:	e0 e5       	ldi	r30, 0x50	; 80
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	8e 7f       	andi	r24, 0xFE	; 254
     9bc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9be:	9f bf       	out	0x3f, r25	; 63
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
     9c6:	08 95       	ret

000009c8 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     9c8:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     9ca:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     9cc:	e8 2f       	mov	r30, r24
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	e0 59       	subi	r30, 0x90	; 144
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	60 95       	com	r22
     9d6:	80 81       	ld	r24, Z
     9d8:	68 23       	and	r22, r24
     9da:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9dc:	9f bf       	out	0x3f, r25	; 63
     9de:	08 95       	ret

000009e0 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	1f 92       	push	r1
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     9ea:	80 91 7b 20 	lds	r24, 0x207B	; 0x80207b <stdio_base>
     9ee:	90 91 7c 20 	lds	r25, 0x207C	; 0x80207c <stdio_base+0x1>
     9f2:	e0 91 77 20 	lds	r30, 0x2077	; 0x802077 <ptr_get>
     9f6:	f0 91 78 20 	lds	r31, 0x2078	; 0x802078 <ptr_get+0x1>
     9fa:	be 01       	movw	r22, r28
     9fc:	6f 5f       	subi	r22, 0xFF	; 255
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
     a00:	19 95       	eicall
	return c;
     a02:	89 81       	ldd	r24, Y+1	; 0x01
}
     a04:	08 2e       	mov	r0, r24
     a06:	00 0c       	add	r0, r0
     a08:	99 0b       	sbc	r25, r25
     a0a:	0f 90       	pop	r0
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     a12:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     a14:	80 91 7b 20 	lds	r24, 0x207B	; 0x80207b <stdio_base>
     a18:	90 91 7c 20 	lds	r25, 0x207C	; 0x80207c <stdio_base+0x1>
     a1c:	e0 91 79 20 	lds	r30, 0x2079	; 0x802079 <ptr_put>
     a20:	f0 91 7a 20 	lds	r31, 0x207A	; 0x80207a <ptr_put+0x1>
     a24:	19 95       	eicall
     a26:	99 23       	and	r25, r25
     a28:	1c f0       	brlt	.+6      	; 0xa30 <_write+0x1e>
		return -1;
	}
	return 1;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     a34:	08 95       	ret

00000a36 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     a36:	1f 92       	push	r1
     a38:	0f 92       	push	r0
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	0f 92       	push	r0
     a3e:	11 24       	eor	r1, r1
     a40:	08 b6       	in	r0, 0x38	; 56
     a42:	0f 92       	push	r0
     a44:	18 be       	out	0x38, r1	; 56
     a46:	09 b6       	in	r0, 0x39	; 57
     a48:	0f 92       	push	r0
     a4a:	19 be       	out	0x39, r1	; 57
     a4c:	0b b6       	in	r0, 0x3b	; 59
     a4e:	0f 92       	push	r0
     a50:	1b be       	out	0x3b, r1	; 59
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     a6a:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     a6e:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     a72:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <adca_callback>
     a76:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <adca_callback+0x1>
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	19 95       	eicall
}
     a82:	ff 91       	pop	r31
     a84:	ef 91       	pop	r30
     a86:	bf 91       	pop	r27
     a88:	af 91       	pop	r26
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	7f 91       	pop	r23
     a90:	6f 91       	pop	r22
     a92:	5f 91       	pop	r21
     a94:	4f 91       	pop	r20
     a96:	3f 91       	pop	r19
     a98:	2f 91       	pop	r18
     a9a:	0f 90       	pop	r0
     a9c:	0b be       	out	0x3b, r0	; 59
     a9e:	0f 90       	pop	r0
     aa0:	09 be       	out	0x39, r0	; 57
     aa2:	0f 90       	pop	r0
     aa4:	08 be       	out	0x38, r0	; 56
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	0f 90       	pop	r0
     aac:	1f 90       	pop	r1
     aae:	18 95       	reti

00000ab0 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	0f 92       	push	r0
     ab8:	11 24       	eor	r1, r1
     aba:	08 b6       	in	r0, 0x38	; 56
     abc:	0f 92       	push	r0
     abe:	18 be       	out	0x38, r1	; 56
     ac0:	09 b6       	in	r0, 0x39	; 57
     ac2:	0f 92       	push	r0
     ac4:	19 be       	out	0x39, r1	; 57
     ac6:	0b b6       	in	r0, 0x3b	; 59
     ac8:	0f 92       	push	r0
     aca:	1b be       	out	0x3b, r1	; 59
     acc:	2f 93       	push	r18
     ace:	3f 93       	push	r19
     ad0:	4f 93       	push	r20
     ad2:	5f 93       	push	r21
     ad4:	6f 93       	push	r22
     ad6:	7f 93       	push	r23
     ad8:	8f 93       	push	r24
     ada:	9f 93       	push	r25
     adc:	af 93       	push	r26
     ade:	bf 93       	push	r27
     ae0:	ef 93       	push	r30
     ae2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     ae4:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     ae8:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     aec:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <adca_callback>
     af0:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <adca_callback+0x1>
     af4:	62 e0       	ldi	r22, 0x02	; 2
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	19 95       	eicall
}
     afc:	ff 91       	pop	r31
     afe:	ef 91       	pop	r30
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	7f 91       	pop	r23
     b0a:	6f 91       	pop	r22
     b0c:	5f 91       	pop	r21
     b0e:	4f 91       	pop	r20
     b10:	3f 91       	pop	r19
     b12:	2f 91       	pop	r18
     b14:	0f 90       	pop	r0
     b16:	0b be       	out	0x3b, r0	; 59
     b18:	0f 90       	pop	r0
     b1a:	09 be       	out	0x39, r0	; 57
     b1c:	0f 90       	pop	r0
     b1e:	08 be       	out	0x38, r0	; 56
     b20:	0f 90       	pop	r0
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	0f 90       	pop	r0
     b26:	1f 90       	pop	r1
     b28:	18 95       	reti

00000b2a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     b2a:	1f 92       	push	r1
     b2c:	0f 92       	push	r0
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	0f 92       	push	r0
     b32:	11 24       	eor	r1, r1
     b34:	08 b6       	in	r0, 0x38	; 56
     b36:	0f 92       	push	r0
     b38:	18 be       	out	0x38, r1	; 56
     b3a:	09 b6       	in	r0, 0x39	; 57
     b3c:	0f 92       	push	r0
     b3e:	19 be       	out	0x39, r1	; 57
     b40:	0b b6       	in	r0, 0x3b	; 59
     b42:	0f 92       	push	r0
     b44:	1b be       	out	0x3b, r1	; 59
     b46:	2f 93       	push	r18
     b48:	3f 93       	push	r19
     b4a:	4f 93       	push	r20
     b4c:	5f 93       	push	r21
     b4e:	6f 93       	push	r22
     b50:	7f 93       	push	r23
     b52:	8f 93       	push	r24
     b54:	9f 93       	push	r25
     b56:	af 93       	push	r26
     b58:	bf 93       	push	r27
     b5a:	ef 93       	push	r30
     b5c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     b5e:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     b62:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     b66:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <adca_callback>
     b6a:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <adca_callback+0x1>
     b6e:	64 e0       	ldi	r22, 0x04	; 4
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	19 95       	eicall
}
     b76:	ff 91       	pop	r31
     b78:	ef 91       	pop	r30
     b7a:	bf 91       	pop	r27
     b7c:	af 91       	pop	r26
     b7e:	9f 91       	pop	r25
     b80:	8f 91       	pop	r24
     b82:	7f 91       	pop	r23
     b84:	6f 91       	pop	r22
     b86:	5f 91       	pop	r21
     b88:	4f 91       	pop	r20
     b8a:	3f 91       	pop	r19
     b8c:	2f 91       	pop	r18
     b8e:	0f 90       	pop	r0
     b90:	0b be       	out	0x3b, r0	; 59
     b92:	0f 90       	pop	r0
     b94:	09 be       	out	0x39, r0	; 57
     b96:	0f 90       	pop	r0
     b98:	08 be       	out	0x38, r0	; 56
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     ba4:	1f 92       	push	r1
     ba6:	0f 92       	push	r0
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	0f 92       	push	r0
     bac:	11 24       	eor	r1, r1
     bae:	08 b6       	in	r0, 0x38	; 56
     bb0:	0f 92       	push	r0
     bb2:	18 be       	out	0x38, r1	; 56
     bb4:	09 b6       	in	r0, 0x39	; 57
     bb6:	0f 92       	push	r0
     bb8:	19 be       	out	0x39, r1	; 57
     bba:	0b b6       	in	r0, 0x3b	; 59
     bbc:	0f 92       	push	r0
     bbe:	1b be       	out	0x3b, r1	; 59
     bc0:	2f 93       	push	r18
     bc2:	3f 93       	push	r19
     bc4:	4f 93       	push	r20
     bc6:	5f 93       	push	r21
     bc8:	6f 93       	push	r22
     bca:	7f 93       	push	r23
     bcc:	8f 93       	push	r24
     bce:	9f 93       	push	r25
     bd0:	af 93       	push	r26
     bd2:	bf 93       	push	r27
     bd4:	ef 93       	push	r30
     bd6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     bd8:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     bdc:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     be0:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <adca_callback>
     be4:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <adca_callback+0x1>
     be8:	68 e0       	ldi	r22, 0x08	; 8
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	19 95       	eicall
}
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0b be       	out	0x3b, r0	; 59
     c0c:	0f 90       	pop	r0
     c0e:	09 be       	out	0x39, r0	; 57
     c10:	0f 90       	pop	r0
     c12:	08 be       	out	0x38, r0	; 56
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	0f 90       	pop	r0
     c1a:	1f 90       	pop	r1
     c1c:	18 95       	reti

00000c1e <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	08 b6       	in	r0, 0x38	; 56
     c2a:	0f 92       	push	r0
     c2c:	18 be       	out	0x38, r1	; 56
     c2e:	09 b6       	in	r0, 0x39	; 57
     c30:	0f 92       	push	r0
     c32:	19 be       	out	0x39, r1	; 57
     c34:	0b b6       	in	r0, 0x3b	; 59
     c36:	0f 92       	push	r0
     c38:	1b be       	out	0x3b, r1	; 59
     c3a:	2f 93       	push	r18
     c3c:	3f 93       	push	r19
     c3e:	4f 93       	push	r20
     c40:	5f 93       	push	r21
     c42:	6f 93       	push	r22
     c44:	7f 93       	push	r23
     c46:	8f 93       	push	r24
     c48:	9f 93       	push	r25
     c4a:	af 93       	push	r26
     c4c:	bf 93       	push	r27
     c4e:	ef 93       	push	r30
     c50:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     c52:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     c56:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     c5a:	e0 91 7d 20 	lds	r30, 0x207D	; 0x80207d <adcb_callback>
     c5e:	f0 91 7e 20 	lds	r31, 0x207E	; 0x80207e <adcb_callback+0x1>
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	80 e4       	ldi	r24, 0x40	; 64
     c66:	92 e0       	ldi	r25, 0x02	; 2
     c68:	19 95       	eicall
}
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
     c6e:	bf 91       	pop	r27
     c70:	af 91       	pop	r26
     c72:	9f 91       	pop	r25
     c74:	8f 91       	pop	r24
     c76:	7f 91       	pop	r23
     c78:	6f 91       	pop	r22
     c7a:	5f 91       	pop	r21
     c7c:	4f 91       	pop	r20
     c7e:	3f 91       	pop	r19
     c80:	2f 91       	pop	r18
     c82:	0f 90       	pop	r0
     c84:	0b be       	out	0x3b, r0	; 59
     c86:	0f 90       	pop	r0
     c88:	09 be       	out	0x39, r0	; 57
     c8a:	0f 90       	pop	r0
     c8c:	08 be       	out	0x38, r0	; 56
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	0f 90       	pop	r0
     c94:	1f 90       	pop	r1
     c96:	18 95       	reti

00000c98 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     c98:	1f 92       	push	r1
     c9a:	0f 92       	push	r0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	0f 92       	push	r0
     ca0:	11 24       	eor	r1, r1
     ca2:	08 b6       	in	r0, 0x38	; 56
     ca4:	0f 92       	push	r0
     ca6:	18 be       	out	0x38, r1	; 56
     ca8:	09 b6       	in	r0, 0x39	; 57
     caa:	0f 92       	push	r0
     cac:	19 be       	out	0x39, r1	; 57
     cae:	0b b6       	in	r0, 0x3b	; 59
     cb0:	0f 92       	push	r0
     cb2:	1b be       	out	0x3b, r1	; 59
     cb4:	2f 93       	push	r18
     cb6:	3f 93       	push	r19
     cb8:	4f 93       	push	r20
     cba:	5f 93       	push	r21
     cbc:	6f 93       	push	r22
     cbe:	7f 93       	push	r23
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	af 93       	push	r26
     cc6:	bf 93       	push	r27
     cc8:	ef 93       	push	r30
     cca:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     ccc:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     cd0:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     cd4:	e0 91 7d 20 	lds	r30, 0x207D	; 0x80207d <adcb_callback>
     cd8:	f0 91 7e 20 	lds	r31, 0x207E	; 0x80207e <adcb_callback+0x1>
     cdc:	62 e0       	ldi	r22, 0x02	; 2
     cde:	80 e4       	ldi	r24, 0x40	; 64
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	19 95       	eicall
}
     ce4:	ff 91       	pop	r31
     ce6:	ef 91       	pop	r30
     ce8:	bf 91       	pop	r27
     cea:	af 91       	pop	r26
     cec:	9f 91       	pop	r25
     cee:	8f 91       	pop	r24
     cf0:	7f 91       	pop	r23
     cf2:	6f 91       	pop	r22
     cf4:	5f 91       	pop	r21
     cf6:	4f 91       	pop	r20
     cf8:	3f 91       	pop	r19
     cfa:	2f 91       	pop	r18
     cfc:	0f 90       	pop	r0
     cfe:	0b be       	out	0x3b, r0	; 59
     d00:	0f 90       	pop	r0
     d02:	09 be       	out	0x39, r0	; 57
     d04:	0f 90       	pop	r0
     d06:	08 be       	out	0x38, r0	; 56
     d08:	0f 90       	pop	r0
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	0f 90       	pop	r0
     d0e:	1f 90       	pop	r1
     d10:	18 95       	reti

00000d12 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	08 b6       	in	r0, 0x38	; 56
     d1e:	0f 92       	push	r0
     d20:	18 be       	out	0x38, r1	; 56
     d22:	09 b6       	in	r0, 0x39	; 57
     d24:	0f 92       	push	r0
     d26:	19 be       	out	0x39, r1	; 57
     d28:	0b b6       	in	r0, 0x3b	; 59
     d2a:	0f 92       	push	r0
     d2c:	1b be       	out	0x3b, r1	; 59
     d2e:	2f 93       	push	r18
     d30:	3f 93       	push	r19
     d32:	4f 93       	push	r20
     d34:	5f 93       	push	r21
     d36:	6f 93       	push	r22
     d38:	7f 93       	push	r23
     d3a:	8f 93       	push	r24
     d3c:	9f 93       	push	r25
     d3e:	af 93       	push	r26
     d40:	bf 93       	push	r27
     d42:	ef 93       	push	r30
     d44:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     d46:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     d4a:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     d4e:	e0 91 7d 20 	lds	r30, 0x207D	; 0x80207d <adcb_callback>
     d52:	f0 91 7e 20 	lds	r31, 0x207E	; 0x80207e <adcb_callback+0x1>
     d56:	64 e0       	ldi	r22, 0x04	; 4
     d58:	80 e4       	ldi	r24, 0x40	; 64
     d5a:	92 e0       	ldi	r25, 0x02	; 2
     d5c:	19 95       	eicall
}
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	bf 91       	pop	r27
     d64:	af 91       	pop	r26
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	7f 91       	pop	r23
     d6c:	6f 91       	pop	r22
     d6e:	5f 91       	pop	r21
     d70:	4f 91       	pop	r20
     d72:	3f 91       	pop	r19
     d74:	2f 91       	pop	r18
     d76:	0f 90       	pop	r0
     d78:	0b be       	out	0x3b, r0	; 59
     d7a:	0f 90       	pop	r0
     d7c:	09 be       	out	0x39, r0	; 57
     d7e:	0f 90       	pop	r0
     d80:	08 be       	out	0x38, r0	; 56
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	08 b6       	in	r0, 0x38	; 56
     d98:	0f 92       	push	r0
     d9a:	18 be       	out	0x38, r1	; 56
     d9c:	09 b6       	in	r0, 0x39	; 57
     d9e:	0f 92       	push	r0
     da0:	19 be       	out	0x39, r1	; 57
     da2:	0b b6       	in	r0, 0x3b	; 59
     da4:	0f 92       	push	r0
     da6:	1b be       	out	0x3b, r1	; 59
     da8:	2f 93       	push	r18
     daa:	3f 93       	push	r19
     dac:	4f 93       	push	r20
     dae:	5f 93       	push	r21
     db0:	6f 93       	push	r22
     db2:	7f 93       	push	r23
     db4:	8f 93       	push	r24
     db6:	9f 93       	push	r25
     db8:	af 93       	push	r26
     dba:	bf 93       	push	r27
     dbc:	ef 93       	push	r30
     dbe:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     dc0:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     dc4:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     dc8:	e0 91 7d 20 	lds	r30, 0x207D	; 0x80207d <adcb_callback>
     dcc:	f0 91 7e 20 	lds	r31, 0x207E	; 0x80207e <adcb_callback+0x1>
     dd0:	68 e0       	ldi	r22, 0x08	; 8
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	92 e0       	ldi	r25, 0x02	; 2
     dd6:	19 95       	eicall
}
     dd8:	ff 91       	pop	r31
     dda:	ef 91       	pop	r30
     ddc:	bf 91       	pop	r27
     dde:	af 91       	pop	r26
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	7f 91       	pop	r23
     de6:	6f 91       	pop	r22
     de8:	5f 91       	pop	r21
     dea:	4f 91       	pop	r20
     dec:	3f 91       	pop	r19
     dee:	2f 91       	pop	r18
     df0:	0f 90       	pop	r0
     df2:	0b be       	out	0x3b, r0	; 59
     df4:	0f 90       	pop	r0
     df6:	09 be       	out	0x39, r0	; 57
     df8:	0f 90       	pop	r0
     dfa:	08 be       	out	0x38, r0	; 56
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     e06:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     e08:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     e0a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     e0c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     e0e:	60 83       	st	Z, r22
	ret                             // Return to caller
     e10:	08 95       	ret

00000e12 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     e12:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     e16:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     e18:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     e1a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     e1e:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     e20:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     e24:	08 95       	ret

00000e26 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     e26:	fc 01       	movw	r30, r24
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	95 ff       	sbrs	r25, 5
     e2c:	fd cf       	rjmp	.-6      	; 0xe28 <usart_putchar+0x2>
     e2e:	60 83       	st	Z, r22
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	08 95       	ret

00000e36 <usart_getchar>:
     e36:	fc 01       	movw	r30, r24
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	99 23       	and	r25, r25
     e3c:	ec f7       	brge	.-6      	; 0xe38 <usart_getchar+0x2>
     e3e:	80 81       	ld	r24, Z
     e40:	08 95       	ret

00000e42 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     e42:	2f 92       	push	r2
     e44:	3f 92       	push	r3
     e46:	4f 92       	push	r4
     e48:	5f 92       	push	r5
     e4a:	6f 92       	push	r6
     e4c:	7f 92       	push	r7
     e4e:	8f 92       	push	r8
     e50:	9f 92       	push	r9
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	1c 01       	movw	r2, r24
     e66:	2a 01       	movw	r4, r20
     e68:	3b 01       	movw	r6, r22
     e6a:	48 01       	movw	r8, r16
     e6c:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     e6e:	d9 01       	movw	r26, r18
     e70:	c8 01       	movw	r24, r16
     e72:	68 94       	set
     e74:	12 f8       	bld	r1, 2
     e76:	b6 95       	lsr	r27
     e78:	a7 95       	ror	r26
     e7a:	97 95       	ror	r25
     e7c:	87 95       	ror	r24
     e7e:	16 94       	lsr	r1
     e80:	d1 f7       	brne	.-12     	; 0xe76 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     e82:	b9 01       	movw	r22, r18
     e84:	a8 01       	movw	r20, r16
     e86:	03 2e       	mov	r0, r19
     e88:	36 e1       	ldi	r19, 0x16	; 22
     e8a:	76 95       	lsr	r23
     e8c:	67 95       	ror	r22
     e8e:	57 95       	ror	r21
     e90:	47 95       	ror	r20
     e92:	3a 95       	dec	r19
     e94:	d1 f7       	brne	.-12     	; 0xe8a <usart_set_baudrate+0x48>
     e96:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     e98:	f1 01       	movw	r30, r2
     e9a:	24 81       	ldd	r18, Z+4	; 0x04
     e9c:	22 fd       	sbrc	r18, 2
     e9e:	08 c0       	rjmp	.+16     	; 0xeb0 <usart_set_baudrate+0x6e>
		max_rate /= 2;
     ea0:	b6 95       	lsr	r27
     ea2:	a7 95       	ror	r26
     ea4:	97 95       	ror	r25
     ea6:	87 95       	ror	r24
		min_rate /= 2;
     ea8:	76 95       	lsr	r23
     eaa:	67 95       	ror	r22
     eac:	57 95       	ror	r21
     eae:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     eb0:	84 15       	cp	r24, r4
     eb2:	95 05       	cpc	r25, r5
     eb4:	a6 05       	cpc	r26, r6
     eb6:	b7 05       	cpc	r27, r7
     eb8:	08 f4       	brcc	.+2      	; 0xebc <usart_set_baudrate+0x7a>
     eba:	ae c0       	rjmp	.+348    	; 0x1018 <usart_set_baudrate+0x1d6>
     ebc:	44 16       	cp	r4, r20
     ebe:	55 06       	cpc	r5, r21
     ec0:	66 06       	cpc	r6, r22
     ec2:	77 06       	cpc	r7, r23
     ec4:	08 f4       	brcc	.+2      	; 0xec8 <usart_set_baudrate+0x86>
     ec6:	aa c0       	rjmp	.+340    	; 0x101c <usart_set_baudrate+0x1da>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     ec8:	f1 01       	movw	r30, r2
     eca:	84 81       	ldd	r24, Z+4	; 0x04
     ecc:	82 fd       	sbrc	r24, 2
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <usart_set_baudrate+0x96>
		baud *= 2;
     ed0:	44 0c       	add	r4, r4
     ed2:	55 1c       	adc	r5, r5
     ed4:	66 1c       	adc	r6, r6
     ed6:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     ed8:	c5 01       	movw	r24, r10
     eda:	b4 01       	movw	r22, r8
     edc:	a3 01       	movw	r20, r6
     ede:	92 01       	movw	r18, r4
     ee0:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     ee4:	2f 3f       	cpi	r18, 0xFF	; 255
     ee6:	31 05       	cpc	r19, r1
     ee8:	41 05       	cpc	r20, r1
     eea:	51 05       	cpc	r21, r1
     eec:	08 f4       	brcc	.+2      	; 0xef0 <usart_set_baudrate+0xae>
     eee:	98 c0       	rjmp	.+304    	; 0x1020 <usart_set_baudrate+0x1de>
     ef0:	c1 2c       	mov	r12, r1
     ef2:	d1 2c       	mov	r13, r1
     ef4:	76 01       	movw	r14, r12
     ef6:	ca 94       	dec	r12
     ef8:	c9 ef       	ldi	r28, 0xF9	; 249
     efa:	05 c0       	rjmp	.+10     	; 0xf06 <usart_set_baudrate+0xc4>
     efc:	2c 15       	cp	r18, r12
     efe:	3d 05       	cpc	r19, r13
     f00:	4e 05       	cpc	r20, r14
     f02:	5f 05       	cpc	r21, r15
     f04:	68 f0       	brcs	.+26     	; 0xf20 <usart_set_baudrate+0xde>
			break;
		}

		limit <<= 1;
     f06:	cc 0c       	add	r12, r12
     f08:	dd 1c       	adc	r13, r13
     f0a:	ee 1c       	adc	r14, r14
     f0c:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     f0e:	cd 3f       	cpi	r28, 0xFD	; 253
     f10:	14 f4       	brge	.+4      	; 0xf16 <usart_set_baudrate+0xd4>
			limit |= 1;
     f12:	68 94       	set
     f14:	c0 f8       	bld	r12, 0
     f16:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     f18:	c7 30       	cpi	r28, 0x07	; 7
     f1a:	81 f7       	brne	.-32     	; 0xefc <usart_set_baudrate+0xba>
     f1c:	8c 2f       	mov	r24, r28
     f1e:	56 c0       	rjmp	.+172    	; 0xfcc <usart_set_baudrate+0x18a>
     f20:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     f22:	cc 23       	and	r28, r28
     f24:	0c f0       	brlt	.+2      	; 0xf28 <usart_set_baudrate+0xe6>
     f26:	52 c0       	rjmp	.+164    	; 0xfcc <usart_set_baudrate+0x18a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     f28:	d3 01       	movw	r26, r6
     f2a:	c2 01       	movw	r24, r4
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	aa 1f       	adc	r26, r26
     f32:	bb 1f       	adc	r27, r27
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	aa 1f       	adc	r26, r26
     f3a:	bb 1f       	adc	r27, r27
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	aa 1f       	adc	r26, r26
     f42:	bb 1f       	adc	r27, r27
     f44:	85 01       	movw	r16, r10
     f46:	74 01       	movw	r14, r8
     f48:	e8 1a       	sub	r14, r24
     f4a:	f9 0a       	sbc	r15, r25
     f4c:	0a 0b       	sbc	r16, r26
     f4e:	1b 0b       	sbc	r17, r27
     f50:	d8 01       	movw	r26, r16
     f52:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     f54:	ce 3f       	cpi	r28, 0xFE	; 254
     f56:	f4 f4       	brge	.+60     	; 0xf94 <usart_set_baudrate+0x152>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     f58:	2d ef       	ldi	r18, 0xFD	; 253
     f5a:	3f ef       	ldi	r19, 0xFF	; 255
     f5c:	2c 1b       	sub	r18, r28
     f5e:	31 09       	sbc	r19, r1
     f60:	c7 fd       	sbrc	r28, 7
     f62:	33 95       	inc	r19
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <usart_set_baudrate+0x12c>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	aa 1f       	adc	r26, r26
     f6c:	bb 1f       	adc	r27, r27
     f6e:	2a 95       	dec	r18
     f70:	d2 f7       	brpl	.-12     	; 0xf66 <usart_set_baudrate+0x124>
     f72:	73 01       	movw	r14, r6
     f74:	62 01       	movw	r12, r4
     f76:	f6 94       	lsr	r15
     f78:	e7 94       	ror	r14
     f7a:	d7 94       	ror	r13
     f7c:	c7 94       	ror	r12
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	6c 0d       	add	r22, r12
     f84:	7d 1d       	adc	r23, r13
     f86:	8e 1d       	adc	r24, r14
     f88:	9f 1d       	adc	r25, r15
     f8a:	a3 01       	movw	r20, r6
     f8c:	92 01       	movw	r18, r4
     f8e:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__udivmodsi4>
     f92:	38 c0       	rjmp	.+112    	; 0x1004 <usart_set_baudrate+0x1c2>
		} else {
			baud <<= exp + 3;
     f94:	23 e0       	ldi	r18, 0x03	; 3
     f96:	2c 0f       	add	r18, r28
     f98:	83 01       	movw	r16, r6
     f9a:	72 01       	movw	r14, r4
     f9c:	04 c0       	rjmp	.+8      	; 0xfa6 <usart_set_baudrate+0x164>
     f9e:	ee 0c       	add	r14, r14
     fa0:	ff 1c       	adc	r15, r15
     fa2:	00 1f       	adc	r16, r16
     fa4:	11 1f       	adc	r17, r17
     fa6:	2a 95       	dec	r18
     fa8:	d2 f7       	brpl	.-12     	; 0xf9e <usart_set_baudrate+0x15c>
     faa:	a8 01       	movw	r20, r16
     fac:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
     fae:	67 01       	movw	r12, r14
     fb0:	78 01       	movw	r14, r16
     fb2:	f6 94       	lsr	r15
     fb4:	e7 94       	ror	r14
     fb6:	d7 94       	ror	r13
     fb8:	c7 94       	ror	r12
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	6c 0d       	add	r22, r12
     fc0:	7d 1d       	adc	r23, r13
     fc2:	8e 1d       	adc	r24, r14
     fc4:	9f 1d       	adc	r25, r15
     fc6:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__udivmodsi4>
     fca:	1c c0       	rjmp	.+56     	; 0x1004 <usart_set_baudrate+0x1c2>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     fcc:	8d 5f       	subi	r24, 0xFD	; 253
     fce:	a3 01       	movw	r20, r6
     fd0:	92 01       	movw	r18, r4
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <usart_set_baudrate+0x19a>
     fd4:	22 0f       	add	r18, r18
     fd6:	33 1f       	adc	r19, r19
     fd8:	44 1f       	adc	r20, r20
     fda:	55 1f       	adc	r21, r21
     fdc:	8a 95       	dec	r24
     fde:	d2 f7       	brpl	.-12     	; 0xfd4 <usart_set_baudrate+0x192>
		div = (cpu_hz + baud / 2) / baud - 1;
     fe0:	da 01       	movw	r26, r20
     fe2:	c9 01       	movw	r24, r18
     fe4:	b6 95       	lsr	r27
     fe6:	a7 95       	ror	r26
     fe8:	97 95       	ror	r25
     fea:	87 95       	ror	r24
     fec:	bc 01       	movw	r22, r24
     fee:	cd 01       	movw	r24, r26
     ff0:	68 0d       	add	r22, r8
     ff2:	79 1d       	adc	r23, r9
     ff4:	8a 1d       	adc	r24, r10
     ff6:	9b 1d       	adc	r25, r11
     ff8:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__udivmodsi4>
     ffc:	21 50       	subi	r18, 0x01	; 1
     ffe:	31 09       	sbc	r19, r1
    1000:	41 09       	sbc	r20, r1
    1002:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1004:	83 2f       	mov	r24, r19
    1006:	8f 70       	andi	r24, 0x0F	; 15
    1008:	c2 95       	swap	r28
    100a:	c0 7f       	andi	r28, 0xF0	; 240
    100c:	c8 2b       	or	r28, r24
    100e:	f1 01       	movw	r30, r2
    1010:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1012:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	1c c0       	rjmp	.+56     	; 0x1050 <usart_set_baudrate+0x20e>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	1a c0       	rjmp	.+52     	; 0x1050 <usart_set_baudrate+0x20e>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	18 c0       	rjmp	.+48     	; 0x1050 <usart_set_baudrate+0x20e>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1020:	d3 01       	movw	r26, r6
    1022:	c2 01       	movw	r24, r4
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	aa 1f       	adc	r26, r26
    102a:	bb 1f       	adc	r27, r27
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	aa 1f       	adc	r26, r26
    1032:	bb 1f       	adc	r27, r27
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	aa 1f       	adc	r26, r26
    103a:	bb 1f       	adc	r27, r27
    103c:	85 01       	movw	r16, r10
    103e:	74 01       	movw	r14, r8
    1040:	e8 1a       	sub	r14, r24
    1042:	f9 0a       	sbc	r15, r25
    1044:	0a 0b       	sbc	r16, r26
    1046:	1b 0b       	sbc	r17, r27
    1048:	d8 01       	movw	r26, r16
    104a:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    104c:	c9 ef       	ldi	r28, 0xF9	; 249
    104e:	84 cf       	rjmp	.-248    	; 0xf58 <usart_set_baudrate+0x116>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ff 90       	pop	r15
    1058:	ef 90       	pop	r14
    105a:	df 90       	pop	r13
    105c:	cf 90       	pop	r12
    105e:	bf 90       	pop	r11
    1060:	af 90       	pop	r10
    1062:	9f 90       	pop	r9
    1064:	8f 90       	pop	r8
    1066:	7f 90       	pop	r7
    1068:	6f 90       	pop	r6
    106a:	5f 90       	pop	r5
    106c:	4f 90       	pop	r4
    106e:	3f 90       	pop	r3
    1070:	2f 90       	pop	r2
    1072:	08 95       	ret

00001074 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	ec 01       	movw	r28, r24
    107e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	09 f4       	brne	.+2      	; 0x1086 <usart_init_rs232+0x12>
    1084:	36 c1       	rjmp	.+620    	; 0x12f2 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1086:	80 3c       	cpi	r24, 0xC0	; 192
    1088:	91 05       	cpc	r25, r1
    108a:	21 f4       	brne	.+8      	; 0x1094 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    108c:	60 e1       	ldi	r22, 0x10	; 16
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	9b dc       	rcall	.-1738   	; 0x9c8 <sysclk_enable_module>
    1092:	2f c1       	rjmp	.+606    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1094:	c0 34       	cpi	r28, 0x40	; 64
    1096:	84 e0       	ldi	r24, 0x04	; 4
    1098:	d8 07       	cpc	r29, r24
    109a:	21 f4       	brne	.+8      	; 0x10a4 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    109c:	68 e0       	ldi	r22, 0x08	; 8
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	93 dc       	rcall	.-1754   	; 0x9c8 <sysclk_enable_module>
    10a2:	27 c1       	rjmp	.+590    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    10a4:	c1 15       	cp	r28, r1
    10a6:	e4 e0       	ldi	r30, 0x04	; 4
    10a8:	de 07       	cpc	r29, r30
    10aa:	21 f4       	brne	.+8      	; 0x10b4 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    10ac:	64 e0       	ldi	r22, 0x04	; 4
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	8b dc       	rcall	.-1770   	; 0x9c8 <sysclk_enable_module>
    10b2:	1f c1       	rjmp	.+574    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    10b4:	c0 38       	cpi	r28, 0x80	; 128
    10b6:	f1 e0       	ldi	r31, 0x01	; 1
    10b8:	df 07       	cpc	r29, r31
    10ba:	21 f4       	brne	.+8      	; 0x10c4 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    10bc:	62 e0       	ldi	r22, 0x02	; 2
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	83 dc       	rcall	.-1786   	; 0x9c8 <sysclk_enable_module>
    10c2:	17 c1       	rjmp	.+558    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    10c4:	c1 15       	cp	r28, r1
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	d8 07       	cpc	r29, r24
    10ca:	21 f4       	brne	.+8      	; 0x10d4 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	7b dc       	rcall	.-1802   	; 0x9c8 <sysclk_enable_module>
    10d2:	0f c1       	rjmp	.+542    	; 0x12f2 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    10d4:	c0 38       	cpi	r28, 0x80	; 128
    10d6:	e3 e0       	ldi	r30, 0x03	; 3
    10d8:	de 07       	cpc	r29, r30
    10da:	21 f4       	brne	.+8      	; 0x10e4 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	73 dc       	rcall	.-1818   	; 0x9c8 <sysclk_enable_module>
    10e2:	07 c1       	rjmp	.+526    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    10e4:	c0 39       	cpi	r28, 0x90	; 144
    10e6:	f3 e0       	ldi	r31, 0x03	; 3
    10e8:	df 07       	cpc	r29, r31
    10ea:	21 f4       	brne	.+8      	; 0x10f4 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	6b dc       	rcall	.-1834   	; 0x9c8 <sysclk_enable_module>
    10f2:	ff c0       	rjmp	.+510    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    10f4:	c1 15       	cp	r28, r1
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	d8 07       	cpc	r29, r24
    10fa:	21 f4       	brne	.+8      	; 0x1104 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    10fc:	62 e0       	ldi	r22, 0x02	; 2
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	63 dc       	rcall	.-1850   	; 0x9c8 <sysclk_enable_module>
    1102:	f7 c0       	rjmp	.+494    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1104:	c0 34       	cpi	r28, 0x40	; 64
    1106:	e2 e0       	ldi	r30, 0x02	; 2
    1108:	de 07       	cpc	r29, r30
    110a:	21 f4       	brne	.+8      	; 0x1114 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    110c:	62 e0       	ldi	r22, 0x02	; 2
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	5b dc       	rcall	.-1866   	; 0x9c8 <sysclk_enable_module>
    1112:	ef c0       	rjmp	.+478    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1114:	c1 15       	cp	r28, r1
    1116:	f3 e0       	ldi	r31, 0x03	; 3
    1118:	df 07       	cpc	r29, r31
    111a:	21 f4       	brne	.+8      	; 0x1124 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    111c:	64 e0       	ldi	r22, 0x04	; 4
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	53 dc       	rcall	.-1882   	; 0x9c8 <sysclk_enable_module>
    1122:	e7 c0       	rjmp	.+462    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1124:	c0 32       	cpi	r28, 0x20	; 32
    1126:	83 e0       	ldi	r24, 0x03	; 3
    1128:	d8 07       	cpc	r29, r24
    112a:	21 f4       	brne	.+8      	; 0x1134 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    112c:	64 e0       	ldi	r22, 0x04	; 4
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	4b dc       	rcall	.-1898   	; 0x9c8 <sysclk_enable_module>
    1132:	df c0       	rjmp	.+446    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1134:	c1 15       	cp	r28, r1
    1136:	e8 e0       	ldi	r30, 0x08	; 8
    1138:	de 07       	cpc	r29, r30
    113a:	21 f4       	brne	.+8      	; 0x1144 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	83 e0       	ldi	r24, 0x03	; 3
    1140:	43 dc       	rcall	.-1914   	; 0x9c8 <sysclk_enable_module>
    1142:	d7 c0       	rjmp	.+430    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1144:	c1 15       	cp	r28, r1
    1146:	f9 e0       	ldi	r31, 0x09	; 9
    1148:	df 07       	cpc	r29, r31
    114a:	21 f4       	brne	.+8      	; 0x1154 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	84 e0       	ldi	r24, 0x04	; 4
    1150:	3b dc       	rcall	.-1930   	; 0x9c8 <sysclk_enable_module>
    1152:	cf c0       	rjmp	.+414    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1154:	c1 15       	cp	r28, r1
    1156:	8a e0       	ldi	r24, 0x0A	; 10
    1158:	d8 07       	cpc	r29, r24
    115a:	21 f4       	brne	.+8      	; 0x1164 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    115c:	61 e0       	ldi	r22, 0x01	; 1
    115e:	85 e0       	ldi	r24, 0x05	; 5
    1160:	33 dc       	rcall	.-1946   	; 0x9c8 <sysclk_enable_module>
    1162:	c7 c0       	rjmp	.+398    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1164:	c1 15       	cp	r28, r1
    1166:	eb e0       	ldi	r30, 0x0B	; 11
    1168:	de 07       	cpc	r29, r30
    116a:	21 f4       	brne	.+8      	; 0x1174 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	86 e0       	ldi	r24, 0x06	; 6
    1170:	2b dc       	rcall	.-1962   	; 0x9c8 <sysclk_enable_module>
    1172:	bf c0       	rjmp	.+382    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1174:	c0 34       	cpi	r28, 0x40	; 64
    1176:	f8 e0       	ldi	r31, 0x08	; 8
    1178:	df 07       	cpc	r29, r31
    117a:	21 f4       	brne	.+8      	; 0x1184 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    117c:	62 e0       	ldi	r22, 0x02	; 2
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	23 dc       	rcall	.-1978   	; 0x9c8 <sysclk_enable_module>
    1182:	b7 c0       	rjmp	.+366    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1184:	c0 34       	cpi	r28, 0x40	; 64
    1186:	89 e0       	ldi	r24, 0x09	; 9
    1188:	d8 07       	cpc	r29, r24
    118a:	21 f4       	brne	.+8      	; 0x1194 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    118c:	62 e0       	ldi	r22, 0x02	; 2
    118e:	84 e0       	ldi	r24, 0x04	; 4
    1190:	1b dc       	rcall	.-1994   	; 0x9c8 <sysclk_enable_module>
    1192:	af c0       	rjmp	.+350    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1194:	c0 34       	cpi	r28, 0x40	; 64
    1196:	ea e0       	ldi	r30, 0x0A	; 10
    1198:	de 07       	cpc	r29, r30
    119a:	21 f4       	brne	.+8      	; 0x11a4 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    119c:	62 e0       	ldi	r22, 0x02	; 2
    119e:	85 e0       	ldi	r24, 0x05	; 5
    11a0:	13 dc       	rcall	.-2010   	; 0x9c8 <sysclk_enable_module>
    11a2:	a7 c0       	rjmp	.+334    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    11a4:	c0 34       	cpi	r28, 0x40	; 64
    11a6:	fb e0       	ldi	r31, 0x0B	; 11
    11a8:	df 07       	cpc	r29, r31
    11aa:	21 f4       	brne	.+8      	; 0x11b4 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	86 e0       	ldi	r24, 0x06	; 6
    11b0:	0b dc       	rcall	.-2026   	; 0x9c8 <sysclk_enable_module>
    11b2:	9f c0       	rjmp	.+318    	; 0x12f2 <usart_init_rs232+0x27e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    11b4:	c0 39       	cpi	r28, 0x90	; 144
    11b6:	88 e0       	ldi	r24, 0x08	; 8
    11b8:	d8 07       	cpc	r29, r24
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <usart_init_rs232+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    11bc:	64 e0       	ldi	r22, 0x04	; 4
    11be:	83 e0       	ldi	r24, 0x03	; 3
    11c0:	03 dc       	rcall	.-2042   	; 0x9c8 <sysclk_enable_module>
    11c2:	97 c0       	rjmp	.+302    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    11c4:	c0 39       	cpi	r28, 0x90	; 144
    11c6:	e9 e0       	ldi	r30, 0x09	; 9
    11c8:	de 07       	cpc	r29, r30
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    11cc:	64 e0       	ldi	r22, 0x04	; 4
    11ce:	84 e0       	ldi	r24, 0x04	; 4
    11d0:	fb db       	rcall	.-2058   	; 0x9c8 <sysclk_enable_module>
    11d2:	8f c0       	rjmp	.+286    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    11d4:	c0 39       	cpi	r28, 0x90	; 144
    11d6:	fa e0       	ldi	r31, 0x0A	; 10
    11d8:	df 07       	cpc	r29, r31
    11da:	21 f4       	brne	.+8      	; 0x11e4 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    11dc:	64 e0       	ldi	r22, 0x04	; 4
    11de:	85 e0       	ldi	r24, 0x05	; 5
    11e0:	f3 db       	rcall	.-2074   	; 0x9c8 <sysclk_enable_module>
    11e2:	87 c0       	rjmp	.+270    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    11e4:	c0 39       	cpi	r28, 0x90	; 144
    11e6:	8b e0       	ldi	r24, 0x0B	; 11
    11e8:	d8 07       	cpc	r29, r24
    11ea:	21 f4       	brne	.+8      	; 0x11f4 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    11ec:	64 e0       	ldi	r22, 0x04	; 4
    11ee:	86 e0       	ldi	r24, 0x06	; 6
    11f0:	eb db       	rcall	.-2090   	; 0x9c8 <sysclk_enable_module>
    11f2:	7f c0       	rjmp	.+254    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    11f4:	c0 3c       	cpi	r28, 0xC0	; 192
    11f6:	e8 e0       	ldi	r30, 0x08	; 8
    11f8:	de 07       	cpc	r29, r30
    11fa:	21 f4       	brne	.+8      	; 0x1204 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    11fc:	68 e0       	ldi	r22, 0x08	; 8
    11fe:	83 e0       	ldi	r24, 0x03	; 3
    1200:	e3 db       	rcall	.-2106   	; 0x9c8 <sysclk_enable_module>
    1202:	77 c0       	rjmp	.+238    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1204:	c0 3c       	cpi	r28, 0xC0	; 192
    1206:	f9 e0       	ldi	r31, 0x09	; 9
    1208:	df 07       	cpc	r29, r31
    120a:	21 f4       	brne	.+8      	; 0x1214 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    120c:	68 e0       	ldi	r22, 0x08	; 8
    120e:	84 e0       	ldi	r24, 0x04	; 4
    1210:	db db       	rcall	.-2122   	; 0x9c8 <sysclk_enable_module>
    1212:	6f c0       	rjmp	.+222    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1214:	c0 3c       	cpi	r28, 0xC0	; 192
    1216:	8a e0       	ldi	r24, 0x0A	; 10
    1218:	d8 07       	cpc	r29, r24
    121a:	21 f4       	brne	.+8      	; 0x1224 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    121c:	68 e0       	ldi	r22, 0x08	; 8
    121e:	85 e0       	ldi	r24, 0x05	; 5
    1220:	d3 db       	rcall	.-2138   	; 0x9c8 <sysclk_enable_module>
    1222:	67 c0       	rjmp	.+206    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1224:	c0 3c       	cpi	r28, 0xC0	; 192
    1226:	eb e0       	ldi	r30, 0x0B	; 11
    1228:	de 07       	cpc	r29, r30
    122a:	21 f4       	brne	.+8      	; 0x1234 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    122c:	68 e0       	ldi	r22, 0x08	; 8
    122e:	86 e0       	ldi	r24, 0x06	; 6
    1230:	cb db       	rcall	.-2154   	; 0x9c8 <sysclk_enable_module>
    1232:	5f c0       	rjmp	.+190    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1234:	c0 3a       	cpi	r28, 0xA0	; 160
    1236:	f8 e0       	ldi	r31, 0x08	; 8
    1238:	df 07       	cpc	r29, r31
    123a:	21 f4       	brne	.+8      	; 0x1244 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    123c:	60 e1       	ldi	r22, 0x10	; 16
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	c3 db       	rcall	.-2170   	; 0x9c8 <sysclk_enable_module>
    1242:	57 c0       	rjmp	.+174    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1244:	c0 3a       	cpi	r28, 0xA0	; 160
    1246:	89 e0       	ldi	r24, 0x09	; 9
    1248:	d8 07       	cpc	r29, r24
    124a:	21 f4       	brne	.+8      	; 0x1254 <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    124c:	60 e1       	ldi	r22, 0x10	; 16
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	bb db       	rcall	.-2186   	; 0x9c8 <sysclk_enable_module>
    1252:	4f c0       	rjmp	.+158    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1254:	c0 3a       	cpi	r28, 0xA0	; 160
    1256:	ea e0       	ldi	r30, 0x0A	; 10
    1258:	de 07       	cpc	r29, r30
    125a:	21 f4       	brne	.+8      	; 0x1264 <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    125c:	60 e1       	ldi	r22, 0x10	; 16
    125e:	85 e0       	ldi	r24, 0x05	; 5
    1260:	b3 db       	rcall	.-2202   	; 0x9c8 <sysclk_enable_module>
    1262:	47 c0       	rjmp	.+142    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1264:	c0 3a       	cpi	r28, 0xA0	; 160
    1266:	fb e0       	ldi	r31, 0x0B	; 11
    1268:	df 07       	cpc	r29, r31
    126a:	21 f4       	brne	.+8      	; 0x1274 <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    126c:	60 e1       	ldi	r22, 0x10	; 16
    126e:	86 e0       	ldi	r24, 0x06	; 6
    1270:	ab db       	rcall	.-2218   	; 0x9c8 <sysclk_enable_module>
    1272:	3f c0       	rjmp	.+126    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1274:	c0 3b       	cpi	r28, 0xB0	; 176
    1276:	88 e0       	ldi	r24, 0x08	; 8
    1278:	d8 07       	cpc	r29, r24
    127a:	21 f4       	brne	.+8      	; 0x1284 <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    127c:	60 e2       	ldi	r22, 0x20	; 32
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	a3 db       	rcall	.-2234   	; 0x9c8 <sysclk_enable_module>
    1282:	37 c0       	rjmp	.+110    	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1284:	c0 3b       	cpi	r28, 0xB0	; 176
    1286:	e9 e0       	ldi	r30, 0x09	; 9
    1288:	de 07       	cpc	r29, r30
    128a:	21 f4       	brne	.+8      	; 0x1294 <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    128c:	60 e2       	ldi	r22, 0x20	; 32
    128e:	84 e0       	ldi	r24, 0x04	; 4
    1290:	9b db       	rcall	.-2250   	; 0x9c8 <sysclk_enable_module>
    1292:	2f c0       	rjmp	.+94     	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1294:	c0 3b       	cpi	r28, 0xB0	; 176
    1296:	fa e0       	ldi	r31, 0x0A	; 10
    1298:	df 07       	cpc	r29, r31
    129a:	21 f4       	brne	.+8      	; 0x12a4 <usart_init_rs232+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    129c:	60 e2       	ldi	r22, 0x20	; 32
    129e:	85 e0       	ldi	r24, 0x05	; 5
    12a0:	93 db       	rcall	.-2266   	; 0x9c8 <sysclk_enable_module>
    12a2:	27 c0       	rjmp	.+78     	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    12a4:	c0 3b       	cpi	r28, 0xB0	; 176
    12a6:	8b e0       	ldi	r24, 0x0B	; 11
    12a8:	d8 07       	cpc	r29, r24
    12aa:	21 f4       	brne	.+8      	; 0x12b4 <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    12ac:	60 e2       	ldi	r22, 0x20	; 32
    12ae:	86 e0       	ldi	r24, 0x06	; 6
    12b0:	8b db       	rcall	.-2282   	; 0x9c8 <sysclk_enable_module>
    12b2:	1f c0       	rjmp	.+62     	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    12b4:	c0 38       	cpi	r28, 0x80	; 128
    12b6:	e4 e0       	ldi	r30, 0x04	; 4
    12b8:	de 07       	cpc	r29, r30
    12ba:	21 f4       	brne	.+8      	; 0x12c4 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    12bc:	60 e4       	ldi	r22, 0x40	; 64
    12be:	83 e0       	ldi	r24, 0x03	; 3
    12c0:	83 db       	rcall	.-2298   	; 0x9c8 <sysclk_enable_module>
    12c2:	17 c0       	rjmp	.+46     	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    12c4:	c0 39       	cpi	r28, 0x90	; 144
    12c6:	f4 e0       	ldi	r31, 0x04	; 4
    12c8:	df 07       	cpc	r29, r31
    12ca:	21 f4       	brne	.+8      	; 0x12d4 <usart_init_rs232+0x260>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    12cc:	60 e4       	ldi	r22, 0x40	; 64
    12ce:	84 e0       	ldi	r24, 0x04	; 4
    12d0:	7b db       	rcall	.-2314   	; 0x9c8 <sysclk_enable_module>
    12d2:	0f c0       	rjmp	.+30     	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    12d4:	c0 3a       	cpi	r28, 0xA0	; 160
    12d6:	84 e0       	ldi	r24, 0x04	; 4
    12d8:	d8 07       	cpc	r29, r24
    12da:	21 f4       	brne	.+8      	; 0x12e4 <usart_init_rs232+0x270>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    12dc:	60 e4       	ldi	r22, 0x40	; 64
    12de:	85 e0       	ldi	r24, 0x05	; 5
    12e0:	73 db       	rcall	.-2330   	; 0x9c8 <sysclk_enable_module>
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    12e4:	c0 3b       	cpi	r28, 0xB0	; 176
    12e6:	e4 e0       	ldi	r30, 0x04	; 4
    12e8:	de 07       	cpc	r29, r30
    12ea:	19 f4       	brne	.+6      	; 0x12f2 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    12ec:	60 e4       	ldi	r22, 0x40	; 64
    12ee:	86 e0       	ldi	r24, 0x06	; 6
    12f0:	6b db       	rcall	.-2346   	; 0x9c8 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    12f2:	8d 81       	ldd	r24, Y+5	; 0x05
    12f4:	8f 73       	andi	r24, 0x3F	; 63
    12f6:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    12f8:	f8 01       	movw	r30, r16
    12fa:	94 81       	ldd	r25, Z+4	; 0x04
    12fc:	85 81       	ldd	r24, Z+5	; 0x05
    12fe:	89 2b       	or	r24, r25
    1300:	96 81       	ldd	r25, Z+6	; 0x06
    1302:	91 11       	cpse	r25, r1
    1304:	98 e0       	ldi	r25, 0x08	; 8
    1306:	89 2b       	or	r24, r25
    1308:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    130a:	f8 01       	movw	r30, r16
    130c:	40 81       	ld	r20, Z
    130e:	51 81       	ldd	r21, Z+1	; 0x01
    1310:	62 81       	ldd	r22, Z+2	; 0x02
    1312:	73 81       	ldd	r23, Z+3	; 0x03
    1314:	00 e0       	ldi	r16, 0x00	; 0
    1316:	18 e4       	ldi	r17, 0x48	; 72
    1318:	28 ee       	ldi	r18, 0xE8	; 232
    131a:	31 e0       	ldi	r19, 0x01	; 1
    131c:	ce 01       	movw	r24, r28
    131e:	91 dd       	rcall	.-1246   	; 0xe42 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	98 60       	ori	r25, 0x08	; 8
    1324:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	90 61       	ori	r25, 0x10	; 16
    132a:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	08 95       	ret

00001336 <ADC_init>:
 */ 
#include <asf.h>
#include "Drivers/ADC/ADC_init.h"
/* This driver can be used to initialize any of the ADCs */

void ADC_init(void){
    1336:	ff 92       	push	r15
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
	ADCA.CTRLA = 0b00000001; //Enables the ADC.
    1340:	c0 e0       	ldi	r28, 0x00	; 0
    1342:	d2 e0       	ldi	r29, 0x02	; 2
    1344:	ff 24       	eor	r15, r15
    1346:	f3 94       	inc	r15
    1348:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000; //Unsigned 12 bit mode.
    134a:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000; //Voltage reference of Vcc/1.6V
    134c:	80 e1       	ldi	r24, 0x10	; 16
    134e:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101; //This is automatic prescalar of 128 on the clock.
    1350:	85 e0       	ldi	r24, 0x05	; 5
    1352:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1354:	61 e2       	ldi	r22, 0x21	; 33
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	5b dd       	rcall	.-1354   	; 0xe12 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    135c:	08 2f       	mov	r16, r24
    135e:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    1360:	10 2f       	mov	r17, r16
    1362:	00 27       	eor	r16, r16
    1364:	60 e2       	ldi	r22, 0x20	; 32
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	82 e0       	ldi	r24, 0x02	; 2
    136a:	53 dd       	rcall	.-1370   	; 0xe12 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    136c:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA); //Retrieve stored calibration data about the ADC.
    136e:	0c 87       	std	Y+12, r16	; 0x0c
    1370:	1d 87       	std	Y+13, r17	; 0x0d

	ADCA.CH0.CTRL = 0b00000001; //Single ended input
    1372:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000000; //Reading ADCA pin 0.
    1374:	19 a2       	std	Y+33, r1	; 0x21
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	08 95       	ret

00001382 <spi_select>:
	 PORTC.DIR &= 0b10111111;
	 SPIC.CTRL = 0b01010000; //Clock Double off, enable SPI, MSB DORD, master mode, SPI transfer mode set to 0, prescalar set to clkper/4 (has no effect in slave mode).
	 calibratePressure();
 }
 void spi_select(void){
	PORTC.OUT &= 0b11101111;
    1382:	e0 e4       	ldi	r30, 0x40	; 64
    1384:	f6 e0       	ldi	r31, 0x06	; 6
    1386:	84 81       	ldd	r24, Z+4	; 0x04
    1388:	8f 7e       	andi	r24, 0xEF	; 239
    138a:	84 83       	std	Z+4, r24	; 0x04
    138c:	08 95       	ret

0000138e <spi_deselect>:
 }
 void spi_deselect(void){
	PORTC.OUT |= 0b00010000;
    138e:	e0 e4       	ldi	r30, 0x40	; 64
    1390:	f6 e0       	ldi	r31, 0x06	; 6
    1392:	84 81       	ldd	r24, Z+4	; 0x04
    1394:	80 61       	ori	r24, 0x10	; 16
    1396:	84 83       	std	Z+4, r24	; 0x04
    1398:	08 95       	ret

0000139a <spi_read>:
 }
 uint8_t spi_read(void){
	 //printf("spi_read\n");
	 SPIC.DATA = 0xFF; //Set the data to something we know.
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	 while(!(SPIC.STATUS>>7)); //Wait until new data comes in by monitoring the interrupt flag.
    13a0:	e0 ec       	ldi	r30, 0xC0	; 192
    13a2:	f8 e0       	ldi	r31, 0x08	; 8
    13a4:	82 81       	ldd	r24, Z+2	; 0x02
    13a6:	88 23       	and	r24, r24
    13a8:	ec f7       	brge	.-6      	; 0x13a4 <spi_read+0xa>
	 return SPIC.DATA; //Return the data.
    13aa:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 }
    13ae:	08 95       	ret

000013b0 <spi_write>:

 void spi_write(uint8_t data){
	 //printf("spi_write\n");
	 SPIC.DATA = data; //Take data from function argument and write it.
    13b0:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	 //printf("1\n");
	 while(!(SPIC.STATUS>>7)); //Wait until data has been sent.
    13b4:	e0 ec       	ldi	r30, 0xC0	; 192
    13b6:	f8 e0       	ldi	r31, 0x08	; 8
    13b8:	82 81       	ldd	r24, Z+2	; 0x02
    13ba:	88 23       	and	r24, r24
    13bc:	ec f7       	brge	.-6      	; 0x13b8 <spi_write+0x8>
	 //printf("2\n");
 }
    13be:	08 95       	ret

000013c0 <calibratePressure>:
 uint16_t c5;
 uint16_t c6;
 
 void calibratePressure(void){
	//printf("cal_press\n");
	spi_select();
    13c0:	e0 df       	rcall	.-64     	; 0x1382 <spi_select>
	 spi_write(0b10100010); //prom read ad1
    13c2:	82 ea       	ldi	r24, 0xA2	; 162
    13c4:	f5 df       	rcall	.-22     	; 0x13b0 <spi_write>
	 c1 = ((uint16_t)spi_read())<<8;
    13c6:	e9 df       	rcall	.-46     	; 0x139a <spi_read>
    13c8:	10 92 89 20 	sts	0x2089, r1	; 0x802089 <c1>
    13cc:	80 93 8a 20 	sts	0x208A, r24	; 0x80208a <c1+0x1>
	 c1 += ((uint16_t)spi_read());
    13d0:	e4 df       	rcall	.-56     	; 0x139a <spi_read>
    13d2:	20 91 89 20 	lds	r18, 0x2089	; 0x802089 <c1>
    13d6:	30 91 8a 20 	lds	r19, 0x208A	; 0x80208a <c1+0x1>
    13da:	28 0f       	add	r18, r24
    13dc:	31 1d       	adc	r19, r1
    13de:	20 93 89 20 	sts	0x2089, r18	; 0x802089 <c1>
    13e2:	30 93 8a 20 	sts	0x208A, r19	; 0x80208a <c1+0x1>
	 spi_deselect();
    13e6:	d3 df       	rcall	.-90     	; 0x138e <spi_deselect>
	 //printf("c1: %u\n",c1);

	 spi_select();
    13e8:	cc df       	rcall	.-104    	; 0x1382 <spi_select>
	 spi_write(0b10100100); //prom read ad2
    13ea:	84 ea       	ldi	r24, 0xA4	; 164
    13ec:	e1 df       	rcall	.-62     	; 0x13b0 <spi_write>
	 c2 = ((uint16_t)spi_read())<<8;
    13ee:	d5 df       	rcall	.-86     	; 0x139a <spi_read>
    13f0:	10 92 85 20 	sts	0x2085, r1	; 0x802085 <c2>
    13f4:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <c2+0x1>
	 c2 += ((uint16_t)spi_read());
    13f8:	d0 df       	rcall	.-96     	; 0x139a <spi_read>
    13fa:	20 91 85 20 	lds	r18, 0x2085	; 0x802085 <c2>
    13fe:	30 91 86 20 	lds	r19, 0x2086	; 0x802086 <c2+0x1>
    1402:	28 0f       	add	r18, r24
    1404:	31 1d       	adc	r19, r1
    1406:	20 93 85 20 	sts	0x2085, r18	; 0x802085 <c2>
    140a:	30 93 86 20 	sts	0x2086, r19	; 0x802086 <c2+0x1>
	 spi_deselect();
    140e:	bf df       	rcall	.-130    	; 0x138e <spi_deselect>
	 //printf("c2: %u\n",c2);

	 spi_select();
    1410:	b8 df       	rcall	.-144    	; 0x1382 <spi_select>
	 spi_write(0b10100110); //prom read ad3
    1412:	86 ea       	ldi	r24, 0xA6	; 166
    1414:	cd df       	rcall	.-102    	; 0x13b0 <spi_write>
	 c3 = ((uint16_t)spi_read())<<8;
    1416:	c1 df       	rcall	.-126    	; 0x139a <spi_read>
    1418:	10 92 8b 20 	sts	0x208B, r1	; 0x80208b <c3>
    141c:	80 93 8c 20 	sts	0x208C, r24	; 0x80208c <c3+0x1>
	 c3 += ((uint16_t)spi_read());
    1420:	bc df       	rcall	.-136    	; 0x139a <spi_read>
    1422:	20 91 8b 20 	lds	r18, 0x208B	; 0x80208b <c3>
    1426:	30 91 8c 20 	lds	r19, 0x208C	; 0x80208c <c3+0x1>
    142a:	28 0f       	add	r18, r24
    142c:	31 1d       	adc	r19, r1
    142e:	20 93 8b 20 	sts	0x208B, r18	; 0x80208b <c3>
    1432:	30 93 8c 20 	sts	0x208C, r19	; 0x80208c <c3+0x1>
	 spi_deselect();
    1436:	ab df       	rcall	.-170    	; 0x138e <spi_deselect>
	 //printf("c3: %u\n",c3);

	 spi_select();
    1438:	a4 df       	rcall	.-184    	; 0x1382 <spi_select>
	 spi_write(0b10101000); //prom read ad4
    143a:	88 ea       	ldi	r24, 0xA8	; 168
    143c:	b9 df       	rcall	.-142    	; 0x13b0 <spi_write>
	 c4 = ((uint16_t)spi_read())<<8;
    143e:	ad df       	rcall	.-166    	; 0x139a <spi_read>
    1440:	10 92 83 20 	sts	0x2083, r1	; 0x802083 <c4>
    1444:	80 93 84 20 	sts	0x2084, r24	; 0x802084 <c4+0x1>
	 c4 += ((uint16_t)spi_read());
    1448:	a8 df       	rcall	.-176    	; 0x139a <spi_read>
    144a:	20 91 83 20 	lds	r18, 0x2083	; 0x802083 <c4>
    144e:	30 91 84 20 	lds	r19, 0x2084	; 0x802084 <c4+0x1>
    1452:	28 0f       	add	r18, r24
    1454:	31 1d       	adc	r19, r1
    1456:	20 93 83 20 	sts	0x2083, r18	; 0x802083 <c4>
    145a:	30 93 84 20 	sts	0x2084, r19	; 0x802084 <c4+0x1>
	 spi_deselect();
    145e:	97 df       	rcall	.-210    	; 0x138e <spi_deselect>
	 //printf("c4: %u\n",c4);

	 spi_select();
    1460:	90 df       	rcall	.-224    	; 0x1382 <spi_select>
	 spi_write(0b10101010); //prom read ad5
    1462:	8a ea       	ldi	r24, 0xAA	; 170
    1464:	a5 df       	rcall	.-182    	; 0x13b0 <spi_write>
	 c5 = ((uint16_t)spi_read())<<8;
    1466:	99 df       	rcall	.-206    	; 0x139a <spi_read>
    1468:	10 92 87 20 	sts	0x2087, r1	; 0x802087 <c5>
    146c:	80 93 88 20 	sts	0x2088, r24	; 0x802088 <c5+0x1>
	 c5 += ((uint16_t)spi_read());
    1470:	94 df       	rcall	.-216    	; 0x139a <spi_read>
    1472:	20 91 87 20 	lds	r18, 0x2087	; 0x802087 <c5>
    1476:	30 91 88 20 	lds	r19, 0x2088	; 0x802088 <c5+0x1>
    147a:	28 0f       	add	r18, r24
    147c:	31 1d       	adc	r19, r1
    147e:	20 93 87 20 	sts	0x2087, r18	; 0x802087 <c5>
    1482:	30 93 88 20 	sts	0x2088, r19	; 0x802088 <c5+0x1>
	 spi_deselect();
    1486:	83 df       	rcall	.-250    	; 0x138e <spi_deselect>
	 //printf("c5: %u\n",c5);

	 spi_select();
    1488:	7c df       	rcall	.-264    	; 0x1382 <spi_select>
	 spi_write(0b10101100); //prom read ad6
    148a:	8c ea       	ldi	r24, 0xAC	; 172
    148c:	91 df       	rcall	.-222    	; 0x13b0 <spi_write>
	 c6 = ((uint16_t)spi_read())<<8;
    148e:	85 df       	rcall	.-246    	; 0x139a <spi_read>
    1490:	10 92 81 20 	sts	0x2081, r1	; 0x802081 <c6>
    1494:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <c6+0x1>
	 c6 += ((uint16_t)spi_read());
    1498:	80 df       	rcall	.-256    	; 0x139a <spi_read>
    149a:	20 91 81 20 	lds	r18, 0x2081	; 0x802081 <c6>
    149e:	30 91 82 20 	lds	r19, 0x2082	; 0x802082 <c6+0x1>
    14a2:	28 0f       	add	r18, r24
    14a4:	31 1d       	adc	r19, r1
    14a6:	20 93 81 20 	sts	0x2081, r18	; 0x802081 <c6>
    14aa:	30 93 82 20 	sts	0x2082, r19	; 0x802082 <c6+0x1>
	 spi_deselect();
    14ae:	6f cf       	rjmp	.-290    	; 0x138e <spi_deselect>
    14b0:	08 95       	ret

000014b2 <SPI_init>:
	 //printf("c6: %u\n",c6);
 }
 
 void SPI_init(void){
	 //printf("spi_init\n");
	 PORTC.DIR |= 0b10110000; //Set port to input.
    14b2:	e0 e4       	ldi	r30, 0x40	; 64
    14b4:	f6 e0       	ldi	r31, 0x06	; 6
    14b6:	80 81       	ld	r24, Z
    14b8:	80 6b       	ori	r24, 0xB0	; 176
    14ba:	80 83       	st	Z, r24
	 PORTC.DIR &= 0b10111111;
    14bc:	80 81       	ld	r24, Z
    14be:	8f 7b       	andi	r24, 0xBF	; 191
    14c0:	80 83       	st	Z, r24
	 SPIC.CTRL = 0b01010000; //Clock Double off, enable SPI, MSB DORD, master mode, SPI transfer mode set to 0, prescalar set to clkper/4 (has no effect in slave mode).
    14c2:	80 e5       	ldi	r24, 0x50	; 80
    14c4:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
	 calibratePressure();
    14c8:	7b cf       	rjmp	.-266    	; 0x13c0 <calibratePressure>
    14ca:	08 95       	ret

000014cc <getPressure>:
	 //printf("1\n");
	 while(!(SPIC.STATUS>>7)); //Wait until data has been sent.
	 //printf("2\n");
 }
 
 int32_t getPressure(void){
    14cc:	2f 92       	push	r2
    14ce:	3f 92       	push	r3
    14d0:	4f 92       	push	r4
    14d2:	5f 92       	push	r5
    14d4:	6f 92       	push	r6
    14d6:	7f 92       	push	r7
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	6f 97       	sbiw	r28, 0x1f	; 31
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	de bf       	out	0x3e, r29	; 62
	//printf("get_press\n");
	spi_select();
    14fa:	43 df       	rcall	.-378    	; 0x1382 <spi_select>
	spi_write(0x48); //Ask for pressure value
    14fc:	88 e4       	ldi	r24, 0x48	; 72
    14fe:	58 df       	rcall	.-336    	; 0x13b0 <spi_write>
	spi_deselect();
    1500:	46 df       	rcall	.-372    	; 0x138e <spi_deselect>
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	85 35       	cpi	r24, 0x55	; 85
    150a:	00 ed       	ldi	r16, 0xD0	; 208
    150c:	90 07       	cpc	r25, r16
    150e:	d9 f7       	brne	.-10     	; 0x1506 <getPressure+0x3a>
	delay_ms(10);

	spi_select();
    1510:	38 df       	rcall	.-400    	; 0x1382 <spi_select>
	spi_write(0x00);
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	4d df       	rcall	.-358    	; 0x13b0 <spi_write>
	uint32_t d1 = ((uint32_t)spi_read())<<16; //Typecast the 8 bit data to 32 bit, then move it 16 places to the left. Stores in temp variable.
    1516:	41 df       	rcall	.-382    	; 0x139a <spi_read>
    1518:	c8 2e       	mov	r12, r24
    151a:	d1 2c       	mov	r13, r1
    151c:	e1 2c       	mov	r14, r1
    151e:	f1 2c       	mov	r15, r1
    1520:	76 01       	movw	r14, r12
    1522:	dd 24       	eor	r13, r13
    1524:	cc 24       	eor	r12, r12
	d1 += ((uint32_t)spi_read())<<8; //Assign data to data + the new data but in the lower 8 bits.
    1526:	39 df       	rcall	.-398    	; 0x139a <spi_read>
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a0 e0       	ldi	r26, 0x00	; 0
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ba 2f       	mov	r27, r26
    1530:	a9 2f       	mov	r26, r25
    1532:	98 2f       	mov	r25, r24
    1534:	88 27       	eor	r24, r24
    1536:	c8 0e       	add	r12, r24
    1538:	d9 1e       	adc	r13, r25
    153a:	ea 1e       	adc	r14, r26
    153c:	fb 1e       	adc	r15, r27
	d1 += ((uint32_t)spi_read());
    153e:	2d df       	rcall	.-422    	; 0x139a <spi_read>
    1540:	a7 01       	movw	r20, r14
    1542:	96 01       	movw	r18, r12
    1544:	28 0f       	add	r18, r24
    1546:	31 1d       	adc	r19, r1
    1548:	41 1d       	adc	r20, r1
    154a:	51 1d       	adc	r21, r1
    154c:	2d 83       	std	Y+5, r18	; 0x05
    154e:	3e 83       	std	Y+6, r19	; 0x06
    1550:	4f 83       	std	Y+7, r20	; 0x07
    1552:	58 87       	std	Y+8, r21	; 0x08
	spi_deselect();
    1554:	1c df       	rcall	.-456    	; 0x138e <spi_deselect>
	//printf("d1: %li\n",d1);
	
	spi_select();
    1556:	15 df       	rcall	.-470    	; 0x1382 <spi_select>
	spi_write(0x58); //Ask for temp value.
    1558:	88 e5       	ldi	r24, 0x58	; 88
    155a:	2a df       	rcall	.-428    	; 0x13b0 <spi_write>
	spi_deselect();
    155c:	18 df       	rcall	.-464    	; 0x138e <spi_deselect>
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	85 35       	cpi	r24, 0x55	; 85
    1566:	30 ed       	ldi	r19, 0xD0	; 208
    1568:	93 07       	cpc	r25, r19
    156a:	d9 f7       	brne	.-10     	; 0x1562 <getPressure+0x96>
	delay_ms(10);
	
	spi_select();
    156c:	0a df       	rcall	.-492    	; 0x1382 <spi_select>
	spi_write(0x00);
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	1f df       	rcall	.-450    	; 0x13b0 <spi_write>
	uint32_t d2 = ((uint32_t)spi_read())<<16;
    1572:	13 df       	rcall	.-474    	; 0x139a <spi_read>
    1574:	08 2f       	mov	r16, r24
	d2 += ((uint32_t)spi_read())<<8;
    1576:	11 df       	rcall	.-478    	; 0x139a <spi_read>
    1578:	f8 2e       	mov	r15, r24
	d2 += ((uint32_t)spi_read());
    157a:	0f df       	rcall	.-482    	; 0x139a <spi_read>
    157c:	18 2f       	mov	r17, r24
	spi_deselect();
    157e:	07 df       	rcall	.-498    	; 0x138e <spi_deselect>
	//printf("d2: %li\n",d2);
	

	int32_t dT = (int64_t)d2 - (((int64_t)c5)*(256));
    1580:	a0 91 87 20 	lds	r26, 0x2087	; 0x802087 <c5>
    1584:	b0 91 88 20 	lds	r27, 0x2088	; 0x802088 <c5+0x1>
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	3f ef       	ldi	r19, 0xFF	; 255
    158c:	4f ef       	ldi	r20, 0xFF	; 255
    158e:	5f ef       	ldi	r21, 0xFF	; 255
    1590:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__muluhisi3>
    1594:	2b 01       	movw	r4, r22
    1596:	3c 01       	movw	r6, r24
    1598:	41 0e       	add	r4, r17
    159a:	51 1c       	adc	r5, r1
    159c:	61 1c       	adc	r6, r1
    159e:	71 1c       	adc	r7, r1
	spi_deselect();
	delay_ms(10);
	
	spi_select();
	spi_write(0x00);
	uint32_t d2 = ((uint32_t)spi_read())<<16;
    15a0:	40 2f       	mov	r20, r16
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	ba 01       	movw	r22, r20
    15aa:	55 27       	eor	r21, r21
    15ac:	44 27       	eor	r20, r20
    15ae:	d3 01       	movw	r26, r6
    15b0:	c2 01       	movw	r24, r4
    15b2:	84 0f       	add	r24, r20
    15b4:	95 1f       	adc	r25, r21
    15b6:	a6 1f       	adc	r26, r22
    15b8:	b7 1f       	adc	r27, r23
	d2 += ((uint32_t)spi_read())<<8;
    15ba:	4f 2c       	mov	r4, r15
    15bc:	51 2c       	mov	r5, r1
    15be:	61 2c       	mov	r6, r1
    15c0:	71 2c       	mov	r7, r1
    15c2:	76 2c       	mov	r7, r6
    15c4:	65 2c       	mov	r6, r5
    15c6:	54 2c       	mov	r5, r4
    15c8:	44 24       	eor	r4, r4
	d2 += ((uint32_t)spi_read());
	spi_deselect();
	//printf("d2: %li\n",d2);
	

	int32_t dT = (int64_t)d2 - (((int64_t)c5)*(256));
    15ca:	48 0e       	add	r4, r24
    15cc:	59 1e       	adc	r5, r25
    15ce:	6a 1e       	adc	r6, r26
    15d0:	7b 1e       	adc	r7, r27
	int64_t offset = ((int64_t)c2)*(65536) + ((((int64_t)c4)*((int64_t)dT))/(128));
    15d2:	d3 01       	movw	r26, r6
    15d4:	c2 01       	movw	r24, r4
    15d6:	bb 0f       	add	r27, r27
    15d8:	88 0b       	sbc	r24, r24
    15da:	98 2f       	mov	r25, r24
    15dc:	dc 01       	movw	r26, r24
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	9a 83       	std	Y+2, r25	; 0x02
    15e2:	ab 83       	std	Y+3, r26	; 0x03
    15e4:	bc 83       	std	Y+4, r27	; 0x04
	int64_t sens = (((int64_t)c1)*(32768)) + ((((int64_t)c3)*((int64_t)dT))/256);
    15e6:	80 91 89 20 	lds	r24, 0x2089	; 0x802089 <c1>
    15ea:	90 91 8a 20 	lds	r25, 0x208A	; 0x80208a <c1+0x1>
    15ee:	4c 01       	movw	r8, r24
    15f0:	28 2f       	mov	r18, r24
    15f2:	39 2d       	mov	r19, r9
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0f e0       	ldi	r16, 0x0F	; 15
    1602:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__ashldi3>
    1606:	22 2e       	mov	r2, r18
    1608:	3d 87       	std	Y+13, r19	; 0x0d
    160a:	4e 87       	std	Y+14, r20	; 0x0e
    160c:	5f 87       	std	Y+15, r21	; 0x0f
    160e:	68 8b       	std	Y+16, r22	; 0x10
    1610:	79 8b       	std	Y+17, r23	; 0x11
    1612:	8a 8b       	std	Y+18, r24	; 0x12
    1614:	9b 8b       	std	Y+19, r25	; 0x13
    1616:	00 91 8b 20 	lds	r16, 0x208B	; 0x80208b <c3>
    161a:	10 91 8c 20 	lds	r17, 0x208C	; 0x80208c <c3+0x1>
    161e:	a0 2e       	mov	r10, r16
    1620:	b1 2e       	mov	r11, r17
    1622:	c1 2c       	mov	r12, r1
    1624:	d1 2c       	mov	r13, r1
    1626:	e1 2c       	mov	r14, r1
    1628:	f1 2c       	mov	r15, r1
    162a:	00 e0       	ldi	r16, 0x00	; 0
    162c:	10 e0       	ldi	r17, 0x00	; 0
    162e:	24 2d       	mov	r18, r4
    1630:	35 2d       	mov	r19, r5
    1632:	46 2d       	mov	r20, r6
    1634:	57 2d       	mov	r21, r7
    1636:	69 81       	ldd	r22, Y+1	; 0x01
    1638:	76 2f       	mov	r23, r22
    163a:	86 2f       	mov	r24, r22
    163c:	96 2f       	mov	r25, r22
    163e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__muldi3>
    1642:	32 2e       	mov	r3, r18
    1644:	83 2e       	mov	r8, r19
    1646:	94 2e       	mov	r9, r20
    1648:	e5 2f       	mov	r30, r21
    164a:	6d 8b       	std	Y+21, r22	; 0x15
    164c:	7c 8b       	std	Y+20, r23	; 0x14
    164e:	a8 2e       	mov	r10, r24
    1650:	b9 2e       	mov	r11, r25
    1652:	a0 e0       	ldi	r26, 0x00	; 0
    1654:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__cmpdi2_s8>
    1658:	84 f4       	brge	.+32     	; 0x167a <getPressure+0x1ae>
    165a:	21 50       	subi	r18, 0x01	; 1
    165c:	3f 4f       	sbci	r19, 0xFF	; 255
    165e:	4f 4f       	sbci	r20, 0xFF	; 255
    1660:	5f 4f       	sbci	r21, 0xFF	; 255
    1662:	6f 4f       	sbci	r22, 0xFF	; 255
    1664:	7f 4f       	sbci	r23, 0xFF	; 255
    1666:	8f 4f       	sbci	r24, 0xFF	; 255
    1668:	9f 4f       	sbci	r25, 0xFF	; 255
    166a:	32 2e       	mov	r3, r18
    166c:	83 2e       	mov	r8, r19
    166e:	94 2e       	mov	r9, r20
    1670:	e5 2f       	mov	r30, r21
    1672:	6d 8b       	std	Y+21, r22	; 0x15
    1674:	7c 8b       	std	Y+20, r23	; 0x14
    1676:	a8 2e       	mov	r10, r24
    1678:	b9 2e       	mov	r11, r25
    167a:	23 2d       	mov	r18, r3
    167c:	38 2d       	mov	r19, r8
    167e:	49 2d       	mov	r20, r9
    1680:	5e 2f       	mov	r21, r30
    1682:	6d 89       	ldd	r22, Y+21	; 0x15
    1684:	7c 89       	ldd	r23, Y+20	; 0x14
    1686:	8a 2d       	mov	r24, r10
    1688:	9b 2d       	mov	r25, r11
    168a:	08 e0       	ldi	r16, 0x08	; 8
    168c:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__ashrdi3>
    1690:	a2 2e       	mov	r10, r18
    1692:	b3 2e       	mov	r11, r19
    1694:	c4 2e       	mov	r12, r20
    1696:	d5 2e       	mov	r13, r21
    1698:	e6 2e       	mov	r14, r22
    169a:	f7 2e       	mov	r15, r23
    169c:	08 2f       	mov	r16, r24
    169e:	19 2f       	mov	r17, r25
    16a0:	22 2d       	mov	r18, r2
    16a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    16a4:	4e 85       	ldd	r20, Y+14	; 0x0e
    16a6:	5f 85       	ldd	r21, Y+15	; 0x0f
    16a8:	68 89       	ldd	r22, Y+16	; 0x10
    16aa:	79 89       	ldd	r23, Y+17	; 0x11
    16ac:	8a 89       	ldd	r24, Y+18	; 0x12
    16ae:	9b 89       	ldd	r25, Y+19	; 0x13
    16b0:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__adddi3>
	int32_t pressure = ((((int64_t)d1) * (((uint64_t)sens)/2097152)) - (int64_t)offset)/32768;
    16b4:	05 e1       	ldi	r16, 0x15	; 21
    16b6:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__lshrdi3>
    16ba:	cd 80       	ldd	r12, Y+5	; 0x05
    16bc:	de 80       	ldd	r13, Y+6	; 0x06
    16be:	ef 80       	ldd	r14, Y+7	; 0x07
    16c0:	f8 84       	ldd	r15, Y+8	; 0x08
    16c2:	56 01       	movw	r10, r12
    16c4:	67 01       	movw	r12, r14
    16c6:	e1 2c       	mov	r14, r1
    16c8:	f1 2c       	mov	r15, r1
    16ca:	87 01       	movw	r16, r14
    16cc:	ad 82       	std	Y+5, r10	; 0x05
    16ce:	be 82       	std	Y+6, r11	; 0x06
    16d0:	cf 82       	std	Y+7, r12	; 0x07
    16d2:	d8 86       	std	Y+8, r13	; 0x08
    16d4:	e9 86       	std	Y+9, r14	; 0x09
    16d6:	fa 86       	std	Y+10, r15	; 0x0a
    16d8:	0b 87       	std	Y+11, r16	; 0x0b
    16da:	1c 87       	std	Y+12, r17	; 0x0c
    16dc:	e1 2c       	mov	r14, r1
    16de:	f1 2c       	mov	r15, r1
    16e0:	00 e0       	ldi	r16, 0x00	; 0
    16e2:	10 e0       	ldi	r17, 0x00	; 0
    16e4:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__muldi3>
    16e8:	2d 83       	std	Y+5, r18	; 0x05
    16ea:	3d 87       	std	Y+13, r19	; 0x0d
    16ec:	4e 87       	std	Y+14, r20	; 0x0e
    16ee:	5f 87       	std	Y+15, r21	; 0x0f
    16f0:	68 8b       	std	Y+16, r22	; 0x10
    16f2:	79 8b       	std	Y+17, r23	; 0x11
    16f4:	8a 8b       	std	Y+18, r24	; 0x12
    16f6:	9b 8b       	std	Y+19, r25	; 0x13
	spi_deselect();
	//printf("d2: %li\n",d2);
	

	int32_t dT = (int64_t)d2 - (((int64_t)c5)*(256));
	int64_t offset = ((int64_t)c2)*(65536) + ((((int64_t)c4)*((int64_t)dT))/(128));
    16f8:	80 91 85 20 	lds	r24, 0x2085	; 0x802085 <c2>
    16fc:	90 91 86 20 	lds	r25, 0x2086	; 0x802086 <c2+0x1>
    1700:	4c 01       	movw	r8, r24
    1702:	28 2f       	mov	r18, r24
    1704:	39 2d       	mov	r19, r9
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	50 e0       	ldi	r21, 0x00	; 0
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	00 e1       	ldi	r16, 0x10	; 16
    1714:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__ashldi3>
    1718:	22 2e       	mov	r2, r18
    171a:	33 2e       	mov	r3, r19
    171c:	84 2e       	mov	r8, r20
    171e:	95 2e       	mov	r9, r21
    1720:	6c 8b       	std	Y+20, r22	; 0x14
    1722:	7d 8b       	std	Y+21, r23	; 0x15
    1724:	8e 8b       	std	Y+22, r24	; 0x16
    1726:	9f 8b       	std	Y+23, r25	; 0x17
    1728:	40 91 83 20 	lds	r20, 0x2083	; 0x802083 <c4>
    172c:	50 91 84 20 	lds	r21, 0x2084	; 0x802084 <c4+0x1>
    1730:	5a 01       	movw	r10, r20
    1732:	c1 2c       	mov	r12, r1
    1734:	d1 2c       	mov	r13, r1
    1736:	e1 2c       	mov	r14, r1
    1738:	f1 2c       	mov	r15, r1
    173a:	87 01       	movw	r16, r14
    173c:	48 8f       	std	Y+24, r20	; 0x18
    173e:	b9 8e       	std	Y+25, r11	; 0x19
    1740:	ca 8e       	std	Y+26, r12	; 0x1a
    1742:	db 8e       	std	Y+27, r13	; 0x1b
    1744:	ec 8e       	std	Y+28, r14	; 0x1c
    1746:	fd 8e       	std	Y+29, r15	; 0x1d
    1748:	0e 8f       	std	Y+30, r16	; 0x1e
    174a:	1f 8f       	std	Y+31, r17	; 0x1f
    174c:	a4 2c       	mov	r10, r4
    174e:	b5 2c       	mov	r11, r5
    1750:	c6 2c       	mov	r12, r6
    1752:	d7 2c       	mov	r13, r7
    1754:	e9 80       	ldd	r14, Y+1	; 0x01
    1756:	fe 2c       	mov	r15, r14
    1758:	0e 2d       	mov	r16, r14
    175a:	1e 2d       	mov	r17, r14
    175c:	28 8d       	ldd	r18, Y+24	; 0x18
    175e:	39 8d       	ldd	r19, Y+25	; 0x19
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__muldi3>
    1770:	e2 2f       	mov	r30, r18
    1772:	73 2e       	mov	r7, r19
    1774:	64 2e       	mov	r6, r20
    1776:	55 2e       	mov	r5, r21
    1778:	46 2e       	mov	r4, r22
    177a:	79 83       	std	Y+1, r23	; 0x01
    177c:	a8 2e       	mov	r10, r24
    177e:	b9 2e       	mov	r11, r25
    1780:	a0 e0       	ldi	r26, 0x00	; 0
    1782:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__cmpdi2_s8>
    1786:	5c f4       	brge	.+22     	; 0x179e <getPressure+0x2d2>
    1788:	af e7       	ldi	r26, 0x7F	; 127
    178a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__adddi3_s8>
    178e:	e2 2f       	mov	r30, r18
    1790:	73 2e       	mov	r7, r19
    1792:	64 2e       	mov	r6, r20
    1794:	55 2e       	mov	r5, r21
    1796:	46 2e       	mov	r4, r22
    1798:	79 83       	std	Y+1, r23	; 0x01
    179a:	a8 2e       	mov	r10, r24
    179c:	b9 2e       	mov	r11, r25
    179e:	2e 2f       	mov	r18, r30
    17a0:	37 2d       	mov	r19, r7
    17a2:	46 2d       	mov	r20, r6
    17a4:	55 2d       	mov	r21, r5
    17a6:	64 2d       	mov	r22, r4
    17a8:	79 81       	ldd	r23, Y+1	; 0x01
    17aa:	8a 2d       	mov	r24, r10
    17ac:	9b 2d       	mov	r25, r11
    17ae:	07 e0       	ldi	r16, 0x07	; 7
    17b0:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__ashrdi3>
    17b4:	a2 2e       	mov	r10, r18
    17b6:	b3 2e       	mov	r11, r19
    17b8:	c4 2e       	mov	r12, r20
    17ba:	d5 2e       	mov	r13, r21
    17bc:	e6 2e       	mov	r14, r22
    17be:	f7 2e       	mov	r15, r23
    17c0:	08 2f       	mov	r16, r24
    17c2:	19 2f       	mov	r17, r25
    17c4:	22 2d       	mov	r18, r2
    17c6:	33 2d       	mov	r19, r3
    17c8:	48 2d       	mov	r20, r8
    17ca:	59 2d       	mov	r21, r9
    17cc:	6c 89       	ldd	r22, Y+20	; 0x14
    17ce:	7d 89       	ldd	r23, Y+21	; 0x15
    17d0:	8e 89       	ldd	r24, Y+22	; 0x16
    17d2:	9f 89       	ldd	r25, Y+23	; 0x17
    17d4:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__adddi3>
    17d8:	a2 2e       	mov	r10, r18
    17da:	b3 2e       	mov	r11, r19
    17dc:	c4 2e       	mov	r12, r20
    17de:	d5 2e       	mov	r13, r21
    17e0:	e6 2e       	mov	r14, r22
    17e2:	f7 2e       	mov	r15, r23
    17e4:	08 2f       	mov	r16, r24
    17e6:	19 2f       	mov	r17, r25
	int64_t sens = (((int64_t)c1)*(32768)) + ((((int64_t)c3)*((int64_t)dT))/256);
	int32_t pressure = ((((int64_t)d1) * (((uint64_t)sens)/2097152)) - (int64_t)offset)/32768;
    17e8:	2d 81       	ldd	r18, Y+5	; 0x05
    17ea:	3d 85       	ldd	r19, Y+13	; 0x0d
    17ec:	4e 85       	ldd	r20, Y+14	; 0x0e
    17ee:	5f 85       	ldd	r21, Y+15	; 0x0f
    17f0:	68 89       	ldd	r22, Y+16	; 0x10
    17f2:	79 89       	ldd	r23, Y+17	; 0x11
    17f4:	8a 89       	ldd	r24, Y+18	; 0x12
    17f6:	9b 89       	ldd	r25, Y+19	; 0x13
    17f8:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <__subdi3>
    17fc:	0f e0       	ldi	r16, 0x0F	; 15
    17fe:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__lshrdi3>
    1802:	62 2f       	mov	r22, r18
    1804:	73 2f       	mov	r23, r19
    1806:	84 2f       	mov	r24, r20
    1808:	95 2f       	mov	r25, r21
	
	return pressure;
    180a:	6f 96       	adiw	r28, 0x1f	; 31
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	df 90       	pop	r13
    181e:	cf 90       	pop	r12
    1820:	bf 90       	pop	r11
    1822:	af 90       	pop	r10
    1824:	9f 90       	pop	r9
    1826:	8f 90       	pop	r8
    1828:	7f 90       	pop	r7
    182a:	6f 90       	pop	r6
    182c:	5f 90       	pop	r5
    182e:	4f 90       	pop	r4
    1830:	3f 90       	pop	r3
    1832:	2f 90       	pop	r2
    1834:	08 95       	ret

00001836 <getTemperature>:
 #include <math.h>
 #include "Drivers/Temperature/getTemperature.h"

 /* getTemperature method for NTC Thermistor 10k Bead */

 float getTemperature(void){
    1836:	8f 92       	push	r8
    1838:	9f 92       	push	r9
    183a:	af 92       	push	r10
    183c:	bf 92       	push	r11
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
	ADCA.CH0.CTRL |= 0b10000000; //Start the conversion.. FOR THOMAS: THIS IS A BITWISE OPERATOR THAT KEEPS 1's and MODIFIES ZEROES.
    1846:	e0 e0       	ldi	r30, 0x00	; 0
    1848:	f2 e0       	ldi	r31, 0x02	; 2
    184a:	80 a1       	ldd	r24, Z+32	; 0x20
    184c:	80 68       	ori	r24, 0x80	; 128
    184e:	80 a3       	std	Z+32, r24	; 0x20
		
	while(ADCA.CH0.INTFLAGS == 0); //Wait until conversion is done.
    1850:	83 a1       	ldd	r24, Z+35	; 0x23
    1852:	88 23       	and	r24, r24
    1854:	e9 f3       	breq	.-6      	; 0x1850 <getTemperature+0x1a>
		
	uint16_t read_adc = ADCA.CH0.RES; // save reading
    1856:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    185a:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
	//printf("read adc: %i\n",read_adc);
	float voltage = (0.000502512562*read_adc - 0.095979899); //converts the adc reading into an actual voltage based off of slope.
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	6d d3       	rcall	.+1754   	; 0x1f3e <__floatunsisf>
    1864:	2c e0       	ldi	r18, 0x0C	; 12
    1866:	3b eb       	ldi	r19, 0xBB	; 187
    1868:	43 e0       	ldi	r20, 0x03	; 3
    186a:	5a e3       	ldi	r21, 0x3A	; 58
    186c:	89 d4       	rcall	.+2322   	; 0x2180 <__mulsf3>
    186e:	2c e1       	ldi	r18, 0x1C	; 28
    1870:	31 e9       	ldi	r19, 0x91	; 145
    1872:	44 ec       	ldi	r20, 0xC4	; 196
    1874:	5d e3       	ldi	r21, 0x3D	; 61
    1876:	5c d2       	rcall	.+1208   	; 0x1d30 <__subsf3>
    1878:	9b 01       	movw	r18, r22
    187a:	ac 01       	movw	r20, r24

	float resistance = (3.3*10000)/(3.3 - voltage) - 10000; //Need to convert our voltage reading into the resistance across the thermistor. To find this we use 3.3(R1)/(3.3-vadc) - R1
    187c:	63 e3       	ldi	r22, 0x33	; 51
    187e:	73 e3       	ldi	r23, 0x33	; 51
    1880:	83 e5       	ldi	r24, 0x53	; 83
    1882:	90 e4       	ldi	r25, 0x40	; 64
    1884:	55 d2       	rcall	.+1194   	; 0x1d30 <__subsf3>
    1886:	9b 01       	movw	r18, r22
    1888:	ac 01       	movw	r20, r24
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	78 ee       	ldi	r23, 0xE8	; 232
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	97 e4       	ldi	r25, 0x47	; 71
    1892:	b3 d2       	rcall	.+1382   	; 0x1dfa <__divsf3>
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e4       	ldi	r19, 0x40	; 64
    1898:	4c e1       	ldi	r20, 0x1C	; 28
    189a:	56 e4       	ldi	r21, 0x46	; 70
    189c:	49 d2       	rcall	.+1170   	; 0x1d30 <__subsf3>
	
	float a_const = 0.003354016; //A value for the NTCLE100E3103HT1 in the Steinhart-Hart equation (T = 1/(A + Bln(resistance) + Dln^3(resistance))
	float b_const = 0.000256985; //B value
	float d_const = 0.00000006383091; //D value.
	return 1/(a_const+ b_const*log(resistance/10000) + d_const*log(resistance/10000)*log(resistance/10000)*log(resistance/10000)); //Steinhart-Hart to find temperature then return it.
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e4       	ldi	r19, 0x40	; 64
    18a2:	4c e1       	ldi	r20, 0x1C	; 28
    18a4:	56 e4       	ldi	r21, 0x46	; 70
    18a6:	a9 d2       	rcall	.+1362   	; 0x1dfa <__divsf3>
    18a8:	2b d4       	rcall	.+2134   	; 0x2100 <log>
    18aa:	6b 01       	movw	r12, r22
    18ac:	7c 01       	movw	r14, r24
    18ae:	21 ef       	ldi	r18, 0xF1	; 241
    18b0:	3b eb       	ldi	r19, 0xBB	; 187
    18b2:	46 e8       	ldi	r20, 0x86	; 134
    18b4:	59 e3       	ldi	r21, 0x39	; 57
    18b6:	64 d4       	rcall	.+2248   	; 0x2180 <__mulsf3>
    18b8:	2d e0       	ldi	r18, 0x0D	; 13
    18ba:	3f ec       	ldi	r19, 0xCF	; 207
    18bc:	4b e5       	ldi	r20, 0x5B	; 91
    18be:	5b e3       	ldi	r21, 0x3B	; 59
    18c0:	38 d2       	rcall	.+1136   	; 0x1d32 <__addsf3>
    18c2:	4b 01       	movw	r8, r22
    18c4:	5c 01       	movw	r10, r24
    18c6:	2a e6       	ldi	r18, 0x6A	; 106
    18c8:	33 e1       	ldi	r19, 0x13	; 19
    18ca:	49 e8       	ldi	r20, 0x89	; 137
    18cc:	53 e3       	ldi	r21, 0x33	; 51
    18ce:	c7 01       	movw	r24, r14
    18d0:	b6 01       	movw	r22, r12
    18d2:	56 d4       	rcall	.+2220   	; 0x2180 <__mulsf3>
    18d4:	9b 01       	movw	r18, r22
    18d6:	ac 01       	movw	r20, r24
    18d8:	c7 01       	movw	r24, r14
    18da:	b6 01       	movw	r22, r12
    18dc:	51 d4       	rcall	.+2210   	; 0x2180 <__mulsf3>
    18de:	9b 01       	movw	r18, r22
    18e0:	ac 01       	movw	r20, r24
    18e2:	c7 01       	movw	r24, r14
    18e4:	b6 01       	movw	r22, r12
    18e6:	4c d4       	rcall	.+2200   	; 0x2180 <__mulsf3>
    18e8:	9b 01       	movw	r18, r22
    18ea:	ac 01       	movw	r20, r24
    18ec:	c5 01       	movw	r24, r10
    18ee:	b4 01       	movw	r22, r8
    18f0:	20 d2       	rcall	.+1088   	; 0x1d32 <__addsf3>
    18f2:	9b 01       	movw	r18, r22
    18f4:	ac 01       	movw	r20, r24
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	80 e8       	ldi	r24, 0x80	; 128
    18fc:	9f e3       	ldi	r25, 0x3F	; 63
    18fe:	7d d2       	rcall	.+1274   	; 0x1dfa <__divsf3>
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	cf 90       	pop	r12
    1908:	bf 90       	pop	r11
    190a:	af 90       	pop	r10
    190c:	9f 90       	pop	r9
    190e:	8f 90       	pop	r8
    1910:	08 95       	ret

00001912 <TCD0_init>:
	TCE0.CCB = TCE0.PER - (TCE0.PER/duty_cycle);
	TCE0.CCC = TCE0.PER - (TCE0.PER/duty_cycle);
	TCE0.CCD = TCE0.PER - (TCE0.PER/duty_cycle);
}
void TCD0_init(void){
	PORTD.DIR = 0b11111111; //sets to output.
    1912:	8f ef       	ldi	r24, 0xFF	; 255
    1914:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	TCD0.CTRLA = 0b00000110; //0110 is prescalar 256.
    1918:	e0 e0       	ldi	r30, 0x00	; 0
    191a:	f9 e0       	ldi	r31, 0x09	; 9
    191c:	86 e0       	ldi	r24, 0x06	; 6
    191e:	80 83       	st	Z, r24
	TCD0.CTRLB = 0b10110011; //OCn output pin (currently set at 0) and single slope PWM.
    1920:	83 eb       	ldi	r24, 0xB3	; 179
    1922:	81 83       	std	Z+1, r24	; 0x01
    1924:	08 95       	ret

00001926 <TCF0_init>:
}

void TCF0_init(void){
	TCF0.CTRLA = 0b00000111; //presc 1024
    1926:	e0 e0       	ldi	r30, 0x00	; 0
    1928:	fb e0       	ldi	r31, 0x0B	; 11
    192a:	87 e0       	ldi	r24, 0x07	; 7
    192c:	80 83       	st	Z, r24
	TCF0.CTRLB = 0b00000000;
    192e:	11 82       	std	Z+1, r1	; 0x01
	TCF0.CNT = 0;
    1930:	10 a2       	std	Z+32, r1	; 0x20
    1932:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.PER = 312; //period of 312 = ~100Hz = ~10ms before overflow
    1934:	88 e3       	ldi	r24, 0x38	; 56
    1936:	91 e0       	ldi	r25, 0x01	; 1
    1938:	86 a3       	std	Z+38, r24	; 0x26
    193a:	97 a3       	std	Z+39, r25	; 0x27
    193c:	08 95       	ret

0000193e <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    1944:	78 da       	rcall	.-2832   	; 0xe36 <usart_getchar>
    1946:	88 83       	st	Y, r24
}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret

0000194e <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    194e:	6b ca       	rjmp	.-2858   	; 0xe26 <usart_putchar>
}
    1950:	08 95       	ret

00001952 <UART_Comms_Init>:
   to start the uart communications */

#include "conf_usart_serial.h" //Includes the information in the config file
#include <asf.h>

void UART_Comms_Init(void){
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	27 97       	sbiw	r28, 0x07	; 7
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	de bf       	out	0x3e, r29	; 62
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	//Must set TX pin as output
	PORTC.DIRSET=0b00001000;
    1960:	e0 e4       	ldi	r30, 0x40	; 64
    1962:	f6 e0       	ldi	r31, 0x06	; 6
    1964:	88 e0       	ldi	r24, 0x08	; 8
    1966:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET=0b00001000;
    1968:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUT=0xFF;
    196a:	8f ef       	ldi	r24, 0xFF	; 255
    196c:	84 83       	std	Z+4, r24	; 0x04
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    196e:	80 ea       	ldi	r24, 0xA0	; 160
    1970:	98 e0       	ldi	r25, 0x08	; 8
    1972:	80 93 7b 20 	sts	0x207B, r24	; 0x80207b <stdio_base>
    1976:	90 93 7c 20 	sts	0x207C, r25	; 0x80207c <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    197a:	87 ea       	ldi	r24, 0xA7	; 167
    197c:	9c e0       	ldi	r25, 0x0C	; 12
    197e:	80 93 79 20 	sts	0x2079, r24	; 0x802079 <ptr_put>
    1982:	90 93 7a 20 	sts	0x207A, r25	; 0x80207a <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1986:	8f e9       	ldi	r24, 0x9F	; 159
    1988:	9c e0       	ldi	r25, 0x0C	; 12
    198a:	80 93 77 20 	sts	0x2077, r24	; 0x802077 <ptr_get>
    198e:	90 93 78 20 	sts	0x2078, r25	; 0x802078 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1992:	e6 e0       	ldi	r30, 0x06	; 6
    1994:	f0 e2       	ldi	r31, 0x20	; 32
    1996:	84 81       	ldd	r24, Z+4	; 0x04
    1998:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    199a:	85 81       	ldd	r24, Z+5	; 0x05
    199c:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    199e:	86 81       	ldd	r24, Z+6	; 0x06
    19a0:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    19a2:	80 81       	ld	r24, Z
    19a4:	91 81       	ldd	r25, Z+1	; 0x01
    19a6:	a2 81       	ldd	r26, Z+2	; 0x02
    19a8:	b3 81       	ldd	r27, Z+3	; 0x03
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	ab 83       	std	Y+3, r26	; 0x03
    19b0:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    19b2:	60 e1       	ldi	r22, 0x10	; 16
    19b4:	83 e0       	ldi	r24, 0x03	; 3
    19b6:	08 d8       	rcall	.-4080   	; 0x9c8 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    19b8:	be 01       	movw	r22, r28
    19ba:	6f 5f       	subi	r22, 0xFF	; 255
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	80 ea       	ldi	r24, 0xA0	; 160
    19c0:	98 e0       	ldi	r25, 0x08	; 8
    19c2:	58 db       	rcall	.-2384   	; 0x1074 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    19c4:	60 ef       	ldi	r22, 0xF0	; 240
    19c6:	74 e0       	ldi	r23, 0x04	; 4
    19c8:	89 e0       	ldi	r24, 0x09	; 9
    19ca:	95 e0       	ldi	r25, 0x05	; 5
    19cc:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <fdevopen>

	stdio_serial_init(&USARTC0, &usart_options); //ASF function that initializes the UART peripheral
}
    19d0:	27 96       	adiw	r28, 0x07	; 7
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	09 f4       	brne	.+2      	; 0x19e2 <sysclk_enable_peripheral_clock+0x6>
    19e0:	5c c1       	rjmp	.+696    	; 0x1c9a <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    19e2:	80 3c       	cpi	r24, 0xC0	; 192
    19e4:	91 05       	cpc	r25, r1
    19e6:	29 f4       	brne	.+10     	; 0x19f2 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    19e8:	60 e1       	ldi	r22, 0x10	; 16
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    19f0:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    19f2:	80 34       	cpi	r24, 0x40	; 64
    19f4:	24 e0       	ldi	r18, 0x04	; 4
    19f6:	92 07       	cpc	r25, r18
    19f8:	29 f4       	brne	.+10     	; 0x1a04 <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    19fa:	68 e0       	ldi	r22, 0x08	; 8
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1a02:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1a04:	81 15       	cp	r24, r1
    1a06:	24 e0       	ldi	r18, 0x04	; 4
    1a08:	92 07       	cpc	r25, r18
    1a0a:	29 f4       	brne	.+10     	; 0x1a16 <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1a0c:	64 e0       	ldi	r22, 0x04	; 4
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1a14:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1a16:	80 38       	cpi	r24, 0x80	; 128
    1a18:	21 e0       	ldi	r18, 0x01	; 1
    1a1a:	92 07       	cpc	r25, r18
    1a1c:	29 f4       	brne	.+10     	; 0x1a28 <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1a1e:	62 e0       	ldi	r22, 0x02	; 2
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1a26:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1a28:	81 15       	cp	r24, r1
    1a2a:	21 e0       	ldi	r18, 0x01	; 1
    1a2c:	92 07       	cpc	r25, r18
    1a2e:	29 f4       	brne	.+10     	; 0x1a3a <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1a38:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1a3a:	80 38       	cpi	r24, 0x80	; 128
    1a3c:	23 e0       	ldi	r18, 0x03	; 3
    1a3e:	92 07       	cpc	r25, r18
    1a40:	29 f4       	brne	.+10     	; 0x1a4c <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1a42:	61 e0       	ldi	r22, 0x01	; 1
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1a4a:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1a4c:	80 39       	cpi	r24, 0x90	; 144
    1a4e:	23 e0       	ldi	r18, 0x03	; 3
    1a50:	92 07       	cpc	r25, r18
    1a52:	29 f4       	brne	.+10     	; 0x1a5e <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1a54:	61 e0       	ldi	r22, 0x01	; 1
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1a5c:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1a5e:	81 15       	cp	r24, r1
    1a60:	22 e0       	ldi	r18, 0x02	; 2
    1a62:	92 07       	cpc	r25, r18
    1a64:	29 f4       	brne	.+10     	; 0x1a70 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1a66:	62 e0       	ldi	r22, 0x02	; 2
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1a6e:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1a70:	80 34       	cpi	r24, 0x40	; 64
    1a72:	22 e0       	ldi	r18, 0x02	; 2
    1a74:	92 07       	cpc	r25, r18
    1a76:	29 f4       	brne	.+10     	; 0x1a82 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1a78:	62 e0       	ldi	r22, 0x02	; 2
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1a80:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1a82:	81 15       	cp	r24, r1
    1a84:	23 e0       	ldi	r18, 0x03	; 3
    1a86:	92 07       	cpc	r25, r18
    1a88:	29 f4       	brne	.+10     	; 0x1a94 <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1a8a:	64 e0       	ldi	r22, 0x04	; 4
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1a92:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1a94:	80 32       	cpi	r24, 0x20	; 32
    1a96:	23 e0       	ldi	r18, 0x03	; 3
    1a98:	92 07       	cpc	r25, r18
    1a9a:	29 f4       	brne	.+10     	; 0x1aa6 <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1a9c:	64 e0       	ldi	r22, 0x04	; 4
    1a9e:	82 e0       	ldi	r24, 0x02	; 2
    1aa0:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1aa4:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1aa6:	81 15       	cp	r24, r1
    1aa8:	28 e0       	ldi	r18, 0x08	; 8
    1aaa:	92 07       	cpc	r25, r18
    1aac:	29 f4       	brne	.+10     	; 0x1ab8 <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1aae:	61 e0       	ldi	r22, 0x01	; 1
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1ab6:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1ab8:	81 15       	cp	r24, r1
    1aba:	29 e0       	ldi	r18, 0x09	; 9
    1abc:	92 07       	cpc	r25, r18
    1abe:	29 f4       	brne	.+10     	; 0x1aca <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	84 e0       	ldi	r24, 0x04	; 4
    1ac4:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1ac8:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1aca:	81 15       	cp	r24, r1
    1acc:	2a e0       	ldi	r18, 0x0A	; 10
    1ace:	92 07       	cpc	r25, r18
    1ad0:	29 f4       	brne	.+10     	; 0x1adc <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	85 e0       	ldi	r24, 0x05	; 5
    1ad6:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1ada:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1adc:	81 15       	cp	r24, r1
    1ade:	2b e0       	ldi	r18, 0x0B	; 11
    1ae0:	92 07       	cpc	r25, r18
    1ae2:	29 f4       	brne	.+10     	; 0x1aee <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1ae4:	61 e0       	ldi	r22, 0x01	; 1
    1ae6:	86 e0       	ldi	r24, 0x06	; 6
    1ae8:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1aec:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1aee:	80 34       	cpi	r24, 0x40	; 64
    1af0:	28 e0       	ldi	r18, 0x08	; 8
    1af2:	92 07       	cpc	r25, r18
    1af4:	29 f4       	brne	.+10     	; 0x1b00 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	83 e0       	ldi	r24, 0x03	; 3
    1afa:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1afe:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1b00:	80 34       	cpi	r24, 0x40	; 64
    1b02:	29 e0       	ldi	r18, 0x09	; 9
    1b04:	92 07       	cpc	r25, r18
    1b06:	29 f4       	brne	.+10     	; 0x1b12 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1b08:	62 e0       	ldi	r22, 0x02	; 2
    1b0a:	84 e0       	ldi	r24, 0x04	; 4
    1b0c:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1b10:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1b12:	80 34       	cpi	r24, 0x40	; 64
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	92 07       	cpc	r25, r18
    1b18:	29 f4       	brne	.+10     	; 0x1b24 <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1b1a:	62 e0       	ldi	r22, 0x02	; 2
    1b1c:	85 e0       	ldi	r24, 0x05	; 5
    1b1e:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1b22:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1b24:	80 34       	cpi	r24, 0x40	; 64
    1b26:	2b e0       	ldi	r18, 0x0B	; 11
    1b28:	92 07       	cpc	r25, r18
    1b2a:	29 f4       	brne	.+10     	; 0x1b36 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1b2c:	62 e0       	ldi	r22, 0x02	; 2
    1b2e:	86 e0       	ldi	r24, 0x06	; 6
    1b30:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1b34:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1b36:	80 39       	cpi	r24, 0x90	; 144
    1b38:	28 e0       	ldi	r18, 0x08	; 8
    1b3a:	92 07       	cpc	r25, r18
    1b3c:	29 f4       	brne	.+10     	; 0x1b48 <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1b3e:	64 e0       	ldi	r22, 0x04	; 4
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1b46:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1b48:	80 39       	cpi	r24, 0x90	; 144
    1b4a:	29 e0       	ldi	r18, 0x09	; 9
    1b4c:	92 07       	cpc	r25, r18
    1b4e:	29 f4       	brne	.+10     	; 0x1b5a <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b50:	64 e0       	ldi	r22, 0x04	; 4
    1b52:	84 e0       	ldi	r24, 0x04	; 4
    1b54:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1b58:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1b5a:	80 39       	cpi	r24, 0x90	; 144
    1b5c:	2a e0       	ldi	r18, 0x0A	; 10
    1b5e:	92 07       	cpc	r25, r18
    1b60:	29 f4       	brne	.+10     	; 0x1b6c <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1b62:	64 e0       	ldi	r22, 0x04	; 4
    1b64:	85 e0       	ldi	r24, 0x05	; 5
    1b66:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1b6a:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1b6c:	80 39       	cpi	r24, 0x90	; 144
    1b6e:	2b e0       	ldi	r18, 0x0B	; 11
    1b70:	92 07       	cpc	r25, r18
    1b72:	29 f4       	brne	.+10     	; 0x1b7e <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1b74:	64 e0       	ldi	r22, 0x04	; 4
    1b76:	86 e0       	ldi	r24, 0x06	; 6
    1b78:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1b7c:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1b7e:	80 3c       	cpi	r24, 0xC0	; 192
    1b80:	28 e0       	ldi	r18, 0x08	; 8
    1b82:	92 07       	cpc	r25, r18
    1b84:	29 f4       	brne	.+10     	; 0x1b90 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1b86:	68 e0       	ldi	r22, 0x08	; 8
    1b88:	83 e0       	ldi	r24, 0x03	; 3
    1b8a:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1b8e:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1b90:	80 3c       	cpi	r24, 0xC0	; 192
    1b92:	29 e0       	ldi	r18, 0x09	; 9
    1b94:	92 07       	cpc	r25, r18
    1b96:	29 f4       	brne	.+10     	; 0x1ba2 <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1b98:	68 e0       	ldi	r22, 0x08	; 8
    1b9a:	84 e0       	ldi	r24, 0x04	; 4
    1b9c:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1ba0:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1ba2:	80 3c       	cpi	r24, 0xC0	; 192
    1ba4:	2a e0       	ldi	r18, 0x0A	; 10
    1ba6:	92 07       	cpc	r25, r18
    1ba8:	29 f4       	brne	.+10     	; 0x1bb4 <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1baa:	68 e0       	ldi	r22, 0x08	; 8
    1bac:	85 e0       	ldi	r24, 0x05	; 5
    1bae:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1bb2:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1bb4:	80 3c       	cpi	r24, 0xC0	; 192
    1bb6:	2b e0       	ldi	r18, 0x0B	; 11
    1bb8:	92 07       	cpc	r25, r18
    1bba:	29 f4       	brne	.+10     	; 0x1bc6 <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1bbc:	68 e0       	ldi	r22, 0x08	; 8
    1bbe:	86 e0       	ldi	r24, 0x06	; 6
    1bc0:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1bc4:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1bc6:	80 3a       	cpi	r24, 0xA0	; 160
    1bc8:	28 e0       	ldi	r18, 0x08	; 8
    1bca:	92 07       	cpc	r25, r18
    1bcc:	29 f4       	brne	.+10     	; 0x1bd8 <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1bce:	60 e1       	ldi	r22, 0x10	; 16
    1bd0:	83 e0       	ldi	r24, 0x03	; 3
    1bd2:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1bd6:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1bd8:	80 3a       	cpi	r24, 0xA0	; 160
    1bda:	29 e0       	ldi	r18, 0x09	; 9
    1bdc:	92 07       	cpc	r25, r18
    1bde:	29 f4       	brne	.+10     	; 0x1bea <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1be0:	60 e1       	ldi	r22, 0x10	; 16
    1be2:	84 e0       	ldi	r24, 0x04	; 4
    1be4:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1be8:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1bea:	80 3a       	cpi	r24, 0xA0	; 160
    1bec:	2a e0       	ldi	r18, 0x0A	; 10
    1bee:	92 07       	cpc	r25, r18
    1bf0:	29 f4       	brne	.+10     	; 0x1bfc <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1bf2:	60 e1       	ldi	r22, 0x10	; 16
    1bf4:	85 e0       	ldi	r24, 0x05	; 5
    1bf6:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1bfa:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1bfc:	80 3a       	cpi	r24, 0xA0	; 160
    1bfe:	2b e0       	ldi	r18, 0x0B	; 11
    1c00:	92 07       	cpc	r25, r18
    1c02:	29 f4       	brne	.+10     	; 0x1c0e <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1c04:	60 e1       	ldi	r22, 0x10	; 16
    1c06:	86 e0       	ldi	r24, 0x06	; 6
    1c08:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1c0c:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1c0e:	80 3b       	cpi	r24, 0xB0	; 176
    1c10:	28 e0       	ldi	r18, 0x08	; 8
    1c12:	92 07       	cpc	r25, r18
    1c14:	29 f4       	brne	.+10     	; 0x1c20 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1c16:	60 e2       	ldi	r22, 0x20	; 32
    1c18:	83 e0       	ldi	r24, 0x03	; 3
    1c1a:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1c1e:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1c20:	80 3b       	cpi	r24, 0xB0	; 176
    1c22:	29 e0       	ldi	r18, 0x09	; 9
    1c24:	92 07       	cpc	r25, r18
    1c26:	29 f4       	brne	.+10     	; 0x1c32 <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1c28:	60 e2       	ldi	r22, 0x20	; 32
    1c2a:	84 e0       	ldi	r24, 0x04	; 4
    1c2c:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1c30:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1c32:	80 3b       	cpi	r24, 0xB0	; 176
    1c34:	2a e0       	ldi	r18, 0x0A	; 10
    1c36:	92 07       	cpc	r25, r18
    1c38:	29 f4       	brne	.+10     	; 0x1c44 <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1c3a:	60 e2       	ldi	r22, 0x20	; 32
    1c3c:	85 e0       	ldi	r24, 0x05	; 5
    1c3e:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1c42:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1c44:	80 3b       	cpi	r24, 0xB0	; 176
    1c46:	2b e0       	ldi	r18, 0x0B	; 11
    1c48:	92 07       	cpc	r25, r18
    1c4a:	29 f4       	brne	.+10     	; 0x1c56 <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1c4c:	60 e2       	ldi	r22, 0x20	; 32
    1c4e:	86 e0       	ldi	r24, 0x06	; 6
    1c50:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1c54:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1c56:	80 38       	cpi	r24, 0x80	; 128
    1c58:	24 e0       	ldi	r18, 0x04	; 4
    1c5a:	92 07       	cpc	r25, r18
    1c5c:	29 f4       	brne	.+10     	; 0x1c68 <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1c5e:	60 e4       	ldi	r22, 0x40	; 64
    1c60:	83 e0       	ldi	r24, 0x03	; 3
    1c62:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1c66:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1c68:	80 39       	cpi	r24, 0x90	; 144
    1c6a:	24 e0       	ldi	r18, 0x04	; 4
    1c6c:	92 07       	cpc	r25, r18
    1c6e:	29 f4       	brne	.+10     	; 0x1c7a <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1c70:	60 e4       	ldi	r22, 0x40	; 64
    1c72:	84 e0       	ldi	r24, 0x04	; 4
    1c74:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1c78:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1c7a:	80 3a       	cpi	r24, 0xA0	; 160
    1c7c:	24 e0       	ldi	r18, 0x04	; 4
    1c7e:	92 07       	cpc	r25, r18
    1c80:	29 f4       	brne	.+10     	; 0x1c8c <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1c82:	60 e4       	ldi	r22, 0x40	; 64
    1c84:	85 e0       	ldi	r24, 0x05	; 5
    1c86:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1c8a:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1c8c:	80 3b       	cpi	r24, 0xB0	; 176
    1c8e:	94 40       	sbci	r25, 0x04	; 4
    1c90:	21 f4       	brne	.+8      	; 0x1c9a <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1c92:	60 e4       	ldi	r22, 0x40	; 64
    1c94:	86 e0       	ldi	r24, 0x06	; 6
    1c96:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <sysclk_enable_module>
    1c9a:	08 95       	ret

00001c9c <main>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main (void)
{
	/* Initialize the system clock, 32MHz, this also turns off all peripheral clocks */
	sysclk_init();
    1c9c:	0e 94 ba 04 	call	0x974	; 0x974 <sysclk_init>
	//rtc_init();

	/* Peripheral clock inits */
	sysclk_enable_peripheral_clock(&USARTC0); //For every peripheral, you must enable the clock like shown here. Ex. Timer counters, SPI, ADCs
    1ca0:	80 ea       	ldi	r24, 0xA0	; 160
    1ca2:	98 e0       	ldi	r25, 0x08	; 8
    1ca4:	9b de       	rcall	.-714    	; 0x19dc <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&ADCA); //Analog to Digital Converter clock initialization.
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	92 e0       	ldi	r25, 0x02	; 2
    1caa:	98 de       	rcall	.-720    	; 0x19dc <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCE0); //Timer Counter clock initialization
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	9a e0       	ldi	r25, 0x0A	; 10
    1cb0:	95 de       	rcall	.-726    	; 0x19dc <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCD0);
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	99 e0       	ldi	r25, 0x09	; 9
    1cb6:	92 de       	rcall	.-732    	; 0x19dc <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCC0);
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	98 e0       	ldi	r25, 0x08	; 8
    1cbc:	8f de       	rcall	.-738    	; 0x19dc <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCF0);
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	9b e0       	ldi	r25, 0x0B	; 11
    1cc2:	8c de       	rcall	.-744    	; 0x19dc <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&SPIC); //Serial Port Interface initialization.
    1cc4:	80 ec       	ldi	r24, 0xC0	; 192
    1cc6:	98 e0       	ldi	r25, 0x08	; 8
    1cc8:	89 de       	rcall	.-750    	; 0x19dc <sysclk_enable_peripheral_clock>
	
	/* Example, Timer Counter on PORTE */

	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES); //You must have this line for every timer counter due to a flaw in the design of the chip **************************
    1cca:	64 e0       	ldi	r22, 0x04	; 4
    1ccc:	85 e0       	ldi	r24, 0x05	; 5
    1cce:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1cd2:	64 e0       	ldi	r22, 0x04	; 4
    1cd4:	84 e0       	ldi	r24, 0x04	; 4
    1cd6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1cda:	64 e0       	ldi	r22, 0x04	; 4
    1cdc:	86 e0       	ldi	r24, 0x06	; 6
    1cde:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C,PR_SPI_bm);
    1ce2:	68 e0       	ldi	r22, 0x08	; 8
    1ce4:	83 e0       	ldi	r24, 0x03	; 3
    1ce6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <sysclk_enable_module>
	
	/* Initializations */

	UART_Comms_Init();
    1cea:	33 de       	rcall	.-922    	; 0x1952 <UART_Comms_Init>
	//printf("Initializing");
	SPI_init();
    1cec:	e2 db       	rcall	.-2108   	; 0x14b2 <SPI_init>
	//TCE0_init(12499,100);
	TCD0_init();
    1cee:	11 de       	rcall	.-990    	; 0x1912 <TCD0_init>
	TCF0_init();
    1cf0:	1a de       	rcall	.-972    	; 0x1926 <TCF0_init>
	ADC_init();
    1cf2:	21 db       	rcall	.-2494   	; 0x1336 <ADC_init>
	EP_address = 0;
    1cf4:	10 92 67 20 	sts	0x2067, r1	; 0x802067 <EP_address>
	alt = 0;
    1cf8:	10 92 66 20 	sts	0x2066, r1	; 0x802066 <alt>
	t = 0;
    1cfc:	10 92 62 20 	sts	0x2062, r1	; 0x802062 <__data_end>
    1d00:	10 92 63 20 	sts	0x2063, r1	; 0x802063 <__data_end+0x1>
    1d04:	10 92 64 20 	sts	0x2064, r1	; 0x802064 <__data_end+0x2>
    1d08:	10 92 65 20 	sts	0x2065, r1	; 0x802065 <__data_end+0x3>

	PORTD.DIR = 0b11111111;
    1d0c:	8f ef       	ldi	r24, 0xFF	; 255
    1d0e:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	PORTE.DIR = 0b11111111;
    1d12:	e0 e8       	ldi	r30, 0x80	; 128
    1d14:	f6 e0       	ldi	r31, 0x06	; 6
    1d16:	80 83       	st	Z, r24
	PORTF.DIR = 0b00000011;
    1d18:	83 e0       	ldi	r24, 0x03	; 3
    1d1a:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
	
	PORTE.OUT = 0b00000000;
    1d1e:	14 82       	std	Z+4, r1	; 0x04
	//flightStateZero();
	//flightStateOne();
	//flightStateTwo();
	// flightStateThree();

	LED(12499,100);
    1d20:	64 e6       	ldi	r22, 0x64	; 100
    1d22:	83 ed       	ldi	r24, 0xD3	; 211
    1d24:	90 e3       	ldi	r25, 0x30	; 48
    1d26:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LED>


		//while (TCF0.CNT != TCF0.PER); //wait until TCF0 overflows
		//printf("overflow\n");
		
		test();
    1d2a:	0e 94 82 04 	call	0x904	; 0x904 <test>
		lightChase(50);

			if(EP_address >= 2047)
				EP_address = 0;
				*/
	}
    1d2e:	fd cf       	rjmp	.-6      	; 0x1d2a <main+0x8e>

00001d30 <__subsf3>:
    1d30:	50 58       	subi	r21, 0x80	; 128

00001d32 <__addsf3>:
    1d32:	bb 27       	eor	r27, r27
    1d34:	aa 27       	eor	r26, r26
    1d36:	0e d0       	rcall	.+28     	; 0x1d54 <__addsf3x>
    1d38:	a4 c1       	rjmp	.+840    	; 0x2082 <__fp_round>
    1d3a:	95 d1       	rcall	.+810    	; 0x2066 <__fp_pscA>
    1d3c:	30 f0       	brcs	.+12     	; 0x1d4a <__addsf3+0x18>
    1d3e:	9a d1       	rcall	.+820    	; 0x2074 <__fp_pscB>
    1d40:	20 f0       	brcs	.+8      	; 0x1d4a <__addsf3+0x18>
    1d42:	31 f4       	brne	.+12     	; 0x1d50 <__addsf3+0x1e>
    1d44:	9f 3f       	cpi	r25, 0xFF	; 255
    1d46:	11 f4       	brne	.+4      	; 0x1d4c <__addsf3+0x1a>
    1d48:	1e f4       	brtc	.+6      	; 0x1d50 <__addsf3+0x1e>
    1d4a:	7a c1       	rjmp	.+756    	; 0x2040 <__fp_nan>
    1d4c:	0e f4       	brtc	.+2      	; 0x1d50 <__addsf3+0x1e>
    1d4e:	e0 95       	com	r30
    1d50:	e7 fb       	bst	r30, 7
    1d52:	70 c1       	rjmp	.+736    	; 0x2034 <__fp_inf>

00001d54 <__addsf3x>:
    1d54:	e9 2f       	mov	r30, r25
    1d56:	a6 d1       	rcall	.+844    	; 0x20a4 <__fp_split3>
    1d58:	80 f3       	brcs	.-32     	; 0x1d3a <__addsf3+0x8>
    1d5a:	ba 17       	cp	r27, r26
    1d5c:	62 07       	cpc	r22, r18
    1d5e:	73 07       	cpc	r23, r19
    1d60:	84 07       	cpc	r24, r20
    1d62:	95 07       	cpc	r25, r21
    1d64:	18 f0       	brcs	.+6      	; 0x1d6c <__addsf3x+0x18>
    1d66:	71 f4       	brne	.+28     	; 0x1d84 <__addsf3x+0x30>
    1d68:	9e f5       	brtc	.+102    	; 0x1dd0 <__addsf3x+0x7c>
    1d6a:	be c1       	rjmp	.+892    	; 0x20e8 <__fp_zero>
    1d6c:	0e f4       	brtc	.+2      	; 0x1d70 <__addsf3x+0x1c>
    1d6e:	e0 95       	com	r30
    1d70:	0b 2e       	mov	r0, r27
    1d72:	ba 2f       	mov	r27, r26
    1d74:	a0 2d       	mov	r26, r0
    1d76:	0b 01       	movw	r0, r22
    1d78:	b9 01       	movw	r22, r18
    1d7a:	90 01       	movw	r18, r0
    1d7c:	0c 01       	movw	r0, r24
    1d7e:	ca 01       	movw	r24, r20
    1d80:	a0 01       	movw	r20, r0
    1d82:	11 24       	eor	r1, r1
    1d84:	ff 27       	eor	r31, r31
    1d86:	59 1b       	sub	r21, r25
    1d88:	99 f0       	breq	.+38     	; 0x1db0 <__addsf3x+0x5c>
    1d8a:	59 3f       	cpi	r21, 0xF9	; 249
    1d8c:	50 f4       	brcc	.+20     	; 0x1da2 <__addsf3x+0x4e>
    1d8e:	50 3e       	cpi	r21, 0xE0	; 224
    1d90:	68 f1       	brcs	.+90     	; 0x1dec <__addsf3x+0x98>
    1d92:	1a 16       	cp	r1, r26
    1d94:	f0 40       	sbci	r31, 0x00	; 0
    1d96:	a2 2f       	mov	r26, r18
    1d98:	23 2f       	mov	r18, r19
    1d9a:	34 2f       	mov	r19, r20
    1d9c:	44 27       	eor	r20, r20
    1d9e:	58 5f       	subi	r21, 0xF8	; 248
    1da0:	f3 cf       	rjmp	.-26     	; 0x1d88 <__addsf3x+0x34>
    1da2:	46 95       	lsr	r20
    1da4:	37 95       	ror	r19
    1da6:	27 95       	ror	r18
    1da8:	a7 95       	ror	r26
    1daa:	f0 40       	sbci	r31, 0x00	; 0
    1dac:	53 95       	inc	r21
    1dae:	c9 f7       	brne	.-14     	; 0x1da2 <__addsf3x+0x4e>
    1db0:	7e f4       	brtc	.+30     	; 0x1dd0 <__addsf3x+0x7c>
    1db2:	1f 16       	cp	r1, r31
    1db4:	ba 0b       	sbc	r27, r26
    1db6:	62 0b       	sbc	r22, r18
    1db8:	73 0b       	sbc	r23, r19
    1dba:	84 0b       	sbc	r24, r20
    1dbc:	ba f0       	brmi	.+46     	; 0x1dec <__addsf3x+0x98>
    1dbe:	91 50       	subi	r25, 0x01	; 1
    1dc0:	a1 f0       	breq	.+40     	; 0x1dea <__addsf3x+0x96>
    1dc2:	ff 0f       	add	r31, r31
    1dc4:	bb 1f       	adc	r27, r27
    1dc6:	66 1f       	adc	r22, r22
    1dc8:	77 1f       	adc	r23, r23
    1dca:	88 1f       	adc	r24, r24
    1dcc:	c2 f7       	brpl	.-16     	; 0x1dbe <__addsf3x+0x6a>
    1dce:	0e c0       	rjmp	.+28     	; 0x1dec <__addsf3x+0x98>
    1dd0:	ba 0f       	add	r27, r26
    1dd2:	62 1f       	adc	r22, r18
    1dd4:	73 1f       	adc	r23, r19
    1dd6:	84 1f       	adc	r24, r20
    1dd8:	48 f4       	brcc	.+18     	; 0x1dec <__addsf3x+0x98>
    1dda:	87 95       	ror	r24
    1ddc:	77 95       	ror	r23
    1dde:	67 95       	ror	r22
    1de0:	b7 95       	ror	r27
    1de2:	f7 95       	ror	r31
    1de4:	9e 3f       	cpi	r25, 0xFE	; 254
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <__addsf3x+0x96>
    1de8:	b3 cf       	rjmp	.-154    	; 0x1d50 <__addsf3+0x1e>
    1dea:	93 95       	inc	r25
    1dec:	88 0f       	add	r24, r24
    1dee:	08 f0       	brcs	.+2      	; 0x1df2 <__addsf3x+0x9e>
    1df0:	99 27       	eor	r25, r25
    1df2:	ee 0f       	add	r30, r30
    1df4:	97 95       	ror	r25
    1df6:	87 95       	ror	r24
    1df8:	08 95       	ret

00001dfa <__divsf3>:
    1dfa:	0c d0       	rcall	.+24     	; 0x1e14 <__divsf3x>
    1dfc:	42 c1       	rjmp	.+644    	; 0x2082 <__fp_round>
    1dfe:	3a d1       	rcall	.+628    	; 0x2074 <__fp_pscB>
    1e00:	40 f0       	brcs	.+16     	; 0x1e12 <__divsf3+0x18>
    1e02:	31 d1       	rcall	.+610    	; 0x2066 <__fp_pscA>
    1e04:	30 f0       	brcs	.+12     	; 0x1e12 <__divsf3+0x18>
    1e06:	21 f4       	brne	.+8      	; 0x1e10 <__divsf3+0x16>
    1e08:	5f 3f       	cpi	r21, 0xFF	; 255
    1e0a:	19 f0       	breq	.+6      	; 0x1e12 <__divsf3+0x18>
    1e0c:	13 c1       	rjmp	.+550    	; 0x2034 <__fp_inf>
    1e0e:	51 11       	cpse	r21, r1
    1e10:	6c c1       	rjmp	.+728    	; 0x20ea <__fp_szero>
    1e12:	16 c1       	rjmp	.+556    	; 0x2040 <__fp_nan>

00001e14 <__divsf3x>:
    1e14:	47 d1       	rcall	.+654    	; 0x20a4 <__fp_split3>
    1e16:	98 f3       	brcs	.-26     	; 0x1dfe <__divsf3+0x4>

00001e18 <__divsf3_pse>:
    1e18:	99 23       	and	r25, r25
    1e1a:	c9 f3       	breq	.-14     	; 0x1e0e <__divsf3+0x14>
    1e1c:	55 23       	and	r21, r21
    1e1e:	b1 f3       	breq	.-20     	; 0x1e0c <__divsf3+0x12>
    1e20:	95 1b       	sub	r25, r21
    1e22:	55 0b       	sbc	r21, r21
    1e24:	bb 27       	eor	r27, r27
    1e26:	aa 27       	eor	r26, r26
    1e28:	62 17       	cp	r22, r18
    1e2a:	73 07       	cpc	r23, r19
    1e2c:	84 07       	cpc	r24, r20
    1e2e:	38 f0       	brcs	.+14     	; 0x1e3e <__divsf3_pse+0x26>
    1e30:	9f 5f       	subi	r25, 0xFF	; 255
    1e32:	5f 4f       	sbci	r21, 0xFF	; 255
    1e34:	22 0f       	add	r18, r18
    1e36:	33 1f       	adc	r19, r19
    1e38:	44 1f       	adc	r20, r20
    1e3a:	aa 1f       	adc	r26, r26
    1e3c:	a9 f3       	breq	.-22     	; 0x1e28 <__divsf3_pse+0x10>
    1e3e:	33 d0       	rcall	.+102    	; 0x1ea6 <__divsf3_pse+0x8e>
    1e40:	0e 2e       	mov	r0, r30
    1e42:	3a f0       	brmi	.+14     	; 0x1e52 <__divsf3_pse+0x3a>
    1e44:	e0 e8       	ldi	r30, 0x80	; 128
    1e46:	30 d0       	rcall	.+96     	; 0x1ea8 <__divsf3_pse+0x90>
    1e48:	91 50       	subi	r25, 0x01	; 1
    1e4a:	50 40       	sbci	r21, 0x00	; 0
    1e4c:	e6 95       	lsr	r30
    1e4e:	00 1c       	adc	r0, r0
    1e50:	ca f7       	brpl	.-14     	; 0x1e44 <__divsf3_pse+0x2c>
    1e52:	29 d0       	rcall	.+82     	; 0x1ea6 <__divsf3_pse+0x8e>
    1e54:	fe 2f       	mov	r31, r30
    1e56:	27 d0       	rcall	.+78     	; 0x1ea6 <__divsf3_pse+0x8e>
    1e58:	66 0f       	add	r22, r22
    1e5a:	77 1f       	adc	r23, r23
    1e5c:	88 1f       	adc	r24, r24
    1e5e:	bb 1f       	adc	r27, r27
    1e60:	26 17       	cp	r18, r22
    1e62:	37 07       	cpc	r19, r23
    1e64:	48 07       	cpc	r20, r24
    1e66:	ab 07       	cpc	r26, r27
    1e68:	b0 e8       	ldi	r27, 0x80	; 128
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <__divsf3_pse+0x56>
    1e6c:	bb 0b       	sbc	r27, r27
    1e6e:	80 2d       	mov	r24, r0
    1e70:	bf 01       	movw	r22, r30
    1e72:	ff 27       	eor	r31, r31
    1e74:	93 58       	subi	r25, 0x83	; 131
    1e76:	5f 4f       	sbci	r21, 0xFF	; 255
    1e78:	2a f0       	brmi	.+10     	; 0x1e84 <__divsf3_pse+0x6c>
    1e7a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e7c:	51 05       	cpc	r21, r1
    1e7e:	68 f0       	brcs	.+26     	; 0x1e9a <__divsf3_pse+0x82>
    1e80:	d9 c0       	rjmp	.+434    	; 0x2034 <__fp_inf>
    1e82:	33 c1       	rjmp	.+614    	; 0x20ea <__fp_szero>
    1e84:	5f 3f       	cpi	r21, 0xFF	; 255
    1e86:	ec f3       	brlt	.-6      	; 0x1e82 <__divsf3_pse+0x6a>
    1e88:	98 3e       	cpi	r25, 0xE8	; 232
    1e8a:	dc f3       	brlt	.-10     	; 0x1e82 <__divsf3_pse+0x6a>
    1e8c:	86 95       	lsr	r24
    1e8e:	77 95       	ror	r23
    1e90:	67 95       	ror	r22
    1e92:	b7 95       	ror	r27
    1e94:	f7 95       	ror	r31
    1e96:	9f 5f       	subi	r25, 0xFF	; 255
    1e98:	c9 f7       	brne	.-14     	; 0x1e8c <__divsf3_pse+0x74>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	91 1d       	adc	r25, r1
    1e9e:	96 95       	lsr	r25
    1ea0:	87 95       	ror	r24
    1ea2:	97 f9       	bld	r25, 7
    1ea4:	08 95       	ret
    1ea6:	e1 e0       	ldi	r30, 0x01	; 1
    1ea8:	66 0f       	add	r22, r22
    1eaa:	77 1f       	adc	r23, r23
    1eac:	88 1f       	adc	r24, r24
    1eae:	bb 1f       	adc	r27, r27
    1eb0:	62 17       	cp	r22, r18
    1eb2:	73 07       	cpc	r23, r19
    1eb4:	84 07       	cpc	r24, r20
    1eb6:	ba 07       	cpc	r27, r26
    1eb8:	20 f0       	brcs	.+8      	; 0x1ec2 <__divsf3_pse+0xaa>
    1eba:	62 1b       	sub	r22, r18
    1ebc:	73 0b       	sbc	r23, r19
    1ebe:	84 0b       	sbc	r24, r20
    1ec0:	ba 0b       	sbc	r27, r26
    1ec2:	ee 1f       	adc	r30, r30
    1ec4:	88 f7       	brcc	.-30     	; 0x1ea8 <__divsf3_pse+0x90>
    1ec6:	e0 95       	com	r30
    1ec8:	08 95       	ret

00001eca <__fixsfdi>:
    1eca:	be e3       	ldi	r27, 0x3E	; 62
    1ecc:	04 d0       	rcall	.+8      	; 0x1ed6 <__fixunssfdi+0x2>
    1ece:	08 f4       	brcc	.+2      	; 0x1ed2 <__fixsfdi+0x8>
    1ed0:	90 e8       	ldi	r25, 0x80	; 128
    1ed2:	08 95       	ret

00001ed4 <__fixunssfdi>:
    1ed4:	bf e3       	ldi	r27, 0x3F	; 63
    1ed6:	22 27       	eor	r18, r18
    1ed8:	33 27       	eor	r19, r19
    1eda:	a9 01       	movw	r20, r18
    1edc:	eb d0       	rcall	.+470    	; 0x20b4 <__fp_splitA>
    1ede:	58 f1       	brcs	.+86     	; 0x1f36 <__fixunssfdi+0x62>
    1ee0:	9f 57       	subi	r25, 0x7F	; 127
    1ee2:	40 f1       	brcs	.+80     	; 0x1f34 <__fixunssfdi+0x60>
    1ee4:	b9 17       	cp	r27, r25
    1ee6:	38 f1       	brcs	.+78     	; 0x1f36 <__fixunssfdi+0x62>
    1ee8:	bf e3       	ldi	r27, 0x3F	; 63
    1eea:	b9 1b       	sub	r27, r25
    1eec:	99 27       	eor	r25, r25
    1eee:	b8 50       	subi	r27, 0x08	; 8
    1ef0:	3a f4       	brpl	.+14     	; 0x1f00 <__fixunssfdi+0x2c>
    1ef2:	66 0f       	add	r22, r22
    1ef4:	77 1f       	adc	r23, r23
    1ef6:	88 1f       	adc	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	b3 95       	inc	r27
    1efc:	d2 f3       	brmi	.-12     	; 0x1ef2 <__fixunssfdi+0x1e>
    1efe:	16 c0       	rjmp	.+44     	; 0x1f2c <__fixunssfdi+0x58>
    1f00:	b8 50       	subi	r27, 0x08	; 8
    1f02:	4a f0       	brmi	.+18     	; 0x1f16 <__fixunssfdi+0x42>
    1f04:	23 2f       	mov	r18, r19
    1f06:	34 2f       	mov	r19, r20
    1f08:	45 2f       	mov	r20, r21
    1f0a:	56 2f       	mov	r21, r22
    1f0c:	67 2f       	mov	r22, r23
    1f0e:	78 2f       	mov	r23, r24
    1f10:	88 27       	eor	r24, r24
    1f12:	b8 50       	subi	r27, 0x08	; 8
    1f14:	ba f7       	brpl	.-18     	; 0x1f04 <__fixunssfdi+0x30>
    1f16:	b8 5f       	subi	r27, 0xF8	; 248
    1f18:	49 f0       	breq	.+18     	; 0x1f2c <__fixunssfdi+0x58>
    1f1a:	86 95       	lsr	r24
    1f1c:	77 95       	ror	r23
    1f1e:	67 95       	ror	r22
    1f20:	57 95       	ror	r21
    1f22:	47 95       	ror	r20
    1f24:	37 95       	ror	r19
    1f26:	27 95       	ror	r18
    1f28:	ba 95       	dec	r27
    1f2a:	b9 f7       	brne	.-18     	; 0x1f1a <__fixunssfdi+0x46>
    1f2c:	0e f4       	brtc	.+2      	; 0x1f30 <__fixunssfdi+0x5c>
    1f2e:	8b d0       	rcall	.+278    	; 0x2046 <__fp_negdi>
    1f30:	88 94       	clc
    1f32:	08 95       	ret
    1f34:	88 94       	clc
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	08 95       	ret

00001f3e <__floatunsisf>:
    1f3e:	e8 94       	clt
    1f40:	09 c0       	rjmp	.+18     	; 0x1f54 <__floatsisf+0x12>

00001f42 <__floatsisf>:
    1f42:	97 fb       	bst	r25, 7
    1f44:	3e f4       	brtc	.+14     	; 0x1f54 <__floatsisf+0x12>
    1f46:	90 95       	com	r25
    1f48:	80 95       	com	r24
    1f4a:	70 95       	com	r23
    1f4c:	61 95       	neg	r22
    1f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f50:	8f 4f       	sbci	r24, 0xFF	; 255
    1f52:	9f 4f       	sbci	r25, 0xFF	; 255
    1f54:	99 23       	and	r25, r25
    1f56:	a9 f0       	breq	.+42     	; 0x1f82 <__floatsisf+0x40>
    1f58:	f9 2f       	mov	r31, r25
    1f5a:	96 e9       	ldi	r25, 0x96	; 150
    1f5c:	bb 27       	eor	r27, r27
    1f5e:	93 95       	inc	r25
    1f60:	f6 95       	lsr	r31
    1f62:	87 95       	ror	r24
    1f64:	77 95       	ror	r23
    1f66:	67 95       	ror	r22
    1f68:	b7 95       	ror	r27
    1f6a:	f1 11       	cpse	r31, r1
    1f6c:	f8 cf       	rjmp	.-16     	; 0x1f5e <__floatsisf+0x1c>
    1f6e:	fa f4       	brpl	.+62     	; 0x1fae <__floatsisf+0x6c>
    1f70:	bb 0f       	add	r27, r27
    1f72:	11 f4       	brne	.+4      	; 0x1f78 <__floatsisf+0x36>
    1f74:	60 ff       	sbrs	r22, 0
    1f76:	1b c0       	rjmp	.+54     	; 0x1fae <__floatsisf+0x6c>
    1f78:	6f 5f       	subi	r22, 0xFF	; 255
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f80:	16 c0       	rjmp	.+44     	; 0x1fae <__floatsisf+0x6c>
    1f82:	88 23       	and	r24, r24
    1f84:	11 f0       	breq	.+4      	; 0x1f8a <__floatsisf+0x48>
    1f86:	96 e9       	ldi	r25, 0x96	; 150
    1f88:	11 c0       	rjmp	.+34     	; 0x1fac <__floatsisf+0x6a>
    1f8a:	77 23       	and	r23, r23
    1f8c:	21 f0       	breq	.+8      	; 0x1f96 <__floatsisf+0x54>
    1f8e:	9e e8       	ldi	r25, 0x8E	; 142
    1f90:	87 2f       	mov	r24, r23
    1f92:	76 2f       	mov	r23, r22
    1f94:	05 c0       	rjmp	.+10     	; 0x1fa0 <__floatsisf+0x5e>
    1f96:	66 23       	and	r22, r22
    1f98:	71 f0       	breq	.+28     	; 0x1fb6 <__floatsisf+0x74>
    1f9a:	96 e8       	ldi	r25, 0x86	; 134
    1f9c:	86 2f       	mov	r24, r22
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	2a f0       	brmi	.+10     	; 0x1fae <__floatsisf+0x6c>
    1fa4:	9a 95       	dec	r25
    1fa6:	66 0f       	add	r22, r22
    1fa8:	77 1f       	adc	r23, r23
    1faa:	88 1f       	adc	r24, r24
    1fac:	da f7       	brpl	.-10     	; 0x1fa4 <__floatsisf+0x62>
    1fae:	88 0f       	add	r24, r24
    1fb0:	96 95       	lsr	r25
    1fb2:	87 95       	ror	r24
    1fb4:	97 f9       	bld	r25, 7
    1fb6:	08 95       	ret

00001fb8 <__floatundisf>:
    1fb8:	e8 94       	clt

00001fba <__fp_di2sf>:
    1fba:	f9 2f       	mov	r31, r25
    1fbc:	96 eb       	ldi	r25, 0xB6	; 182
    1fbe:	ff 23       	and	r31, r31
    1fc0:	81 f0       	breq	.+32     	; 0x1fe2 <__fp_di2sf+0x28>
    1fc2:	12 16       	cp	r1, r18
    1fc4:	13 06       	cpc	r1, r19
    1fc6:	14 06       	cpc	r1, r20
    1fc8:	44 0b       	sbc	r20, r20
    1fca:	93 95       	inc	r25
    1fcc:	f6 95       	lsr	r31
    1fce:	87 95       	ror	r24
    1fd0:	77 95       	ror	r23
    1fd2:	67 95       	ror	r22
    1fd4:	57 95       	ror	r21
    1fd6:	40 40       	sbci	r20, 0x00	; 0
    1fd8:	ff 23       	and	r31, r31
    1fda:	b9 f7       	brne	.-18     	; 0x1fca <__fp_di2sf+0x10>
    1fdc:	1b c0       	rjmp	.+54     	; 0x2014 <__fp_di2sf+0x5a>
    1fde:	99 27       	eor	r25, r25
    1fe0:	08 95       	ret
    1fe2:	88 23       	and	r24, r24
    1fe4:	51 f4       	brne	.+20     	; 0x1ffa <__fp_di2sf+0x40>
    1fe6:	98 50       	subi	r25, 0x08	; 8
    1fe8:	d2 f7       	brpl	.-12     	; 0x1fde <__fp_di2sf+0x24>
    1fea:	87 2b       	or	r24, r23
    1fec:	76 2f       	mov	r23, r22
    1fee:	65 2f       	mov	r22, r21
    1ff0:	54 2f       	mov	r21, r20
    1ff2:	43 2f       	mov	r20, r19
    1ff4:	32 2f       	mov	r19, r18
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	b1 f3       	breq	.-20     	; 0x1fe6 <__fp_di2sf+0x2c>
    1ffa:	12 16       	cp	r1, r18
    1ffc:	13 06       	cpc	r1, r19
    1ffe:	14 06       	cpc	r1, r20
    2000:	44 0b       	sbc	r20, r20
    2002:	88 23       	and	r24, r24
    2004:	3a f0       	brmi	.+14     	; 0x2014 <__fp_di2sf+0x5a>
    2006:	9a 95       	dec	r25
    2008:	44 0f       	add	r20, r20
    200a:	55 1f       	adc	r21, r21
    200c:	66 1f       	adc	r22, r22
    200e:	77 1f       	adc	r23, r23
    2010:	88 1f       	adc	r24, r24
    2012:	ca f7       	brpl	.-14     	; 0x2006 <__fp_di2sf+0x4c>
    2014:	55 23       	and	r21, r21
    2016:	4a f4       	brpl	.+18     	; 0x202a <__fp_di2sf+0x70>
    2018:	44 0f       	add	r20, r20
    201a:	55 1f       	adc	r21, r21
    201c:	11 f4       	brne	.+4      	; 0x2022 <__fp_di2sf+0x68>
    201e:	60 ff       	sbrs	r22, 0
    2020:	04 c0       	rjmp	.+8      	; 0x202a <__fp_di2sf+0x70>
    2022:	6f 5f       	subi	r22, 0xFF	; 255
    2024:	7f 4f       	sbci	r23, 0xFF	; 255
    2026:	8f 4f       	sbci	r24, 0xFF	; 255
    2028:	9f 4f       	sbci	r25, 0xFF	; 255
    202a:	88 0f       	add	r24, r24
    202c:	96 95       	lsr	r25
    202e:	87 95       	ror	r24
    2030:	97 f9       	bld	r25, 7
    2032:	08 95       	ret

00002034 <__fp_inf>:
    2034:	97 f9       	bld	r25, 7
    2036:	9f 67       	ori	r25, 0x7F	; 127
    2038:	80 e8       	ldi	r24, 0x80	; 128
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	08 95       	ret

00002040 <__fp_nan>:
    2040:	9f ef       	ldi	r25, 0xFF	; 255
    2042:	80 ec       	ldi	r24, 0xC0	; 192
    2044:	08 95       	ret

00002046 <__fp_negdi>:
    2046:	90 95       	com	r25
    2048:	80 95       	com	r24
    204a:	70 95       	com	r23
    204c:	60 95       	com	r22
    204e:	50 95       	com	r21
    2050:	40 95       	com	r20
    2052:	30 95       	com	r19
    2054:	21 95       	neg	r18
    2056:	3f 4f       	sbci	r19, 0xFF	; 255
    2058:	4f 4f       	sbci	r20, 0xFF	; 255
    205a:	5f 4f       	sbci	r21, 0xFF	; 255
    205c:	6f 4f       	sbci	r22, 0xFF	; 255
    205e:	7f 4f       	sbci	r23, 0xFF	; 255
    2060:	8f 4f       	sbci	r24, 0xFF	; 255
    2062:	9f 4f       	sbci	r25, 0xFF	; 255
    2064:	08 95       	ret

00002066 <__fp_pscA>:
    2066:	00 24       	eor	r0, r0
    2068:	0a 94       	dec	r0
    206a:	16 16       	cp	r1, r22
    206c:	17 06       	cpc	r1, r23
    206e:	18 06       	cpc	r1, r24
    2070:	09 06       	cpc	r0, r25
    2072:	08 95       	ret

00002074 <__fp_pscB>:
    2074:	00 24       	eor	r0, r0
    2076:	0a 94       	dec	r0
    2078:	12 16       	cp	r1, r18
    207a:	13 06       	cpc	r1, r19
    207c:	14 06       	cpc	r1, r20
    207e:	05 06       	cpc	r0, r21
    2080:	08 95       	ret

00002082 <__fp_round>:
    2082:	09 2e       	mov	r0, r25
    2084:	03 94       	inc	r0
    2086:	00 0c       	add	r0, r0
    2088:	11 f4       	brne	.+4      	; 0x208e <__fp_round+0xc>
    208a:	88 23       	and	r24, r24
    208c:	52 f0       	brmi	.+20     	; 0x20a2 <__fp_round+0x20>
    208e:	bb 0f       	add	r27, r27
    2090:	40 f4       	brcc	.+16     	; 0x20a2 <__fp_round+0x20>
    2092:	bf 2b       	or	r27, r31
    2094:	11 f4       	brne	.+4      	; 0x209a <__fp_round+0x18>
    2096:	60 ff       	sbrs	r22, 0
    2098:	04 c0       	rjmp	.+8      	; 0x20a2 <__fp_round+0x20>
    209a:	6f 5f       	subi	r22, 0xFF	; 255
    209c:	7f 4f       	sbci	r23, 0xFF	; 255
    209e:	8f 4f       	sbci	r24, 0xFF	; 255
    20a0:	9f 4f       	sbci	r25, 0xFF	; 255
    20a2:	08 95       	ret

000020a4 <__fp_split3>:
    20a4:	57 fd       	sbrc	r21, 7
    20a6:	90 58       	subi	r25, 0x80	; 128
    20a8:	44 0f       	add	r20, r20
    20aa:	55 1f       	adc	r21, r21
    20ac:	59 f0       	breq	.+22     	; 0x20c4 <__fp_splitA+0x10>
    20ae:	5f 3f       	cpi	r21, 0xFF	; 255
    20b0:	71 f0       	breq	.+28     	; 0x20ce <__fp_splitA+0x1a>
    20b2:	47 95       	ror	r20

000020b4 <__fp_splitA>:
    20b4:	88 0f       	add	r24, r24
    20b6:	97 fb       	bst	r25, 7
    20b8:	99 1f       	adc	r25, r25
    20ba:	61 f0       	breq	.+24     	; 0x20d4 <__fp_splitA+0x20>
    20bc:	9f 3f       	cpi	r25, 0xFF	; 255
    20be:	79 f0       	breq	.+30     	; 0x20de <__fp_splitA+0x2a>
    20c0:	87 95       	ror	r24
    20c2:	08 95       	ret
    20c4:	12 16       	cp	r1, r18
    20c6:	13 06       	cpc	r1, r19
    20c8:	14 06       	cpc	r1, r20
    20ca:	55 1f       	adc	r21, r21
    20cc:	f2 cf       	rjmp	.-28     	; 0x20b2 <__fp_split3+0xe>
    20ce:	46 95       	lsr	r20
    20d0:	f1 df       	rcall	.-30     	; 0x20b4 <__fp_splitA>
    20d2:	08 c0       	rjmp	.+16     	; 0x20e4 <__fp_splitA+0x30>
    20d4:	16 16       	cp	r1, r22
    20d6:	17 06       	cpc	r1, r23
    20d8:	18 06       	cpc	r1, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	f1 cf       	rjmp	.-30     	; 0x20c0 <__fp_splitA+0xc>
    20de:	86 95       	lsr	r24
    20e0:	71 05       	cpc	r23, r1
    20e2:	61 05       	cpc	r22, r1
    20e4:	08 94       	sec
    20e6:	08 95       	ret

000020e8 <__fp_zero>:
    20e8:	e8 94       	clt

000020ea <__fp_szero>:
    20ea:	bb 27       	eor	r27, r27
    20ec:	66 27       	eor	r22, r22
    20ee:	77 27       	eor	r23, r23
    20f0:	cb 01       	movw	r24, r22
    20f2:	97 f9       	bld	r25, 7
    20f4:	08 95       	ret
    20f6:	0e f0       	brts	.+2      	; 0x20fa <__fp_szero+0x10>
    20f8:	a6 c0       	rjmp	.+332    	; 0x2246 <__fp_mpack>
    20fa:	a2 cf       	rjmp	.-188    	; 0x2040 <__fp_nan>
    20fc:	68 94       	set
    20fe:	9a cf       	rjmp	.-204    	; 0x2034 <__fp_inf>

00002100 <log>:
    2100:	d9 df       	rcall	.-78     	; 0x20b4 <__fp_splitA>
    2102:	c8 f3       	brcs	.-14     	; 0x20f6 <__fp_szero+0xc>
    2104:	99 23       	and	r25, r25
    2106:	d1 f3       	breq	.-12     	; 0x20fc <__fp_szero+0x12>
    2108:	c6 f3       	brts	.-16     	; 0x20fa <__fp_szero+0x10>
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	1f 93       	push	r17
    2110:	0f 93       	push	r16
    2112:	ff 92       	push	r15
    2114:	c9 2f       	mov	r28, r25
    2116:	dd 27       	eor	r29, r29
    2118:	88 23       	and	r24, r24
    211a:	2a f0       	brmi	.+10     	; 0x2126 <log+0x26>
    211c:	21 97       	sbiw	r28, 0x01	; 1
    211e:	66 0f       	add	r22, r22
    2120:	77 1f       	adc	r23, r23
    2122:	88 1f       	adc	r24, r24
    2124:	da f7       	brpl	.-10     	; 0x211c <log+0x1c>
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f eb       	ldi	r21, 0xBF	; 191
    212e:	9f e3       	ldi	r25, 0x3F	; 63
    2130:	88 39       	cpi	r24, 0x98	; 152
    2132:	20 f0       	brcs	.+8      	; 0x213c <log+0x3c>
    2134:	80 3e       	cpi	r24, 0xE0	; 224
    2136:	30 f0       	brcs	.+12     	; 0x2144 <log+0x44>
    2138:	21 96       	adiw	r28, 0x01	; 1
    213a:	8f 77       	andi	r24, 0x7F	; 127
    213c:	fa dd       	rcall	.-1036   	; 0x1d32 <__addsf3>
    213e:	e4 ef       	ldi	r30, 0xF4	; 244
    2140:	f1 e0       	ldi	r31, 0x01	; 1
    2142:	03 c0       	rjmp	.+6      	; 0x214a <log+0x4a>
    2144:	f6 dd       	rcall	.-1044   	; 0x1d32 <__addsf3>
    2146:	e1 e2       	ldi	r30, 0x21	; 33
    2148:	f2 e0       	ldi	r31, 0x02	; 2
    214a:	8b d0       	rcall	.+278    	; 0x2262 <__fp_powser>
    214c:	8b 01       	movw	r16, r22
    214e:	be 01       	movw	r22, r28
    2150:	ec 01       	movw	r28, r24
    2152:	fb 2e       	mov	r15, r27
    2154:	6f 57       	subi	r22, 0x7F	; 127
    2156:	71 09       	sbc	r23, r1
    2158:	75 95       	asr	r23
    215a:	77 1f       	adc	r23, r23
    215c:	88 0b       	sbc	r24, r24
    215e:	99 0b       	sbc	r25, r25
    2160:	f0 de       	rcall	.-544    	; 0x1f42 <__floatsisf>
    2162:	28 e1       	ldi	r18, 0x18	; 24
    2164:	32 e7       	ldi	r19, 0x72	; 114
    2166:	41 e3       	ldi	r20, 0x31	; 49
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	16 d0       	rcall	.+44     	; 0x2198 <__mulsf3x>
    216c:	af 2d       	mov	r26, r15
    216e:	98 01       	movw	r18, r16
    2170:	ae 01       	movw	r20, r28
    2172:	ff 90       	pop	r15
    2174:	0f 91       	pop	r16
    2176:	1f 91       	pop	r17
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	eb dd       	rcall	.-1066   	; 0x1d54 <__addsf3x>
    217e:	81 cf       	rjmp	.-254    	; 0x2082 <__fp_round>

00002180 <__mulsf3>:
    2180:	0b d0       	rcall	.+22     	; 0x2198 <__mulsf3x>
    2182:	7f cf       	rjmp	.-258    	; 0x2082 <__fp_round>
    2184:	70 df       	rcall	.-288    	; 0x2066 <__fp_pscA>
    2186:	28 f0       	brcs	.+10     	; 0x2192 <__mulsf3+0x12>
    2188:	75 df       	rcall	.-278    	; 0x2074 <__fp_pscB>
    218a:	18 f0       	brcs	.+6      	; 0x2192 <__mulsf3+0x12>
    218c:	95 23       	and	r25, r21
    218e:	09 f0       	breq	.+2      	; 0x2192 <__mulsf3+0x12>
    2190:	51 cf       	rjmp	.-350    	; 0x2034 <__fp_inf>
    2192:	56 cf       	rjmp	.-340    	; 0x2040 <__fp_nan>
    2194:	11 24       	eor	r1, r1
    2196:	a9 cf       	rjmp	.-174    	; 0x20ea <__fp_szero>

00002198 <__mulsf3x>:
    2198:	85 df       	rcall	.-246    	; 0x20a4 <__fp_split3>
    219a:	a0 f3       	brcs	.-24     	; 0x2184 <__mulsf3+0x4>

0000219c <__mulsf3_pse>:
    219c:	95 9f       	mul	r25, r21
    219e:	d1 f3       	breq	.-12     	; 0x2194 <__mulsf3+0x14>
    21a0:	95 0f       	add	r25, r21
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	55 1f       	adc	r21, r21
    21a6:	62 9f       	mul	r22, r18
    21a8:	f0 01       	movw	r30, r0
    21aa:	72 9f       	mul	r23, r18
    21ac:	bb 27       	eor	r27, r27
    21ae:	f0 0d       	add	r31, r0
    21b0:	b1 1d       	adc	r27, r1
    21b2:	63 9f       	mul	r22, r19
    21b4:	aa 27       	eor	r26, r26
    21b6:	f0 0d       	add	r31, r0
    21b8:	b1 1d       	adc	r27, r1
    21ba:	aa 1f       	adc	r26, r26
    21bc:	64 9f       	mul	r22, r20
    21be:	66 27       	eor	r22, r22
    21c0:	b0 0d       	add	r27, r0
    21c2:	a1 1d       	adc	r26, r1
    21c4:	66 1f       	adc	r22, r22
    21c6:	82 9f       	mul	r24, r18
    21c8:	22 27       	eor	r18, r18
    21ca:	b0 0d       	add	r27, r0
    21cc:	a1 1d       	adc	r26, r1
    21ce:	62 1f       	adc	r22, r18
    21d0:	73 9f       	mul	r23, r19
    21d2:	b0 0d       	add	r27, r0
    21d4:	a1 1d       	adc	r26, r1
    21d6:	62 1f       	adc	r22, r18
    21d8:	83 9f       	mul	r24, r19
    21da:	a0 0d       	add	r26, r0
    21dc:	61 1d       	adc	r22, r1
    21de:	22 1f       	adc	r18, r18
    21e0:	74 9f       	mul	r23, r20
    21e2:	33 27       	eor	r19, r19
    21e4:	a0 0d       	add	r26, r0
    21e6:	61 1d       	adc	r22, r1
    21e8:	23 1f       	adc	r18, r19
    21ea:	84 9f       	mul	r24, r20
    21ec:	60 0d       	add	r22, r0
    21ee:	21 1d       	adc	r18, r1
    21f0:	82 2f       	mov	r24, r18
    21f2:	76 2f       	mov	r23, r22
    21f4:	6a 2f       	mov	r22, r26
    21f6:	11 24       	eor	r1, r1
    21f8:	9f 57       	subi	r25, 0x7F	; 127
    21fa:	50 40       	sbci	r21, 0x00	; 0
    21fc:	8a f0       	brmi	.+34     	; 0x2220 <__mulsf3_pse+0x84>
    21fe:	e1 f0       	breq	.+56     	; 0x2238 <__mulsf3_pse+0x9c>
    2200:	88 23       	and	r24, r24
    2202:	4a f0       	brmi	.+18     	; 0x2216 <__mulsf3_pse+0x7a>
    2204:	ee 0f       	add	r30, r30
    2206:	ff 1f       	adc	r31, r31
    2208:	bb 1f       	adc	r27, r27
    220a:	66 1f       	adc	r22, r22
    220c:	77 1f       	adc	r23, r23
    220e:	88 1f       	adc	r24, r24
    2210:	91 50       	subi	r25, 0x01	; 1
    2212:	50 40       	sbci	r21, 0x00	; 0
    2214:	a9 f7       	brne	.-22     	; 0x2200 <__mulsf3_pse+0x64>
    2216:	9e 3f       	cpi	r25, 0xFE	; 254
    2218:	51 05       	cpc	r21, r1
    221a:	70 f0       	brcs	.+28     	; 0x2238 <__mulsf3_pse+0x9c>
    221c:	0b cf       	rjmp	.-490    	; 0x2034 <__fp_inf>
    221e:	65 cf       	rjmp	.-310    	; 0x20ea <__fp_szero>
    2220:	5f 3f       	cpi	r21, 0xFF	; 255
    2222:	ec f3       	brlt	.-6      	; 0x221e <__mulsf3_pse+0x82>
    2224:	98 3e       	cpi	r25, 0xE8	; 232
    2226:	dc f3       	brlt	.-10     	; 0x221e <__mulsf3_pse+0x82>
    2228:	86 95       	lsr	r24
    222a:	77 95       	ror	r23
    222c:	67 95       	ror	r22
    222e:	b7 95       	ror	r27
    2230:	f7 95       	ror	r31
    2232:	e7 95       	ror	r30
    2234:	9f 5f       	subi	r25, 0xFF	; 255
    2236:	c1 f7       	brne	.-16     	; 0x2228 <__mulsf3_pse+0x8c>
    2238:	fe 2b       	or	r31, r30
    223a:	88 0f       	add	r24, r24
    223c:	91 1d       	adc	r25, r1
    223e:	96 95       	lsr	r25
    2240:	87 95       	ror	r24
    2242:	97 f9       	bld	r25, 7
    2244:	08 95       	ret

00002246 <__fp_mpack>:
    2246:	9f 3f       	cpi	r25, 0xFF	; 255
    2248:	31 f0       	breq	.+12     	; 0x2256 <__fp_mpack_finite+0xc>

0000224a <__fp_mpack_finite>:
    224a:	91 50       	subi	r25, 0x01	; 1
    224c:	20 f4       	brcc	.+8      	; 0x2256 <__fp_mpack_finite+0xc>
    224e:	87 95       	ror	r24
    2250:	77 95       	ror	r23
    2252:	67 95       	ror	r22
    2254:	b7 95       	ror	r27
    2256:	88 0f       	add	r24, r24
    2258:	91 1d       	adc	r25, r1
    225a:	96 95       	lsr	r25
    225c:	87 95       	ror	r24
    225e:	97 f9       	bld	r25, 7
    2260:	08 95       	ret

00002262 <__fp_powser>:
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	1f 93       	push	r17
    2268:	0f 93       	push	r16
    226a:	ff 92       	push	r15
    226c:	ef 92       	push	r14
    226e:	df 92       	push	r13
    2270:	7b 01       	movw	r14, r22
    2272:	8c 01       	movw	r16, r24
    2274:	68 94       	set
    2276:	05 c0       	rjmp	.+10     	; 0x2282 <__fp_powser+0x20>
    2278:	da 2e       	mov	r13, r26
    227a:	ef 01       	movw	r28, r30
    227c:	8d df       	rcall	.-230    	; 0x2198 <__mulsf3x>
    227e:	fe 01       	movw	r30, r28
    2280:	e8 94       	clt
    2282:	a5 91       	lpm	r26, Z+
    2284:	25 91       	lpm	r18, Z+
    2286:	35 91       	lpm	r19, Z+
    2288:	45 91       	lpm	r20, Z+
    228a:	55 91       	lpm	r21, Z+
    228c:	ae f3       	brts	.-22     	; 0x2278 <__fp_powser+0x16>
    228e:	ef 01       	movw	r28, r30
    2290:	61 dd       	rcall	.-1342   	; 0x1d54 <__addsf3x>
    2292:	fe 01       	movw	r30, r28
    2294:	97 01       	movw	r18, r14
    2296:	a8 01       	movw	r20, r16
    2298:	da 94       	dec	r13
    229a:	79 f7       	brne	.-34     	; 0x227a <__fp_powser+0x18>
    229c:	df 90       	pop	r13
    229e:	ef 90       	pop	r14
    22a0:	ff 90       	pop	r15
    22a2:	0f 91       	pop	r16
    22a4:	1f 91       	pop	r17
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <vfprintf>:
    22ac:	2f 92       	push	r2
    22ae:	3f 92       	push	r3
    22b0:	4f 92       	push	r4
    22b2:	5f 92       	push	r5
    22b4:	6f 92       	push	r6
    22b6:	7f 92       	push	r7
    22b8:	8f 92       	push	r8
    22ba:	9f 92       	push	r9
    22bc:	af 92       	push	r10
    22be:	bf 92       	push	r11
    22c0:	cf 92       	push	r12
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	63 97       	sbiw	r28, 0x13	; 19
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	6c 01       	movw	r12, r24
    22dc:	4b 01       	movw	r8, r22
    22de:	2a 01       	movw	r4, r20
    22e0:	fc 01       	movw	r30, r24
    22e2:	16 82       	std	Z+6, r1	; 0x06
    22e4:	17 82       	std	Z+7, r1	; 0x07
    22e6:	83 81       	ldd	r24, Z+3	; 0x03
    22e8:	81 ff       	sbrs	r24, 1
    22ea:	29 c3       	rjmp	.+1618   	; 0x293e <vfprintf+0x692>
    22ec:	ae 01       	movw	r20, r28
    22ee:	4f 5f       	subi	r20, 0xFF	; 255
    22f0:	5f 4f       	sbci	r21, 0xFF	; 255
    22f2:	3a 01       	movw	r6, r20
    22f4:	f6 01       	movw	r30, r12
    22f6:	93 81       	ldd	r25, Z+3	; 0x03
    22f8:	f4 01       	movw	r30, r8
    22fa:	93 fd       	sbrc	r25, 3
    22fc:	85 91       	lpm	r24, Z+
    22fe:	93 ff       	sbrs	r25, 3
    2300:	81 91       	ld	r24, Z+
    2302:	4f 01       	movw	r8, r30
    2304:	88 23       	and	r24, r24
    2306:	09 f4       	brne	.+2      	; 0x230a <vfprintf+0x5e>
    2308:	16 c3       	rjmp	.+1580   	; 0x2936 <vfprintf+0x68a>
    230a:	85 32       	cpi	r24, 0x25	; 37
    230c:	39 f4       	brne	.+14     	; 0x231c <vfprintf+0x70>
    230e:	93 fd       	sbrc	r25, 3
    2310:	85 91       	lpm	r24, Z+
    2312:	93 ff       	sbrs	r25, 3
    2314:	81 91       	ld	r24, Z+
    2316:	4f 01       	movw	r8, r30
    2318:	85 32       	cpi	r24, 0x25	; 37
    231a:	31 f4       	brne	.+12     	; 0x2328 <vfprintf+0x7c>
    231c:	b6 01       	movw	r22, r12
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	80 d5       	rcall	.+2816   	; 0x2e22 <fputc>
    2322:	52 01       	movw	r10, r4
    2324:	25 01       	movw	r4, r10
    2326:	e6 cf       	rjmp	.-52     	; 0x22f4 <vfprintf+0x48>
    2328:	10 e0       	ldi	r17, 0x00	; 0
    232a:	f1 2c       	mov	r15, r1
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	20 32       	cpi	r18, 0x20	; 32
    2330:	a0 f4       	brcc	.+40     	; 0x235a <vfprintf+0xae>
    2332:	8b 32       	cpi	r24, 0x2B	; 43
    2334:	69 f0       	breq	.+26     	; 0x2350 <vfprintf+0xa4>
    2336:	30 f4       	brcc	.+12     	; 0x2344 <vfprintf+0x98>
    2338:	80 32       	cpi	r24, 0x20	; 32
    233a:	59 f0       	breq	.+22     	; 0x2352 <vfprintf+0xa6>
    233c:	83 32       	cpi	r24, 0x23	; 35
    233e:	69 f4       	brne	.+26     	; 0x235a <vfprintf+0xae>
    2340:	20 61       	ori	r18, 0x10	; 16
    2342:	2c c0       	rjmp	.+88     	; 0x239c <vfprintf+0xf0>
    2344:	8d 32       	cpi	r24, 0x2D	; 45
    2346:	39 f0       	breq	.+14     	; 0x2356 <vfprintf+0xaa>
    2348:	80 33       	cpi	r24, 0x30	; 48
    234a:	39 f4       	brne	.+14     	; 0x235a <vfprintf+0xae>
    234c:	21 60       	ori	r18, 0x01	; 1
    234e:	26 c0       	rjmp	.+76     	; 0x239c <vfprintf+0xf0>
    2350:	22 60       	ori	r18, 0x02	; 2
    2352:	24 60       	ori	r18, 0x04	; 4
    2354:	23 c0       	rjmp	.+70     	; 0x239c <vfprintf+0xf0>
    2356:	28 60       	ori	r18, 0x08	; 8
    2358:	21 c0       	rjmp	.+66     	; 0x239c <vfprintf+0xf0>
    235a:	27 fd       	sbrc	r18, 7
    235c:	27 c0       	rjmp	.+78     	; 0x23ac <vfprintf+0x100>
    235e:	30 ed       	ldi	r19, 0xD0	; 208
    2360:	38 0f       	add	r19, r24
    2362:	3a 30       	cpi	r19, 0x0A	; 10
    2364:	78 f4       	brcc	.+30     	; 0x2384 <vfprintf+0xd8>
    2366:	26 ff       	sbrs	r18, 6
    2368:	06 c0       	rjmp	.+12     	; 0x2376 <vfprintf+0xca>
    236a:	fa e0       	ldi	r31, 0x0A	; 10
    236c:	1f 9f       	mul	r17, r31
    236e:	30 0d       	add	r19, r0
    2370:	11 24       	eor	r1, r1
    2372:	13 2f       	mov	r17, r19
    2374:	13 c0       	rjmp	.+38     	; 0x239c <vfprintf+0xf0>
    2376:	4a e0       	ldi	r20, 0x0A	; 10
    2378:	f4 9e       	mul	r15, r20
    237a:	30 0d       	add	r19, r0
    237c:	11 24       	eor	r1, r1
    237e:	f3 2e       	mov	r15, r19
    2380:	20 62       	ori	r18, 0x20	; 32
    2382:	0c c0       	rjmp	.+24     	; 0x239c <vfprintf+0xf0>
    2384:	8e 32       	cpi	r24, 0x2E	; 46
    2386:	21 f4       	brne	.+8      	; 0x2390 <vfprintf+0xe4>
    2388:	26 fd       	sbrc	r18, 6
    238a:	d5 c2       	rjmp	.+1450   	; 0x2936 <vfprintf+0x68a>
    238c:	20 64       	ori	r18, 0x40	; 64
    238e:	06 c0       	rjmp	.+12     	; 0x239c <vfprintf+0xf0>
    2390:	8c 36       	cpi	r24, 0x6C	; 108
    2392:	11 f4       	brne	.+4      	; 0x2398 <vfprintf+0xec>
    2394:	20 68       	ori	r18, 0x80	; 128
    2396:	02 c0       	rjmp	.+4      	; 0x239c <vfprintf+0xf0>
    2398:	88 36       	cpi	r24, 0x68	; 104
    239a:	41 f4       	brne	.+16     	; 0x23ac <vfprintf+0x100>
    239c:	f4 01       	movw	r30, r8
    239e:	93 fd       	sbrc	r25, 3
    23a0:	85 91       	lpm	r24, Z+
    23a2:	93 ff       	sbrs	r25, 3
    23a4:	81 91       	ld	r24, Z+
    23a6:	4f 01       	movw	r8, r30
    23a8:	81 11       	cpse	r24, r1
    23aa:	c1 cf       	rjmp	.-126    	; 0x232e <vfprintf+0x82>
    23ac:	9b eb       	ldi	r25, 0xBB	; 187
    23ae:	98 0f       	add	r25, r24
    23b0:	93 30       	cpi	r25, 0x03	; 3
    23b2:	18 f4       	brcc	.+6      	; 0x23ba <vfprintf+0x10e>
    23b4:	20 61       	ori	r18, 0x10	; 16
    23b6:	80 5e       	subi	r24, 0xE0	; 224
    23b8:	06 c0       	rjmp	.+12     	; 0x23c6 <vfprintf+0x11a>
    23ba:	9b e9       	ldi	r25, 0x9B	; 155
    23bc:	98 0f       	add	r25, r24
    23be:	93 30       	cpi	r25, 0x03	; 3
    23c0:	08 f0       	brcs	.+2      	; 0x23c4 <vfprintf+0x118>
    23c2:	64 c1       	rjmp	.+712    	; 0x268c <vfprintf+0x3e0>
    23c4:	2f 7e       	andi	r18, 0xEF	; 239
    23c6:	26 ff       	sbrs	r18, 6
    23c8:	16 e0       	ldi	r17, 0x06	; 6
    23ca:	2f 73       	andi	r18, 0x3F	; 63
    23cc:	32 2e       	mov	r3, r18
    23ce:	85 36       	cpi	r24, 0x65	; 101
    23d0:	19 f4       	brne	.+6      	; 0x23d8 <vfprintf+0x12c>
    23d2:	20 64       	ori	r18, 0x40	; 64
    23d4:	32 2e       	mov	r3, r18
    23d6:	08 c0       	rjmp	.+16     	; 0x23e8 <vfprintf+0x13c>
    23d8:	86 36       	cpi	r24, 0x66	; 102
    23da:	21 f4       	brne	.+8      	; 0x23e4 <vfprintf+0x138>
    23dc:	f2 2f       	mov	r31, r18
    23de:	f0 68       	ori	r31, 0x80	; 128
    23e0:	3f 2e       	mov	r3, r31
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <vfprintf+0x13c>
    23e4:	11 11       	cpse	r17, r1
    23e6:	11 50       	subi	r17, 0x01	; 1
    23e8:	37 fe       	sbrs	r3, 7
    23ea:	07 c0       	rjmp	.+14     	; 0x23fa <vfprintf+0x14e>
    23ec:	1c 33       	cpi	r17, 0x3C	; 60
    23ee:	50 f4       	brcc	.+20     	; 0x2404 <vfprintf+0x158>
    23f0:	ee 24       	eor	r14, r14
    23f2:	e3 94       	inc	r14
    23f4:	e1 0e       	add	r14, r17
    23f6:	27 e0       	ldi	r18, 0x07	; 7
    23f8:	0b c0       	rjmp	.+22     	; 0x2410 <vfprintf+0x164>
    23fa:	18 30       	cpi	r17, 0x08	; 8
    23fc:	38 f0       	brcs	.+14     	; 0x240c <vfprintf+0x160>
    23fe:	27 e0       	ldi	r18, 0x07	; 7
    2400:	17 e0       	ldi	r17, 0x07	; 7
    2402:	05 c0       	rjmp	.+10     	; 0x240e <vfprintf+0x162>
    2404:	27 e0       	ldi	r18, 0x07	; 7
    2406:	4c e3       	ldi	r20, 0x3C	; 60
    2408:	e4 2e       	mov	r14, r20
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <vfprintf+0x164>
    240c:	21 2f       	mov	r18, r17
    240e:	e1 2c       	mov	r14, r1
    2410:	52 01       	movw	r10, r4
    2412:	44 e0       	ldi	r20, 0x04	; 4
    2414:	a4 0e       	add	r10, r20
    2416:	b1 1c       	adc	r11, r1
    2418:	f2 01       	movw	r30, r4
    241a:	60 81       	ld	r22, Z
    241c:	71 81       	ldd	r23, Z+1	; 0x01
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	93 81       	ldd	r25, Z+3	; 0x03
    2422:	0e 2d       	mov	r16, r14
    2424:	a3 01       	movw	r20, r6
    2426:	c5 d3       	rcall	.+1930   	; 0x2bb2 <__ftoa_engine>
    2428:	2c 01       	movw	r4, r24
    242a:	09 81       	ldd	r16, Y+1	; 0x01
    242c:	00 ff       	sbrs	r16, 0
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <vfprintf+0x188>
    2430:	03 ff       	sbrs	r16, 3
    2432:	07 c0       	rjmp	.+14     	; 0x2442 <vfprintf+0x196>
    2434:	31 fc       	sbrc	r3, 1
    2436:	08 c0       	rjmp	.+16     	; 0x2448 <vfprintf+0x19c>
    2438:	32 fe       	sbrs	r3, 2
    243a:	09 c0       	rjmp	.+18     	; 0x244e <vfprintf+0x1a2>
    243c:	30 e2       	ldi	r19, 0x20	; 32
    243e:	23 2e       	mov	r2, r19
    2440:	07 c0       	rjmp	.+14     	; 0x2450 <vfprintf+0x1a4>
    2442:	2d e2       	ldi	r18, 0x2D	; 45
    2444:	22 2e       	mov	r2, r18
    2446:	04 c0       	rjmp	.+8      	; 0x2450 <vfprintf+0x1a4>
    2448:	9b e2       	ldi	r25, 0x2B	; 43
    244a:	29 2e       	mov	r2, r25
    244c:	01 c0       	rjmp	.+2      	; 0x2450 <vfprintf+0x1a4>
    244e:	21 2c       	mov	r2, r1
    2450:	80 2f       	mov	r24, r16
    2452:	8c 70       	andi	r24, 0x0C	; 12
    2454:	19 f0       	breq	.+6      	; 0x245c <vfprintf+0x1b0>
    2456:	21 10       	cpse	r2, r1
    2458:	51 c2       	rjmp	.+1186   	; 0x28fc <vfprintf+0x650>
    245a:	8d c2       	rjmp	.+1306   	; 0x2976 <vfprintf+0x6ca>
    245c:	37 fe       	sbrs	r3, 7
    245e:	0f c0       	rjmp	.+30     	; 0x247e <vfprintf+0x1d2>
    2460:	e4 0c       	add	r14, r4
    2462:	04 ff       	sbrs	r16, 4
    2464:	04 c0       	rjmp	.+8      	; 0x246e <vfprintf+0x1c2>
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	81 33       	cpi	r24, 0x31	; 49
    246a:	09 f4       	brne	.+2      	; 0x246e <vfprintf+0x1c2>
    246c:	ea 94       	dec	r14
    246e:	1e 14       	cp	r1, r14
    2470:	74 f5       	brge	.+92     	; 0x24ce <vfprintf+0x222>
    2472:	f8 e0       	ldi	r31, 0x08	; 8
    2474:	fe 15       	cp	r31, r14
    2476:	78 f5       	brcc	.+94     	; 0x24d6 <vfprintf+0x22a>
    2478:	88 e0       	ldi	r24, 0x08	; 8
    247a:	e8 2e       	mov	r14, r24
    247c:	2c c0       	rjmp	.+88     	; 0x24d6 <vfprintf+0x22a>
    247e:	36 fc       	sbrc	r3, 6
    2480:	2a c0       	rjmp	.+84     	; 0x24d6 <vfprintf+0x22a>
    2482:	81 2f       	mov	r24, r17
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	84 15       	cp	r24, r4
    2488:	95 05       	cpc	r25, r5
    248a:	9c f0       	brlt	.+38     	; 0x24b2 <vfprintf+0x206>
    248c:	2c ef       	ldi	r18, 0xFC	; 252
    248e:	42 16       	cp	r4, r18
    2490:	2f ef       	ldi	r18, 0xFF	; 255
    2492:	52 06       	cpc	r5, r18
    2494:	74 f0       	brlt	.+28     	; 0x24b2 <vfprintf+0x206>
    2496:	43 2d       	mov	r20, r3
    2498:	40 68       	ori	r20, 0x80	; 128
    249a:	34 2e       	mov	r3, r20
    249c:	0a c0       	rjmp	.+20     	; 0x24b2 <vfprintf+0x206>
    249e:	e2 e0       	ldi	r30, 0x02	; 2
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	ec 0f       	add	r30, r28
    24a4:	fd 1f       	adc	r31, r29
    24a6:	e1 0f       	add	r30, r17
    24a8:	f1 1d       	adc	r31, r1
    24aa:	80 81       	ld	r24, Z
    24ac:	80 33       	cpi	r24, 0x30	; 48
    24ae:	19 f4       	brne	.+6      	; 0x24b6 <vfprintf+0x20a>
    24b0:	11 50       	subi	r17, 0x01	; 1
    24b2:	11 11       	cpse	r17, r1
    24b4:	f4 cf       	rjmp	.-24     	; 0x249e <vfprintf+0x1f2>
    24b6:	37 fe       	sbrs	r3, 7
    24b8:	0e c0       	rjmp	.+28     	; 0x24d6 <vfprintf+0x22a>
    24ba:	ee 24       	eor	r14, r14
    24bc:	e3 94       	inc	r14
    24be:	e1 0e       	add	r14, r17
    24c0:	81 2f       	mov	r24, r17
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	48 16       	cp	r4, r24
    24c6:	59 06       	cpc	r5, r25
    24c8:	2c f4       	brge	.+10     	; 0x24d4 <vfprintf+0x228>
    24ca:	14 19       	sub	r17, r4
    24cc:	04 c0       	rjmp	.+8      	; 0x24d6 <vfprintf+0x22a>
    24ce:	ee 24       	eor	r14, r14
    24d0:	e3 94       	inc	r14
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <vfprintf+0x22a>
    24d4:	10 e0       	ldi	r17, 0x00	; 0
    24d6:	37 fe       	sbrs	r3, 7
    24d8:	06 c0       	rjmp	.+12     	; 0x24e6 <vfprintf+0x23a>
    24da:	14 14       	cp	r1, r4
    24dc:	15 04       	cpc	r1, r5
    24de:	34 f4       	brge	.+12     	; 0x24ec <vfprintf+0x240>
    24e0:	c2 01       	movw	r24, r4
    24e2:	01 96       	adiw	r24, 0x01	; 1
    24e4:	05 c0       	rjmp	.+10     	; 0x24f0 <vfprintf+0x244>
    24e6:	85 e0       	ldi	r24, 0x05	; 5
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <vfprintf+0x244>
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	21 10       	cpse	r2, r1
    24f2:	01 96       	adiw	r24, 0x01	; 1
    24f4:	11 23       	and	r17, r17
    24f6:	31 f0       	breq	.+12     	; 0x2504 <vfprintf+0x258>
    24f8:	21 2f       	mov	r18, r17
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	2f 5f       	subi	r18, 0xFF	; 255
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	82 0f       	add	r24, r18
    2502:	93 1f       	adc	r25, r19
    2504:	2f 2d       	mov	r18, r15
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	82 17       	cp	r24, r18
    250a:	93 07       	cpc	r25, r19
    250c:	14 f4       	brge	.+4      	; 0x2512 <vfprintf+0x266>
    250e:	f8 1a       	sub	r15, r24
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <vfprintf+0x268>
    2512:	f1 2c       	mov	r15, r1
    2514:	83 2d       	mov	r24, r3
    2516:	89 70       	andi	r24, 0x09	; 9
    2518:	41 f4       	brne	.+16     	; 0x252a <vfprintf+0x27e>
    251a:	ff 20       	and	r15, r15
    251c:	31 f0       	breq	.+12     	; 0x252a <vfprintf+0x27e>
    251e:	b6 01       	movw	r22, r12
    2520:	80 e2       	ldi	r24, 0x20	; 32
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	7e d4       	rcall	.+2300   	; 0x2e22 <fputc>
    2526:	fa 94       	dec	r15
    2528:	f8 cf       	rjmp	.-16     	; 0x251a <vfprintf+0x26e>
    252a:	22 20       	and	r2, r2
    252c:	21 f0       	breq	.+8      	; 0x2536 <vfprintf+0x28a>
    252e:	b6 01       	movw	r22, r12
    2530:	82 2d       	mov	r24, r2
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	76 d4       	rcall	.+2284   	; 0x2e22 <fputc>
    2536:	33 fc       	sbrc	r3, 3
    2538:	08 c0       	rjmp	.+16     	; 0x254a <vfprintf+0x29e>
    253a:	ff 20       	and	r15, r15
    253c:	31 f0       	breq	.+12     	; 0x254a <vfprintf+0x29e>
    253e:	b6 01       	movw	r22, r12
    2540:	80 e3       	ldi	r24, 0x30	; 48
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	6e d4       	rcall	.+2268   	; 0x2e22 <fputc>
    2546:	fa 94       	dec	r15
    2548:	f8 cf       	rjmp	.-16     	; 0x253a <vfprintf+0x28e>
    254a:	37 fe       	sbrs	r3, 7
    254c:	58 c0       	rjmp	.+176    	; 0x25fe <vfprintf+0x352>
    254e:	94 2d       	mov	r25, r4
    2550:	85 2d       	mov	r24, r5
    2552:	57 fe       	sbrs	r5, 7
    2554:	02 c0       	rjmp	.+4      	; 0x255a <vfprintf+0x2ae>
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	29 2e       	mov	r2, r25
    255c:	38 2e       	mov	r3, r24
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	a2 01       	movw	r20, r4
    2564:	4e 19       	sub	r20, r14
    2566:	51 09       	sbc	r21, r1
    2568:	4c 87       	std	Y+12, r20	; 0x0c
    256a:	5d 87       	std	Y+13, r21	; 0x0d
    256c:	a2 01       	movw	r20, r4
    256e:	42 19       	sub	r20, r2
    2570:	53 09       	sbc	r21, r3
    2572:	4e 87       	std	Y+14, r20	; 0x0e
    2574:	5f 87       	std	Y+15, r21	; 0x0f
    2576:	61 2f       	mov	r22, r17
    2578:	70 e0       	ldi	r23, 0x00	; 0
    257a:	44 27       	eor	r20, r20
    257c:	55 27       	eor	r21, r21
    257e:	46 1b       	sub	r20, r22
    2580:	57 0b       	sbc	r21, r23
    2582:	48 8b       	std	Y+16, r20	; 0x10
    2584:	59 8b       	std	Y+17, r21	; 0x11
    2586:	5f ef       	ldi	r21, 0xFF	; 255
    2588:	25 16       	cp	r2, r21
    258a:	35 06       	cpc	r3, r21
    258c:	41 f4       	brne	.+16     	; 0x259e <vfprintf+0x2f2>
    258e:	b6 01       	movw	r22, r12
    2590:	8e e2       	ldi	r24, 0x2E	; 46
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	2a 8b       	std	Y+18, r18	; 0x12
    2596:	3b 8b       	std	Y+19, r19	; 0x13
    2598:	44 d4       	rcall	.+2184   	; 0x2e22 <fputc>
    259a:	3b 89       	ldd	r19, Y+19	; 0x13
    259c:	2a 89       	ldd	r18, Y+18	; 0x12
    259e:	42 14       	cp	r4, r2
    25a0:	53 04       	cpc	r5, r3
    25a2:	6c f0       	brlt	.+26     	; 0x25be <vfprintf+0x312>
    25a4:	4c 85       	ldd	r20, Y+12	; 0x0c
    25a6:	5d 85       	ldd	r21, Y+13	; 0x0d
    25a8:	42 15       	cp	r20, r2
    25aa:	53 05       	cpc	r21, r3
    25ac:	44 f4       	brge	.+16     	; 0x25be <vfprintf+0x312>
    25ae:	ee 85       	ldd	r30, Y+14	; 0x0e
    25b0:	ff 85       	ldd	r31, Y+15	; 0x0f
    25b2:	e2 0f       	add	r30, r18
    25b4:	f3 1f       	adc	r31, r19
    25b6:	e6 0d       	add	r30, r6
    25b8:	f7 1d       	adc	r31, r7
    25ba:	81 81       	ldd	r24, Z+1	; 0x01
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <vfprintf+0x314>
    25be:	80 e3       	ldi	r24, 0x30	; 48
    25c0:	51 e0       	ldi	r21, 0x01	; 1
    25c2:	25 1a       	sub	r2, r21
    25c4:	31 08       	sbc	r3, r1
    25c6:	2f 5f       	subi	r18, 0xFF	; 255
    25c8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ca:	48 89       	ldd	r20, Y+16	; 0x10
    25cc:	59 89       	ldd	r21, Y+17	; 0x11
    25ce:	24 16       	cp	r2, r20
    25d0:	35 06       	cpc	r3, r21
    25d2:	44 f0       	brlt	.+16     	; 0x25e4 <vfprintf+0x338>
    25d4:	b6 01       	movw	r22, r12
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	2a 8b       	std	Y+18, r18	; 0x12
    25da:	3b 8b       	std	Y+19, r19	; 0x13
    25dc:	22 d4       	rcall	.+2116   	; 0x2e22 <fputc>
    25de:	2a 89       	ldd	r18, Y+18	; 0x12
    25e0:	3b 89       	ldd	r19, Y+19	; 0x13
    25e2:	d1 cf       	rjmp	.-94     	; 0x2586 <vfprintf+0x2da>
    25e4:	24 14       	cp	r2, r4
    25e6:	35 04       	cpc	r3, r5
    25e8:	39 f4       	brne	.+14     	; 0x25f8 <vfprintf+0x34c>
    25ea:	9a 81       	ldd	r25, Y+2	; 0x02
    25ec:	96 33       	cpi	r25, 0x36	; 54
    25ee:	18 f4       	brcc	.+6      	; 0x25f6 <vfprintf+0x34a>
    25f0:	95 33       	cpi	r25, 0x35	; 53
    25f2:	11 f4       	brne	.+4      	; 0x25f8 <vfprintf+0x34c>
    25f4:	04 ff       	sbrs	r16, 4
    25f6:	81 e3       	ldi	r24, 0x31	; 49
    25f8:	b6 01       	movw	r22, r12
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	45 c0       	rjmp	.+138    	; 0x2688 <vfprintf+0x3dc>
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	81 33       	cpi	r24, 0x31	; 49
    2602:	09 f0       	breq	.+2      	; 0x2606 <vfprintf+0x35a>
    2604:	0f 7e       	andi	r16, 0xEF	; 239
    2606:	b6 01       	movw	r22, r12
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	0b d4       	rcall	.+2070   	; 0x2e22 <fputc>
    260c:	11 11       	cpse	r17, r1
    260e:	05 c0       	rjmp	.+10     	; 0x261a <vfprintf+0x36e>
    2610:	34 fc       	sbrc	r3, 4
    2612:	16 c0       	rjmp	.+44     	; 0x2640 <vfprintf+0x394>
    2614:	85 e6       	ldi	r24, 0x65	; 101
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	15 c0       	rjmp	.+42     	; 0x2644 <vfprintf+0x398>
    261a:	b6 01       	movw	r22, r12
    261c:	8e e2       	ldi	r24, 0x2E	; 46
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	00 d4       	rcall	.+2048   	; 0x2e22 <fputc>
    2622:	82 e0       	ldi	r24, 0x02	; 2
    2624:	ee 24       	eor	r14, r14
    2626:	e3 94       	inc	r14
    2628:	e8 0e       	add	r14, r24
    262a:	f3 01       	movw	r30, r6
    262c:	e8 0f       	add	r30, r24
    262e:	f1 1d       	adc	r31, r1
    2630:	80 81       	ld	r24, Z
    2632:	b6 01       	movw	r22, r12
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	f5 d3       	rcall	.+2026   	; 0x2e22 <fputc>
    2638:	11 50       	subi	r17, 0x01	; 1
    263a:	8e 2d       	mov	r24, r14
    263c:	99 f7       	brne	.-26     	; 0x2624 <vfprintf+0x378>
    263e:	e8 cf       	rjmp	.-48     	; 0x2610 <vfprintf+0x364>
    2640:	85 e4       	ldi	r24, 0x45	; 69
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	b6 01       	movw	r22, r12
    2646:	ed d3       	rcall	.+2010   	; 0x2e22 <fputc>
    2648:	57 fc       	sbrc	r5, 7
    264a:	05 c0       	rjmp	.+10     	; 0x2656 <vfprintf+0x3aa>
    264c:	41 14       	cp	r4, r1
    264e:	51 04       	cpc	r5, r1
    2650:	39 f4       	brne	.+14     	; 0x2660 <vfprintf+0x3b4>
    2652:	04 ff       	sbrs	r16, 4
    2654:	05 c0       	rjmp	.+10     	; 0x2660 <vfprintf+0x3b4>
    2656:	51 94       	neg	r5
    2658:	41 94       	neg	r4
    265a:	51 08       	sbc	r5, r1
    265c:	8d e2       	ldi	r24, 0x2D	; 45
    265e:	01 c0       	rjmp	.+2      	; 0x2662 <vfprintf+0x3b6>
    2660:	8b e2       	ldi	r24, 0x2B	; 43
    2662:	b6 01       	movw	r22, r12
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	dd d3       	rcall	.+1978   	; 0x2e22 <fputc>
    2668:	80 e3       	ldi	r24, 0x30	; 48
    266a:	9a e0       	ldi	r25, 0x0A	; 10
    266c:	49 16       	cp	r4, r25
    266e:	51 04       	cpc	r5, r1
    2670:	2c f0       	brlt	.+10     	; 0x267c <vfprintf+0x3d0>
    2672:	8f 5f       	subi	r24, 0xFF	; 255
    2674:	5a e0       	ldi	r21, 0x0A	; 10
    2676:	45 1a       	sub	r4, r21
    2678:	51 08       	sbc	r5, r1
    267a:	f7 cf       	rjmp	.-18     	; 0x266a <vfprintf+0x3be>
    267c:	b6 01       	movw	r22, r12
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	d0 d3       	rcall	.+1952   	; 0x2e22 <fputc>
    2682:	b6 01       	movw	r22, r12
    2684:	c2 01       	movw	r24, r4
    2686:	c0 96       	adiw	r24, 0x30	; 48
    2688:	cc d3       	rcall	.+1944   	; 0x2e22 <fputc>
    268a:	4c c1       	rjmp	.+664    	; 0x2924 <vfprintf+0x678>
    268c:	83 36       	cpi	r24, 0x63	; 99
    268e:	31 f0       	breq	.+12     	; 0x269c <vfprintf+0x3f0>
    2690:	83 37       	cpi	r24, 0x73	; 115
    2692:	79 f0       	breq	.+30     	; 0x26b2 <vfprintf+0x406>
    2694:	83 35       	cpi	r24, 0x53	; 83
    2696:	09 f0       	breq	.+2      	; 0x269a <vfprintf+0x3ee>
    2698:	54 c0       	rjmp	.+168    	; 0x2742 <vfprintf+0x496>
    269a:	20 c0       	rjmp	.+64     	; 0x26dc <vfprintf+0x430>
    269c:	52 01       	movw	r10, r4
    269e:	e2 e0       	ldi	r30, 0x02	; 2
    26a0:	ae 0e       	add	r10, r30
    26a2:	b1 1c       	adc	r11, r1
    26a4:	f2 01       	movw	r30, r4
    26a6:	80 81       	ld	r24, Z
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	01 e0       	ldi	r16, 0x01	; 1
    26ac:	10 e0       	ldi	r17, 0x00	; 0
    26ae:	23 01       	movw	r4, r6
    26b0:	13 c0       	rjmp	.+38     	; 0x26d8 <vfprintf+0x42c>
    26b2:	52 01       	movw	r10, r4
    26b4:	f2 e0       	ldi	r31, 0x02	; 2
    26b6:	af 0e       	add	r10, r31
    26b8:	b1 1c       	adc	r11, r1
    26ba:	f2 01       	movw	r30, r4
    26bc:	40 80       	ld	r4, Z
    26be:	51 80       	ldd	r5, Z+1	; 0x01
    26c0:	26 ff       	sbrs	r18, 6
    26c2:	03 c0       	rjmp	.+6      	; 0x26ca <vfprintf+0x41e>
    26c4:	61 2f       	mov	r22, r17
    26c6:	70 e0       	ldi	r23, 0x00	; 0
    26c8:	02 c0       	rjmp	.+4      	; 0x26ce <vfprintf+0x422>
    26ca:	6f ef       	ldi	r22, 0xFF	; 255
    26cc:	7f ef       	ldi	r23, 0xFF	; 255
    26ce:	c2 01       	movw	r24, r4
    26d0:	2a 8b       	std	Y+18, r18	; 0x12
    26d2:	52 d3       	rcall	.+1700   	; 0x2d78 <strnlen>
    26d4:	8c 01       	movw	r16, r24
    26d6:	2a 89       	ldd	r18, Y+18	; 0x12
    26d8:	2f 77       	andi	r18, 0x7F	; 127
    26da:	14 c0       	rjmp	.+40     	; 0x2704 <vfprintf+0x458>
    26dc:	52 01       	movw	r10, r4
    26de:	f2 e0       	ldi	r31, 0x02	; 2
    26e0:	af 0e       	add	r10, r31
    26e2:	b1 1c       	adc	r11, r1
    26e4:	f2 01       	movw	r30, r4
    26e6:	40 80       	ld	r4, Z
    26e8:	51 80       	ldd	r5, Z+1	; 0x01
    26ea:	26 ff       	sbrs	r18, 6
    26ec:	03 c0       	rjmp	.+6      	; 0x26f4 <vfprintf+0x448>
    26ee:	61 2f       	mov	r22, r17
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <vfprintf+0x44c>
    26f4:	6f ef       	ldi	r22, 0xFF	; 255
    26f6:	7f ef       	ldi	r23, 0xFF	; 255
    26f8:	c2 01       	movw	r24, r4
    26fa:	2a 8b       	std	Y+18, r18	; 0x12
    26fc:	32 d3       	rcall	.+1636   	; 0x2d62 <strnlen_P>
    26fe:	8c 01       	movw	r16, r24
    2700:	2a 89       	ldd	r18, Y+18	; 0x12
    2702:	20 68       	ori	r18, 0x80	; 128
    2704:	32 2e       	mov	r3, r18
    2706:	23 fd       	sbrc	r18, 3
    2708:	18 c0       	rjmp	.+48     	; 0x273a <vfprintf+0x48e>
    270a:	8f 2d       	mov	r24, r15
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	08 17       	cp	r16, r24
    2710:	19 07       	cpc	r17, r25
    2712:	98 f4       	brcc	.+38     	; 0x273a <vfprintf+0x48e>
    2714:	b6 01       	movw	r22, r12
    2716:	80 e2       	ldi	r24, 0x20	; 32
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	83 d3       	rcall	.+1798   	; 0x2e22 <fputc>
    271c:	fa 94       	dec	r15
    271e:	f5 cf       	rjmp	.-22     	; 0x270a <vfprintf+0x45e>
    2720:	f2 01       	movw	r30, r4
    2722:	37 fc       	sbrc	r3, 7
    2724:	85 91       	lpm	r24, Z+
    2726:	37 fe       	sbrs	r3, 7
    2728:	81 91       	ld	r24, Z+
    272a:	2f 01       	movw	r4, r30
    272c:	b6 01       	movw	r22, r12
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	78 d3       	rcall	.+1776   	; 0x2e22 <fputc>
    2732:	f1 10       	cpse	r15, r1
    2734:	fa 94       	dec	r15
    2736:	01 50       	subi	r16, 0x01	; 1
    2738:	11 09       	sbc	r17, r1
    273a:	01 15       	cp	r16, r1
    273c:	11 05       	cpc	r17, r1
    273e:	81 f7       	brne	.-32     	; 0x2720 <vfprintf+0x474>
    2740:	f1 c0       	rjmp	.+482    	; 0x2924 <vfprintf+0x678>
    2742:	84 36       	cpi	r24, 0x64	; 100
    2744:	11 f0       	breq	.+4      	; 0x274a <vfprintf+0x49e>
    2746:	89 36       	cpi	r24, 0x69	; 105
    2748:	51 f5       	brne	.+84     	; 0x279e <vfprintf+0x4f2>
    274a:	52 01       	movw	r10, r4
    274c:	27 ff       	sbrs	r18, 7
    274e:	09 c0       	rjmp	.+18     	; 0x2762 <vfprintf+0x4b6>
    2750:	f4 e0       	ldi	r31, 0x04	; 4
    2752:	af 0e       	add	r10, r31
    2754:	b1 1c       	adc	r11, r1
    2756:	f2 01       	movw	r30, r4
    2758:	60 81       	ld	r22, Z
    275a:	71 81       	ldd	r23, Z+1	; 0x01
    275c:	82 81       	ldd	r24, Z+2	; 0x02
    275e:	93 81       	ldd	r25, Z+3	; 0x03
    2760:	0a c0       	rjmp	.+20     	; 0x2776 <vfprintf+0x4ca>
    2762:	f2 e0       	ldi	r31, 0x02	; 2
    2764:	af 0e       	add	r10, r31
    2766:	b1 1c       	adc	r11, r1
    2768:	f2 01       	movw	r30, r4
    276a:	60 81       	ld	r22, Z
    276c:	71 81       	ldd	r23, Z+1	; 0x01
    276e:	07 2e       	mov	r0, r23
    2770:	00 0c       	add	r0, r0
    2772:	88 0b       	sbc	r24, r24
    2774:	99 0b       	sbc	r25, r25
    2776:	2f 76       	andi	r18, 0x6F	; 111
    2778:	32 2e       	mov	r3, r18
    277a:	97 ff       	sbrs	r25, 7
    277c:	09 c0       	rjmp	.+18     	; 0x2790 <vfprintf+0x4e4>
    277e:	90 95       	com	r25
    2780:	80 95       	com	r24
    2782:	70 95       	com	r23
    2784:	61 95       	neg	r22
    2786:	7f 4f       	sbci	r23, 0xFF	; 255
    2788:	8f 4f       	sbci	r24, 0xFF	; 255
    278a:	9f 4f       	sbci	r25, 0xFF	; 255
    278c:	20 68       	ori	r18, 0x80	; 128
    278e:	32 2e       	mov	r3, r18
    2790:	2a e0       	ldi	r18, 0x0A	; 10
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	a3 01       	movw	r20, r6
    2796:	c0 d3       	rcall	.+1920   	; 0x2f18 <__ultoa_invert>
    2798:	e8 2e       	mov	r14, r24
    279a:	e6 18       	sub	r14, r6
    279c:	3e c0       	rjmp	.+124    	; 0x281a <vfprintf+0x56e>
    279e:	02 2f       	mov	r16, r18
    27a0:	85 37       	cpi	r24, 0x75	; 117
    27a2:	21 f4       	brne	.+8      	; 0x27ac <vfprintf+0x500>
    27a4:	0f 7e       	andi	r16, 0xEF	; 239
    27a6:	2a e0       	ldi	r18, 0x0A	; 10
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	1d c0       	rjmp	.+58     	; 0x27e6 <vfprintf+0x53a>
    27ac:	09 7f       	andi	r16, 0xF9	; 249
    27ae:	8f 36       	cpi	r24, 0x6F	; 111
    27b0:	91 f0       	breq	.+36     	; 0x27d6 <vfprintf+0x52a>
    27b2:	18 f4       	brcc	.+6      	; 0x27ba <vfprintf+0x50e>
    27b4:	88 35       	cpi	r24, 0x58	; 88
    27b6:	59 f0       	breq	.+22     	; 0x27ce <vfprintf+0x522>
    27b8:	be c0       	rjmp	.+380    	; 0x2936 <vfprintf+0x68a>
    27ba:	80 37       	cpi	r24, 0x70	; 112
    27bc:	19 f0       	breq	.+6      	; 0x27c4 <vfprintf+0x518>
    27be:	88 37       	cpi	r24, 0x78	; 120
    27c0:	11 f0       	breq	.+4      	; 0x27c6 <vfprintf+0x51a>
    27c2:	b9 c0       	rjmp	.+370    	; 0x2936 <vfprintf+0x68a>
    27c4:	00 61       	ori	r16, 0x10	; 16
    27c6:	04 ff       	sbrs	r16, 4
    27c8:	09 c0       	rjmp	.+18     	; 0x27dc <vfprintf+0x530>
    27ca:	04 60       	ori	r16, 0x04	; 4
    27cc:	07 c0       	rjmp	.+14     	; 0x27dc <vfprintf+0x530>
    27ce:	24 ff       	sbrs	r18, 4
    27d0:	08 c0       	rjmp	.+16     	; 0x27e2 <vfprintf+0x536>
    27d2:	06 60       	ori	r16, 0x06	; 6
    27d4:	06 c0       	rjmp	.+12     	; 0x27e2 <vfprintf+0x536>
    27d6:	28 e0       	ldi	r18, 0x08	; 8
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	05 c0       	rjmp	.+10     	; 0x27e6 <vfprintf+0x53a>
    27dc:	20 e1       	ldi	r18, 0x10	; 16
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	02 c0       	rjmp	.+4      	; 0x27e6 <vfprintf+0x53a>
    27e2:	20 e1       	ldi	r18, 0x10	; 16
    27e4:	32 e0       	ldi	r19, 0x02	; 2
    27e6:	52 01       	movw	r10, r4
    27e8:	07 ff       	sbrs	r16, 7
    27ea:	09 c0       	rjmp	.+18     	; 0x27fe <vfprintf+0x552>
    27ec:	f4 e0       	ldi	r31, 0x04	; 4
    27ee:	af 0e       	add	r10, r31
    27f0:	b1 1c       	adc	r11, r1
    27f2:	f2 01       	movw	r30, r4
    27f4:	60 81       	ld	r22, Z
    27f6:	71 81       	ldd	r23, Z+1	; 0x01
    27f8:	82 81       	ldd	r24, Z+2	; 0x02
    27fa:	93 81       	ldd	r25, Z+3	; 0x03
    27fc:	08 c0       	rjmp	.+16     	; 0x280e <vfprintf+0x562>
    27fe:	f2 e0       	ldi	r31, 0x02	; 2
    2800:	af 0e       	add	r10, r31
    2802:	b1 1c       	adc	r11, r1
    2804:	f2 01       	movw	r30, r4
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	a3 01       	movw	r20, r6
    2810:	83 d3       	rcall	.+1798   	; 0x2f18 <__ultoa_invert>
    2812:	e8 2e       	mov	r14, r24
    2814:	e6 18       	sub	r14, r6
    2816:	0f 77       	andi	r16, 0x7F	; 127
    2818:	30 2e       	mov	r3, r16
    281a:	36 fe       	sbrs	r3, 6
    281c:	0b c0       	rjmp	.+22     	; 0x2834 <vfprintf+0x588>
    281e:	33 2d       	mov	r19, r3
    2820:	3e 7f       	andi	r19, 0xFE	; 254
    2822:	e1 16       	cp	r14, r17
    2824:	50 f4       	brcc	.+20     	; 0x283a <vfprintf+0x58e>
    2826:	34 fe       	sbrs	r3, 4
    2828:	0a c0       	rjmp	.+20     	; 0x283e <vfprintf+0x592>
    282a:	32 fc       	sbrc	r3, 2
    282c:	08 c0       	rjmp	.+16     	; 0x283e <vfprintf+0x592>
    282e:	33 2d       	mov	r19, r3
    2830:	3e 7e       	andi	r19, 0xEE	; 238
    2832:	05 c0       	rjmp	.+10     	; 0x283e <vfprintf+0x592>
    2834:	0e 2d       	mov	r16, r14
    2836:	33 2d       	mov	r19, r3
    2838:	03 c0       	rjmp	.+6      	; 0x2840 <vfprintf+0x594>
    283a:	0e 2d       	mov	r16, r14
    283c:	01 c0       	rjmp	.+2      	; 0x2840 <vfprintf+0x594>
    283e:	01 2f       	mov	r16, r17
    2840:	34 ff       	sbrs	r19, 4
    2842:	0c c0       	rjmp	.+24     	; 0x285c <vfprintf+0x5b0>
    2844:	fe 01       	movw	r30, r28
    2846:	ee 0d       	add	r30, r14
    2848:	f1 1d       	adc	r31, r1
    284a:	80 81       	ld	r24, Z
    284c:	80 33       	cpi	r24, 0x30	; 48
    284e:	11 f4       	brne	.+4      	; 0x2854 <vfprintf+0x5a8>
    2850:	39 7e       	andi	r19, 0xE9	; 233
    2852:	08 c0       	rjmp	.+16     	; 0x2864 <vfprintf+0x5b8>
    2854:	32 ff       	sbrs	r19, 2
    2856:	05 c0       	rjmp	.+10     	; 0x2862 <vfprintf+0x5b6>
    2858:	0e 5f       	subi	r16, 0xFE	; 254
    285a:	04 c0       	rjmp	.+8      	; 0x2864 <vfprintf+0x5b8>
    285c:	83 2f       	mov	r24, r19
    285e:	86 78       	andi	r24, 0x86	; 134
    2860:	09 f0       	breq	.+2      	; 0x2864 <vfprintf+0x5b8>
    2862:	0f 5f       	subi	r16, 0xFF	; 255
    2864:	33 fd       	sbrc	r19, 3
    2866:	12 c0       	rjmp	.+36     	; 0x288c <vfprintf+0x5e0>
    2868:	30 ff       	sbrs	r19, 0
    286a:	06 c0       	rjmp	.+12     	; 0x2878 <vfprintf+0x5cc>
    286c:	1e 2d       	mov	r17, r14
    286e:	0f 15       	cp	r16, r15
    2870:	18 f4       	brcc	.+6      	; 0x2878 <vfprintf+0x5cc>
    2872:	1f 0d       	add	r17, r15
    2874:	10 1b       	sub	r17, r16
    2876:	0f 2d       	mov	r16, r15
    2878:	0f 15       	cp	r16, r15
    287a:	60 f4       	brcc	.+24     	; 0x2894 <vfprintf+0x5e8>
    287c:	b6 01       	movw	r22, r12
    287e:	80 e2       	ldi	r24, 0x20	; 32
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	3b 8b       	std	Y+19, r19	; 0x13
    2884:	ce d2       	rcall	.+1436   	; 0x2e22 <fputc>
    2886:	0f 5f       	subi	r16, 0xFF	; 255
    2888:	3b 89       	ldd	r19, Y+19	; 0x13
    288a:	f6 cf       	rjmp	.-20     	; 0x2878 <vfprintf+0x5cc>
    288c:	0f 15       	cp	r16, r15
    288e:	10 f4       	brcc	.+4      	; 0x2894 <vfprintf+0x5e8>
    2890:	f0 1a       	sub	r15, r16
    2892:	01 c0       	rjmp	.+2      	; 0x2896 <vfprintf+0x5ea>
    2894:	f1 2c       	mov	r15, r1
    2896:	34 ff       	sbrs	r19, 4
    2898:	11 c0       	rjmp	.+34     	; 0x28bc <vfprintf+0x610>
    289a:	b6 01       	movw	r22, r12
    289c:	80 e3       	ldi	r24, 0x30	; 48
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	3b 8b       	std	Y+19, r19	; 0x13
    28a2:	bf d2       	rcall	.+1406   	; 0x2e22 <fputc>
    28a4:	3b 89       	ldd	r19, Y+19	; 0x13
    28a6:	32 ff       	sbrs	r19, 2
    28a8:	16 c0       	rjmp	.+44     	; 0x28d6 <vfprintf+0x62a>
    28aa:	31 fd       	sbrc	r19, 1
    28ac:	03 c0       	rjmp	.+6      	; 0x28b4 <vfprintf+0x608>
    28ae:	88 e7       	ldi	r24, 0x78	; 120
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <vfprintf+0x60c>
    28b4:	88 e5       	ldi	r24, 0x58	; 88
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	b6 01       	movw	r22, r12
    28ba:	0c c0       	rjmp	.+24     	; 0x28d4 <vfprintf+0x628>
    28bc:	83 2f       	mov	r24, r19
    28be:	86 78       	andi	r24, 0x86	; 134
    28c0:	51 f0       	breq	.+20     	; 0x28d6 <vfprintf+0x62a>
    28c2:	31 ff       	sbrs	r19, 1
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <vfprintf+0x61e>
    28c6:	8b e2       	ldi	r24, 0x2B	; 43
    28c8:	01 c0       	rjmp	.+2      	; 0x28cc <vfprintf+0x620>
    28ca:	80 e2       	ldi	r24, 0x20	; 32
    28cc:	37 fd       	sbrc	r19, 7
    28ce:	8d e2       	ldi	r24, 0x2D	; 45
    28d0:	b6 01       	movw	r22, r12
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a6 d2       	rcall	.+1356   	; 0x2e22 <fputc>
    28d6:	e1 16       	cp	r14, r17
    28d8:	30 f4       	brcc	.+12     	; 0x28e6 <vfprintf+0x63a>
    28da:	b6 01       	movw	r22, r12
    28dc:	80 e3       	ldi	r24, 0x30	; 48
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	a0 d2       	rcall	.+1344   	; 0x2e22 <fputc>
    28e2:	11 50       	subi	r17, 0x01	; 1
    28e4:	f8 cf       	rjmp	.-16     	; 0x28d6 <vfprintf+0x62a>
    28e6:	ea 94       	dec	r14
    28e8:	f3 01       	movw	r30, r6
    28ea:	ee 0d       	add	r30, r14
    28ec:	f1 1d       	adc	r31, r1
    28ee:	80 81       	ld	r24, Z
    28f0:	b6 01       	movw	r22, r12
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	96 d2       	rcall	.+1324   	; 0x2e22 <fputc>
    28f6:	e1 10       	cpse	r14, r1
    28f8:	f6 cf       	rjmp	.-20     	; 0x28e6 <vfprintf+0x63a>
    28fa:	14 c0       	rjmp	.+40     	; 0x2924 <vfprintf+0x678>
    28fc:	f4 e0       	ldi	r31, 0x04	; 4
    28fe:	ff 15       	cp	r31, r15
    2900:	48 f5       	brcc	.+82     	; 0x2954 <vfprintf+0x6a8>
    2902:	84 e0       	ldi	r24, 0x04	; 4
    2904:	f8 1a       	sub	r15, r24
    2906:	33 fe       	sbrs	r3, 3
    2908:	1d c0       	rjmp	.+58     	; 0x2944 <vfprintf+0x698>
    290a:	21 10       	cpse	r2, r1
    290c:	24 c0       	rjmp	.+72     	; 0x2956 <vfprintf+0x6aa>
    290e:	03 ff       	sbrs	r16, 3
    2910:	27 c0       	rjmp	.+78     	; 0x2960 <vfprintf+0x6b4>
    2912:	0e e4       	ldi	r16, 0x4E	; 78
    2914:	12 e0       	ldi	r17, 0x02	; 2
    2916:	f3 2d       	mov	r31, r3
    2918:	f0 71       	andi	r31, 0x10	; 16
    291a:	3f 2e       	mov	r3, r31
    291c:	f8 01       	movw	r30, r16
    291e:	84 91       	lpm	r24, Z
    2920:	81 11       	cpse	r24, r1
    2922:	21 c0       	rjmp	.+66     	; 0x2966 <vfprintf+0x6ba>
    2924:	ff 20       	and	r15, r15
    2926:	09 f4       	brne	.+2      	; 0x292a <vfprintf+0x67e>
    2928:	fd cc       	rjmp	.-1542   	; 0x2324 <vfprintf+0x78>
    292a:	b6 01       	movw	r22, r12
    292c:	80 e2       	ldi	r24, 0x20	; 32
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	78 d2       	rcall	.+1264   	; 0x2e22 <fputc>
    2932:	fa 94       	dec	r15
    2934:	f7 cf       	rjmp	.-18     	; 0x2924 <vfprintf+0x678>
    2936:	f6 01       	movw	r30, r12
    2938:	86 81       	ldd	r24, Z+6	; 0x06
    293a:	97 81       	ldd	r25, Z+7	; 0x07
    293c:	23 c0       	rjmp	.+70     	; 0x2984 <vfprintf+0x6d8>
    293e:	8f ef       	ldi	r24, 0xFF	; 255
    2940:	9f ef       	ldi	r25, 0xFF	; 255
    2942:	20 c0       	rjmp	.+64     	; 0x2984 <vfprintf+0x6d8>
    2944:	b6 01       	movw	r22, r12
    2946:	80 e2       	ldi	r24, 0x20	; 32
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	6b d2       	rcall	.+1238   	; 0x2e22 <fputc>
    294c:	fa 94       	dec	r15
    294e:	f1 10       	cpse	r15, r1
    2950:	f9 cf       	rjmp	.-14     	; 0x2944 <vfprintf+0x698>
    2952:	db cf       	rjmp	.-74     	; 0x290a <vfprintf+0x65e>
    2954:	f1 2c       	mov	r15, r1
    2956:	b6 01       	movw	r22, r12
    2958:	82 2d       	mov	r24, r2
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	62 d2       	rcall	.+1220   	; 0x2e22 <fputc>
    295e:	d7 cf       	rjmp	.-82     	; 0x290e <vfprintf+0x662>
    2960:	02 e5       	ldi	r16, 0x52	; 82
    2962:	12 e0       	ldi	r17, 0x02	; 2
    2964:	d8 cf       	rjmp	.-80     	; 0x2916 <vfprintf+0x66a>
    2966:	31 10       	cpse	r3, r1
    2968:	80 52       	subi	r24, 0x20	; 32
    296a:	b6 01       	movw	r22, r12
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	59 d2       	rcall	.+1202   	; 0x2e22 <fputc>
    2970:	0f 5f       	subi	r16, 0xFF	; 255
    2972:	1f 4f       	sbci	r17, 0xFF	; 255
    2974:	d3 cf       	rjmp	.-90     	; 0x291c <vfprintf+0x670>
    2976:	23 e0       	ldi	r18, 0x03	; 3
    2978:	2f 15       	cp	r18, r15
    297a:	10 f4       	brcc	.+4      	; 0x2980 <vfprintf+0x6d4>
    297c:	83 e0       	ldi	r24, 0x03	; 3
    297e:	c2 cf       	rjmp	.-124    	; 0x2904 <vfprintf+0x658>
    2980:	f1 2c       	mov	r15, r1
    2982:	c5 cf       	rjmp	.-118    	; 0x290e <vfprintf+0x662>
    2984:	63 96       	adiw	r28, 0x13	; 19
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	1f 91       	pop	r17
    2990:	0f 91       	pop	r16
    2992:	ff 90       	pop	r15
    2994:	ef 90       	pop	r14
    2996:	df 90       	pop	r13
    2998:	cf 90       	pop	r12
    299a:	bf 90       	pop	r11
    299c:	af 90       	pop	r10
    299e:	9f 90       	pop	r9
    29a0:	8f 90       	pop	r8
    29a2:	7f 90       	pop	r7
    29a4:	6f 90       	pop	r6
    29a6:	5f 90       	pop	r5
    29a8:	4f 90       	pop	r4
    29aa:	3f 90       	pop	r3
    29ac:	2f 90       	pop	r2
    29ae:	08 95       	ret

000029b0 <__udivmodhi4>:
    29b0:	aa 1b       	sub	r26, r26
    29b2:	bb 1b       	sub	r27, r27
    29b4:	51 e1       	ldi	r21, 0x11	; 17
    29b6:	07 c0       	rjmp	.+14     	; 0x29c6 <__udivmodhi4_ep>

000029b8 <__udivmodhi4_loop>:
    29b8:	aa 1f       	adc	r26, r26
    29ba:	bb 1f       	adc	r27, r27
    29bc:	a6 17       	cp	r26, r22
    29be:	b7 07       	cpc	r27, r23
    29c0:	10 f0       	brcs	.+4      	; 0x29c6 <__udivmodhi4_ep>
    29c2:	a6 1b       	sub	r26, r22
    29c4:	b7 0b       	sbc	r27, r23

000029c6 <__udivmodhi4_ep>:
    29c6:	88 1f       	adc	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	5a 95       	dec	r21
    29cc:	a9 f7       	brne	.-22     	; 0x29b8 <__udivmodhi4_loop>
    29ce:	80 95       	com	r24
    29d0:	90 95       	com	r25
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	08 95       	ret

000029d8 <__udivmodsi4>:
    29d8:	a1 e2       	ldi	r26, 0x21	; 33
    29da:	1a 2e       	mov	r1, r26
    29dc:	aa 1b       	sub	r26, r26
    29de:	bb 1b       	sub	r27, r27
    29e0:	fd 01       	movw	r30, r26
    29e2:	0d c0       	rjmp	.+26     	; 0x29fe <__udivmodsi4_ep>

000029e4 <__udivmodsi4_loop>:
    29e4:	aa 1f       	adc	r26, r26
    29e6:	bb 1f       	adc	r27, r27
    29e8:	ee 1f       	adc	r30, r30
    29ea:	ff 1f       	adc	r31, r31
    29ec:	a2 17       	cp	r26, r18
    29ee:	b3 07       	cpc	r27, r19
    29f0:	e4 07       	cpc	r30, r20
    29f2:	f5 07       	cpc	r31, r21
    29f4:	20 f0       	brcs	.+8      	; 0x29fe <__udivmodsi4_ep>
    29f6:	a2 1b       	sub	r26, r18
    29f8:	b3 0b       	sbc	r27, r19
    29fa:	e4 0b       	sbc	r30, r20
    29fc:	f5 0b       	sbc	r31, r21

000029fe <__udivmodsi4_ep>:
    29fe:	66 1f       	adc	r22, r22
    2a00:	77 1f       	adc	r23, r23
    2a02:	88 1f       	adc	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	1a 94       	dec	r1
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <__udivmodsi4_loop>
    2a0a:	60 95       	com	r22
    2a0c:	70 95       	com	r23
    2a0e:	80 95       	com	r24
    2a10:	90 95       	com	r25
    2a12:	9b 01       	movw	r18, r22
    2a14:	ac 01       	movw	r20, r24
    2a16:	bd 01       	movw	r22, r26
    2a18:	cf 01       	movw	r24, r30
    2a1a:	08 95       	ret

00002a1c <__muluhisi3>:
    2a1c:	bb d0       	rcall	.+374    	; 0x2b94 <__umulhisi3>
    2a1e:	a5 9f       	mul	r26, r21
    2a20:	90 0d       	add	r25, r0
    2a22:	b4 9f       	mul	r27, r20
    2a24:	90 0d       	add	r25, r0
    2a26:	a4 9f       	mul	r26, r20
    2a28:	80 0d       	add	r24, r0
    2a2a:	91 1d       	adc	r25, r1
    2a2c:	11 24       	eor	r1, r1
    2a2e:	08 95       	ret

00002a30 <__muldi3>:
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	1f 93       	push	r17
    2a36:	0f 93       	push	r16
    2a38:	9a 9d       	mul	r25, r10
    2a3a:	f0 2d       	mov	r31, r0
    2a3c:	21 9f       	mul	r18, r17
    2a3e:	f0 0d       	add	r31, r0
    2a40:	8b 9d       	mul	r24, r11
    2a42:	f0 0d       	add	r31, r0
    2a44:	8a 9d       	mul	r24, r10
    2a46:	e0 2d       	mov	r30, r0
    2a48:	f1 0d       	add	r31, r1
    2a4a:	03 9f       	mul	r16, r19
    2a4c:	f0 0d       	add	r31, r0
    2a4e:	02 9f       	mul	r16, r18
    2a50:	e0 0d       	add	r30, r0
    2a52:	f1 1d       	adc	r31, r1
    2a54:	4e 9d       	mul	r20, r14
    2a56:	e0 0d       	add	r30, r0
    2a58:	f1 1d       	adc	r31, r1
    2a5a:	5e 9d       	mul	r21, r14
    2a5c:	f0 0d       	add	r31, r0
    2a5e:	4f 9d       	mul	r20, r15
    2a60:	f0 0d       	add	r31, r0
    2a62:	7f 93       	push	r23
    2a64:	6f 93       	push	r22
    2a66:	bf 92       	push	r11
    2a68:	af 92       	push	r10
    2a6a:	5f 93       	push	r21
    2a6c:	4f 93       	push	r20
    2a6e:	d5 01       	movw	r26, r10
    2a70:	91 d0       	rcall	.+290    	; 0x2b94 <__umulhisi3>
    2a72:	8b 01       	movw	r16, r22
    2a74:	ac 01       	movw	r20, r24
    2a76:	d7 01       	movw	r26, r14
    2a78:	8d d0       	rcall	.+282    	; 0x2b94 <__umulhisi3>
    2a7a:	eb 01       	movw	r28, r22
    2a7c:	e8 0f       	add	r30, r24
    2a7e:	f9 1f       	adc	r31, r25
    2a80:	d6 01       	movw	r26, r12
    2a82:	1f d0       	rcall	.+62     	; 0x2ac2 <__muldi3_6>
    2a84:	2f 91       	pop	r18
    2a86:	3f 91       	pop	r19
    2a88:	d6 01       	movw	r26, r12
    2a8a:	84 d0       	rcall	.+264    	; 0x2b94 <__umulhisi3>
    2a8c:	c6 0f       	add	r28, r22
    2a8e:	d7 1f       	adc	r29, r23
    2a90:	e8 1f       	adc	r30, r24
    2a92:	f9 1f       	adc	r31, r25
    2a94:	af 91       	pop	r26
    2a96:	bf 91       	pop	r27
    2a98:	14 d0       	rcall	.+40     	; 0x2ac2 <__muldi3_6>
    2a9a:	2f 91       	pop	r18
    2a9c:	3f 91       	pop	r19
    2a9e:	7a d0       	rcall	.+244    	; 0x2b94 <__umulhisi3>
    2aa0:	c6 0f       	add	r28, r22
    2aa2:	d7 1f       	adc	r29, r23
    2aa4:	e8 1f       	adc	r30, r24
    2aa6:	f9 1f       	adc	r31, r25
    2aa8:	d6 01       	movw	r26, r12
    2aaa:	74 d0       	rcall	.+232    	; 0x2b94 <__umulhisi3>
    2aac:	e6 0f       	add	r30, r22
    2aae:	f7 1f       	adc	r31, r23
    2ab0:	98 01       	movw	r18, r16
    2ab2:	be 01       	movw	r22, r28
    2ab4:	cf 01       	movw	r24, r30
    2ab6:	11 24       	eor	r1, r1
    2ab8:	0f 91       	pop	r16
    2aba:	1f 91       	pop	r17
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <__muldi3_6>:
    2ac2:	68 d0       	rcall	.+208    	; 0x2b94 <__umulhisi3>
    2ac4:	46 0f       	add	r20, r22
    2ac6:	57 1f       	adc	r21, r23
    2ac8:	c8 1f       	adc	r28, r24
    2aca:	d9 1f       	adc	r29, r25
    2acc:	08 f4       	brcc	.+2      	; 0x2ad0 <__muldi3_6+0xe>
    2ace:	31 96       	adiw	r30, 0x01	; 1
    2ad0:	08 95       	ret

00002ad2 <__ashldi3>:
    2ad2:	0f 93       	push	r16
    2ad4:	08 30       	cpi	r16, 0x08	; 8
    2ad6:	90 f0       	brcs	.+36     	; 0x2afc <__ashldi3+0x2a>
    2ad8:	98 2f       	mov	r25, r24
    2ada:	87 2f       	mov	r24, r23
    2adc:	76 2f       	mov	r23, r22
    2ade:	65 2f       	mov	r22, r21
    2ae0:	54 2f       	mov	r21, r20
    2ae2:	43 2f       	mov	r20, r19
    2ae4:	32 2f       	mov	r19, r18
    2ae6:	22 27       	eor	r18, r18
    2ae8:	08 50       	subi	r16, 0x08	; 8
    2aea:	f4 cf       	rjmp	.-24     	; 0x2ad4 <__ashldi3+0x2>
    2aec:	22 0f       	add	r18, r18
    2aee:	33 1f       	adc	r19, r19
    2af0:	44 1f       	adc	r20, r20
    2af2:	55 1f       	adc	r21, r21
    2af4:	66 1f       	adc	r22, r22
    2af6:	77 1f       	adc	r23, r23
    2af8:	88 1f       	adc	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	0a 95       	dec	r16
    2afe:	b2 f7       	brpl	.-20     	; 0x2aec <__ashldi3+0x1a>
    2b00:	0f 91       	pop	r16
    2b02:	08 95       	ret

00002b04 <__ashrdi3>:
    2b04:	97 fb       	bst	r25, 7
    2b06:	10 f8       	bld	r1, 0

00002b08 <__lshrdi3>:
    2b08:	16 94       	lsr	r1
    2b0a:	00 08       	sbc	r0, r0
    2b0c:	0f 93       	push	r16
    2b0e:	08 30       	cpi	r16, 0x08	; 8
    2b10:	98 f0       	brcs	.+38     	; 0x2b38 <__lshrdi3+0x30>
    2b12:	08 50       	subi	r16, 0x08	; 8
    2b14:	23 2f       	mov	r18, r19
    2b16:	34 2f       	mov	r19, r20
    2b18:	45 2f       	mov	r20, r21
    2b1a:	56 2f       	mov	r21, r22
    2b1c:	67 2f       	mov	r22, r23
    2b1e:	78 2f       	mov	r23, r24
    2b20:	89 2f       	mov	r24, r25
    2b22:	90 2d       	mov	r25, r0
    2b24:	f4 cf       	rjmp	.-24     	; 0x2b0e <__lshrdi3+0x6>
    2b26:	05 94       	asr	r0
    2b28:	97 95       	ror	r25
    2b2a:	87 95       	ror	r24
    2b2c:	77 95       	ror	r23
    2b2e:	67 95       	ror	r22
    2b30:	57 95       	ror	r21
    2b32:	47 95       	ror	r20
    2b34:	37 95       	ror	r19
    2b36:	27 95       	ror	r18
    2b38:	0a 95       	dec	r16
    2b3a:	aa f7       	brpl	.-22     	; 0x2b26 <__lshrdi3+0x1e>
    2b3c:	0f 91       	pop	r16
    2b3e:	08 95       	ret

00002b40 <__adddi3>:
    2b40:	2a 0d       	add	r18, r10
    2b42:	3b 1d       	adc	r19, r11
    2b44:	4c 1d       	adc	r20, r12
    2b46:	5d 1d       	adc	r21, r13
    2b48:	6e 1d       	adc	r22, r14
    2b4a:	7f 1d       	adc	r23, r15
    2b4c:	80 1f       	adc	r24, r16
    2b4e:	91 1f       	adc	r25, r17
    2b50:	08 95       	ret

00002b52 <__adddi3_s8>:
    2b52:	00 24       	eor	r0, r0
    2b54:	a7 fd       	sbrc	r26, 7
    2b56:	00 94       	com	r0
    2b58:	2a 0f       	add	r18, r26
    2b5a:	30 1d       	adc	r19, r0
    2b5c:	40 1d       	adc	r20, r0
    2b5e:	50 1d       	adc	r21, r0
    2b60:	60 1d       	adc	r22, r0
    2b62:	70 1d       	adc	r23, r0
    2b64:	80 1d       	adc	r24, r0
    2b66:	90 1d       	adc	r25, r0
    2b68:	08 95       	ret

00002b6a <__subdi3>:
    2b6a:	2a 19       	sub	r18, r10
    2b6c:	3b 09       	sbc	r19, r11
    2b6e:	4c 09       	sbc	r20, r12
    2b70:	5d 09       	sbc	r21, r13
    2b72:	6e 09       	sbc	r22, r14
    2b74:	7f 09       	sbc	r23, r15
    2b76:	80 0b       	sbc	r24, r16
    2b78:	91 0b       	sbc	r25, r17
    2b7a:	08 95       	ret

00002b7c <__cmpdi2_s8>:
    2b7c:	00 24       	eor	r0, r0
    2b7e:	a7 fd       	sbrc	r26, 7
    2b80:	00 94       	com	r0
    2b82:	2a 17       	cp	r18, r26
    2b84:	30 05       	cpc	r19, r0
    2b86:	40 05       	cpc	r20, r0
    2b88:	50 05       	cpc	r21, r0
    2b8a:	60 05       	cpc	r22, r0
    2b8c:	70 05       	cpc	r23, r0
    2b8e:	80 05       	cpc	r24, r0
    2b90:	90 05       	cpc	r25, r0
    2b92:	08 95       	ret

00002b94 <__umulhisi3>:
    2b94:	a2 9f       	mul	r26, r18
    2b96:	b0 01       	movw	r22, r0
    2b98:	b3 9f       	mul	r27, r19
    2b9a:	c0 01       	movw	r24, r0
    2b9c:	a3 9f       	mul	r26, r19
    2b9e:	70 0d       	add	r23, r0
    2ba0:	81 1d       	adc	r24, r1
    2ba2:	11 24       	eor	r1, r1
    2ba4:	91 1d       	adc	r25, r1
    2ba6:	b2 9f       	mul	r27, r18
    2ba8:	70 0d       	add	r23, r0
    2baa:	81 1d       	adc	r24, r1
    2bac:	11 24       	eor	r1, r1
    2bae:	91 1d       	adc	r25, r1
    2bb0:	08 95       	ret

00002bb2 <__ftoa_engine>:
    2bb2:	28 30       	cpi	r18, 0x08	; 8
    2bb4:	08 f0       	brcs	.+2      	; 0x2bb8 <__ftoa_engine+0x6>
    2bb6:	27 e0       	ldi	r18, 0x07	; 7
    2bb8:	33 27       	eor	r19, r19
    2bba:	da 01       	movw	r26, r20
    2bbc:	99 0f       	add	r25, r25
    2bbe:	31 1d       	adc	r19, r1
    2bc0:	87 fd       	sbrc	r24, 7
    2bc2:	91 60       	ori	r25, 0x01	; 1
    2bc4:	00 96       	adiw	r24, 0x00	; 0
    2bc6:	61 05       	cpc	r22, r1
    2bc8:	71 05       	cpc	r23, r1
    2bca:	39 f4       	brne	.+14     	; 0x2bda <__ftoa_engine+0x28>
    2bcc:	32 60       	ori	r19, 0x02	; 2
    2bce:	2e 5f       	subi	r18, 0xFE	; 254
    2bd0:	3d 93       	st	X+, r19
    2bd2:	30 e3       	ldi	r19, 0x30	; 48
    2bd4:	2a 95       	dec	r18
    2bd6:	e1 f7       	brne	.-8      	; 0x2bd0 <__ftoa_engine+0x1e>
    2bd8:	08 95       	ret
    2bda:	9f 3f       	cpi	r25, 0xFF	; 255
    2bdc:	30 f0       	brcs	.+12     	; 0x2bea <__ftoa_engine+0x38>
    2bde:	80 38       	cpi	r24, 0x80	; 128
    2be0:	71 05       	cpc	r23, r1
    2be2:	61 05       	cpc	r22, r1
    2be4:	09 f0       	breq	.+2      	; 0x2be8 <__ftoa_engine+0x36>
    2be6:	3c 5f       	subi	r19, 0xFC	; 252
    2be8:	3c 5f       	subi	r19, 0xFC	; 252
    2bea:	3d 93       	st	X+, r19
    2bec:	91 30       	cpi	r25, 0x01	; 1
    2bee:	08 f0       	brcs	.+2      	; 0x2bf2 <__ftoa_engine+0x40>
    2bf0:	80 68       	ori	r24, 0x80	; 128
    2bf2:	91 1d       	adc	r25, r1
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	1f 93       	push	r17
    2bfa:	0f 93       	push	r16
    2bfc:	ff 92       	push	r15
    2bfe:	ef 92       	push	r14
    2c00:	19 2f       	mov	r17, r25
    2c02:	98 7f       	andi	r25, 0xF8	; 248
    2c04:	96 95       	lsr	r25
    2c06:	e9 2f       	mov	r30, r25
    2c08:	96 95       	lsr	r25
    2c0a:	96 95       	lsr	r25
    2c0c:	e9 0f       	add	r30, r25
    2c0e:	ff 27       	eor	r31, r31
    2c10:	e0 55       	subi	r30, 0x50	; 80
    2c12:	fd 4f       	sbci	r31, 0xFD	; 253
    2c14:	99 27       	eor	r25, r25
    2c16:	33 27       	eor	r19, r19
    2c18:	ee 24       	eor	r14, r14
    2c1a:	ff 24       	eor	r15, r15
    2c1c:	a7 01       	movw	r20, r14
    2c1e:	e7 01       	movw	r28, r14
    2c20:	05 90       	lpm	r0, Z+
    2c22:	08 94       	sec
    2c24:	07 94       	ror	r0
    2c26:	28 f4       	brcc	.+10     	; 0x2c32 <__ftoa_engine+0x80>
    2c28:	36 0f       	add	r19, r22
    2c2a:	e7 1e       	adc	r14, r23
    2c2c:	f8 1e       	adc	r15, r24
    2c2e:	49 1f       	adc	r20, r25
    2c30:	51 1d       	adc	r21, r1
    2c32:	66 0f       	add	r22, r22
    2c34:	77 1f       	adc	r23, r23
    2c36:	88 1f       	adc	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	06 94       	lsr	r0
    2c3c:	a1 f7       	brne	.-24     	; 0x2c26 <__ftoa_engine+0x74>
    2c3e:	05 90       	lpm	r0, Z+
    2c40:	07 94       	ror	r0
    2c42:	28 f4       	brcc	.+10     	; 0x2c4e <__ftoa_engine+0x9c>
    2c44:	e7 0e       	add	r14, r23
    2c46:	f8 1e       	adc	r15, r24
    2c48:	49 1f       	adc	r20, r25
    2c4a:	56 1f       	adc	r21, r22
    2c4c:	c1 1d       	adc	r28, r1
    2c4e:	77 0f       	add	r23, r23
    2c50:	88 1f       	adc	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	66 1f       	adc	r22, r22
    2c56:	06 94       	lsr	r0
    2c58:	a1 f7       	brne	.-24     	; 0x2c42 <__ftoa_engine+0x90>
    2c5a:	05 90       	lpm	r0, Z+
    2c5c:	07 94       	ror	r0
    2c5e:	28 f4       	brcc	.+10     	; 0x2c6a <__ftoa_engine+0xb8>
    2c60:	f8 0e       	add	r15, r24
    2c62:	49 1f       	adc	r20, r25
    2c64:	56 1f       	adc	r21, r22
    2c66:	c7 1f       	adc	r28, r23
    2c68:	d1 1d       	adc	r29, r1
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	66 1f       	adc	r22, r22
    2c70:	77 1f       	adc	r23, r23
    2c72:	06 94       	lsr	r0
    2c74:	a1 f7       	brne	.-24     	; 0x2c5e <__ftoa_engine+0xac>
    2c76:	05 90       	lpm	r0, Z+
    2c78:	07 94       	ror	r0
    2c7a:	20 f4       	brcc	.+8      	; 0x2c84 <__ftoa_engine+0xd2>
    2c7c:	49 0f       	add	r20, r25
    2c7e:	56 1f       	adc	r21, r22
    2c80:	c7 1f       	adc	r28, r23
    2c82:	d8 1f       	adc	r29, r24
    2c84:	99 0f       	add	r25, r25
    2c86:	66 1f       	adc	r22, r22
    2c88:	77 1f       	adc	r23, r23
    2c8a:	88 1f       	adc	r24, r24
    2c8c:	06 94       	lsr	r0
    2c8e:	a9 f7       	brne	.-22     	; 0x2c7a <__ftoa_engine+0xc8>
    2c90:	84 91       	lpm	r24, Z
    2c92:	10 95       	com	r17
    2c94:	17 70       	andi	r17, 0x07	; 7
    2c96:	41 f0       	breq	.+16     	; 0x2ca8 <__ftoa_engine+0xf6>
    2c98:	d6 95       	lsr	r29
    2c9a:	c7 95       	ror	r28
    2c9c:	57 95       	ror	r21
    2c9e:	47 95       	ror	r20
    2ca0:	f7 94       	ror	r15
    2ca2:	e7 94       	ror	r14
    2ca4:	1a 95       	dec	r17
    2ca6:	c1 f7       	brne	.-16     	; 0x2c98 <__ftoa_engine+0xe6>
    2ca8:	e6 e5       	ldi	r30, 0x56	; 86
    2caa:	f2 e0       	ldi	r31, 0x02	; 2
    2cac:	68 94       	set
    2cae:	15 90       	lpm	r1, Z+
    2cb0:	15 91       	lpm	r17, Z+
    2cb2:	35 91       	lpm	r19, Z+
    2cb4:	65 91       	lpm	r22, Z+
    2cb6:	95 91       	lpm	r25, Z+
    2cb8:	05 90       	lpm	r0, Z+
    2cba:	7f e2       	ldi	r23, 0x2F	; 47
    2cbc:	73 95       	inc	r23
    2cbe:	e1 18       	sub	r14, r1
    2cc0:	f1 0a       	sbc	r15, r17
    2cc2:	43 0b       	sbc	r20, r19
    2cc4:	56 0b       	sbc	r21, r22
    2cc6:	c9 0b       	sbc	r28, r25
    2cc8:	d0 09       	sbc	r29, r0
    2cca:	c0 f7       	brcc	.-16     	; 0x2cbc <__ftoa_engine+0x10a>
    2ccc:	e1 0c       	add	r14, r1
    2cce:	f1 1e       	adc	r15, r17
    2cd0:	43 1f       	adc	r20, r19
    2cd2:	56 1f       	adc	r21, r22
    2cd4:	c9 1f       	adc	r28, r25
    2cd6:	d0 1d       	adc	r29, r0
    2cd8:	7e f4       	brtc	.+30     	; 0x2cf8 <__ftoa_engine+0x146>
    2cda:	70 33       	cpi	r23, 0x30	; 48
    2cdc:	11 f4       	brne	.+4      	; 0x2ce2 <__ftoa_engine+0x130>
    2cde:	8a 95       	dec	r24
    2ce0:	e6 cf       	rjmp	.-52     	; 0x2cae <__ftoa_engine+0xfc>
    2ce2:	e8 94       	clt
    2ce4:	01 50       	subi	r16, 0x01	; 1
    2ce6:	30 f0       	brcs	.+12     	; 0x2cf4 <__ftoa_engine+0x142>
    2ce8:	08 0f       	add	r16, r24
    2cea:	0a f4       	brpl	.+2      	; 0x2cee <__ftoa_engine+0x13c>
    2cec:	00 27       	eor	r16, r16
    2cee:	02 17       	cp	r16, r18
    2cf0:	08 f4       	brcc	.+2      	; 0x2cf4 <__ftoa_engine+0x142>
    2cf2:	20 2f       	mov	r18, r16
    2cf4:	23 95       	inc	r18
    2cf6:	02 2f       	mov	r16, r18
    2cf8:	7a 33       	cpi	r23, 0x3A	; 58
    2cfa:	28 f0       	brcs	.+10     	; 0x2d06 <__ftoa_engine+0x154>
    2cfc:	79 e3       	ldi	r23, 0x39	; 57
    2cfe:	7d 93       	st	X+, r23
    2d00:	2a 95       	dec	r18
    2d02:	e9 f7       	brne	.-6      	; 0x2cfe <__ftoa_engine+0x14c>
    2d04:	10 c0       	rjmp	.+32     	; 0x2d26 <__ftoa_engine+0x174>
    2d06:	7d 93       	st	X+, r23
    2d08:	2a 95       	dec	r18
    2d0a:	89 f6       	brne	.-94     	; 0x2cae <__ftoa_engine+0xfc>
    2d0c:	06 94       	lsr	r0
    2d0e:	97 95       	ror	r25
    2d10:	67 95       	ror	r22
    2d12:	37 95       	ror	r19
    2d14:	17 95       	ror	r17
    2d16:	17 94       	ror	r1
    2d18:	e1 18       	sub	r14, r1
    2d1a:	f1 0a       	sbc	r15, r17
    2d1c:	43 0b       	sbc	r20, r19
    2d1e:	56 0b       	sbc	r21, r22
    2d20:	c9 0b       	sbc	r28, r25
    2d22:	d0 09       	sbc	r29, r0
    2d24:	98 f0       	brcs	.+38     	; 0x2d4c <__ftoa_engine+0x19a>
    2d26:	23 95       	inc	r18
    2d28:	7e 91       	ld	r23, -X
    2d2a:	73 95       	inc	r23
    2d2c:	7a 33       	cpi	r23, 0x3A	; 58
    2d2e:	08 f0       	brcs	.+2      	; 0x2d32 <__ftoa_engine+0x180>
    2d30:	70 e3       	ldi	r23, 0x30	; 48
    2d32:	7c 93       	st	X, r23
    2d34:	20 13       	cpse	r18, r16
    2d36:	b8 f7       	brcc	.-18     	; 0x2d26 <__ftoa_engine+0x174>
    2d38:	7e 91       	ld	r23, -X
    2d3a:	70 61       	ori	r23, 0x10	; 16
    2d3c:	7d 93       	st	X+, r23
    2d3e:	30 f0       	brcs	.+12     	; 0x2d4c <__ftoa_engine+0x19a>
    2d40:	83 95       	inc	r24
    2d42:	71 e3       	ldi	r23, 0x31	; 49
    2d44:	7d 93       	st	X+, r23
    2d46:	70 e3       	ldi	r23, 0x30	; 48
    2d48:	2a 95       	dec	r18
    2d4a:	e1 f7       	brne	.-8      	; 0x2d44 <__ftoa_engine+0x192>
    2d4c:	11 24       	eor	r1, r1
    2d4e:	ef 90       	pop	r14
    2d50:	ff 90       	pop	r15
    2d52:	0f 91       	pop	r16
    2d54:	1f 91       	pop	r17
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	99 27       	eor	r25, r25
    2d5c:	87 fd       	sbrc	r24, 7
    2d5e:	90 95       	com	r25
    2d60:	08 95       	ret

00002d62 <strnlen_P>:
    2d62:	fc 01       	movw	r30, r24
    2d64:	05 90       	lpm	r0, Z+
    2d66:	61 50       	subi	r22, 0x01	; 1
    2d68:	70 40       	sbci	r23, 0x00	; 0
    2d6a:	01 10       	cpse	r0, r1
    2d6c:	d8 f7       	brcc	.-10     	; 0x2d64 <strnlen_P+0x2>
    2d6e:	80 95       	com	r24
    2d70:	90 95       	com	r25
    2d72:	8e 0f       	add	r24, r30
    2d74:	9f 1f       	adc	r25, r31
    2d76:	08 95       	ret

00002d78 <strnlen>:
    2d78:	fc 01       	movw	r30, r24
    2d7a:	61 50       	subi	r22, 0x01	; 1
    2d7c:	70 40       	sbci	r23, 0x00	; 0
    2d7e:	01 90       	ld	r0, Z+
    2d80:	01 10       	cpse	r0, r1
    2d82:	d8 f7       	brcc	.-10     	; 0x2d7a <strnlen+0x2>
    2d84:	80 95       	com	r24
    2d86:	90 95       	com	r25
    2d88:	8e 0f       	add	r24, r30
    2d8a:	9f 1f       	adc	r25, r31
    2d8c:	08 95       	ret

00002d8e <fdevopen>:
    2d8e:	0f 93       	push	r16
    2d90:	1f 93       	push	r17
    2d92:	cf 93       	push	r28
    2d94:	df 93       	push	r29
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	31 f4       	brne	.+12     	; 0x2da6 <fdevopen+0x18>
    2d9a:	61 15       	cp	r22, r1
    2d9c:	71 05       	cpc	r23, r1
    2d9e:	19 f4       	brne	.+6      	; 0x2da6 <fdevopen+0x18>
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	39 c0       	rjmp	.+114    	; 0x2e18 <fdevopen+0x8a>
    2da6:	8b 01       	movw	r16, r22
    2da8:	ec 01       	movw	r28, r24
    2daa:	6e e0       	ldi	r22, 0x0E	; 14
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	10 d1       	rcall	.+544    	; 0x2fd4 <calloc>
    2db4:	fc 01       	movw	r30, r24
    2db6:	89 2b       	or	r24, r25
    2db8:	99 f3       	breq	.-26     	; 0x2da0 <fdevopen+0x12>
    2dba:	80 e8       	ldi	r24, 0x80	; 128
    2dbc:	83 83       	std	Z+3, r24	; 0x03
    2dbe:	01 15       	cp	r16, r1
    2dc0:	11 05       	cpc	r17, r1
    2dc2:	71 f0       	breq	.+28     	; 0x2de0 <fdevopen+0x52>
    2dc4:	02 87       	std	Z+10, r16	; 0x0a
    2dc6:	13 87       	std	Z+11, r17	; 0x0b
    2dc8:	81 e8       	ldi	r24, 0x81	; 129
    2dca:	83 83       	std	Z+3, r24	; 0x03
    2dcc:	80 91 8d 20 	lds	r24, 0x208D	; 0x80208d <__iob>
    2dd0:	90 91 8e 20 	lds	r25, 0x208E	; 0x80208e <__iob+0x1>
    2dd4:	89 2b       	or	r24, r25
    2dd6:	21 f4       	brne	.+8      	; 0x2de0 <fdevopen+0x52>
    2dd8:	e0 93 8d 20 	sts	0x208D, r30	; 0x80208d <__iob>
    2ddc:	f0 93 8e 20 	sts	0x208E, r31	; 0x80208e <__iob+0x1>
    2de0:	20 97       	sbiw	r28, 0x00	; 0
    2de2:	c9 f0       	breq	.+50     	; 0x2e16 <fdevopen+0x88>
    2de4:	c0 87       	std	Z+8, r28	; 0x08
    2de6:	d1 87       	std	Z+9, r29	; 0x09
    2de8:	83 81       	ldd	r24, Z+3	; 0x03
    2dea:	82 60       	ori	r24, 0x02	; 2
    2dec:	83 83       	std	Z+3, r24	; 0x03
    2dee:	80 91 8f 20 	lds	r24, 0x208F	; 0x80208f <__iob+0x2>
    2df2:	90 91 90 20 	lds	r25, 0x2090	; 0x802090 <__iob+0x3>
    2df6:	89 2b       	or	r24, r25
    2df8:	71 f4       	brne	.+28     	; 0x2e16 <fdevopen+0x88>
    2dfa:	e0 93 8f 20 	sts	0x208F, r30	; 0x80208f <__iob+0x2>
    2dfe:	f0 93 90 20 	sts	0x2090, r31	; 0x802090 <__iob+0x3>
    2e02:	80 91 91 20 	lds	r24, 0x2091	; 0x802091 <__iob+0x4>
    2e06:	90 91 92 20 	lds	r25, 0x2092	; 0x802092 <__iob+0x5>
    2e0a:	89 2b       	or	r24, r25
    2e0c:	21 f4       	brne	.+8      	; 0x2e16 <fdevopen+0x88>
    2e0e:	e0 93 91 20 	sts	0x2091, r30	; 0x802091 <__iob+0x4>
    2e12:	f0 93 92 20 	sts	0x2092, r31	; 0x802092 <__iob+0x5>
    2e16:	cf 01       	movw	r24, r30
    2e18:	df 91       	pop	r29
    2e1a:	cf 91       	pop	r28
    2e1c:	1f 91       	pop	r17
    2e1e:	0f 91       	pop	r16
    2e20:	08 95       	ret

00002e22 <fputc>:
    2e22:	0f 93       	push	r16
    2e24:	1f 93       	push	r17
    2e26:	cf 93       	push	r28
    2e28:	df 93       	push	r29
    2e2a:	fb 01       	movw	r30, r22
    2e2c:	23 81       	ldd	r18, Z+3	; 0x03
    2e2e:	21 fd       	sbrc	r18, 1
    2e30:	03 c0       	rjmp	.+6      	; 0x2e38 <fputc+0x16>
    2e32:	8f ef       	ldi	r24, 0xFF	; 255
    2e34:	9f ef       	ldi	r25, 0xFF	; 255
    2e36:	28 c0       	rjmp	.+80     	; 0x2e88 <fputc+0x66>
    2e38:	22 ff       	sbrs	r18, 2
    2e3a:	16 c0       	rjmp	.+44     	; 0x2e68 <fputc+0x46>
    2e3c:	46 81       	ldd	r20, Z+6	; 0x06
    2e3e:	57 81       	ldd	r21, Z+7	; 0x07
    2e40:	24 81       	ldd	r18, Z+4	; 0x04
    2e42:	35 81       	ldd	r19, Z+5	; 0x05
    2e44:	42 17       	cp	r20, r18
    2e46:	53 07       	cpc	r21, r19
    2e48:	44 f4       	brge	.+16     	; 0x2e5a <fputc+0x38>
    2e4a:	a0 81       	ld	r26, Z
    2e4c:	b1 81       	ldd	r27, Z+1	; 0x01
    2e4e:	9d 01       	movw	r18, r26
    2e50:	2f 5f       	subi	r18, 0xFF	; 255
    2e52:	3f 4f       	sbci	r19, 0xFF	; 255
    2e54:	20 83       	st	Z, r18
    2e56:	31 83       	std	Z+1, r19	; 0x01
    2e58:	8c 93       	st	X, r24
    2e5a:	26 81       	ldd	r18, Z+6	; 0x06
    2e5c:	37 81       	ldd	r19, Z+7	; 0x07
    2e5e:	2f 5f       	subi	r18, 0xFF	; 255
    2e60:	3f 4f       	sbci	r19, 0xFF	; 255
    2e62:	26 83       	std	Z+6, r18	; 0x06
    2e64:	37 83       	std	Z+7, r19	; 0x07
    2e66:	10 c0       	rjmp	.+32     	; 0x2e88 <fputc+0x66>
    2e68:	eb 01       	movw	r28, r22
    2e6a:	09 2f       	mov	r16, r25
    2e6c:	18 2f       	mov	r17, r24
    2e6e:	00 84       	ldd	r0, Z+8	; 0x08
    2e70:	f1 85       	ldd	r31, Z+9	; 0x09
    2e72:	e0 2d       	mov	r30, r0
    2e74:	19 95       	eicall
    2e76:	89 2b       	or	r24, r25
    2e78:	e1 f6       	brne	.-72     	; 0x2e32 <fputc+0x10>
    2e7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e7c:	9f 81       	ldd	r25, Y+7	; 0x07
    2e7e:	01 96       	adiw	r24, 0x01	; 1
    2e80:	8e 83       	std	Y+6, r24	; 0x06
    2e82:	9f 83       	std	Y+7, r25	; 0x07
    2e84:	81 2f       	mov	r24, r17
    2e86:	90 2f       	mov	r25, r16
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	0f 91       	pop	r16
    2e90:	08 95       	ret

00002e92 <printf>:
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	ae 01       	movw	r20, r28
    2e9c:	4a 5f       	subi	r20, 0xFA	; 250
    2e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2ea0:	fa 01       	movw	r30, r20
    2ea2:	61 91       	ld	r22, Z+
    2ea4:	71 91       	ld	r23, Z+
    2ea6:	af 01       	movw	r20, r30
    2ea8:	80 91 8f 20 	lds	r24, 0x208F	; 0x80208f <__iob+0x2>
    2eac:	90 91 90 20 	lds	r25, 0x2090	; 0x802090 <__iob+0x3>
    2eb0:	fd d9       	rcall	.-3078   	; 0x22ac <vfprintf>
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	08 95       	ret

00002eb8 <puts>:
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	e0 91 8f 20 	lds	r30, 0x208F	; 0x80208f <__iob+0x2>
    2ec4:	f0 91 90 20 	lds	r31, 0x2090	; 0x802090 <__iob+0x3>
    2ec8:	23 81       	ldd	r18, Z+3	; 0x03
    2eca:	21 ff       	sbrs	r18, 1
    2ecc:	1b c0       	rjmp	.+54     	; 0x2f04 <puts+0x4c>
    2ece:	8c 01       	movw	r16, r24
    2ed0:	d0 e0       	ldi	r29, 0x00	; 0
    2ed2:	c0 e0       	ldi	r28, 0x00	; 0
    2ed4:	f8 01       	movw	r30, r16
    2ed6:	81 91       	ld	r24, Z+
    2ed8:	8f 01       	movw	r16, r30
    2eda:	60 91 8f 20 	lds	r22, 0x208F	; 0x80208f <__iob+0x2>
    2ede:	70 91 90 20 	lds	r23, 0x2090	; 0x802090 <__iob+0x3>
    2ee2:	db 01       	movw	r26, r22
    2ee4:	18 96       	adiw	r26, 0x08	; 8
    2ee6:	ed 91       	ld	r30, X+
    2ee8:	fc 91       	ld	r31, X
    2eea:	19 97       	sbiw	r26, 0x09	; 9
    2eec:	88 23       	and	r24, r24
    2eee:	31 f0       	breq	.+12     	; 0x2efc <puts+0x44>
    2ef0:	19 95       	eicall
    2ef2:	89 2b       	or	r24, r25
    2ef4:	79 f3       	breq	.-34     	; 0x2ed4 <puts+0x1c>
    2ef6:	df ef       	ldi	r29, 0xFF	; 255
    2ef8:	cf ef       	ldi	r28, 0xFF	; 255
    2efa:	ec cf       	rjmp	.-40     	; 0x2ed4 <puts+0x1c>
    2efc:	8a e0       	ldi	r24, 0x0A	; 10
    2efe:	19 95       	eicall
    2f00:	89 2b       	or	r24, r25
    2f02:	19 f0       	breq	.+6      	; 0x2f0a <puts+0x52>
    2f04:	8f ef       	ldi	r24, 0xFF	; 255
    2f06:	9f ef       	ldi	r25, 0xFF	; 255
    2f08:	02 c0       	rjmp	.+4      	; 0x2f0e <puts+0x56>
    2f0a:	8d 2f       	mov	r24, r29
    2f0c:	9c 2f       	mov	r25, r28
    2f0e:	df 91       	pop	r29
    2f10:	cf 91       	pop	r28
    2f12:	1f 91       	pop	r17
    2f14:	0f 91       	pop	r16
    2f16:	08 95       	ret

00002f18 <__ultoa_invert>:
    2f18:	fa 01       	movw	r30, r20
    2f1a:	aa 27       	eor	r26, r26
    2f1c:	28 30       	cpi	r18, 0x08	; 8
    2f1e:	51 f1       	breq	.+84     	; 0x2f74 <__ultoa_invert+0x5c>
    2f20:	20 31       	cpi	r18, 0x10	; 16
    2f22:	81 f1       	breq	.+96     	; 0x2f84 <__ultoa_invert+0x6c>
    2f24:	e8 94       	clt
    2f26:	6f 93       	push	r22
    2f28:	6e 7f       	andi	r22, 0xFE	; 254
    2f2a:	6e 5f       	subi	r22, 0xFE	; 254
    2f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f30:	9f 4f       	sbci	r25, 0xFF	; 255
    2f32:	af 4f       	sbci	r26, 0xFF	; 255
    2f34:	b1 e0       	ldi	r27, 0x01	; 1
    2f36:	3e d0       	rcall	.+124    	; 0x2fb4 <__ultoa_invert+0x9c>
    2f38:	b4 e0       	ldi	r27, 0x04	; 4
    2f3a:	3c d0       	rcall	.+120    	; 0x2fb4 <__ultoa_invert+0x9c>
    2f3c:	67 0f       	add	r22, r23
    2f3e:	78 1f       	adc	r23, r24
    2f40:	89 1f       	adc	r24, r25
    2f42:	9a 1f       	adc	r25, r26
    2f44:	a1 1d       	adc	r26, r1
    2f46:	68 0f       	add	r22, r24
    2f48:	79 1f       	adc	r23, r25
    2f4a:	8a 1f       	adc	r24, r26
    2f4c:	91 1d       	adc	r25, r1
    2f4e:	a1 1d       	adc	r26, r1
    2f50:	6a 0f       	add	r22, r26
    2f52:	71 1d       	adc	r23, r1
    2f54:	81 1d       	adc	r24, r1
    2f56:	91 1d       	adc	r25, r1
    2f58:	a1 1d       	adc	r26, r1
    2f5a:	20 d0       	rcall	.+64     	; 0x2f9c <__ultoa_invert+0x84>
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <__ultoa_invert+0x48>
    2f5e:	68 94       	set
    2f60:	3f 91       	pop	r19
    2f62:	2a e0       	ldi	r18, 0x0A	; 10
    2f64:	26 9f       	mul	r18, r22
    2f66:	11 24       	eor	r1, r1
    2f68:	30 19       	sub	r19, r0
    2f6a:	30 5d       	subi	r19, 0xD0	; 208
    2f6c:	31 93       	st	Z+, r19
    2f6e:	de f6       	brtc	.-74     	; 0x2f26 <__ultoa_invert+0xe>
    2f70:	cf 01       	movw	r24, r30
    2f72:	08 95       	ret
    2f74:	46 2f       	mov	r20, r22
    2f76:	47 70       	andi	r20, 0x07	; 7
    2f78:	40 5d       	subi	r20, 0xD0	; 208
    2f7a:	41 93       	st	Z+, r20
    2f7c:	b3 e0       	ldi	r27, 0x03	; 3
    2f7e:	0f d0       	rcall	.+30     	; 0x2f9e <__ultoa_invert+0x86>
    2f80:	c9 f7       	brne	.-14     	; 0x2f74 <__ultoa_invert+0x5c>
    2f82:	f6 cf       	rjmp	.-20     	; 0x2f70 <__ultoa_invert+0x58>
    2f84:	46 2f       	mov	r20, r22
    2f86:	4f 70       	andi	r20, 0x0F	; 15
    2f88:	40 5d       	subi	r20, 0xD0	; 208
    2f8a:	4a 33       	cpi	r20, 0x3A	; 58
    2f8c:	18 f0       	brcs	.+6      	; 0x2f94 <__ultoa_invert+0x7c>
    2f8e:	49 5d       	subi	r20, 0xD9	; 217
    2f90:	31 fd       	sbrc	r19, 1
    2f92:	40 52       	subi	r20, 0x20	; 32
    2f94:	41 93       	st	Z+, r20
    2f96:	02 d0       	rcall	.+4      	; 0x2f9c <__ultoa_invert+0x84>
    2f98:	a9 f7       	brne	.-22     	; 0x2f84 <__ultoa_invert+0x6c>
    2f9a:	ea cf       	rjmp	.-44     	; 0x2f70 <__ultoa_invert+0x58>
    2f9c:	b4 e0       	ldi	r27, 0x04	; 4
    2f9e:	a6 95       	lsr	r26
    2fa0:	97 95       	ror	r25
    2fa2:	87 95       	ror	r24
    2fa4:	77 95       	ror	r23
    2fa6:	67 95       	ror	r22
    2fa8:	ba 95       	dec	r27
    2faa:	c9 f7       	brne	.-14     	; 0x2f9e <__ultoa_invert+0x86>
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	61 05       	cpc	r22, r1
    2fb0:	71 05       	cpc	r23, r1
    2fb2:	08 95       	ret
    2fb4:	9b 01       	movw	r18, r22
    2fb6:	ac 01       	movw	r20, r24
    2fb8:	0a 2e       	mov	r0, r26
    2fba:	06 94       	lsr	r0
    2fbc:	57 95       	ror	r21
    2fbe:	47 95       	ror	r20
    2fc0:	37 95       	ror	r19
    2fc2:	27 95       	ror	r18
    2fc4:	ba 95       	dec	r27
    2fc6:	c9 f7       	brne	.-14     	; 0x2fba <__ultoa_invert+0xa2>
    2fc8:	62 0f       	add	r22, r18
    2fca:	73 1f       	adc	r23, r19
    2fcc:	84 1f       	adc	r24, r20
    2fce:	95 1f       	adc	r25, r21
    2fd0:	a0 1d       	adc	r26, r0
    2fd2:	08 95       	ret

00002fd4 <calloc>:
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	86 9f       	mul	r24, r22
    2fde:	80 01       	movw	r16, r0
    2fe0:	87 9f       	mul	r24, r23
    2fe2:	10 0d       	add	r17, r0
    2fe4:	96 9f       	mul	r25, r22
    2fe6:	10 0d       	add	r17, r0
    2fe8:	11 24       	eor	r1, r1
    2fea:	c8 01       	movw	r24, r16
    2fec:	0d d0       	rcall	.+26     	; 0x3008 <malloc>
    2fee:	ec 01       	movw	r28, r24
    2ff0:	00 97       	sbiw	r24, 0x00	; 0
    2ff2:	21 f0       	breq	.+8      	; 0x2ffc <calloc+0x28>
    2ff4:	a8 01       	movw	r20, r16
    2ff6:	60 e0       	ldi	r22, 0x00	; 0
    2ff8:	70 e0       	ldi	r23, 0x00	; 0
    2ffa:	33 d1       	rcall	.+614    	; 0x3262 <memset>
    2ffc:	ce 01       	movw	r24, r28
    2ffe:	df 91       	pop	r29
    3000:	cf 91       	pop	r28
    3002:	1f 91       	pop	r17
    3004:	0f 91       	pop	r16
    3006:	08 95       	ret

00003008 <malloc>:
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	82 30       	cpi	r24, 0x02	; 2
    300e:	91 05       	cpc	r25, r1
    3010:	10 f4       	brcc	.+4      	; 0x3016 <malloc+0xe>
    3012:	82 e0       	ldi	r24, 0x02	; 2
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	e0 91 95 20 	lds	r30, 0x2095	; 0x802095 <__flp>
    301a:	f0 91 96 20 	lds	r31, 0x2096	; 0x802096 <__flp+0x1>
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	c0 e0       	ldi	r28, 0x00	; 0
    3024:	d0 e0       	ldi	r29, 0x00	; 0
    3026:	30 97       	sbiw	r30, 0x00	; 0
    3028:	11 f1       	breq	.+68     	; 0x306e <malloc+0x66>
    302a:	40 81       	ld	r20, Z
    302c:	51 81       	ldd	r21, Z+1	; 0x01
    302e:	48 17       	cp	r20, r24
    3030:	59 07       	cpc	r21, r25
    3032:	c0 f0       	brcs	.+48     	; 0x3064 <malloc+0x5c>
    3034:	48 17       	cp	r20, r24
    3036:	59 07       	cpc	r21, r25
    3038:	61 f4       	brne	.+24     	; 0x3052 <malloc+0x4a>
    303a:	82 81       	ldd	r24, Z+2	; 0x02
    303c:	93 81       	ldd	r25, Z+3	; 0x03
    303e:	20 97       	sbiw	r28, 0x00	; 0
    3040:	19 f0       	breq	.+6      	; 0x3048 <malloc+0x40>
    3042:	8a 83       	std	Y+2, r24	; 0x02
    3044:	9b 83       	std	Y+3, r25	; 0x03
    3046:	2b c0       	rjmp	.+86     	; 0x309e <malloc+0x96>
    3048:	80 93 95 20 	sts	0x2095, r24	; 0x802095 <__flp>
    304c:	90 93 96 20 	sts	0x2096, r25	; 0x802096 <__flp+0x1>
    3050:	26 c0       	rjmp	.+76     	; 0x309e <malloc+0x96>
    3052:	21 15       	cp	r18, r1
    3054:	31 05       	cpc	r19, r1
    3056:	19 f0       	breq	.+6      	; 0x305e <malloc+0x56>
    3058:	42 17       	cp	r20, r18
    305a:	53 07       	cpc	r21, r19
    305c:	18 f4       	brcc	.+6      	; 0x3064 <malloc+0x5c>
    305e:	9a 01       	movw	r18, r20
    3060:	be 01       	movw	r22, r28
    3062:	df 01       	movw	r26, r30
    3064:	ef 01       	movw	r28, r30
    3066:	02 80       	ldd	r0, Z+2	; 0x02
    3068:	f3 81       	ldd	r31, Z+3	; 0x03
    306a:	e0 2d       	mov	r30, r0
    306c:	dc cf       	rjmp	.-72     	; 0x3026 <malloc+0x1e>
    306e:	21 15       	cp	r18, r1
    3070:	31 05       	cpc	r19, r1
    3072:	09 f1       	breq	.+66     	; 0x30b6 <malloc+0xae>
    3074:	28 1b       	sub	r18, r24
    3076:	39 0b       	sbc	r19, r25
    3078:	24 30       	cpi	r18, 0x04	; 4
    307a:	31 05       	cpc	r19, r1
    307c:	90 f4       	brcc	.+36     	; 0x30a2 <malloc+0x9a>
    307e:	12 96       	adiw	r26, 0x02	; 2
    3080:	8d 91       	ld	r24, X+
    3082:	9c 91       	ld	r25, X
    3084:	13 97       	sbiw	r26, 0x03	; 3
    3086:	61 15       	cp	r22, r1
    3088:	71 05       	cpc	r23, r1
    308a:	21 f0       	breq	.+8      	; 0x3094 <malloc+0x8c>
    308c:	fb 01       	movw	r30, r22
    308e:	82 83       	std	Z+2, r24	; 0x02
    3090:	93 83       	std	Z+3, r25	; 0x03
    3092:	04 c0       	rjmp	.+8      	; 0x309c <malloc+0x94>
    3094:	80 93 95 20 	sts	0x2095, r24	; 0x802095 <__flp>
    3098:	90 93 96 20 	sts	0x2096, r25	; 0x802096 <__flp+0x1>
    309c:	fd 01       	movw	r30, r26
    309e:	32 96       	adiw	r30, 0x02	; 2
    30a0:	44 c0       	rjmp	.+136    	; 0x312a <malloc+0x122>
    30a2:	fd 01       	movw	r30, r26
    30a4:	e2 0f       	add	r30, r18
    30a6:	f3 1f       	adc	r31, r19
    30a8:	81 93       	st	Z+, r24
    30aa:	91 93       	st	Z+, r25
    30ac:	22 50       	subi	r18, 0x02	; 2
    30ae:	31 09       	sbc	r19, r1
    30b0:	2d 93       	st	X+, r18
    30b2:	3c 93       	st	X, r19
    30b4:	3a c0       	rjmp	.+116    	; 0x312a <malloc+0x122>
    30b6:	20 91 93 20 	lds	r18, 0x2093	; 0x802093 <__brkval>
    30ba:	30 91 94 20 	lds	r19, 0x2094	; 0x802094 <__brkval+0x1>
    30be:	23 2b       	or	r18, r19
    30c0:	41 f4       	brne	.+16     	; 0x30d2 <malloc+0xca>
    30c2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    30c6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    30ca:	20 93 93 20 	sts	0x2093, r18	; 0x802093 <__brkval>
    30ce:	30 93 94 20 	sts	0x2094, r19	; 0x802094 <__brkval+0x1>
    30d2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    30d6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    30da:	21 15       	cp	r18, r1
    30dc:	31 05       	cpc	r19, r1
    30de:	41 f4       	brne	.+16     	; 0x30f0 <malloc+0xe8>
    30e0:	2d b7       	in	r18, 0x3d	; 61
    30e2:	3e b7       	in	r19, 0x3e	; 62
    30e4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    30e8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    30ec:	24 1b       	sub	r18, r20
    30ee:	35 0b       	sbc	r19, r21
    30f0:	e0 91 93 20 	lds	r30, 0x2093	; 0x802093 <__brkval>
    30f4:	f0 91 94 20 	lds	r31, 0x2094	; 0x802094 <__brkval+0x1>
    30f8:	e2 17       	cp	r30, r18
    30fa:	f3 07       	cpc	r31, r19
    30fc:	a0 f4       	brcc	.+40     	; 0x3126 <malloc+0x11e>
    30fe:	2e 1b       	sub	r18, r30
    3100:	3f 0b       	sbc	r19, r31
    3102:	28 17       	cp	r18, r24
    3104:	39 07       	cpc	r19, r25
    3106:	78 f0       	brcs	.+30     	; 0x3126 <malloc+0x11e>
    3108:	ac 01       	movw	r20, r24
    310a:	4e 5f       	subi	r20, 0xFE	; 254
    310c:	5f 4f       	sbci	r21, 0xFF	; 255
    310e:	24 17       	cp	r18, r20
    3110:	35 07       	cpc	r19, r21
    3112:	48 f0       	brcs	.+18     	; 0x3126 <malloc+0x11e>
    3114:	4e 0f       	add	r20, r30
    3116:	5f 1f       	adc	r21, r31
    3118:	40 93 93 20 	sts	0x2093, r20	; 0x802093 <__brkval>
    311c:	50 93 94 20 	sts	0x2094, r21	; 0x802094 <__brkval+0x1>
    3120:	81 93       	st	Z+, r24
    3122:	91 93       	st	Z+, r25
    3124:	02 c0       	rjmp	.+4      	; 0x312a <malloc+0x122>
    3126:	e0 e0       	ldi	r30, 0x00	; 0
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	cf 01       	movw	r24, r30
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	08 95       	ret

00003132 <free>:
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	09 f4       	brne	.+2      	; 0x3140 <free+0xe>
    313e:	8c c0       	rjmp	.+280    	; 0x3258 <free+0x126>
    3140:	fc 01       	movw	r30, r24
    3142:	32 97       	sbiw	r30, 0x02	; 2
    3144:	12 82       	std	Z+2, r1	; 0x02
    3146:	13 82       	std	Z+3, r1	; 0x03
    3148:	00 91 95 20 	lds	r16, 0x2095	; 0x802095 <__flp>
    314c:	10 91 96 20 	lds	r17, 0x2096	; 0x802096 <__flp+0x1>
    3150:	01 15       	cp	r16, r1
    3152:	11 05       	cpc	r17, r1
    3154:	81 f4       	brne	.+32     	; 0x3176 <free+0x44>
    3156:	20 81       	ld	r18, Z
    3158:	31 81       	ldd	r19, Z+1	; 0x01
    315a:	82 0f       	add	r24, r18
    315c:	93 1f       	adc	r25, r19
    315e:	20 91 93 20 	lds	r18, 0x2093	; 0x802093 <__brkval>
    3162:	30 91 94 20 	lds	r19, 0x2094	; 0x802094 <__brkval+0x1>
    3166:	28 17       	cp	r18, r24
    3168:	39 07       	cpc	r19, r25
    316a:	79 f5       	brne	.+94     	; 0x31ca <free+0x98>
    316c:	e0 93 93 20 	sts	0x2093, r30	; 0x802093 <__brkval>
    3170:	f0 93 94 20 	sts	0x2094, r31	; 0x802094 <__brkval+0x1>
    3174:	71 c0       	rjmp	.+226    	; 0x3258 <free+0x126>
    3176:	d8 01       	movw	r26, r16
    3178:	40 e0       	ldi	r20, 0x00	; 0
    317a:	50 e0       	ldi	r21, 0x00	; 0
    317c:	ae 17       	cp	r26, r30
    317e:	bf 07       	cpc	r27, r31
    3180:	50 f4       	brcc	.+20     	; 0x3196 <free+0x64>
    3182:	12 96       	adiw	r26, 0x02	; 2
    3184:	2d 91       	ld	r18, X+
    3186:	3c 91       	ld	r19, X
    3188:	13 97       	sbiw	r26, 0x03	; 3
    318a:	ad 01       	movw	r20, r26
    318c:	21 15       	cp	r18, r1
    318e:	31 05       	cpc	r19, r1
    3190:	09 f1       	breq	.+66     	; 0x31d4 <free+0xa2>
    3192:	d9 01       	movw	r26, r18
    3194:	f3 cf       	rjmp	.-26     	; 0x317c <free+0x4a>
    3196:	9d 01       	movw	r18, r26
    3198:	da 01       	movw	r26, r20
    319a:	22 83       	std	Z+2, r18	; 0x02
    319c:	33 83       	std	Z+3, r19	; 0x03
    319e:	60 81       	ld	r22, Z
    31a0:	71 81       	ldd	r23, Z+1	; 0x01
    31a2:	86 0f       	add	r24, r22
    31a4:	97 1f       	adc	r25, r23
    31a6:	82 17       	cp	r24, r18
    31a8:	93 07       	cpc	r25, r19
    31aa:	69 f4       	brne	.+26     	; 0x31c6 <free+0x94>
    31ac:	ec 01       	movw	r28, r24
    31ae:	28 81       	ld	r18, Y
    31b0:	39 81       	ldd	r19, Y+1	; 0x01
    31b2:	26 0f       	add	r18, r22
    31b4:	37 1f       	adc	r19, r23
    31b6:	2e 5f       	subi	r18, 0xFE	; 254
    31b8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ba:	20 83       	st	Z, r18
    31bc:	31 83       	std	Z+1, r19	; 0x01
    31be:	8a 81       	ldd	r24, Y+2	; 0x02
    31c0:	9b 81       	ldd	r25, Y+3	; 0x03
    31c2:	82 83       	std	Z+2, r24	; 0x02
    31c4:	93 83       	std	Z+3, r25	; 0x03
    31c6:	45 2b       	or	r20, r21
    31c8:	29 f4       	brne	.+10     	; 0x31d4 <free+0xa2>
    31ca:	e0 93 95 20 	sts	0x2095, r30	; 0x802095 <__flp>
    31ce:	f0 93 96 20 	sts	0x2096, r31	; 0x802096 <__flp+0x1>
    31d2:	42 c0       	rjmp	.+132    	; 0x3258 <free+0x126>
    31d4:	12 96       	adiw	r26, 0x02	; 2
    31d6:	ed 93       	st	X+, r30
    31d8:	fc 93       	st	X, r31
    31da:	13 97       	sbiw	r26, 0x03	; 3
    31dc:	ed 01       	movw	r28, r26
    31de:	49 91       	ld	r20, Y+
    31e0:	59 91       	ld	r21, Y+
    31e2:	9e 01       	movw	r18, r28
    31e4:	24 0f       	add	r18, r20
    31e6:	35 1f       	adc	r19, r21
    31e8:	e2 17       	cp	r30, r18
    31ea:	f3 07       	cpc	r31, r19
    31ec:	71 f4       	brne	.+28     	; 0x320a <free+0xd8>
    31ee:	80 81       	ld	r24, Z
    31f0:	91 81       	ldd	r25, Z+1	; 0x01
    31f2:	84 0f       	add	r24, r20
    31f4:	95 1f       	adc	r25, r21
    31f6:	02 96       	adiw	r24, 0x02	; 2
    31f8:	8d 93       	st	X+, r24
    31fa:	9c 93       	st	X, r25
    31fc:	11 97       	sbiw	r26, 0x01	; 1
    31fe:	82 81       	ldd	r24, Z+2	; 0x02
    3200:	93 81       	ldd	r25, Z+3	; 0x03
    3202:	12 96       	adiw	r26, 0x02	; 2
    3204:	8d 93       	st	X+, r24
    3206:	9c 93       	st	X, r25
    3208:	13 97       	sbiw	r26, 0x03	; 3
    320a:	e0 e0       	ldi	r30, 0x00	; 0
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	d8 01       	movw	r26, r16
    3210:	12 96       	adiw	r26, 0x02	; 2
    3212:	8d 91       	ld	r24, X+
    3214:	9c 91       	ld	r25, X
    3216:	13 97       	sbiw	r26, 0x03	; 3
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	19 f0       	breq	.+6      	; 0x3222 <free+0xf0>
    321c:	f8 01       	movw	r30, r16
    321e:	8c 01       	movw	r16, r24
    3220:	f6 cf       	rjmp	.-20     	; 0x320e <free+0xdc>
    3222:	8d 91       	ld	r24, X+
    3224:	9c 91       	ld	r25, X
    3226:	98 01       	movw	r18, r16
    3228:	2e 5f       	subi	r18, 0xFE	; 254
    322a:	3f 4f       	sbci	r19, 0xFF	; 255
    322c:	82 0f       	add	r24, r18
    322e:	93 1f       	adc	r25, r19
    3230:	20 91 93 20 	lds	r18, 0x2093	; 0x802093 <__brkval>
    3234:	30 91 94 20 	lds	r19, 0x2094	; 0x802094 <__brkval+0x1>
    3238:	28 17       	cp	r18, r24
    323a:	39 07       	cpc	r19, r25
    323c:	69 f4       	brne	.+26     	; 0x3258 <free+0x126>
    323e:	30 97       	sbiw	r30, 0x00	; 0
    3240:	29 f4       	brne	.+10     	; 0x324c <free+0x11a>
    3242:	10 92 95 20 	sts	0x2095, r1	; 0x802095 <__flp>
    3246:	10 92 96 20 	sts	0x2096, r1	; 0x802096 <__flp+0x1>
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <free+0x11e>
    324c:	12 82       	std	Z+2, r1	; 0x02
    324e:	13 82       	std	Z+3, r1	; 0x03
    3250:	00 93 93 20 	sts	0x2093, r16	; 0x802093 <__brkval>
    3254:	10 93 94 20 	sts	0x2094, r17	; 0x802094 <__brkval+0x1>
    3258:	df 91       	pop	r29
    325a:	cf 91       	pop	r28
    325c:	1f 91       	pop	r17
    325e:	0f 91       	pop	r16
    3260:	08 95       	ret

00003262 <memset>:
    3262:	dc 01       	movw	r26, r24
    3264:	01 c0       	rjmp	.+2      	; 0x3268 <memset+0x6>
    3266:	6d 93       	st	X+, r22
    3268:	41 50       	subi	r20, 0x01	; 1
    326a:	50 40       	sbci	r21, 0x00	; 0
    326c:	e0 f7       	brcc	.-8      	; 0x3266 <memset+0x4>
    326e:	08 95       	ret

00003270 <_exit>:
    3270:	f8 94       	cli

00003272 <__stop_program>:
    3272:	ff cf       	rjmp	.-2      	; 0x3272 <__stop_program>
