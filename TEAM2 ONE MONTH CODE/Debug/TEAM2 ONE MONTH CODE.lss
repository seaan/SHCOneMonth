
TEAM2 ONE MONTH CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00802000  000031ec  00003280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  00802036  00802036  000032b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000032b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00003358  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cf5f  00000000  00000000  00003758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024ed  00000000  00000000  000106b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009f45  00000000  00000000  00012ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be8  00000000  00000000  0001caec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002a9d9  00000000  00000000  0001d6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003855  00000000  00000000  000480ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0004b908  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b92f  00000000  00000000  0004bc38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a7 c1       	rjmp	.+846    	; 0x350 <__ctors_end>
       2:	00 00       	nop
       4:	cb c1       	rjmp	.+918    	; 0x39c <__bad_interrupt>
       6:	00 00       	nop
       8:	c9 c1       	rjmp	.+914    	; 0x39c <__bad_interrupt>
       a:	00 00       	nop
       c:	c7 c1       	rjmp	.+910    	; 0x39c <__bad_interrupt>
       e:	00 00       	nop
      10:	c5 c1       	rjmp	.+906    	; 0x39c <__bad_interrupt>
      12:	00 00       	nop
      14:	c3 c1       	rjmp	.+902    	; 0x39c <__bad_interrupt>
      16:	00 00       	nop
      18:	c1 c1       	rjmp	.+898    	; 0x39c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bf c1       	rjmp	.+894    	; 0x39c <__bad_interrupt>
      1e:	00 00       	nop
      20:	bd c1       	rjmp	.+890    	; 0x39c <__bad_interrupt>
      22:	00 00       	nop
      24:	bb c1       	rjmp	.+886    	; 0x39c <__bad_interrupt>
      26:	00 00       	nop
      28:	ba c1       	rjmp	.+884    	; 0x39e <__vector_10>
      2a:	00 00       	nop
      2c:	db c1       	rjmp	.+950    	; 0x3e4 <__vector_11>
      2e:	00 00       	nop
      30:	b5 c1       	rjmp	.+874    	; 0x39c <__bad_interrupt>
      32:	00 00       	nop
      34:	b3 c1       	rjmp	.+870    	; 0x39c <__bad_interrupt>
      36:	00 00       	nop
      38:	b1 c1       	rjmp	.+866    	; 0x39c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	af c1       	rjmp	.+862    	; 0x39c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ad c1       	rjmp	.+858    	; 0x39c <__bad_interrupt>
      42:	00 00       	nop
      44:	ab c1       	rjmp	.+854    	; 0x39c <__bad_interrupt>
      46:	00 00       	nop
      48:	a9 c1       	rjmp	.+850    	; 0x39c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a7 c1       	rjmp	.+846    	; 0x39c <__bad_interrupt>
      4e:	00 00       	nop
      50:	a5 c1       	rjmp	.+842    	; 0x39c <__bad_interrupt>
      52:	00 00       	nop
      54:	a3 c1       	rjmp	.+838    	; 0x39c <__bad_interrupt>
      56:	00 00       	nop
      58:	a1 c1       	rjmp	.+834    	; 0x39c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9f c1       	rjmp	.+830    	; 0x39c <__bad_interrupt>
      5e:	00 00       	nop
      60:	9d c1       	rjmp	.+826    	; 0x39c <__bad_interrupt>
      62:	00 00       	nop
      64:	9b c1       	rjmp	.+822    	; 0x39c <__bad_interrupt>
      66:	00 00       	nop
      68:	99 c1       	rjmp	.+818    	; 0x39c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	97 c1       	rjmp	.+814    	; 0x39c <__bad_interrupt>
      6e:	00 00       	nop
      70:	95 c1       	rjmp	.+810    	; 0x39c <__bad_interrupt>
      72:	00 00       	nop
      74:	93 c1       	rjmp	.+806    	; 0x39c <__bad_interrupt>
      76:	00 00       	nop
      78:	91 c1       	rjmp	.+802    	; 0x39c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8f c1       	rjmp	.+798    	; 0x39c <__bad_interrupt>
      7e:	00 00       	nop
      80:	8d c1       	rjmp	.+794    	; 0x39c <__bad_interrupt>
      82:	00 00       	nop
      84:	8b c1       	rjmp	.+790    	; 0x39c <__bad_interrupt>
      86:	00 00       	nop
      88:	89 c1       	rjmp	.+786    	; 0x39c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	87 c1       	rjmp	.+782    	; 0x39c <__bad_interrupt>
      8e:	00 00       	nop
      90:	85 c1       	rjmp	.+778    	; 0x39c <__bad_interrupt>
      92:	00 00       	nop
      94:	83 c1       	rjmp	.+774    	; 0x39c <__bad_interrupt>
      96:	00 00       	nop
      98:	81 c1       	rjmp	.+770    	; 0x39c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	77 c5       	rjmp	.+2798   	; 0xb8c <__vector_39>
      9e:	00 00       	nop
      a0:	b2 c5       	rjmp	.+2916   	; 0xc06 <__vector_40>
      a2:	00 00       	nop
      a4:	ed c5       	rjmp	.+3034   	; 0xc80 <__vector_41>
      a6:	00 00       	nop
      a8:	28 c6       	rjmp	.+3152   	; 0xcfa <__vector_42>
      aa:	00 00       	nop
      ac:	77 c1       	rjmp	.+750    	; 0x39c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	75 c1       	rjmp	.+746    	; 0x39c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	73 c1       	rjmp	.+742    	; 0x39c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	71 c1       	rjmp	.+738    	; 0x39c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	6f c1       	rjmp	.+734    	; 0x39c <__bad_interrupt>
      be:	00 00       	nop
      c0:	6d c1       	rjmp	.+730    	; 0x39c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	6b c1       	rjmp	.+726    	; 0x39c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	69 c1       	rjmp	.+722    	; 0x39c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	67 c1       	rjmp	.+718    	; 0x39c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	65 c1       	rjmp	.+714    	; 0x39c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	63 c1       	rjmp	.+710    	; 0x39c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	61 c1       	rjmp	.+706    	; 0x39c <__bad_interrupt>
      da:	00 00       	nop
      dc:	5f c1       	rjmp	.+702    	; 0x39c <__bad_interrupt>
      de:	00 00       	nop
      e0:	5d c1       	rjmp	.+698    	; 0x39c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5b c1       	rjmp	.+694    	; 0x39c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	59 c1       	rjmp	.+690    	; 0x39c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	57 c1       	rjmp	.+686    	; 0x39c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	55 c1       	rjmp	.+682    	; 0x39c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	53 c1       	rjmp	.+678    	; 0x39c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	51 c1       	rjmp	.+674    	; 0x39c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	4f c1       	rjmp	.+670    	; 0x39c <__bad_interrupt>
      fe:	00 00       	nop
     100:	4d c1       	rjmp	.+666    	; 0x39c <__bad_interrupt>
     102:	00 00       	nop
     104:	4b c1       	rjmp	.+662    	; 0x39c <__bad_interrupt>
     106:	00 00       	nop
     108:	49 c1       	rjmp	.+658    	; 0x39c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	47 c1       	rjmp	.+654    	; 0x39c <__bad_interrupt>
     10e:	00 00       	nop
     110:	45 c1       	rjmp	.+650    	; 0x39c <__bad_interrupt>
     112:	00 00       	nop
     114:	43 c1       	rjmp	.+646    	; 0x39c <__bad_interrupt>
     116:	00 00       	nop
     118:	41 c1       	rjmp	.+642    	; 0x39c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	43 c4       	rjmp	.+2182   	; 0x9a4 <__vector_71>
     11e:	00 00       	nop
     120:	7e c4       	rjmp	.+2300   	; 0xa1e <__vector_72>
     122:	00 00       	nop
     124:	b9 c4       	rjmp	.+2418   	; 0xa98 <__vector_73>
     126:	00 00       	nop
     128:	f4 c4       	rjmp	.+2536   	; 0xb12 <__vector_74>
     12a:	00 00       	nop
     12c:	37 c1       	rjmp	.+622    	; 0x39c <__bad_interrupt>
     12e:	00 00       	nop
     130:	35 c1       	rjmp	.+618    	; 0x39c <__bad_interrupt>
     132:	00 00       	nop
     134:	33 c1       	rjmp	.+614    	; 0x39c <__bad_interrupt>
     136:	00 00       	nop
     138:	31 c1       	rjmp	.+610    	; 0x39c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	2f c1       	rjmp	.+606    	; 0x39c <__bad_interrupt>
     13e:	00 00       	nop
     140:	2d c1       	rjmp	.+602    	; 0x39c <__bad_interrupt>
     142:	00 00       	nop
     144:	2b c1       	rjmp	.+598    	; 0x39c <__bad_interrupt>
     146:	00 00       	nop
     148:	29 c1       	rjmp	.+594    	; 0x39c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	27 c1       	rjmp	.+590    	; 0x39c <__bad_interrupt>
     14e:	00 00       	nop
     150:	25 c1       	rjmp	.+586    	; 0x39c <__bad_interrupt>
     152:	00 00       	nop
     154:	23 c1       	rjmp	.+582    	; 0x39c <__bad_interrupt>
     156:	00 00       	nop
     158:	21 c1       	rjmp	.+578    	; 0x39c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	1f c1       	rjmp	.+574    	; 0x39c <__bad_interrupt>
     15e:	00 00       	nop
     160:	1d c1       	rjmp	.+570    	; 0x39c <__bad_interrupt>
     162:	00 00       	nop
     164:	1b c1       	rjmp	.+566    	; 0x39c <__bad_interrupt>
     166:	00 00       	nop
     168:	19 c1       	rjmp	.+562    	; 0x39c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	17 c1       	rjmp	.+558    	; 0x39c <__bad_interrupt>
     16e:	00 00       	nop
     170:	15 c1       	rjmp	.+554    	; 0x39c <__bad_interrupt>
     172:	00 00       	nop
     174:	13 c1       	rjmp	.+550    	; 0x39c <__bad_interrupt>
     176:	00 00       	nop
     178:	11 c1       	rjmp	.+546    	; 0x39c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	0f c1       	rjmp	.+542    	; 0x39c <__bad_interrupt>
     17e:	00 00       	nop
     180:	0d c1       	rjmp	.+538    	; 0x39c <__bad_interrupt>
     182:	00 00       	nop
     184:	0b c1       	rjmp	.+534    	; 0x39c <__bad_interrupt>
     186:	00 00       	nop
     188:	09 c1       	rjmp	.+530    	; 0x39c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	07 c1       	rjmp	.+526    	; 0x39c <__bad_interrupt>
     18e:	00 00       	nop
     190:	05 c1       	rjmp	.+522    	; 0x39c <__bad_interrupt>
     192:	00 00       	nop
     194:	03 c1       	rjmp	.+518    	; 0x39c <__bad_interrupt>
     196:	00 00       	nop
     198:	01 c1       	rjmp	.+514    	; 0x39c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	ff c0       	rjmp	.+510    	; 0x39c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	fd c0       	rjmp	.+506    	; 0x39c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	fb c0       	rjmp	.+502    	; 0x39c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	f9 c0       	rjmp	.+498    	; 0x39c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	f7 c0       	rjmp	.+494    	; 0x39c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	f5 c0       	rjmp	.+490    	; 0x39c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	f3 c0       	rjmp	.+486    	; 0x39c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	f1 c0       	rjmp	.+482    	; 0x39c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	ef c0       	rjmp	.+478    	; 0x39c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	ed c0       	rjmp	.+474    	; 0x39c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	eb c0       	rjmp	.+470    	; 0x39c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	e9 c0       	rjmp	.+466    	; 0x39c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	e7 c0       	rjmp	.+462    	; 0x39c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	e5 c0       	rjmp	.+458    	; 0x39c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	e3 c0       	rjmp	.+454    	; 0x39c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	e1 c0       	rjmp	.+450    	; 0x39c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	df c0       	rjmp	.+446    	; 0x39c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	dd c0       	rjmp	.+442    	; 0x39c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	db c0       	rjmp	.+438    	; 0x39c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	d9 c0       	rjmp	.+434    	; 0x39c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	d7 c0       	rjmp	.+430    	; 0x39c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	d5 c0       	rjmp	.+426    	; 0x39c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	08 00       	.word	0x0008	; ????
     1f6:	00 00       	nop
     1f8:	be 92       	st	-X, r11
     1fa:	24 49       	sbci	r18, 0x94	; 148
     1fc:	12 3e       	cpi	r17, 0xE2	; 226
     1fe:	ab aa       	std	Y+51, r10	; 0x33
     200:	aa 2a       	or	r10, r26
     202:	be cd       	rjmp	.-1156   	; 0xfffffd80 <__eeprom_end+0xff7efd80>
     204:	cc cc       	rjmp	.-1640   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     206:	4c 3e       	cpi	r20, 0xEC	; 236
     208:	00 00       	nop
     20a:	00 80       	ld	r0, Z
     20c:	be ab       	std	Y+54, r27	; 0x36
     20e:	aa aa       	std	Y+50, r10	; 0x32
     210:	aa 3e       	cpi	r26, 0xEA	; 234
     212:	00 00       	nop
     214:	00 00       	nop
     216:	bf 00       	.word	0x00bf	; ????
     218:	00 00       	nop
     21a:	80 3f       	cpi	r24, 0xF0	; 240
     21c:	00 00       	nop
     21e:	00 00       	nop
     220:	00 08       	sbc	r0, r0
     222:	41 78       	andi	r20, 0x81	; 129
     224:	d3 bb       	out	0x13, r29	; 19
     226:	43 87       	std	Z+11, r20	; 0x0b
     228:	d1 13       	cpse	r29, r17
     22a:	3d 19       	sub	r19, r13
     22c:	0e 3c       	cpi	r16, 0xCE	; 206
     22e:	c3 bd       	out	0x23, r28	; 35
     230:	42 82       	std	Z+2, r4	; 0x02
     232:	ad 2b       	or	r26, r29
     234:	3e 68       	ori	r19, 0x8E	; 142
     236:	ec 82       	std	Y+4, r14	; 0x04
     238:	76 be       	out	0x36, r7	; 54
     23a:	d9 8f       	std	Y+25, r29	; 0x19
     23c:	e1 a9       	ldd	r30, Z+49	; 0x31
     23e:	3e 4c       	sbci	r19, 0xCE	; 206
     240:	80 ef       	ldi	r24, 0xF0	; 240
     242:	ff be       	out	0x3f, r15	; 63
     244:	01 c4       	rjmp	.+2050   	; 0xa48 <__vector_72+0x2a>
     246:	ff 7f       	andi	r31, 0xFF	; 255
     248:	3f 00       	.word	0x003f	; ????
     24a:	00 00       	nop
	...

0000024e <__trampolines_end>:
     24e:	6e 61       	ori	r22, 0x1E	; 30
     250:	6e 00       	.word	0x006e	; ????

00000252 <__c.2240>:
     252:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     262:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     272:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     282:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     292:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2a2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2b2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2c2:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2d2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2e2:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2f2:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     302:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     312:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     322:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     332:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     342:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000350 <__ctors_end>:
     350:	11 24       	eor	r1, r1
     352:	1f be       	out	0x3f, r1	; 63
     354:	cf ef       	ldi	r28, 0xFF	; 255
     356:	cd bf       	out	0x3d, r28	; 61
     358:	df e3       	ldi	r29, 0x3F	; 63
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	00 e0       	ldi	r16, 0x00	; 0
     35e:	0c bf       	out	0x3c, r16	; 60
     360:	18 be       	out	0x38, r1	; 56
     362:	19 be       	out	0x39, r1	; 57
     364:	1a be       	out	0x3a, r1	; 58
     366:	1b be       	out	0x3b, r1	; 59

00000368 <__do_copy_data>:
     368:	10 e2       	ldi	r17, 0x20	; 32
     36a:	a0 e0       	ldi	r26, 0x00	; 0
     36c:	b0 e2       	ldi	r27, 0x20	; 32
     36e:	ec ee       	ldi	r30, 0xEC	; 236
     370:	f1 e3       	ldi	r31, 0x31	; 49
     372:	00 e0       	ldi	r16, 0x00	; 0
     374:	0b bf       	out	0x3b, r16	; 59
     376:	02 c0       	rjmp	.+4      	; 0x37c <__do_copy_data+0x14>
     378:	07 90       	elpm	r0, Z+
     37a:	0d 92       	st	X+, r0
     37c:	a6 33       	cpi	r26, 0x36	; 54
     37e:	b1 07       	cpc	r27, r17
     380:	d9 f7       	brne	.-10     	; 0x378 <__do_copy_data+0x10>
     382:	1b be       	out	0x3b, r1	; 59

00000384 <__do_clear_bss>:
     384:	20 e2       	ldi	r18, 0x20	; 32
     386:	a6 e3       	ldi	r26, 0x36	; 54
     388:	b0 e2       	ldi	r27, 0x20	; 32
     38a:	01 c0       	rjmp	.+2      	; 0x38e <.do_clear_bss_start>

0000038c <.do_clear_bss_loop>:
     38c:	1d 92       	st	X+, r1

0000038e <.do_clear_bss_start>:
     38e:	ae 36       	cpi	r26, 0x6E	; 110
     390:	b2 07       	cpc	r27, r18
     392:	e1 f7       	brne	.-8      	; 0x38c <.do_clear_bss_loop>
     394:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <main>
     398:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <_exit>

0000039c <__bad_interrupt>:
     39c:	31 ce       	rjmp	.-926    	; 0x0 <__vectors>

0000039e <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	08 b6       	in	r0, 0x38	; 56
     3aa:	0f 92       	push	r0
     3ac:	18 be       	out	0x38, r1	; 56
     3ae:	0b b6       	in	r0, 0x3b	; 59
     3b0:	0f 92       	push	r0
     3b2:	1b be       	out	0x3b, r1	; 59
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
     3b8:	ef 93       	push	r30
     3ba:	ff 93       	push	r31
	rtc_data.counter_high++;
     3bc:	ef e3       	ldi	r30, 0x3F	; 63
     3be:	f0 e2       	ldi	r31, 0x20	; 32
     3c0:	80 81       	ld	r24, Z
     3c2:	91 81       	ldd	r25, Z+1	; 0x01
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	80 83       	st	Z, r24
     3c8:	91 83       	std	Z+1, r25	; 0x01
}
     3ca:	ff 91       	pop	r31
     3cc:	ef 91       	pop	r30
     3ce:	9f 91       	pop	r25
     3d0:	8f 91       	pop	r24
     3d2:	0f 90       	pop	r0
     3d4:	0b be       	out	0x3b, r0	; 59
     3d6:	0f 90       	pop	r0
     3d8:	08 be       	out	0x38, r0	; 56
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	08 b6       	in	r0, 0x38	; 56
     3f0:	0f 92       	push	r0
     3f2:	18 be       	out	0x38, r1	; 56
     3f4:	09 b6       	in	r0, 0x39	; 57
     3f6:	0f 92       	push	r0
     3f8:	19 be       	out	0x39, r1	; 57
     3fa:	0b b6       	in	r0, 0x3b	; 59
     3fc:	0f 92       	push	r0
     3fe:	1b be       	out	0x3b, r1	; 59
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	2f 93       	push	r18
     40e:	3f 93       	push	r19
     410:	4f 93       	push	r20
     412:	5f 93       	push	r21
     414:	6f 93       	push	r22
     416:	7f 93       	push	r23
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	af 93       	push	r26
     41e:	bf 93       	push	r27
     420:	ef 93       	push	r30
     422:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     424:	ef e3       	ldi	r30, 0x3F	; 63
     426:	f0 e2       	ldi	r31, 0x20	; 32
     428:	80 81       	ld	r24, Z
     42a:	91 81       	ldd	r25, Z+1	; 0x01
     42c:	22 81       	ldd	r18, Z+2	; 0x02
     42e:	33 81       	ldd	r19, Z+3	; 0x03
     430:	82 17       	cp	r24, r18
     432:	93 07       	cpc	r25, r19
     434:	f0 f1       	brcs	.+124    	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     43c:	e0 91 45 20 	lds	r30, 0x2045	; 0x802045 <rtc_data+0x6>
     440:	f0 91 46 20 	lds	r31, 0x2046	; 0x802046 <rtc_data+0x7>
     444:	30 97       	sbiw	r30, 0x00	; 0
     446:	a9 f1       	breq	.+106    	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     448:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     44c:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     450:	a0 e0       	ldi	r26, 0x00	; 0
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	dc 01       	movw	r26, r24
     456:	99 27       	eor	r25, r25
     458:	88 27       	eor	r24, r24
					| RTC.CNT;
     45a:	ab 01       	movw	r20, r22
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     460:	8c 01       	movw	r16, r24
     462:	9d 01       	movw	r18, r26
     464:	04 2b       	or	r16, r20
     466:	15 2b       	or	r17, r21
     468:	26 2b       	or	r18, r22
     46a:	37 2b       	or	r19, r23
     46c:	c9 01       	movw	r24, r18
     46e:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     470:	af e3       	ldi	r26, 0x3F	; 63
     472:	b0 e2       	ldi	r27, 0x20	; 32
     474:	12 96       	adiw	r26, 0x02	; 2
     476:	0d 91       	ld	r16, X+
     478:	1c 91       	ld	r17, X
     47a:	13 97       	sbiw	r26, 0x03	; 3
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	98 01       	movw	r18, r16
     482:	11 27       	eor	r17, r17
     484:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     486:	14 96       	adiw	r26, 0x04	; 4
     488:	cd 90       	ld	r12, X+
     48a:	dc 90       	ld	r13, X
     48c:	15 97       	sbiw	r26, 0x05	; 5
     48e:	e1 2c       	mov	r14, r1
     490:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     492:	0c 29       	or	r16, r12
     494:	1d 29       	or	r17, r13
     496:	2e 29       	or	r18, r14
     498:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     49a:	06 17       	cp	r16, r22
     49c:	17 07       	cpc	r17, r23
     49e:	28 07       	cpc	r18, r24
     4a0:	39 07       	cpc	r19, r25
     4a2:	30 f0       	brcs	.+12     	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
				count = alarm + 1;
     4a4:	c9 01       	movw	r24, r18
     4a6:	b8 01       	movw	r22, r16
     4a8:	6f 5f       	subi	r22, 0xFF	; 255
     4aa:	7f 4f       	sbci	r23, 0xFF	; 255
     4ac:	8f 4f       	sbci	r24, 0xFF	; 255
     4ae:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     4b0:	19 95       	eicall
		}
	}
}
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	bf 91       	pop	r27
     4b8:	af 91       	pop	r26
     4ba:	9f 91       	pop	r25
     4bc:	8f 91       	pop	r24
     4be:	7f 91       	pop	r23
     4c0:	6f 91       	pop	r22
     4c2:	5f 91       	pop	r21
     4c4:	4f 91       	pop	r20
     4c6:	3f 91       	pop	r19
     4c8:	2f 91       	pop	r18
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	df 90       	pop	r13
     4d4:	cf 90       	pop	r12
     4d6:	0f 90       	pop	r0
     4d8:	0b be       	out	0x3b, r0	; 59
     4da:	0f 90       	pop	r0
     4dc:	09 be       	out	0x39, r0	; 57
     4de:	0f 90       	pop	r0
     4e0:	08 be       	out	0x38, r0	; 56
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <getAltitude>:
 #include <asf.h>
 #include <math.h>
 #include "Calculations/Altitude/getAltitude.h"
 #include "Drivers/Pressure/getPressure.h"
 #include "Drivers/Temperature/getTemperature.h"
 float getAltitude(void){
     4ec:	8f 92       	push	r8
     4ee:	9f 92       	push	r9
     4f0:	af 92       	push	r10
     4f2:	bf 92       	push	r11
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15

	float temperature = getTemperature();
     4fc:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <getTemperature>
     500:	4b 01       	movw	r8, r22
     502:	5c 01       	movw	r10, r24
	float pressure = (float)getPressure();
     504:	9a d7       	rcall	.+3892   	; 0x143a <getPressure>
     506:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__floatsisf>
     50a:	9b 01       	movw	r18, r22
     50c:	ac 01       	movw	r20, r24
	
	float alt2 = log(pconst/pressure);

	//printf("pressure: %f\ntemperature: %f\nalt1:%f\nalt2:%f\n",pressure,temperature,alt1,alt2);

	return ((R * temperature)/g)*log(pconst/pressure);  //Equation found here: https://en.wikipedia.org/wiki/Hypsometric_equation 
     50e:	60 e8       	ldi	r22, 0x80	; 128
     510:	76 ee       	ldi	r23, 0xE6	; 230
     512:	85 ec       	ldi	r24, 0xC5	; 197
     514:	97 e4       	ldi	r25, 0x47	; 71
     516:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__divsf3>
     51a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <log>
     51e:	6b 01       	movw	r12, r22
     520:	7c 01       	movw	r14, r24
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e8       	ldi	r19, 0x80	; 128
     526:	4f e8       	ldi	r20, 0x8F	; 143
     528:	53 e4       	ldi	r21, 0x43	; 67
     52a:	c5 01       	movw	r24, r10
     52c:	b4 01       	movw	r22, r8
     52e:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
     532:	2a e0       	ldi	r18, 0x0A	; 10
     534:	38 ee       	ldi	r19, 0xE8	; 232
     536:	4c e1       	ldi	r20, 0x1C	; 28
     538:	51 e4       	ldi	r21, 0x41	; 65
     53a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__divsf3>
     53e:	a7 01       	movw	r20, r14
     540:	96 01       	movw	r18, r12
     542:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	bf 90       	pop	r11
     550:	af 90       	pop	r10
     552:	9f 90       	pop	r9
     554:	8f 90       	pop	r8
     556:	08 95       	ret

00000558 <getVelocity>:
 #include "Calculations/Altitude/getAltitude.h"

 float exponentialSmoothing(float p_smth_vel, float current_vel);

 //Velocity function
 float getVelocity(void){
     558:	4f 92       	push	r4
     55a:	5f 92       	push	r5
     55c:	6f 92       	push	r6
     55e:	7f 92       	push	r7
     560:	8f 92       	push	r8
     562:	9f 92       	push	r9
     564:	af 92       	push	r10
     566:	bf 92       	push	r11
     568:	cf 92       	push	r12
     56a:	df 92       	push	r13
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	c0 59       	subi	r28, 0x90	; 144
     57e:	d1 40       	sbci	r29, 0x01	; 1
     580:	cd bf       	out	0x3d, r28	; 61
     582:	de bf       	out	0x3e, r29	; 62
	float perms = 3.1249523;	
	float arr_alt[25]; //Creates an array of size 25 for altitude.
	float arr_vel[25]; //Velocity array.
	float arr_time[25]; //time array
	while (TCF0.CNT != TCF0.PER); //wait until interrupt is done.
     584:	e0 e0       	ldi	r30, 0x00	; 0
     586:	fb e0       	ldi	r31, 0x0B	; 11
     588:	20 a1       	ldd	r18, Z+32	; 0x20
     58a:	31 a1       	ldd	r19, Z+33	; 0x21
     58c:	86 a1       	ldd	r24, Z+38	; 0x26
     58e:	97 a1       	ldd	r25, Z+39	; 0x27
     590:	28 17       	cp	r18, r24
     592:	39 07       	cpc	r19, r25
     594:	c9 f7       	brne	.-14     	; 0x588 <getVelocity+0x30>
	float final_alt = getAltitude(); //sets final altitude for the loop to the current altitude.
     596:	aa df       	rcall	.-172    	; 0x4ec <getAltitude>
     598:	2b 01       	movw	r4, r22
     59a:	3c 01       	movw	r6, r24
     59c:	ce 01       	movw	r24, r28
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	7c 01       	movw	r14, r24
     5a2:	6e 01       	movw	r12, r28
     5a4:	99 ec       	ldi	r25, 0xC9	; 201
     5a6:	c9 0e       	add	r12, r25
     5a8:	d1 1c       	adc	r13, r1
     5aa:	5e 01       	movw	r10, r28
     5ac:	e5 e6       	ldi	r30, 0x65	; 101
     5ae:	ae 0e       	add	r10, r30
     5b0:	b1 1c       	adc	r11, r1
	for(int i = 0; i < 25; i++){ //For each element in altTable
		while (TCF0.CNT != TCF0.PER); //wait until TCF0 overflows, which will take 10ms
     5b2:	00 e0       	ldi	r16, 0x00	; 0
     5b4:	1b e0       	ldi	r17, 0x0B	; 11
     5b6:	f8 01       	movw	r30, r16
     5b8:	20 a1       	ldd	r18, Z+32	; 0x20
     5ba:	31 a1       	ldd	r19, Z+33	; 0x21
     5bc:	86 a1       	ldd	r24, Z+38	; 0x26
     5be:	97 a1       	ldd	r25, Z+39	; 0x27
     5c0:	28 17       	cp	r18, r24
     5c2:	39 07       	cpc	r19, r25
     5c4:	c1 f7       	brne	.-16     	; 0x5b6 <getVelocity+0x5e>
		//printf("final_alt:%.2f\n",final_alt);
		//delay_ms(10); //Delay for 10ms, creates a sample rate for velocity of 100Hz. 
		arr_alt[i] = final_alt - getAltitude(); //Set the current element to the delta altitude found with final altitude of the previous iteration subtracted by the current altitude.
     5c6:	92 df       	rcall	.-220    	; 0x4ec <getAltitude>
     5c8:	9b 01       	movw	r18, r22
     5ca:	ac 01       	movw	r20, r24
     5cc:	c3 01       	movw	r24, r6
     5ce:	b2 01       	movw	r22, r4
     5d0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__subsf3>
     5d4:	f7 01       	movw	r30, r14
     5d6:	61 93       	st	Z+, r22
     5d8:	71 93       	st	Z+, r23
     5da:	81 93       	st	Z+, r24
     5dc:	91 93       	st	Z+, r25
     5de:	7f 01       	movw	r14, r30
		//printf("arr_alt: %.2f\n",arr_alt[i]);

		arr_time[i] = TCF0.CNT/perms + 10; //time element array is one ahead so we can record the change in time + 10ms for the timer counter.
     5e0:	f8 01       	movw	r30, r16
     5e2:	60 a1       	ldd	r22, Z+32	; 0x20
     5e4:	71 a1       	ldd	r23, Z+33	; 0x21
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatunsisf>
     5ee:	28 e3       	ldi	r18, 0x38	; 56
     5f0:	3f ef       	ldi	r19, 0xFF	; 255
     5f2:	47 e4       	ldi	r20, 0x47	; 71
     5f4:	50 e4       	ldi	r21, 0x40	; 64
     5f6:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__divsf3>
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e2       	ldi	r20, 0x20	; 32
     600:	51 e4       	ldi	r21, 0x41	; 65
     602:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__addsf3>
     606:	f6 01       	movw	r30, r12
     608:	61 93       	st	Z+, r22
     60a:	71 93       	st	Z+, r23
     60c:	81 93       	st	Z+, r24
     60e:	91 93       	st	Z+, r25
     610:	6f 01       	movw	r12, r30
		//printf("arr_time: %.2f\n",arr_time[i]);

		final_alt = getAltitude(); //Sets the final altitude for the iteration to the current altitude.
     612:	6c df       	rcall	.-296    	; 0x4ec <getAltitude>
     614:	2b 01       	movw	r4, r22
     616:	3c 01       	movw	r6, r24
	float arr_alt[25]; //Creates an array of size 25 for altitude.
	float arr_vel[25]; //Velocity array.
	float arr_time[25]; //time array
	while (TCF0.CNT != TCF0.PER); //wait until interrupt is done.
	float final_alt = getAltitude(); //sets final altitude for the loop to the current altitude.
	for(int i = 0; i < 25; i++){ //For each element in altTable
     618:	ea 14       	cp	r14, r10
     61a:	fb 04       	cpc	r15, r11
     61c:	61 f6       	brne	.-104    	; 0x5b6 <getVelocity+0x5e>
     61e:	8e 01       	movw	r16, r28
     620:	0b 5f       	subi	r16, 0xFB	; 251
     622:	1f 4f       	sbci	r17, 0xFF	; 255
     624:	3e 01       	movw	r6, r28
     626:	fd ec       	ldi	r31, 0xCD	; 205
     628:	6f 0e       	add	r6, r31
     62a:	71 1c       	adc	r7, r1
     62c:	7e 01       	movw	r14, r28
     62e:	89 e6       	ldi	r24, 0x69	; 105
     630:	e8 0e       	add	r14, r24
     632:	f1 1c       	adc	r15, r1
     634:	67 01       	movw	r12, r14

		final_alt = getAltitude(); //Sets the final altitude for the iteration to the current altitude.
	}

	for(int z = 1; z < 25; z++){
		arr_vel[z] = arr_alt[z]/arr_time[z]; //Approximated velocity using a centered difference scheme, reduces noise from taking the derivative.
     636:	f8 01       	movw	r30, r16
     638:	61 91       	ld	r22, Z+
     63a:	71 91       	ld	r23, Z+
     63c:	81 91       	ld	r24, Z+
     63e:	91 91       	ld	r25, Z+
     640:	8f 01       	movw	r16, r30
     642:	f3 01       	movw	r30, r6
     644:	21 91       	ld	r18, Z+
     646:	31 91       	ld	r19, Z+
     648:	41 91       	ld	r20, Z+
     64a:	51 91       	ld	r21, Z+
     64c:	3f 01       	movw	r6, r30
     64e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__divsf3>
     652:	f6 01       	movw	r30, r12
     654:	61 93       	st	Z+, r22
     656:	71 93       	st	Z+, r23
     658:	81 93       	st	Z+, r24
     65a:	91 93       	st	Z+, r25
     65c:	6f 01       	movw	r12, r30
		//printf("arr_time: %.2f\n",arr_time[i]);

		final_alt = getAltitude(); //Sets the final altitude for the iteration to the current altitude.
	}

	for(int z = 1; z < 25; z++){
     65e:	0a 15       	cp	r16, r10
     660:	1b 05       	cpc	r17, r11
     662:	49 f7       	brne	.-46     	; 0x636 <getVelocity+0xde>
	/*for(int z = 1; z < 25; z++){
		arr_vel[z] = (arr_alt[z+1] - arr_alt[z-1])/(2*arr_time[z]); //Approximated velocity using a centered difference scheme, reduces noise from taking the derivative.
		printf("arr_vel: %.2f\n",arr_vel[z]);
	}*/

	arr_vel[0] = arr_alt[0]/(arr_time[0] + 10); //Still need to get the first velocity, time was missing ~10ms.
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	40 e2       	ldi	r20, 0x20	; 32
     66a:	51 e4       	ldi	r21, 0x41	; 65
     66c:	c7 53       	subi	r28, 0x37	; 55
     66e:	df 4f       	sbci	r29, 0xFF	; 255
     670:	68 81       	ld	r22, Y
     672:	79 81       	ldd	r23, Y+1	; 0x01
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	9b 81       	ldd	r25, Y+3	; 0x03
     678:	c9 5c       	subi	r28, 0xC9	; 201
     67a:	d0 40       	sbci	r29, 0x00	; 0
     67c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__addsf3>
     680:	9b 01       	movw	r18, r22
     682:	ac 01       	movw	r20, r24
     684:	69 81       	ldd	r22, Y+1	; 0x01
     686:	7a 81       	ldd	r23, Y+2	; 0x02
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__divsf3>
     690:	a9 96       	adiw	r28, 0x29	; 41
     692:	6c af       	std	Y+60, r22	; 0x3c
     694:	7d af       	std	Y+61, r23	; 0x3d
     696:	8e af       	std	Y+62, r24	; 0x3e
     698:	9f af       	std	Y+63, r25	; 0x3f
     69a:	a9 97       	sbiw	r28, 0x29	; 41

	//Now we know the velocity for 25 different samples over a total of 250ms. We now need to exponentially smooth the data to reduce noise again.

	float a_smooth[25]; //Smoothed velocity table of size 25.
	a_smooth[0] = arr_vel[0]; //Sets the initial smoothed value to the first velocity taken.
     69c:	c3 5d       	subi	r28, 0xD3	; 211
     69e:	de 4f       	sbci	r29, 0xFE	; 254
     6a0:	68 83       	st	Y, r22
     6a2:	79 83       	std	Y+1, r23	; 0x01
     6a4:	8a 83       	std	Y+2, r24	; 0x02
     6a6:	9b 83       	std	Y+3, r25	; 0x03
     6a8:	cd 52       	subi	r28, 0x2D	; 45
     6aa:	d1 40       	sbci	r29, 0x01	; 1
     6ac:	8e 01       	movw	r16, r28
     6ae:	03 5d       	subi	r16, 0xD3	; 211
     6b0:	1e 4f       	sbci	r17, 0xFE	; 254
     6b2:	6e 01       	movw	r12, r28
     6b4:	f3 e7       	ldi	r31, 0x73	; 115
     6b6:	cf 1a       	sub	r12, r31
     6b8:	fe ef       	ldi	r31, 0xFE	; 254
     6ba:	df 0a       	sbc	r13, r31
	for(int j = 1; j < 25; j++){ //For our 24 elements of velocity..
		a_smooth[j] = exponentialSmoothing(a_smooth[j - 1], arr_vel[j]); //For the current element of smoothed velocity, set it equal to the value that our exponential smoothing function gives us. We input the previous value for the smoothed table as our forecast/second variable, then the element of velocity at the current position. 
     6bc:	f7 01       	movw	r30, r14
     6be:	61 91       	ld	r22, Z+
     6c0:	71 91       	ld	r23, Z+
     6c2:	81 91       	ld	r24, Z+
     6c4:	91 91       	ld	r25, Z+
     6c6:	7f 01       	movw	r14, r30
     6c8:	f8 01       	movw	r30, r16
     6ca:	81 90       	ld	r8, Z+
     6cc:	91 90       	ld	r9, Z+
     6ce:	a1 90       	ld	r10, Z+
     6d0:	b1 90       	ld	r11, Z+
     6d2:	8f 01       	movw	r16, r30
 }

 float exponentialSmoothing(float p_smth_vel, float current_vel){ //We need the previous smoothed value as well as the current un-smoothed value, as indicated by the equation on this page: https://en.wikipedia.org/wiki/Exponential_smoothing#Basic_exponential_smoothing
	float smooth_factor = .5; //50% smoothing factor, needs to be tested.
	//printf("current_vel: %.2f\np_smth_vel:%.2f\n",current_vel,p_smth_vel);
	return (current_vel * smooth_factor) + (p_smth_vel * (1 - smooth_factor)); //returns the smoothed velocity for the current position of our table! That wasn't so hard, was it?
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	5f e3       	ldi	r21, 0x3F	; 63
     6dc:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
     6e0:	2b 01       	movw	r4, r22
     6e2:	3c 01       	movw	r6, r24
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	5f e3       	ldi	r21, 0x3F	; 63
     6ec:	c5 01       	movw	r24, r10
     6ee:	b4 01       	movw	r22, r8
     6f0:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
     6f4:	9b 01       	movw	r18, r22
     6f6:	ac 01       	movw	r20, r24
     6f8:	c3 01       	movw	r24, r6
     6fa:	b2 01       	movw	r22, r4
     6fc:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__addsf3>
	//Now we know the velocity for 25 different samples over a total of 250ms. We now need to exponentially smooth the data to reduce noise again.

	float a_smooth[25]; //Smoothed velocity table of size 25.
	a_smooth[0] = arr_vel[0]; //Sets the initial smoothed value to the first velocity taken.
	for(int j = 1; j < 25; j++){ //For our 24 elements of velocity..
		a_smooth[j] = exponentialSmoothing(a_smooth[j - 1], arr_vel[j]); //For the current element of smoothed velocity, set it equal to the value that our exponential smoothing function gives us. We input the previous value for the smoothed table as our forecast/second variable, then the element of velocity at the current position. 
     700:	f8 01       	movw	r30, r16
     702:	60 83       	st	Z, r22
     704:	71 83       	std	Z+1, r23	; 0x01
     706:	82 83       	std	Z+2, r24	; 0x02
     708:	93 83       	std	Z+3, r25	; 0x03

	//Now we know the velocity for 25 different samples over a total of 250ms. We now need to exponentially smooth the data to reduce noise again.

	float a_smooth[25]; //Smoothed velocity table of size 25.
	a_smooth[0] = arr_vel[0]; //Sets the initial smoothed value to the first velocity taken.
	for(int j = 1; j < 25; j++){ //For our 24 elements of velocity..
     70a:	0c 15       	cp	r16, r12
     70c:	1d 05       	cpc	r17, r13
     70e:	b1 f6       	brne	.-84     	; 0x6bc <getVelocity+0x164>
     710:	8e 01       	movw	r16, r28
     712:	0f 5c       	subi	r16, 0xCF	; 207
     714:	1e 4f       	sbci	r17, 0xFE	; 254
     716:	7e 01       	movw	r14, r28
     718:	ff e6       	ldi	r31, 0x6F	; 111
     71a:	ef 1a       	sub	r14, r31
     71c:	fe ef       	ldi	r31, 0xFE	; 254
     71e:	ff 0a       	sbc	r15, r31
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	cb 01       	movw	r24, r22
		a_smooth[j] = exponentialSmoothing(a_smooth[j - 1], arr_vel[j]); //For the current element of smoothed velocity, set it equal to the value that our exponential smoothing function gives us. We input the previous value for the smoothed table as our forecast/second variable, then the element of velocity at the current position. 
		//printf("a_smooth: %.2f\n",a_smooth[j]);
	}
	float s_vel = 0; //Summed velocity so we can average it.
	for(int b = 1; b < 25; b++) //For our size 25 smoothed velocity table, we want to ignore the first value because it is a duplicate, then iterate through every other value.
		s_vel += a_smooth[b]; //Set the sum of velocity equal to itself plus the element at our current position. Sums up all of the values in our table.
     726:	f8 01       	movw	r30, r16
     728:	21 91       	ld	r18, Z+
     72a:	31 91       	ld	r19, Z+
     72c:	41 91       	ld	r20, Z+
     72e:	51 91       	ld	r21, Z+
     730:	8f 01       	movw	r16, r30
     732:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__addsf3>
	for(int j = 1; j < 25; j++){ //For our 24 elements of velocity..
		a_smooth[j] = exponentialSmoothing(a_smooth[j - 1], arr_vel[j]); //For the current element of smoothed velocity, set it equal to the value that our exponential smoothing function gives us. We input the previous value for the smoothed table as our forecast/second variable, then the element of velocity at the current position. 
		//printf("a_smooth: %.2f\n",a_smooth[j]);
	}
	float s_vel = 0; //Summed velocity so we can average it.
	for(int b = 1; b < 25; b++) //For our size 25 smoothed velocity table, we want to ignore the first value because it is a duplicate, then iterate through every other value.
     736:	0e 15       	cp	r16, r14
     738:	1f 05       	cpc	r17, r15
     73a:	a9 f7       	brne	.-22     	; 0x726 <getVelocity+0x1ce>
		s_vel += a_smooth[b]; //Set the sum of velocity equal to itself plus the element at our current position. Sums up all of the values in our table.
	return s_vel/24; //The function finally ends with returning the average, or the sum of our 24 elements of velocity divided by 24.
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 ec       	ldi	r20, 0xC0	; 192
     742:	51 e4       	ldi	r21, 0x41	; 65
     744:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__divsf3>
 }
     748:	c0 57       	subi	r28, 0x70	; 112
     74a:	de 4f       	sbci	r29, 0xFE	; 254
     74c:	cd bf       	out	0x3d, r28	; 61
     74e:	de bf       	out	0x3e, r29	; 62
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	cf 90       	pop	r12
     760:	bf 90       	pop	r11
     762:	af 90       	pop	r10
     764:	9f 90       	pop	r9
     766:	8f 90       	pop	r8
     768:	7f 90       	pop	r7
     76a:	6f 90       	pop	r6
     76c:	5f 90       	pop	r5
     76e:	4f 90       	pop	r4
     770:	08 95       	ret

00000772 <LED>:
 *  Author: seanw
 */ 
  /* LED method for two XPEBGR-L1-0000-00G01-SB01 LEDs */
  #include <asf.h>
  #include "Drivers/Outputs/LED/LED_driver.h"
  void LED(uint16_t period,uint8_t duty_cycle){
     772:	9c 01       	movw	r18, r24
	  PORTD.OUT |= 0b00000010; //out, high = 1, low = 0.
     774:	e0 e6       	ldi	r30, 0x60	; 96
     776:	f6 e0       	ldi	r31, 0x06	; 6
     778:	94 81       	ldd	r25, Z+4	; 0x04
     77a:	92 60       	ori	r25, 0x02	; 2
     77c:	94 83       	std	Z+4, r25	; 0x04

	  TCD0.PER = period; //Set period of output.
     77e:	e0 e0       	ldi	r30, 0x00	; 0
     780:	f9 e0       	ldi	r31, 0x09	; 9
     782:	26 a3       	std	Z+38, r18	; 0x26
     784:	37 a3       	std	Z+39, r19	; 0x27
	  TCD0.CCB = TCD0.PER - (TCD0.PER/duty_cycle); //Set duty cycle of output for Command Capture register A.
     786:	26 a1       	ldd	r18, Z+38	; 0x26
     788:	37 a1       	ldd	r19, Z+39	; 0x27
     78a:	86 a1       	ldd	r24, Z+38	; 0x26
     78c:	97 a1       	ldd	r25, Z+39	; 0x27
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	0e 94 c4 14 	call	0x2988	; 0x2988 <__udivmodhi4>
     794:	26 1b       	sub	r18, r22
     796:	37 0b       	sbc	r19, r23
     798:	22 a7       	std	Z+42, r18	; 0x2a
     79a:	33 a7       	std	Z+43, r19	; 0x2b
     79c:	08 95       	ret

0000079e <lightChase>:
	
	return (uint16_t)(voltage*1000); //voltage*1000 converts it into millivolts.
	//If we hadn't multiplied by 1000, the typecast would've truncated the voltage reading to just the one's place.

	delay_ms(delay);
}
     79e:	af 92       	push	r10
     7a0:	bf 92       	push	r11
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	90 93 49 20 	sts	0x2049, r25	; 0x802049 <lightNumber>
     7b8:	a1 2c       	mov	r10, r1
     7ba:	0f 2e       	mov	r0, r31
     7bc:	f8 e4       	ldi	r31, 0x48	; 72
     7be:	bf 2e       	mov	r11, r31
     7c0:	f0 2d       	mov	r31, r0
     7c2:	0f 2e       	mov	r0, r31
     7c4:	f8 ee       	ldi	r31, 0xE8	; 232
     7c6:	cf 2e       	mov	r12, r31
     7c8:	f0 2d       	mov	r31, r0
     7ca:	dd 24       	eor	r13, r13
     7cc:	d3 94       	inc	r13
     7ce:	e1 2c       	mov	r14, r1
     7d0:	f1 2c       	mov	r15, r1
     7d2:	00 e0       	ldi	r16, 0x00	; 0
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	28 2f       	mov	r18, r24
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__muldi3>
     7ea:	29 51       	subi	r18, 0x19	; 25
     7ec:	3c 4f       	sbci	r19, 0xFC	; 252
     7ee:	4f 4f       	sbci	r20, 0xFF	; 255
     7f0:	5f 4f       	sbci	r21, 0xFF	; 255
     7f2:	6f 4f       	sbci	r22, 0xFF	; 255
     7f4:	7f 4f       	sbci	r23, 0xFF	; 255
     7f6:	8f 4f       	sbci	r24, 0xFF	; 255
     7f8:	9f 4f       	sbci	r25, 0xFF	; 255
     7fa:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__floatundisf>
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e8       	ldi	r19, 0x80	; 128
     802:	4b eb       	ldi	r20, 0xBB	; 187
     804:	55 e4       	ldi	r21, 0x45	; 69
     806:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__divsf3>
     80a:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <__fixunssfdi>
     80e:	72 2f       	mov	r23, r18
     810:	63 2f       	mov	r22, r19
     812:	94 2f       	mov	r25, r20
     814:	85 2f       	mov	r24, r21
     816:	54 2f       	mov	r21, r20
     818:	48 2f       	mov	r20, r24
     81a:	24 e0       	ldi	r18, 0x04	; 4
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	c0 e8       	ldi	r28, 0x80	; 128
     820:	d6 e0       	ldi	r29, 0x06	; 6
     822:	07 2f       	mov	r16, r23
     824:	16 2f       	mov	r17, r22
     826:	f9 2f       	mov	r31, r25
     828:	e8 2f       	mov	r30, r24
     82a:	80 91 49 20 	lds	r24, 0x2049	; 0x802049 <lightNumber>
     82e:	98 2f       	mov	r25, r24
     830:	90 95       	com	r25
     832:	9c 83       	std	Y+4, r25	; 0x04
     834:	88 0f       	add	r24, r24
     836:	80 93 49 20 	sts	0x2049, r24	; 0x802049 <lightNumber>
     83a:	80 2f       	mov	r24, r16
     83c:	91 2f       	mov	r25, r17
     83e:	af 2f       	mov	r26, r31
     840:	be 2f       	mov	r27, r30
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	a1 09       	sbc	r26, r1
     846:	b1 09       	sbc	r27, r1
     848:	e1 f7       	brne	.-8      	; 0x842 <lightChase+0xa4>
     84a:	21 50       	subi	r18, 0x01	; 1
     84c:	31 09       	sbc	r19, r1
     84e:	69 f7       	brne	.-38     	; 0x82a <lightChase+0x8c>
     850:	80 e8       	ldi	r24, 0x80	; 128
     852:	80 93 49 20 	sts	0x2049, r24	; 0x802049 <lightNumber>
     856:	24 e0       	ldi	r18, 0x04	; 4
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	e0 e8       	ldi	r30, 0x80	; 128
     85c:	f6 e0       	ldi	r31, 0x06	; 6
     85e:	80 91 49 20 	lds	r24, 0x2049	; 0x802049 <lightNumber>
     862:	98 2f       	mov	r25, r24
     864:	90 95       	com	r25
     866:	94 83       	std	Z+4, r25	; 0x04
     868:	86 95       	lsr	r24
     86a:	80 93 49 20 	sts	0x2049, r24	; 0x802049 <lightNumber>
     86e:	87 2f       	mov	r24, r23
     870:	96 2f       	mov	r25, r22
     872:	a5 2f       	mov	r26, r21
     874:	b4 2f       	mov	r27, r20
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	a1 09       	sbc	r26, r1
     87a:	b1 09       	sbc	r27, r1
     87c:	e1 f7       	brne	.-8      	; 0x876 <lightChase+0xd8>
     87e:	21 50       	subi	r18, 0x01	; 1
     880:	31 09       	sbc	r19, r1
     882:	69 f7       	brne	.-38     	; 0x85e <lightChase+0xc0>
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	bf 90       	pop	r11
     896:	af 90       	pop	r10
     898:	08 95       	ret

0000089a <test>:

void test(void){
	lightChase(100);
     89a:	84 e6       	ldi	r24, 0x64	; 100
     89c:	80 df       	rcall	.-256    	; 0x79e <lightChase>
	//printf("Test:\n");
	//printf("Pressure is:%li\n",getPressure());
	//printf("Temperature is:%.2f\n",getTemperature());
	printf("Altitude is:%.2f\n",getAltitude()*3.28084);
     89e:	26 de       	rcall	.-948    	; 0x4ec <getAltitude>
     8a0:	28 e4       	ldi	r18, 0x48	; 72
     8a2:	39 ef       	ldi	r19, 0xF9	; 249
     8a4:	41 e5       	ldi	r20, 0x51	; 81
     8a6:	50 e4       	ldi	r21, 0x40	; 64
     8a8:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
     8ac:	9f 93       	push	r25
     8ae:	8f 93       	push	r24
     8b0:	7f 93       	push	r23
     8b2:	6f 93       	push	r22
     8b4:	8d e0       	ldi	r24, 0x0D	; 13
     8b6:	90 e2       	ldi	r25, 0x20	; 32
     8b8:	9f 93       	push	r25
     8ba:	8f 93       	push	r24
     8bc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <printf>
	printf("and velocity is:%.2f\n",getVelocity());
     8c0:	4b de       	rcall	.-874    	; 0x558 <getVelocity>
     8c2:	9f 93       	push	r25
     8c4:	8f 93       	push	r24
     8c6:	7f 93       	push	r23
     8c8:	6f 93       	push	r22
     8ca:	8f e1       	ldi	r24, 0x1F	; 31
     8cc:	90 e2       	ldi	r25, 0x20	; 32
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <printf>
     8d6:	8d b7       	in	r24, 0x3d	; 61
     8d8:	9e b7       	in	r25, 0x3e	; 62
     8da:	0c 96       	adiw	r24, 0x0c	; 12
     8dc:	8d bf       	out	0x3d, r24	; 61
     8de:	9e bf       	out	0x3e, r25	; 62
     8e0:	08 95       	ret

000008e2 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     8e8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     8ec:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     8f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     8f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     8f8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     8fc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     900:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     902:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     904:	e0 e5       	ldi	r30, 0x50	; 80
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	80 81       	ld	r24, Z
     90a:	82 60       	ori	r24, 0x02	; 2
     90c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     90e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     910:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     912:	81 ff       	sbrs	r24, 1
     914:	fd cf       	rjmp	.-6      	; 0x910 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     916:	61 e0       	ldi	r22, 0x01	; 1
     918:	80 e4       	ldi	r24, 0x40	; 64
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	2b d2       	rcall	.+1110   	; 0xd74 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     91e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     920:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     922:	e0 e5       	ldi	r30, 0x50	; 80
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	8e 7f       	andi	r24, 0xFE	; 254
     92a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     92c:	9f bf       	out	0x3f, r25	; 63
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
     934:	08 95       	ret

00000936 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     936:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     938:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     93a:	e8 2f       	mov	r30, r24
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	e0 59       	subi	r30, 0x90	; 144
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	60 95       	com	r22
     944:	80 81       	ld	r24, Z
     946:	68 23       	and	r22, r24
     948:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     94a:	9f bf       	out	0x3f, r25	; 63
     94c:	08 95       	ret

0000094e <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	1f 92       	push	r1
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     958:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <stdio_base>
     95c:	90 91 53 20 	lds	r25, 0x2053	; 0x802053 <stdio_base+0x1>
     960:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <ptr_get>
     964:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <ptr_get+0x1>
     968:	be 01       	movw	r22, r28
     96a:	6f 5f       	subi	r22, 0xFF	; 255
     96c:	7f 4f       	sbci	r23, 0xFF	; 255
     96e:	19 95       	eicall
	return c;
     970:	89 81       	ldd	r24, Y+1	; 0x01
}
     972:	08 2e       	mov	r0, r24
     974:	00 0c       	add	r0, r0
     976:	99 0b       	sbc	r25, r25
     978:	0f 90       	pop	r0
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     980:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     982:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <stdio_base>
     986:	90 91 53 20 	lds	r25, 0x2053	; 0x802053 <stdio_base+0x1>
     98a:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <ptr_put>
     98e:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <ptr_put+0x1>
     992:	19 95       	eicall
     994:	99 23       	and	r25, r25
     996:	1c f0       	brlt	.+6      	; 0x99e <_write+0x1e>
		return -1;
	}
	return 1;
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     9a2:	08 95       	ret

000009a4 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     9a4:	1f 92       	push	r1
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	11 24       	eor	r1, r1
     9ae:	08 b6       	in	r0, 0x38	; 56
     9b0:	0f 92       	push	r0
     9b2:	18 be       	out	0x38, r1	; 56
     9b4:	09 b6       	in	r0, 0x39	; 57
     9b6:	0f 92       	push	r0
     9b8:	19 be       	out	0x39, r1	; 57
     9ba:	0b b6       	in	r0, 0x3b	; 59
     9bc:	0f 92       	push	r0
     9be:	1b be       	out	0x3b, r1	; 59
     9c0:	2f 93       	push	r18
     9c2:	3f 93       	push	r19
     9c4:	4f 93       	push	r20
     9c6:	5f 93       	push	r21
     9c8:	6f 93       	push	r22
     9ca:	7f 93       	push	r23
     9cc:	8f 93       	push	r24
     9ce:	9f 93       	push	r25
     9d0:	af 93       	push	r26
     9d2:	bf 93       	push	r27
     9d4:	ef 93       	push	r30
     9d6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     9d8:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     9dc:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     9e0:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <adca_callback>
     9e4:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <adca_callback+0x1>
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	19 95       	eicall
}
     9f0:	ff 91       	pop	r31
     9f2:	ef 91       	pop	r30
     9f4:	bf 91       	pop	r27
     9f6:	af 91       	pop	r26
     9f8:	9f 91       	pop	r25
     9fa:	8f 91       	pop	r24
     9fc:	7f 91       	pop	r23
     9fe:	6f 91       	pop	r22
     a00:	5f 91       	pop	r21
     a02:	4f 91       	pop	r20
     a04:	3f 91       	pop	r19
     a06:	2f 91       	pop	r18
     a08:	0f 90       	pop	r0
     a0a:	0b be       	out	0x3b, r0	; 59
     a0c:	0f 90       	pop	r0
     a0e:	09 be       	out	0x39, r0	; 57
     a10:	0f 90       	pop	r0
     a12:	08 be       	out	0x38, r0	; 56
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	0f 90       	pop	r0
     a1a:	1f 90       	pop	r1
     a1c:	18 95       	reti

00000a1e <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	0f 92       	push	r0
     a26:	11 24       	eor	r1, r1
     a28:	08 b6       	in	r0, 0x38	; 56
     a2a:	0f 92       	push	r0
     a2c:	18 be       	out	0x38, r1	; 56
     a2e:	09 b6       	in	r0, 0x39	; 57
     a30:	0f 92       	push	r0
     a32:	19 be       	out	0x39, r1	; 57
     a34:	0b b6       	in	r0, 0x3b	; 59
     a36:	0f 92       	push	r0
     a38:	1b be       	out	0x3b, r1	; 59
     a3a:	2f 93       	push	r18
     a3c:	3f 93       	push	r19
     a3e:	4f 93       	push	r20
     a40:	5f 93       	push	r21
     a42:	6f 93       	push	r22
     a44:	7f 93       	push	r23
     a46:	8f 93       	push	r24
     a48:	9f 93       	push	r25
     a4a:	af 93       	push	r26
     a4c:	bf 93       	push	r27
     a4e:	ef 93       	push	r30
     a50:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     a52:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     a56:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     a5a:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <adca_callback>
     a5e:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <adca_callback+0x1>
     a62:	62 e0       	ldi	r22, 0x02	; 2
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	92 e0       	ldi	r25, 0x02	; 2
     a68:	19 95       	eicall
}
     a6a:	ff 91       	pop	r31
     a6c:	ef 91       	pop	r30
     a6e:	bf 91       	pop	r27
     a70:	af 91       	pop	r26
     a72:	9f 91       	pop	r25
     a74:	8f 91       	pop	r24
     a76:	7f 91       	pop	r23
     a78:	6f 91       	pop	r22
     a7a:	5f 91       	pop	r21
     a7c:	4f 91       	pop	r20
     a7e:	3f 91       	pop	r19
     a80:	2f 91       	pop	r18
     a82:	0f 90       	pop	r0
     a84:	0b be       	out	0x3b, r0	; 59
     a86:	0f 90       	pop	r0
     a88:	09 be       	out	0x39, r0	; 57
     a8a:	0f 90       	pop	r0
     a8c:	08 be       	out	0x38, r0	; 56
     a8e:	0f 90       	pop	r0
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	0f 90       	pop	r0
     a94:	1f 90       	pop	r1
     a96:	18 95       	reti

00000a98 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     a98:	1f 92       	push	r1
     a9a:	0f 92       	push	r0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	08 b6       	in	r0, 0x38	; 56
     aa4:	0f 92       	push	r0
     aa6:	18 be       	out	0x38, r1	; 56
     aa8:	09 b6       	in	r0, 0x39	; 57
     aaa:	0f 92       	push	r0
     aac:	19 be       	out	0x39, r1	; 57
     aae:	0b b6       	in	r0, 0x3b	; 59
     ab0:	0f 92       	push	r0
     ab2:	1b be       	out	0x3b, r1	; 59
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     acc:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     ad0:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     ad4:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <adca_callback>
     ad8:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <adca_callback+0x1>
     adc:	64 e0       	ldi	r22, 0x04	; 4
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	19 95       	eicall
}
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0b be       	out	0x3b, r0	; 59
     b00:	0f 90       	pop	r0
     b02:	09 be       	out	0x39, r0	; 57
     b04:	0f 90       	pop	r0
     b06:	08 be       	out	0x38, r0	; 56
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	0f 90       	pop	r0
     b0e:	1f 90       	pop	r1
     b10:	18 95       	reti

00000b12 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	08 b6       	in	r0, 0x38	; 56
     b1e:	0f 92       	push	r0
     b20:	18 be       	out	0x38, r1	; 56
     b22:	09 b6       	in	r0, 0x39	; 57
     b24:	0f 92       	push	r0
     b26:	19 be       	out	0x39, r1	; 57
     b28:	0b b6       	in	r0, 0x3b	; 59
     b2a:	0f 92       	push	r0
     b2c:	1b be       	out	0x3b, r1	; 59
     b2e:	2f 93       	push	r18
     b30:	3f 93       	push	r19
     b32:	4f 93       	push	r20
     b34:	5f 93       	push	r21
     b36:	6f 93       	push	r22
     b38:	7f 93       	push	r23
     b3a:	8f 93       	push	r24
     b3c:	9f 93       	push	r25
     b3e:	af 93       	push	r26
     b40:	bf 93       	push	r27
     b42:	ef 93       	push	r30
     b44:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     b46:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     b4a:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     b4e:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <adca_callback>
     b52:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <adca_callback+0x1>
     b56:	68 e0       	ldi	r22, 0x08	; 8
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	19 95       	eicall
}
     b5e:	ff 91       	pop	r31
     b60:	ef 91       	pop	r30
     b62:	bf 91       	pop	r27
     b64:	af 91       	pop	r26
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	7f 91       	pop	r23
     b6c:	6f 91       	pop	r22
     b6e:	5f 91       	pop	r21
     b70:	4f 91       	pop	r20
     b72:	3f 91       	pop	r19
     b74:	2f 91       	pop	r18
     b76:	0f 90       	pop	r0
     b78:	0b be       	out	0x3b, r0	; 59
     b7a:	0f 90       	pop	r0
     b7c:	09 be       	out	0x39, r0	; 57
     b7e:	0f 90       	pop	r0
     b80:	08 be       	out	0x38, r0	; 56
     b82:	0f 90       	pop	r0
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	0f 90       	pop	r0
     b88:	1f 90       	pop	r1
     b8a:	18 95       	reti

00000b8c <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     b8c:	1f 92       	push	r1
     b8e:	0f 92       	push	r0
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	0f 92       	push	r0
     b94:	11 24       	eor	r1, r1
     b96:	08 b6       	in	r0, 0x38	; 56
     b98:	0f 92       	push	r0
     b9a:	18 be       	out	0x38, r1	; 56
     b9c:	09 b6       	in	r0, 0x39	; 57
     b9e:	0f 92       	push	r0
     ba0:	19 be       	out	0x39, r1	; 57
     ba2:	0b b6       	in	r0, 0x3b	; 59
     ba4:	0f 92       	push	r0
     ba6:	1b be       	out	0x3b, r1	; 59
     ba8:	2f 93       	push	r18
     baa:	3f 93       	push	r19
     bac:	4f 93       	push	r20
     bae:	5f 93       	push	r21
     bb0:	6f 93       	push	r22
     bb2:	7f 93       	push	r23
     bb4:	8f 93       	push	r24
     bb6:	9f 93       	push	r25
     bb8:	af 93       	push	r26
     bba:	bf 93       	push	r27
     bbc:	ef 93       	push	r30
     bbe:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     bc0:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     bc4:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     bc8:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <adcb_callback>
     bcc:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <adcb_callback+0x1>
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	80 e4       	ldi	r24, 0x40	; 64
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	19 95       	eicall
}
     bd8:	ff 91       	pop	r31
     bda:	ef 91       	pop	r30
     bdc:	bf 91       	pop	r27
     bde:	af 91       	pop	r26
     be0:	9f 91       	pop	r25
     be2:	8f 91       	pop	r24
     be4:	7f 91       	pop	r23
     be6:	6f 91       	pop	r22
     be8:	5f 91       	pop	r21
     bea:	4f 91       	pop	r20
     bec:	3f 91       	pop	r19
     bee:	2f 91       	pop	r18
     bf0:	0f 90       	pop	r0
     bf2:	0b be       	out	0x3b, r0	; 59
     bf4:	0f 90       	pop	r0
     bf6:	09 be       	out	0x39, r0	; 57
     bf8:	0f 90       	pop	r0
     bfa:	08 be       	out	0x38, r0	; 56
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	0f 90       	pop	r0
     c02:	1f 90       	pop	r1
     c04:	18 95       	reti

00000c06 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	08 b6       	in	r0, 0x38	; 56
     c12:	0f 92       	push	r0
     c14:	18 be       	out	0x38, r1	; 56
     c16:	09 b6       	in	r0, 0x39	; 57
     c18:	0f 92       	push	r0
     c1a:	19 be       	out	0x39, r1	; 57
     c1c:	0b b6       	in	r0, 0x3b	; 59
     c1e:	0f 92       	push	r0
     c20:	1b be       	out	0x3b, r1	; 59
     c22:	2f 93       	push	r18
     c24:	3f 93       	push	r19
     c26:	4f 93       	push	r20
     c28:	5f 93       	push	r21
     c2a:	6f 93       	push	r22
     c2c:	7f 93       	push	r23
     c2e:	8f 93       	push	r24
     c30:	9f 93       	push	r25
     c32:	af 93       	push	r26
     c34:	bf 93       	push	r27
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     c3a:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     c3e:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     c42:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <adcb_callback>
     c46:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <adcb_callback+0x1>
     c4a:	62 e0       	ldi	r22, 0x02	; 2
     c4c:	80 e4       	ldi	r24, 0x40	; 64
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	19 95       	eicall
}
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	7f 91       	pop	r23
     c60:	6f 91       	pop	r22
     c62:	5f 91       	pop	r21
     c64:	4f 91       	pop	r20
     c66:	3f 91       	pop	r19
     c68:	2f 91       	pop	r18
     c6a:	0f 90       	pop	r0
     c6c:	0b be       	out	0x3b, r0	; 59
     c6e:	0f 90       	pop	r0
     c70:	09 be       	out	0x39, r0	; 57
     c72:	0f 90       	pop	r0
     c74:	08 be       	out	0x38, r0	; 56
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	0f 90       	pop	r0
     c7c:	1f 90       	pop	r1
     c7e:	18 95       	reti

00000c80 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     c80:	1f 92       	push	r1
     c82:	0f 92       	push	r0
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	0f 92       	push	r0
     c88:	11 24       	eor	r1, r1
     c8a:	08 b6       	in	r0, 0x38	; 56
     c8c:	0f 92       	push	r0
     c8e:	18 be       	out	0x38, r1	; 56
     c90:	09 b6       	in	r0, 0x39	; 57
     c92:	0f 92       	push	r0
     c94:	19 be       	out	0x39, r1	; 57
     c96:	0b b6       	in	r0, 0x3b	; 59
     c98:	0f 92       	push	r0
     c9a:	1b be       	out	0x3b, r1	; 59
     c9c:	2f 93       	push	r18
     c9e:	3f 93       	push	r19
     ca0:	4f 93       	push	r20
     ca2:	5f 93       	push	r21
     ca4:	6f 93       	push	r22
     ca6:	7f 93       	push	r23
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	af 93       	push	r26
     cae:	bf 93       	push	r27
     cb0:	ef 93       	push	r30
     cb2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     cb4:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     cb8:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     cbc:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <adcb_callback>
     cc0:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <adcb_callback+0x1>
     cc4:	64 e0       	ldi	r22, 0x04	; 4
     cc6:	80 e4       	ldi	r24, 0x40	; 64
     cc8:	92 e0       	ldi	r25, 0x02	; 2
     cca:	19 95       	eicall
}
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	bf 91       	pop	r27
     cd2:	af 91       	pop	r26
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	7f 91       	pop	r23
     cda:	6f 91       	pop	r22
     cdc:	5f 91       	pop	r21
     cde:	4f 91       	pop	r20
     ce0:	3f 91       	pop	r19
     ce2:	2f 91       	pop	r18
     ce4:	0f 90       	pop	r0
     ce6:	0b be       	out	0x3b, r0	; 59
     ce8:	0f 90       	pop	r0
     cea:	09 be       	out	0x39, r0	; 57
     cec:	0f 90       	pop	r0
     cee:	08 be       	out	0x38, r0	; 56
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	08 b6       	in	r0, 0x38	; 56
     d06:	0f 92       	push	r0
     d08:	18 be       	out	0x38, r1	; 56
     d0a:	09 b6       	in	r0, 0x39	; 57
     d0c:	0f 92       	push	r0
     d0e:	19 be       	out	0x39, r1	; 57
     d10:	0b b6       	in	r0, 0x3b	; 59
     d12:	0f 92       	push	r0
     d14:	1b be       	out	0x3b, r1	; 59
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	5f 93       	push	r21
     d1e:	6f 93       	push	r22
     d20:	7f 93       	push	r23
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	af 93       	push	r26
     d28:	bf 93       	push	r27
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     d2e:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     d32:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     d36:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <adcb_callback>
     d3a:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <adcb_callback+0x1>
     d3e:	68 e0       	ldi	r22, 0x08	; 8
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	92 e0       	ldi	r25, 0x02	; 2
     d44:	19 95       	eicall
}
     d46:	ff 91       	pop	r31
     d48:	ef 91       	pop	r30
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	7f 91       	pop	r23
     d54:	6f 91       	pop	r22
     d56:	5f 91       	pop	r21
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	0f 90       	pop	r0
     d60:	0b be       	out	0x3b, r0	; 59
     d62:	0f 90       	pop	r0
     d64:	09 be       	out	0x39, r0	; 57
     d66:	0f 90       	pop	r0
     d68:	08 be       	out	0x38, r0	; 56
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     d74:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     d76:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     d78:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     d7a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     d7c:	60 83       	st	Z, r22
	ret                             // Return to caller
     d7e:	08 95       	ret

00000d80 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     d80:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     d84:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     d86:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     d88:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     d8c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     d8e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     d92:	08 95       	ret

00000d94 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     d94:	fc 01       	movw	r30, r24
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	95 ff       	sbrs	r25, 5
     d9a:	fd cf       	rjmp	.-6      	; 0xd96 <usart_putchar+0x2>
     d9c:	60 83       	st	Z, r22
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	08 95       	ret

00000da4 <usart_getchar>:
     da4:	fc 01       	movw	r30, r24
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	99 23       	and	r25, r25
     daa:	ec f7       	brge	.-6      	; 0xda6 <usart_getchar+0x2>
     dac:	80 81       	ld	r24, Z
     dae:	08 95       	ret

00000db0 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     db0:	2f 92       	push	r2
     db2:	3f 92       	push	r3
     db4:	4f 92       	push	r4
     db6:	5f 92       	push	r5
     db8:	6f 92       	push	r6
     dba:	7f 92       	push	r7
     dbc:	8f 92       	push	r8
     dbe:	9f 92       	push	r9
     dc0:	af 92       	push	r10
     dc2:	bf 92       	push	r11
     dc4:	cf 92       	push	r12
     dc6:	df 92       	push	r13
     dc8:	ef 92       	push	r14
     dca:	ff 92       	push	r15
     dcc:	0f 93       	push	r16
     dce:	1f 93       	push	r17
     dd0:	cf 93       	push	r28
     dd2:	1c 01       	movw	r2, r24
     dd4:	2a 01       	movw	r4, r20
     dd6:	3b 01       	movw	r6, r22
     dd8:	48 01       	movw	r8, r16
     dda:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     ddc:	d9 01       	movw	r26, r18
     dde:	c8 01       	movw	r24, r16
     de0:	68 94       	set
     de2:	12 f8       	bld	r1, 2
     de4:	b6 95       	lsr	r27
     de6:	a7 95       	ror	r26
     de8:	97 95       	ror	r25
     dea:	87 95       	ror	r24
     dec:	16 94       	lsr	r1
     dee:	d1 f7       	brne	.-12     	; 0xde4 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     df0:	b9 01       	movw	r22, r18
     df2:	a8 01       	movw	r20, r16
     df4:	03 2e       	mov	r0, r19
     df6:	36 e1       	ldi	r19, 0x16	; 22
     df8:	76 95       	lsr	r23
     dfa:	67 95       	ror	r22
     dfc:	57 95       	ror	r21
     dfe:	47 95       	ror	r20
     e00:	3a 95       	dec	r19
     e02:	d1 f7       	brne	.-12     	; 0xdf8 <usart_set_baudrate+0x48>
     e04:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     e06:	f1 01       	movw	r30, r2
     e08:	24 81       	ldd	r18, Z+4	; 0x04
     e0a:	22 fd       	sbrc	r18, 2
     e0c:	08 c0       	rjmp	.+16     	; 0xe1e <usart_set_baudrate+0x6e>
		max_rate /= 2;
     e0e:	b6 95       	lsr	r27
     e10:	a7 95       	ror	r26
     e12:	97 95       	ror	r25
     e14:	87 95       	ror	r24
		min_rate /= 2;
     e16:	76 95       	lsr	r23
     e18:	67 95       	ror	r22
     e1a:	57 95       	ror	r21
     e1c:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     e1e:	84 15       	cp	r24, r4
     e20:	95 05       	cpc	r25, r5
     e22:	a6 05       	cpc	r26, r6
     e24:	b7 05       	cpc	r27, r7
     e26:	08 f4       	brcc	.+2      	; 0xe2a <usart_set_baudrate+0x7a>
     e28:	ae c0       	rjmp	.+348    	; 0xf86 <usart_set_baudrate+0x1d6>
     e2a:	44 16       	cp	r4, r20
     e2c:	55 06       	cpc	r5, r21
     e2e:	66 06       	cpc	r6, r22
     e30:	77 06       	cpc	r7, r23
     e32:	08 f4       	brcc	.+2      	; 0xe36 <usart_set_baudrate+0x86>
     e34:	aa c0       	rjmp	.+340    	; 0xf8a <usart_set_baudrate+0x1da>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     e36:	f1 01       	movw	r30, r2
     e38:	84 81       	ldd	r24, Z+4	; 0x04
     e3a:	82 fd       	sbrc	r24, 2
     e3c:	04 c0       	rjmp	.+8      	; 0xe46 <usart_set_baudrate+0x96>
		baud *= 2;
     e3e:	44 0c       	add	r4, r4
     e40:	55 1c       	adc	r5, r5
     e42:	66 1c       	adc	r6, r6
     e44:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     e46:	c5 01       	movw	r24, r10
     e48:	b4 01       	movw	r22, r8
     e4a:	a3 01       	movw	r20, r6
     e4c:	92 01       	movw	r18, r4
     e4e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     e52:	2f 3f       	cpi	r18, 0xFF	; 255
     e54:	31 05       	cpc	r19, r1
     e56:	41 05       	cpc	r20, r1
     e58:	51 05       	cpc	r21, r1
     e5a:	08 f4       	brcc	.+2      	; 0xe5e <usart_set_baudrate+0xae>
     e5c:	98 c0       	rjmp	.+304    	; 0xf8e <usart_set_baudrate+0x1de>
     e5e:	c1 2c       	mov	r12, r1
     e60:	d1 2c       	mov	r13, r1
     e62:	76 01       	movw	r14, r12
     e64:	ca 94       	dec	r12
     e66:	c9 ef       	ldi	r28, 0xF9	; 249
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <usart_set_baudrate+0xc4>
     e6a:	2c 15       	cp	r18, r12
     e6c:	3d 05       	cpc	r19, r13
     e6e:	4e 05       	cpc	r20, r14
     e70:	5f 05       	cpc	r21, r15
     e72:	68 f0       	brcs	.+26     	; 0xe8e <usart_set_baudrate+0xde>
			break;
		}

		limit <<= 1;
     e74:	cc 0c       	add	r12, r12
     e76:	dd 1c       	adc	r13, r13
     e78:	ee 1c       	adc	r14, r14
     e7a:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     e7c:	cd 3f       	cpi	r28, 0xFD	; 253
     e7e:	14 f4       	brge	.+4      	; 0xe84 <usart_set_baudrate+0xd4>
			limit |= 1;
     e80:	68 94       	set
     e82:	c0 f8       	bld	r12, 0
     e84:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     e86:	c7 30       	cpi	r28, 0x07	; 7
     e88:	81 f7       	brne	.-32     	; 0xe6a <usart_set_baudrate+0xba>
     e8a:	8c 2f       	mov	r24, r28
     e8c:	56 c0       	rjmp	.+172    	; 0xf3a <usart_set_baudrate+0x18a>
     e8e:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     e90:	cc 23       	and	r28, r28
     e92:	0c f0       	brlt	.+2      	; 0xe96 <usart_set_baudrate+0xe6>
     e94:	52 c0       	rjmp	.+164    	; 0xf3a <usart_set_baudrate+0x18a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     e96:	d3 01       	movw	r26, r6
     e98:	c2 01       	movw	r24, r4
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	aa 1f       	adc	r26, r26
     ea0:	bb 1f       	adc	r27, r27
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	aa 1f       	adc	r26, r26
     ea8:	bb 1f       	adc	r27, r27
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	aa 1f       	adc	r26, r26
     eb0:	bb 1f       	adc	r27, r27
     eb2:	85 01       	movw	r16, r10
     eb4:	74 01       	movw	r14, r8
     eb6:	e8 1a       	sub	r14, r24
     eb8:	f9 0a       	sbc	r15, r25
     eba:	0a 0b       	sbc	r16, r26
     ebc:	1b 0b       	sbc	r17, r27
     ebe:	d8 01       	movw	r26, r16
     ec0:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     ec2:	ce 3f       	cpi	r28, 0xFE	; 254
     ec4:	f4 f4       	brge	.+60     	; 0xf02 <usart_set_baudrate+0x152>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     ec6:	2d ef       	ldi	r18, 0xFD	; 253
     ec8:	3f ef       	ldi	r19, 0xFF	; 255
     eca:	2c 1b       	sub	r18, r28
     ecc:	31 09       	sbc	r19, r1
     ece:	c7 fd       	sbrc	r28, 7
     ed0:	33 95       	inc	r19
     ed2:	04 c0       	rjmp	.+8      	; 0xedc <usart_set_baudrate+0x12c>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	aa 1f       	adc	r26, r26
     eda:	bb 1f       	adc	r27, r27
     edc:	2a 95       	dec	r18
     ede:	d2 f7       	brpl	.-12     	; 0xed4 <usart_set_baudrate+0x124>
     ee0:	73 01       	movw	r14, r6
     ee2:	62 01       	movw	r12, r4
     ee4:	f6 94       	lsr	r15
     ee6:	e7 94       	ror	r14
     ee8:	d7 94       	ror	r13
     eea:	c7 94       	ror	r12
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	6c 0d       	add	r22, r12
     ef2:	7d 1d       	adc	r23, r13
     ef4:	8e 1d       	adc	r24, r14
     ef6:	9f 1d       	adc	r25, r15
     ef8:	a3 01       	movw	r20, r6
     efa:	92 01       	movw	r18, r4
     efc:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__udivmodsi4>
     f00:	38 c0       	rjmp	.+112    	; 0xf72 <usart_set_baudrate+0x1c2>
		} else {
			baud <<= exp + 3;
     f02:	23 e0       	ldi	r18, 0x03	; 3
     f04:	2c 0f       	add	r18, r28
     f06:	83 01       	movw	r16, r6
     f08:	72 01       	movw	r14, r4
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <usart_set_baudrate+0x164>
     f0c:	ee 0c       	add	r14, r14
     f0e:	ff 1c       	adc	r15, r15
     f10:	00 1f       	adc	r16, r16
     f12:	11 1f       	adc	r17, r17
     f14:	2a 95       	dec	r18
     f16:	d2 f7       	brpl	.-12     	; 0xf0c <usart_set_baudrate+0x15c>
     f18:	a8 01       	movw	r20, r16
     f1a:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
     f1c:	67 01       	movw	r12, r14
     f1e:	78 01       	movw	r14, r16
     f20:	f6 94       	lsr	r15
     f22:	e7 94       	ror	r14
     f24:	d7 94       	ror	r13
     f26:	c7 94       	ror	r12
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	6c 0d       	add	r22, r12
     f2e:	7d 1d       	adc	r23, r13
     f30:	8e 1d       	adc	r24, r14
     f32:	9f 1d       	adc	r25, r15
     f34:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__udivmodsi4>
     f38:	1c c0       	rjmp	.+56     	; 0xf72 <usart_set_baudrate+0x1c2>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     f3a:	8d 5f       	subi	r24, 0xFD	; 253
     f3c:	a3 01       	movw	r20, r6
     f3e:	92 01       	movw	r18, r4
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <usart_set_baudrate+0x19a>
     f42:	22 0f       	add	r18, r18
     f44:	33 1f       	adc	r19, r19
     f46:	44 1f       	adc	r20, r20
     f48:	55 1f       	adc	r21, r21
     f4a:	8a 95       	dec	r24
     f4c:	d2 f7       	brpl	.-12     	; 0xf42 <usart_set_baudrate+0x192>
		div = (cpu_hz + baud / 2) / baud - 1;
     f4e:	da 01       	movw	r26, r20
     f50:	c9 01       	movw	r24, r18
     f52:	b6 95       	lsr	r27
     f54:	a7 95       	ror	r26
     f56:	97 95       	ror	r25
     f58:	87 95       	ror	r24
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	68 0d       	add	r22, r8
     f60:	79 1d       	adc	r23, r9
     f62:	8a 1d       	adc	r24, r10
     f64:	9b 1d       	adc	r25, r11
     f66:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <__udivmodsi4>
     f6a:	21 50       	subi	r18, 0x01	; 1
     f6c:	31 09       	sbc	r19, r1
     f6e:	41 09       	sbc	r20, r1
     f70:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     f72:	83 2f       	mov	r24, r19
     f74:	8f 70       	andi	r24, 0x0F	; 15
     f76:	c2 95       	swap	r28
     f78:	c0 7f       	andi	r28, 0xF0	; 240
     f7a:	c8 2b       	or	r28, r24
     f7c:	f1 01       	movw	r30, r2
     f7e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     f80:	26 83       	std	Z+6, r18	; 0x06

	return true;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	1c c0       	rjmp	.+56     	; 0xfbe <usart_set_baudrate+0x20e>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	1a c0       	rjmp	.+52     	; 0xfbe <usart_set_baudrate+0x20e>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	18 c0       	rjmp	.+48     	; 0xfbe <usart_set_baudrate+0x20e>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     f8e:	d3 01       	movw	r26, r6
     f90:	c2 01       	movw	r24, r4
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	aa 1f       	adc	r26, r26
     f98:	bb 1f       	adc	r27, r27
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	aa 1f       	adc	r26, r26
     fa0:	bb 1f       	adc	r27, r27
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	aa 1f       	adc	r26, r26
     fa8:	bb 1f       	adc	r27, r27
     faa:	85 01       	movw	r16, r10
     fac:	74 01       	movw	r14, r8
     fae:	e8 1a       	sub	r14, r24
     fb0:	f9 0a       	sbc	r15, r25
     fb2:	0a 0b       	sbc	r16, r26
     fb4:	1b 0b       	sbc	r17, r27
     fb6:	d8 01       	movw	r26, r16
     fb8:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     fba:	c9 ef       	ldi	r28, 0xF9	; 249
     fbc:	84 cf       	rjmp	.-248    	; 0xec6 <usart_set_baudrate+0x116>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	bf 90       	pop	r11
     fce:	af 90       	pop	r10
     fd0:	9f 90       	pop	r9
     fd2:	8f 90       	pop	r8
     fd4:	7f 90       	pop	r7
     fd6:	6f 90       	pop	r6
     fd8:	5f 90       	pop	r5
     fda:	4f 90       	pop	r4
     fdc:	3f 90       	pop	r3
     fde:	2f 90       	pop	r2
     fe0:	08 95       	ret

00000fe2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	ec 01       	movw	r28, r24
     fec:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	09 f4       	brne	.+2      	; 0xff4 <usart_init_rs232+0x12>
     ff2:	36 c1       	rjmp	.+620    	; 0x1260 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     ff4:	80 3c       	cpi	r24, 0xC0	; 192
     ff6:	91 05       	cpc	r25, r1
     ff8:	21 f4       	brne	.+8      	; 0x1002 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     ffa:	60 e1       	ldi	r22, 0x10	; 16
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	9b dc       	rcall	.-1738   	; 0x936 <sysclk_enable_module>
    1000:	2f c1       	rjmp	.+606    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1002:	c0 34       	cpi	r28, 0x40	; 64
    1004:	84 e0       	ldi	r24, 0x04	; 4
    1006:	d8 07       	cpc	r29, r24
    1008:	21 f4       	brne	.+8      	; 0x1012 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    100a:	68 e0       	ldi	r22, 0x08	; 8
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	93 dc       	rcall	.-1754   	; 0x936 <sysclk_enable_module>
    1010:	27 c1       	rjmp	.+590    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1012:	c1 15       	cp	r28, r1
    1014:	e4 e0       	ldi	r30, 0x04	; 4
    1016:	de 07       	cpc	r29, r30
    1018:	21 f4       	brne	.+8      	; 0x1022 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    101a:	64 e0       	ldi	r22, 0x04	; 4
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	8b dc       	rcall	.-1770   	; 0x936 <sysclk_enable_module>
    1020:	1f c1       	rjmp	.+574    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1022:	c0 38       	cpi	r28, 0x80	; 128
    1024:	f1 e0       	ldi	r31, 0x01	; 1
    1026:	df 07       	cpc	r29, r31
    1028:	21 f4       	brne	.+8      	; 0x1032 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    102a:	62 e0       	ldi	r22, 0x02	; 2
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	83 dc       	rcall	.-1786   	; 0x936 <sysclk_enable_module>
    1030:	17 c1       	rjmp	.+558    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1032:	c1 15       	cp	r28, r1
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	d8 07       	cpc	r29, r24
    1038:	21 f4       	brne	.+8      	; 0x1042 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	7b dc       	rcall	.-1802   	; 0x936 <sysclk_enable_module>
    1040:	0f c1       	rjmp	.+542    	; 0x1260 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1042:	c0 38       	cpi	r28, 0x80	; 128
    1044:	e3 e0       	ldi	r30, 0x03	; 3
    1046:	de 07       	cpc	r29, r30
    1048:	21 f4       	brne	.+8      	; 0x1052 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    104a:	61 e0       	ldi	r22, 0x01	; 1
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	73 dc       	rcall	.-1818   	; 0x936 <sysclk_enable_module>
    1050:	07 c1       	rjmp	.+526    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1052:	c0 39       	cpi	r28, 0x90	; 144
    1054:	f3 e0       	ldi	r31, 0x03	; 3
    1056:	df 07       	cpc	r29, r31
    1058:	21 f4       	brne	.+8      	; 0x1062 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	6b dc       	rcall	.-1834   	; 0x936 <sysclk_enable_module>
    1060:	ff c0       	rjmp	.+510    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1062:	c1 15       	cp	r28, r1
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	d8 07       	cpc	r29, r24
    1068:	21 f4       	brne	.+8      	; 0x1072 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    106a:	62 e0       	ldi	r22, 0x02	; 2
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	63 dc       	rcall	.-1850   	; 0x936 <sysclk_enable_module>
    1070:	f7 c0       	rjmp	.+494    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1072:	c0 34       	cpi	r28, 0x40	; 64
    1074:	e2 e0       	ldi	r30, 0x02	; 2
    1076:	de 07       	cpc	r29, r30
    1078:	21 f4       	brne	.+8      	; 0x1082 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    107a:	62 e0       	ldi	r22, 0x02	; 2
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	5b dc       	rcall	.-1866   	; 0x936 <sysclk_enable_module>
    1080:	ef c0       	rjmp	.+478    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1082:	c1 15       	cp	r28, r1
    1084:	f3 e0       	ldi	r31, 0x03	; 3
    1086:	df 07       	cpc	r29, r31
    1088:	21 f4       	brne	.+8      	; 0x1092 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    108a:	64 e0       	ldi	r22, 0x04	; 4
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	53 dc       	rcall	.-1882   	; 0x936 <sysclk_enable_module>
    1090:	e7 c0       	rjmp	.+462    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1092:	c0 32       	cpi	r28, 0x20	; 32
    1094:	83 e0       	ldi	r24, 0x03	; 3
    1096:	d8 07       	cpc	r29, r24
    1098:	21 f4       	brne	.+8      	; 0x10a2 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    109a:	64 e0       	ldi	r22, 0x04	; 4
    109c:	82 e0       	ldi	r24, 0x02	; 2
    109e:	4b dc       	rcall	.-1898   	; 0x936 <sysclk_enable_module>
    10a0:	df c0       	rjmp	.+446    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    10a2:	c1 15       	cp	r28, r1
    10a4:	e8 e0       	ldi	r30, 0x08	; 8
    10a6:	de 07       	cpc	r29, r30
    10a8:	21 f4       	brne	.+8      	; 0x10b2 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    10aa:	61 e0       	ldi	r22, 0x01	; 1
    10ac:	83 e0       	ldi	r24, 0x03	; 3
    10ae:	43 dc       	rcall	.-1914   	; 0x936 <sysclk_enable_module>
    10b0:	d7 c0       	rjmp	.+430    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    10b2:	c1 15       	cp	r28, r1
    10b4:	f9 e0       	ldi	r31, 0x09	; 9
    10b6:	df 07       	cpc	r29, r31
    10b8:	21 f4       	brne	.+8      	; 0x10c2 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    10ba:	61 e0       	ldi	r22, 0x01	; 1
    10bc:	84 e0       	ldi	r24, 0x04	; 4
    10be:	3b dc       	rcall	.-1930   	; 0x936 <sysclk_enable_module>
    10c0:	cf c0       	rjmp	.+414    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    10c2:	c1 15       	cp	r28, r1
    10c4:	8a e0       	ldi	r24, 0x0A	; 10
    10c6:	d8 07       	cpc	r29, r24
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	85 e0       	ldi	r24, 0x05	; 5
    10ce:	33 dc       	rcall	.-1946   	; 0x936 <sysclk_enable_module>
    10d0:	c7 c0       	rjmp	.+398    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    10d2:	c1 15       	cp	r28, r1
    10d4:	eb e0       	ldi	r30, 0x0B	; 11
    10d6:	de 07       	cpc	r29, r30
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	86 e0       	ldi	r24, 0x06	; 6
    10de:	2b dc       	rcall	.-1962   	; 0x936 <sysclk_enable_module>
    10e0:	bf c0       	rjmp	.+382    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    10e2:	c0 34       	cpi	r28, 0x40	; 64
    10e4:	f8 e0       	ldi	r31, 0x08	; 8
    10e6:	df 07       	cpc	r29, r31
    10e8:	21 f4       	brne	.+8      	; 0x10f2 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    10ea:	62 e0       	ldi	r22, 0x02	; 2
    10ec:	83 e0       	ldi	r24, 0x03	; 3
    10ee:	23 dc       	rcall	.-1978   	; 0x936 <sysclk_enable_module>
    10f0:	b7 c0       	rjmp	.+366    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    10f2:	c0 34       	cpi	r28, 0x40	; 64
    10f4:	89 e0       	ldi	r24, 0x09	; 9
    10f6:	d8 07       	cpc	r29, r24
    10f8:	21 f4       	brne	.+8      	; 0x1102 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    10fa:	62 e0       	ldi	r22, 0x02	; 2
    10fc:	84 e0       	ldi	r24, 0x04	; 4
    10fe:	1b dc       	rcall	.-1994   	; 0x936 <sysclk_enable_module>
    1100:	af c0       	rjmp	.+350    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1102:	c0 34       	cpi	r28, 0x40	; 64
    1104:	ea e0       	ldi	r30, 0x0A	; 10
    1106:	de 07       	cpc	r29, r30
    1108:	21 f4       	brne	.+8      	; 0x1112 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    110a:	62 e0       	ldi	r22, 0x02	; 2
    110c:	85 e0       	ldi	r24, 0x05	; 5
    110e:	13 dc       	rcall	.-2010   	; 0x936 <sysclk_enable_module>
    1110:	a7 c0       	rjmp	.+334    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1112:	c0 34       	cpi	r28, 0x40	; 64
    1114:	fb e0       	ldi	r31, 0x0B	; 11
    1116:	df 07       	cpc	r29, r31
    1118:	21 f4       	brne	.+8      	; 0x1122 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    111a:	62 e0       	ldi	r22, 0x02	; 2
    111c:	86 e0       	ldi	r24, 0x06	; 6
    111e:	0b dc       	rcall	.-2026   	; 0x936 <sysclk_enable_module>
    1120:	9f c0       	rjmp	.+318    	; 0x1260 <usart_init_rs232+0x27e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1122:	c0 39       	cpi	r28, 0x90	; 144
    1124:	88 e0       	ldi	r24, 0x08	; 8
    1126:	d8 07       	cpc	r29, r24
    1128:	21 f4       	brne	.+8      	; 0x1132 <usart_init_rs232+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    112a:	64 e0       	ldi	r22, 0x04	; 4
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	03 dc       	rcall	.-2042   	; 0x936 <sysclk_enable_module>
    1130:	97 c0       	rjmp	.+302    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1132:	c0 39       	cpi	r28, 0x90	; 144
    1134:	e9 e0       	ldi	r30, 0x09	; 9
    1136:	de 07       	cpc	r29, r30
    1138:	21 f4       	brne	.+8      	; 0x1142 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    113a:	64 e0       	ldi	r22, 0x04	; 4
    113c:	84 e0       	ldi	r24, 0x04	; 4
    113e:	fb db       	rcall	.-2058   	; 0x936 <sysclk_enable_module>
    1140:	8f c0       	rjmp	.+286    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1142:	c0 39       	cpi	r28, 0x90	; 144
    1144:	fa e0       	ldi	r31, 0x0A	; 10
    1146:	df 07       	cpc	r29, r31
    1148:	21 f4       	brne	.+8      	; 0x1152 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    114a:	64 e0       	ldi	r22, 0x04	; 4
    114c:	85 e0       	ldi	r24, 0x05	; 5
    114e:	f3 db       	rcall	.-2074   	; 0x936 <sysclk_enable_module>
    1150:	87 c0       	rjmp	.+270    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1152:	c0 39       	cpi	r28, 0x90	; 144
    1154:	8b e0       	ldi	r24, 0x0B	; 11
    1156:	d8 07       	cpc	r29, r24
    1158:	21 f4       	brne	.+8      	; 0x1162 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    115a:	64 e0       	ldi	r22, 0x04	; 4
    115c:	86 e0       	ldi	r24, 0x06	; 6
    115e:	eb db       	rcall	.-2090   	; 0x936 <sysclk_enable_module>
    1160:	7f c0       	rjmp	.+254    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1162:	c0 3c       	cpi	r28, 0xC0	; 192
    1164:	e8 e0       	ldi	r30, 0x08	; 8
    1166:	de 07       	cpc	r29, r30
    1168:	21 f4       	brne	.+8      	; 0x1172 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    116a:	68 e0       	ldi	r22, 0x08	; 8
    116c:	83 e0       	ldi	r24, 0x03	; 3
    116e:	e3 db       	rcall	.-2106   	; 0x936 <sysclk_enable_module>
    1170:	77 c0       	rjmp	.+238    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1172:	c0 3c       	cpi	r28, 0xC0	; 192
    1174:	f9 e0       	ldi	r31, 0x09	; 9
    1176:	df 07       	cpc	r29, r31
    1178:	21 f4       	brne	.+8      	; 0x1182 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    117a:	68 e0       	ldi	r22, 0x08	; 8
    117c:	84 e0       	ldi	r24, 0x04	; 4
    117e:	db db       	rcall	.-2122   	; 0x936 <sysclk_enable_module>
    1180:	6f c0       	rjmp	.+222    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1182:	c0 3c       	cpi	r28, 0xC0	; 192
    1184:	8a e0       	ldi	r24, 0x0A	; 10
    1186:	d8 07       	cpc	r29, r24
    1188:	21 f4       	brne	.+8      	; 0x1192 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    118a:	68 e0       	ldi	r22, 0x08	; 8
    118c:	85 e0       	ldi	r24, 0x05	; 5
    118e:	d3 db       	rcall	.-2138   	; 0x936 <sysclk_enable_module>
    1190:	67 c0       	rjmp	.+206    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1192:	c0 3c       	cpi	r28, 0xC0	; 192
    1194:	eb e0       	ldi	r30, 0x0B	; 11
    1196:	de 07       	cpc	r29, r30
    1198:	21 f4       	brne	.+8      	; 0x11a2 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    119a:	68 e0       	ldi	r22, 0x08	; 8
    119c:	86 e0       	ldi	r24, 0x06	; 6
    119e:	cb db       	rcall	.-2154   	; 0x936 <sysclk_enable_module>
    11a0:	5f c0       	rjmp	.+190    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    11a2:	c0 3a       	cpi	r28, 0xA0	; 160
    11a4:	f8 e0       	ldi	r31, 0x08	; 8
    11a6:	df 07       	cpc	r29, r31
    11a8:	21 f4       	brne	.+8      	; 0x11b2 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    11aa:	60 e1       	ldi	r22, 0x10	; 16
    11ac:	83 e0       	ldi	r24, 0x03	; 3
    11ae:	c3 db       	rcall	.-2170   	; 0x936 <sysclk_enable_module>
    11b0:	57 c0       	rjmp	.+174    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    11b2:	c0 3a       	cpi	r28, 0xA0	; 160
    11b4:	89 e0       	ldi	r24, 0x09	; 9
    11b6:	d8 07       	cpc	r29, r24
    11b8:	21 f4       	brne	.+8      	; 0x11c2 <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    11ba:	60 e1       	ldi	r22, 0x10	; 16
    11bc:	84 e0       	ldi	r24, 0x04	; 4
    11be:	bb db       	rcall	.-2186   	; 0x936 <sysclk_enable_module>
    11c0:	4f c0       	rjmp	.+158    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    11c2:	c0 3a       	cpi	r28, 0xA0	; 160
    11c4:	ea e0       	ldi	r30, 0x0A	; 10
    11c6:	de 07       	cpc	r29, r30
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    11ca:	60 e1       	ldi	r22, 0x10	; 16
    11cc:	85 e0       	ldi	r24, 0x05	; 5
    11ce:	b3 db       	rcall	.-2202   	; 0x936 <sysclk_enable_module>
    11d0:	47 c0       	rjmp	.+142    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    11d2:	c0 3a       	cpi	r28, 0xA0	; 160
    11d4:	fb e0       	ldi	r31, 0x0B	; 11
    11d6:	df 07       	cpc	r29, r31
    11d8:	21 f4       	brne	.+8      	; 0x11e2 <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    11da:	60 e1       	ldi	r22, 0x10	; 16
    11dc:	86 e0       	ldi	r24, 0x06	; 6
    11de:	ab db       	rcall	.-2218   	; 0x936 <sysclk_enable_module>
    11e0:	3f c0       	rjmp	.+126    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    11e2:	c0 3b       	cpi	r28, 0xB0	; 176
    11e4:	88 e0       	ldi	r24, 0x08	; 8
    11e6:	d8 07       	cpc	r29, r24
    11e8:	21 f4       	brne	.+8      	; 0x11f2 <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    11ea:	60 e2       	ldi	r22, 0x20	; 32
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	a3 db       	rcall	.-2234   	; 0x936 <sysclk_enable_module>
    11f0:	37 c0       	rjmp	.+110    	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    11f2:	c0 3b       	cpi	r28, 0xB0	; 176
    11f4:	e9 e0       	ldi	r30, 0x09	; 9
    11f6:	de 07       	cpc	r29, r30
    11f8:	21 f4       	brne	.+8      	; 0x1202 <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    11fa:	60 e2       	ldi	r22, 0x20	; 32
    11fc:	84 e0       	ldi	r24, 0x04	; 4
    11fe:	9b db       	rcall	.-2250   	; 0x936 <sysclk_enable_module>
    1200:	2f c0       	rjmp	.+94     	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1202:	c0 3b       	cpi	r28, 0xB0	; 176
    1204:	fa e0       	ldi	r31, 0x0A	; 10
    1206:	df 07       	cpc	r29, r31
    1208:	21 f4       	brne	.+8      	; 0x1212 <usart_init_rs232+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    120a:	60 e2       	ldi	r22, 0x20	; 32
    120c:	85 e0       	ldi	r24, 0x05	; 5
    120e:	93 db       	rcall	.-2266   	; 0x936 <sysclk_enable_module>
    1210:	27 c0       	rjmp	.+78     	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1212:	c0 3b       	cpi	r28, 0xB0	; 176
    1214:	8b e0       	ldi	r24, 0x0B	; 11
    1216:	d8 07       	cpc	r29, r24
    1218:	21 f4       	brne	.+8      	; 0x1222 <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    121a:	60 e2       	ldi	r22, 0x20	; 32
    121c:	86 e0       	ldi	r24, 0x06	; 6
    121e:	8b db       	rcall	.-2282   	; 0x936 <sysclk_enable_module>
    1220:	1f c0       	rjmp	.+62     	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1222:	c0 38       	cpi	r28, 0x80	; 128
    1224:	e4 e0       	ldi	r30, 0x04	; 4
    1226:	de 07       	cpc	r29, r30
    1228:	21 f4       	brne	.+8      	; 0x1232 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    122a:	60 e4       	ldi	r22, 0x40	; 64
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	83 db       	rcall	.-2298   	; 0x936 <sysclk_enable_module>
    1230:	17 c0       	rjmp	.+46     	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1232:	c0 39       	cpi	r28, 0x90	; 144
    1234:	f4 e0       	ldi	r31, 0x04	; 4
    1236:	df 07       	cpc	r29, r31
    1238:	21 f4       	brne	.+8      	; 0x1242 <usart_init_rs232+0x260>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    123a:	60 e4       	ldi	r22, 0x40	; 64
    123c:	84 e0       	ldi	r24, 0x04	; 4
    123e:	7b db       	rcall	.-2314   	; 0x936 <sysclk_enable_module>
    1240:	0f c0       	rjmp	.+30     	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1242:	c0 3a       	cpi	r28, 0xA0	; 160
    1244:	84 e0       	ldi	r24, 0x04	; 4
    1246:	d8 07       	cpc	r29, r24
    1248:	21 f4       	brne	.+8      	; 0x1252 <usart_init_rs232+0x270>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    124a:	60 e4       	ldi	r22, 0x40	; 64
    124c:	85 e0       	ldi	r24, 0x05	; 5
    124e:	73 db       	rcall	.-2330   	; 0x936 <sysclk_enable_module>
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1252:	c0 3b       	cpi	r28, 0xB0	; 176
    1254:	e4 e0       	ldi	r30, 0x04	; 4
    1256:	de 07       	cpc	r29, r30
    1258:	19 f4       	brne	.+6      	; 0x1260 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    125a:	60 e4       	ldi	r22, 0x40	; 64
    125c:	86 e0       	ldi	r24, 0x06	; 6
    125e:	6b db       	rcall	.-2346   	; 0x936 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	8f 73       	andi	r24, 0x3F	; 63
    1264:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1266:	f8 01       	movw	r30, r16
    1268:	94 81       	ldd	r25, Z+4	; 0x04
    126a:	85 81       	ldd	r24, Z+5	; 0x05
    126c:	89 2b       	or	r24, r25
    126e:	96 81       	ldd	r25, Z+6	; 0x06
    1270:	91 11       	cpse	r25, r1
    1272:	98 e0       	ldi	r25, 0x08	; 8
    1274:	89 2b       	or	r24, r25
    1276:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1278:	f8 01       	movw	r30, r16
    127a:	40 81       	ld	r20, Z
    127c:	51 81       	ldd	r21, Z+1	; 0x01
    127e:	62 81       	ldd	r22, Z+2	; 0x02
    1280:	73 81       	ldd	r23, Z+3	; 0x03
    1282:	00 e0       	ldi	r16, 0x00	; 0
    1284:	18 e4       	ldi	r17, 0x48	; 72
    1286:	28 ee       	ldi	r18, 0xE8	; 232
    1288:	31 e0       	ldi	r19, 0x01	; 1
    128a:	ce 01       	movw	r24, r28
    128c:	91 dd       	rcall	.-1246   	; 0xdb0 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	98 60       	ori	r25, 0x08	; 8
    1292:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	90 61       	ori	r25, 0x10	; 16
    1298:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	08 95       	ret

000012a4 <ADC_init>:
 */ 
#include <asf.h>
#include "Drivers/ADC/ADC_init.h"
/* This driver can be used to initialize any of the ADCs */

void ADC_init(void){
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
	ADCA.CTRLA = 0b00000001; //Enables the ADC.
    12ae:	c0 e0       	ldi	r28, 0x00	; 0
    12b0:	d2 e0       	ldi	r29, 0x02	; 2
    12b2:	ff 24       	eor	r15, r15
    12b4:	f3 94       	inc	r15
    12b6:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000; //Unsigned 12 bit mode.
    12b8:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000; //Voltage reference of Vcc/1.6V
    12ba:	80 e1       	ldi	r24, 0x10	; 16
    12bc:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101; //This is automatic prescalar of 128 on the clock.
    12be:	85 e0       	ldi	r24, 0x05	; 5
    12c0:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    12c2:	61 e2       	ldi	r22, 0x21	; 33
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	5b dd       	rcall	.-1354   	; 0xd80 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    12ca:	08 2f       	mov	r16, r24
    12cc:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    12ce:	10 2f       	mov	r17, r16
    12d0:	00 27       	eor	r16, r16
    12d2:	60 e2       	ldi	r22, 0x20	; 32
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	53 dd       	rcall	.-1370   	; 0xd80 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    12da:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA); //Retrieve stored calibration data about the ADC.
    12dc:	0c 87       	std	Y+12, r16	; 0x0c
    12de:	1d 87       	std	Y+13, r17	; 0x0d

	ADCA.CH0.CTRL = 0b00000001; //Single ended input
    12e0:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000000; //Reading ADCA pin 0.
    12e2:	19 a2       	std	Y+33, r1	; 0x21
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	08 95       	ret

000012f0 <spi_select>:
	 PORTC.DIR &= 0b10111111;
	 SPIC.CTRL = 0b01010000; //Clock Double off, enable SPI, MSB DORD, master mode, SPI transfer mode set to 0, prescalar set to clkper/4 (has no effect in slave mode).
	 calibratePressure();
 }
 void spi_select(void){
	PORTC.OUT &= 0b11101111;
    12f0:	e0 e4       	ldi	r30, 0x40	; 64
    12f2:	f6 e0       	ldi	r31, 0x06	; 6
    12f4:	84 81       	ldd	r24, Z+4	; 0x04
    12f6:	8f 7e       	andi	r24, 0xEF	; 239
    12f8:	84 83       	std	Z+4, r24	; 0x04
    12fa:	08 95       	ret

000012fc <spi_deselect>:
 }
 void spi_deselect(void){
	PORTC.OUT |= 0b00010000;
    12fc:	e0 e4       	ldi	r30, 0x40	; 64
    12fe:	f6 e0       	ldi	r31, 0x06	; 6
    1300:	84 81       	ldd	r24, Z+4	; 0x04
    1302:	80 61       	ori	r24, 0x10	; 16
    1304:	84 83       	std	Z+4, r24	; 0x04
    1306:	08 95       	ret

00001308 <spi_read>:
 }
 uint8_t spi_read(void){
	 //printf("spi_read\n");
	 SPIC.DATA = 0xFF; //Set the data to something we know.
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	 while(!(SPIC.STATUS>>7)); //Wait until new data comes in by monitoring the interrupt flag.
    130e:	e0 ec       	ldi	r30, 0xC0	; 192
    1310:	f8 e0       	ldi	r31, 0x08	; 8
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	88 23       	and	r24, r24
    1316:	ec f7       	brge	.-6      	; 0x1312 <spi_read+0xa>
	 return SPIC.DATA; //Return the data.
    1318:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 }
    131c:	08 95       	ret

0000131e <spi_write>:

 void spi_write(uint8_t data){
	 //printf("spi_write\n");
	 SPIC.DATA = data; //Take data from function argument and write it.
    131e:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	 //printf("1\n");
	 while(!(SPIC.STATUS>>7)); //Wait until data has been sent.
    1322:	e0 ec       	ldi	r30, 0xC0	; 192
    1324:	f8 e0       	ldi	r31, 0x08	; 8
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	88 23       	and	r24, r24
    132a:	ec f7       	brge	.-6      	; 0x1326 <spi_write+0x8>
	 //printf("2\n");
 }
    132c:	08 95       	ret

0000132e <calibratePressure>:
 uint16_t c5;
 uint16_t c6;
 
 void calibratePressure(void){
	//printf("cal_press\n");
	spi_select();
    132e:	e0 df       	rcall	.-64     	; 0x12f0 <spi_select>
	 spi_write(0b10100010); //prom read ad1
    1330:	82 ea       	ldi	r24, 0xA2	; 162
    1332:	f5 df       	rcall	.-22     	; 0x131e <spi_write>
	 c1 = ((uint16_t)spi_read())<<8;
    1334:	e9 df       	rcall	.-46     	; 0x1308 <spi_read>
    1336:	10 92 60 20 	sts	0x2060, r1	; 0x802060 <c1>
    133a:	80 93 61 20 	sts	0x2061, r24	; 0x802061 <c1+0x1>
	 c1 += ((uint16_t)spi_read());
    133e:	e4 df       	rcall	.-56     	; 0x1308 <spi_read>
    1340:	20 91 60 20 	lds	r18, 0x2060	; 0x802060 <c1>
    1344:	30 91 61 20 	lds	r19, 0x2061	; 0x802061 <c1+0x1>
    1348:	28 0f       	add	r18, r24
    134a:	31 1d       	adc	r19, r1
    134c:	20 93 60 20 	sts	0x2060, r18	; 0x802060 <c1>
    1350:	30 93 61 20 	sts	0x2061, r19	; 0x802061 <c1+0x1>
	 spi_deselect();
    1354:	d3 df       	rcall	.-90     	; 0x12fc <spi_deselect>
	 //printf("c1: %u\n",c1);

	 spi_select();
    1356:	cc df       	rcall	.-104    	; 0x12f0 <spi_select>
	 spi_write(0b10100100); //prom read ad2
    1358:	84 ea       	ldi	r24, 0xA4	; 164
    135a:	e1 df       	rcall	.-62     	; 0x131e <spi_write>
	 c2 = ((uint16_t)spi_read())<<8;
    135c:	d5 df       	rcall	.-86     	; 0x1308 <spi_read>
    135e:	10 92 5c 20 	sts	0x205C, r1	; 0x80205c <c2>
    1362:	80 93 5d 20 	sts	0x205D, r24	; 0x80205d <c2+0x1>
	 c2 += ((uint16_t)spi_read());
    1366:	d0 df       	rcall	.-96     	; 0x1308 <spi_read>
    1368:	20 91 5c 20 	lds	r18, 0x205C	; 0x80205c <c2>
    136c:	30 91 5d 20 	lds	r19, 0x205D	; 0x80205d <c2+0x1>
    1370:	28 0f       	add	r18, r24
    1372:	31 1d       	adc	r19, r1
    1374:	20 93 5c 20 	sts	0x205C, r18	; 0x80205c <c2>
    1378:	30 93 5d 20 	sts	0x205D, r19	; 0x80205d <c2+0x1>
	 spi_deselect();
    137c:	bf df       	rcall	.-130    	; 0x12fc <spi_deselect>
	 //printf("c2: %u\n",c2);

	 spi_select();
    137e:	b8 df       	rcall	.-144    	; 0x12f0 <spi_select>
	 spi_write(0b10100110); //prom read ad3
    1380:	86 ea       	ldi	r24, 0xA6	; 166
    1382:	cd df       	rcall	.-102    	; 0x131e <spi_write>
	 c3 = ((uint16_t)spi_read())<<8;
    1384:	c1 df       	rcall	.-126    	; 0x1308 <spi_read>
    1386:	10 92 62 20 	sts	0x2062, r1	; 0x802062 <c3>
    138a:	80 93 63 20 	sts	0x2063, r24	; 0x802063 <c3+0x1>
	 c3 += ((uint16_t)spi_read());
    138e:	bc df       	rcall	.-136    	; 0x1308 <spi_read>
    1390:	20 91 62 20 	lds	r18, 0x2062	; 0x802062 <c3>
    1394:	30 91 63 20 	lds	r19, 0x2063	; 0x802063 <c3+0x1>
    1398:	28 0f       	add	r18, r24
    139a:	31 1d       	adc	r19, r1
    139c:	20 93 62 20 	sts	0x2062, r18	; 0x802062 <c3>
    13a0:	30 93 63 20 	sts	0x2063, r19	; 0x802063 <c3+0x1>
	 spi_deselect();
    13a4:	ab df       	rcall	.-170    	; 0x12fc <spi_deselect>
	 //printf("c3: %u\n",c3);

	 spi_select();
    13a6:	a4 df       	rcall	.-184    	; 0x12f0 <spi_select>
	 spi_write(0b10101000); //prom read ad4
    13a8:	88 ea       	ldi	r24, 0xA8	; 168
    13aa:	b9 df       	rcall	.-142    	; 0x131e <spi_write>
	 c4 = ((uint16_t)spi_read())<<8;
    13ac:	ad df       	rcall	.-166    	; 0x1308 <spi_read>
    13ae:	10 92 5a 20 	sts	0x205A, r1	; 0x80205a <c4>
    13b2:	80 93 5b 20 	sts	0x205B, r24	; 0x80205b <c4+0x1>
	 c4 += ((uint16_t)spi_read());
    13b6:	a8 df       	rcall	.-176    	; 0x1308 <spi_read>
    13b8:	20 91 5a 20 	lds	r18, 0x205A	; 0x80205a <c4>
    13bc:	30 91 5b 20 	lds	r19, 0x205B	; 0x80205b <c4+0x1>
    13c0:	28 0f       	add	r18, r24
    13c2:	31 1d       	adc	r19, r1
    13c4:	20 93 5a 20 	sts	0x205A, r18	; 0x80205a <c4>
    13c8:	30 93 5b 20 	sts	0x205B, r19	; 0x80205b <c4+0x1>
	 spi_deselect();
    13cc:	97 df       	rcall	.-210    	; 0x12fc <spi_deselect>
	 //printf("c4: %u\n",c4);

	 spi_select();
    13ce:	90 df       	rcall	.-224    	; 0x12f0 <spi_select>
	 spi_write(0b10101010); //prom read ad5
    13d0:	8a ea       	ldi	r24, 0xAA	; 170
    13d2:	a5 df       	rcall	.-182    	; 0x131e <spi_write>
	 c5 = ((uint16_t)spi_read())<<8;
    13d4:	99 df       	rcall	.-206    	; 0x1308 <spi_read>
    13d6:	10 92 5e 20 	sts	0x205E, r1	; 0x80205e <c5>
    13da:	80 93 5f 20 	sts	0x205F, r24	; 0x80205f <c5+0x1>
	 c5 += ((uint16_t)spi_read());
    13de:	94 df       	rcall	.-216    	; 0x1308 <spi_read>
    13e0:	20 91 5e 20 	lds	r18, 0x205E	; 0x80205e <c5>
    13e4:	30 91 5f 20 	lds	r19, 0x205F	; 0x80205f <c5+0x1>
    13e8:	28 0f       	add	r18, r24
    13ea:	31 1d       	adc	r19, r1
    13ec:	20 93 5e 20 	sts	0x205E, r18	; 0x80205e <c5>
    13f0:	30 93 5f 20 	sts	0x205F, r19	; 0x80205f <c5+0x1>
	 spi_deselect();
    13f4:	83 df       	rcall	.-250    	; 0x12fc <spi_deselect>
	 //printf("c5: %u\n",c5);

	 spi_select();
    13f6:	7c df       	rcall	.-264    	; 0x12f0 <spi_select>
	 spi_write(0b10101100); //prom read ad6
    13f8:	8c ea       	ldi	r24, 0xAC	; 172
    13fa:	91 df       	rcall	.-222    	; 0x131e <spi_write>
	 c6 = ((uint16_t)spi_read())<<8;
    13fc:	85 df       	rcall	.-246    	; 0x1308 <spi_read>
    13fe:	10 92 58 20 	sts	0x2058, r1	; 0x802058 <c6>
    1402:	80 93 59 20 	sts	0x2059, r24	; 0x802059 <c6+0x1>
	 c6 += ((uint16_t)spi_read());
    1406:	80 df       	rcall	.-256    	; 0x1308 <spi_read>
    1408:	20 91 58 20 	lds	r18, 0x2058	; 0x802058 <c6>
    140c:	30 91 59 20 	lds	r19, 0x2059	; 0x802059 <c6+0x1>
    1410:	28 0f       	add	r18, r24
    1412:	31 1d       	adc	r19, r1
    1414:	20 93 58 20 	sts	0x2058, r18	; 0x802058 <c6>
    1418:	30 93 59 20 	sts	0x2059, r19	; 0x802059 <c6+0x1>
	 spi_deselect();
    141c:	6f cf       	rjmp	.-290    	; 0x12fc <spi_deselect>
    141e:	08 95       	ret

00001420 <SPI_init>:
	 //printf("c6: %u\n",c6);
 }
 
 void SPI_init(void){
	 //printf("spi_init\n");
	 PORTC.DIR |= 0b10110000; //Set port to input.
    1420:	e0 e4       	ldi	r30, 0x40	; 64
    1422:	f6 e0       	ldi	r31, 0x06	; 6
    1424:	80 81       	ld	r24, Z
    1426:	80 6b       	ori	r24, 0xB0	; 176
    1428:	80 83       	st	Z, r24
	 PORTC.DIR &= 0b10111111;
    142a:	80 81       	ld	r24, Z
    142c:	8f 7b       	andi	r24, 0xBF	; 191
    142e:	80 83       	st	Z, r24
	 SPIC.CTRL = 0b01010000; //Clock Double off, enable SPI, MSB DORD, master mode, SPI transfer mode set to 0, prescalar set to clkper/4 (has no effect in slave mode).
    1430:	80 e5       	ldi	r24, 0x50	; 80
    1432:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
	 calibratePressure();
    1436:	7b cf       	rjmp	.-266    	; 0x132e <calibratePressure>
    1438:	08 95       	ret

0000143a <getPressure>:
	 //printf("1\n");
	 while(!(SPIC.STATUS>>7)); //Wait until data has been sent.
	 //printf("2\n");
 }
 
 int32_t getPressure(void){
    143a:	2f 92       	push	r2
    143c:	3f 92       	push	r3
    143e:	4f 92       	push	r4
    1440:	5f 92       	push	r5
    1442:	6f 92       	push	r6
    1444:	7f 92       	push	r7
    1446:	8f 92       	push	r8
    1448:	9f 92       	push	r9
    144a:	af 92       	push	r10
    144c:	bf 92       	push	r11
    144e:	cf 92       	push	r12
    1450:	df 92       	push	r13
    1452:	ef 92       	push	r14
    1454:	ff 92       	push	r15
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	6f 97       	sbiw	r28, 0x1f	; 31
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	de bf       	out	0x3e, r29	; 62
	//printf("get_press\n");
	spi_select();
    1468:	43 df       	rcall	.-378    	; 0x12f0 <spi_select>
	spi_write(0x48); //Ask for pressure value
    146a:	88 e4       	ldi	r24, 0x48	; 72
    146c:	58 df       	rcall	.-336    	; 0x131e <spi_write>
	spi_deselect();
    146e:	46 df       	rcall	.-372    	; 0x12fc <spi_deselect>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	85 35       	cpi	r24, 0x55	; 85
    1478:	00 ed       	ldi	r16, 0xD0	; 208
    147a:	90 07       	cpc	r25, r16
    147c:	d9 f7       	brne	.-10     	; 0x1474 <getPressure+0x3a>
	delay_ms(10);

	spi_select();
    147e:	38 df       	rcall	.-400    	; 0x12f0 <spi_select>
	spi_write(0x00);
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	4d df       	rcall	.-358    	; 0x131e <spi_write>
	uint32_t d1 = ((uint32_t)spi_read())<<16; //Typecast the 8 bit data to 32 bit, then move it 16 places to the left. Stores in temp variable.
    1484:	41 df       	rcall	.-382    	; 0x1308 <spi_read>
    1486:	c8 2e       	mov	r12, r24
    1488:	d1 2c       	mov	r13, r1
    148a:	e1 2c       	mov	r14, r1
    148c:	f1 2c       	mov	r15, r1
    148e:	76 01       	movw	r14, r12
    1490:	dd 24       	eor	r13, r13
    1492:	cc 24       	eor	r12, r12
	d1 += ((uint32_t)spi_read())<<8; //Assign data to data + the new data but in the lower 8 bits.
    1494:	39 df       	rcall	.-398    	; 0x1308 <spi_read>
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	ba 2f       	mov	r27, r26
    149e:	a9 2f       	mov	r26, r25
    14a0:	98 2f       	mov	r25, r24
    14a2:	88 27       	eor	r24, r24
    14a4:	c8 0e       	add	r12, r24
    14a6:	d9 1e       	adc	r13, r25
    14a8:	ea 1e       	adc	r14, r26
    14aa:	fb 1e       	adc	r15, r27
	d1 += ((uint32_t)spi_read());
    14ac:	2d df       	rcall	.-422    	; 0x1308 <spi_read>
    14ae:	a7 01       	movw	r20, r14
    14b0:	96 01       	movw	r18, r12
    14b2:	28 0f       	add	r18, r24
    14b4:	31 1d       	adc	r19, r1
    14b6:	41 1d       	adc	r20, r1
    14b8:	51 1d       	adc	r21, r1
    14ba:	2d 83       	std	Y+5, r18	; 0x05
    14bc:	3e 83       	std	Y+6, r19	; 0x06
    14be:	4f 83       	std	Y+7, r20	; 0x07
    14c0:	58 87       	std	Y+8, r21	; 0x08
	spi_deselect();
    14c2:	1c df       	rcall	.-456    	; 0x12fc <spi_deselect>
	//printf("d1: %li\n",d1);
	
	spi_select();
    14c4:	15 df       	rcall	.-470    	; 0x12f0 <spi_select>
	spi_write(0x58); //Ask for temp value.
    14c6:	88 e5       	ldi	r24, 0x58	; 88
    14c8:	2a df       	rcall	.-428    	; 0x131e <spi_write>
	spi_deselect();
    14ca:	18 df       	rcall	.-464    	; 0x12fc <spi_deselect>
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	85 35       	cpi	r24, 0x55	; 85
    14d4:	30 ed       	ldi	r19, 0xD0	; 208
    14d6:	93 07       	cpc	r25, r19
    14d8:	d9 f7       	brne	.-10     	; 0x14d0 <getPressure+0x96>
	delay_ms(10);
	
	spi_select();
    14da:	0a df       	rcall	.-492    	; 0x12f0 <spi_select>
	spi_write(0x00);
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	1f df       	rcall	.-450    	; 0x131e <spi_write>
	uint32_t d2 = ((uint32_t)spi_read())<<16;
    14e0:	13 df       	rcall	.-474    	; 0x1308 <spi_read>
    14e2:	08 2f       	mov	r16, r24
	d2 += ((uint32_t)spi_read())<<8;
    14e4:	11 df       	rcall	.-478    	; 0x1308 <spi_read>
    14e6:	f8 2e       	mov	r15, r24
	d2 += ((uint32_t)spi_read());
    14e8:	0f df       	rcall	.-482    	; 0x1308 <spi_read>
    14ea:	18 2f       	mov	r17, r24
	spi_deselect();
    14ec:	07 df       	rcall	.-498    	; 0x12fc <spi_deselect>
	//printf("d2: %li\n",d2);
	

	int32_t dT = (int64_t)d2 - (((int64_t)c5)*(256));
    14ee:	a0 91 5e 20 	lds	r26, 0x205E	; 0x80205e <c5>
    14f2:	b0 91 5f 20 	lds	r27, 0x205F	; 0x80205f <c5+0x1>
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	3f ef       	ldi	r19, 0xFF	; 255
    14fa:	4f ef       	ldi	r20, 0xFF	; 255
    14fc:	5f ef       	ldi	r21, 0xFF	; 255
    14fe:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__muluhisi3>
    1502:	2b 01       	movw	r4, r22
    1504:	3c 01       	movw	r6, r24
    1506:	41 0e       	add	r4, r17
    1508:	51 1c       	adc	r5, r1
    150a:	61 1c       	adc	r6, r1
    150c:	71 1c       	adc	r7, r1
	spi_deselect();
	delay_ms(10);
	
	spi_select();
	spi_write(0x00);
	uint32_t d2 = ((uint32_t)spi_read())<<16;
    150e:	40 2f       	mov	r20, r16
    1510:	50 e0       	ldi	r21, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	ba 01       	movw	r22, r20
    1518:	55 27       	eor	r21, r21
    151a:	44 27       	eor	r20, r20
    151c:	d3 01       	movw	r26, r6
    151e:	c2 01       	movw	r24, r4
    1520:	84 0f       	add	r24, r20
    1522:	95 1f       	adc	r25, r21
    1524:	a6 1f       	adc	r26, r22
    1526:	b7 1f       	adc	r27, r23
	d2 += ((uint32_t)spi_read())<<8;
    1528:	4f 2c       	mov	r4, r15
    152a:	51 2c       	mov	r5, r1
    152c:	61 2c       	mov	r6, r1
    152e:	71 2c       	mov	r7, r1
    1530:	76 2c       	mov	r7, r6
    1532:	65 2c       	mov	r6, r5
    1534:	54 2c       	mov	r5, r4
    1536:	44 24       	eor	r4, r4
	d2 += ((uint32_t)spi_read());
	spi_deselect();
	//printf("d2: %li\n",d2);
	

	int32_t dT = (int64_t)d2 - (((int64_t)c5)*(256));
    1538:	48 0e       	add	r4, r24
    153a:	59 1e       	adc	r5, r25
    153c:	6a 1e       	adc	r6, r26
    153e:	7b 1e       	adc	r7, r27
	int64_t offset = ((int64_t)c2)*(65536) + ((((int64_t)c4)*((int64_t)dT))/(128));
    1540:	d3 01       	movw	r26, r6
    1542:	c2 01       	movw	r24, r4
    1544:	bb 0f       	add	r27, r27
    1546:	88 0b       	sbc	r24, r24
    1548:	98 2f       	mov	r25, r24
    154a:	dc 01       	movw	r26, r24
    154c:	89 83       	std	Y+1, r24	; 0x01
    154e:	9a 83       	std	Y+2, r25	; 0x02
    1550:	ab 83       	std	Y+3, r26	; 0x03
    1552:	bc 83       	std	Y+4, r27	; 0x04
	int64_t sens = (((int64_t)c1)*(32768)) + ((((int64_t)c3)*((int64_t)dT))/256);
    1554:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <c1>
    1558:	90 91 61 20 	lds	r25, 0x2061	; 0x802061 <c1+0x1>
    155c:	4c 01       	movw	r8, r24
    155e:	28 2f       	mov	r18, r24
    1560:	39 2d       	mov	r19, r9
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0f e0       	ldi	r16, 0x0F	; 15
    1570:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <__ashldi3>
    1574:	22 2e       	mov	r2, r18
    1576:	3d 87       	std	Y+13, r19	; 0x0d
    1578:	4e 87       	std	Y+14, r20	; 0x0e
    157a:	5f 87       	std	Y+15, r21	; 0x0f
    157c:	68 8b       	std	Y+16, r22	; 0x10
    157e:	79 8b       	std	Y+17, r23	; 0x11
    1580:	8a 8b       	std	Y+18, r24	; 0x12
    1582:	9b 8b       	std	Y+19, r25	; 0x13
    1584:	00 91 62 20 	lds	r16, 0x2062	; 0x802062 <c3>
    1588:	10 91 63 20 	lds	r17, 0x2063	; 0x802063 <c3+0x1>
    158c:	a0 2e       	mov	r10, r16
    158e:	b1 2e       	mov	r11, r17
    1590:	c1 2c       	mov	r12, r1
    1592:	d1 2c       	mov	r13, r1
    1594:	e1 2c       	mov	r14, r1
    1596:	f1 2c       	mov	r15, r1
    1598:	00 e0       	ldi	r16, 0x00	; 0
    159a:	10 e0       	ldi	r17, 0x00	; 0
    159c:	24 2d       	mov	r18, r4
    159e:	35 2d       	mov	r19, r5
    15a0:	46 2d       	mov	r20, r6
    15a2:	57 2d       	mov	r21, r7
    15a4:	69 81       	ldd	r22, Y+1	; 0x01
    15a6:	76 2f       	mov	r23, r22
    15a8:	86 2f       	mov	r24, r22
    15aa:	96 2f       	mov	r25, r22
    15ac:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__muldi3>
    15b0:	32 2e       	mov	r3, r18
    15b2:	83 2e       	mov	r8, r19
    15b4:	94 2e       	mov	r9, r20
    15b6:	e5 2f       	mov	r30, r21
    15b8:	6d 8b       	std	Y+21, r22	; 0x15
    15ba:	7c 8b       	std	Y+20, r23	; 0x14
    15bc:	a8 2e       	mov	r10, r24
    15be:	b9 2e       	mov	r11, r25
    15c0:	a0 e0       	ldi	r26, 0x00	; 0
    15c2:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__cmpdi2_s8>
    15c6:	84 f4       	brge	.+32     	; 0x15e8 <getPressure+0x1ae>
    15c8:	21 50       	subi	r18, 0x01	; 1
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	4f 4f       	sbci	r20, 0xFF	; 255
    15ce:	5f 4f       	sbci	r21, 0xFF	; 255
    15d0:	6f 4f       	sbci	r22, 0xFF	; 255
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	8f 4f       	sbci	r24, 0xFF	; 255
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	32 2e       	mov	r3, r18
    15da:	83 2e       	mov	r8, r19
    15dc:	94 2e       	mov	r9, r20
    15de:	e5 2f       	mov	r30, r21
    15e0:	6d 8b       	std	Y+21, r22	; 0x15
    15e2:	7c 8b       	std	Y+20, r23	; 0x14
    15e4:	a8 2e       	mov	r10, r24
    15e6:	b9 2e       	mov	r11, r25
    15e8:	23 2d       	mov	r18, r3
    15ea:	38 2d       	mov	r19, r8
    15ec:	49 2d       	mov	r20, r9
    15ee:	5e 2f       	mov	r21, r30
    15f0:	6d 89       	ldd	r22, Y+21	; 0x15
    15f2:	7c 89       	ldd	r23, Y+20	; 0x14
    15f4:	8a 2d       	mov	r24, r10
    15f6:	9b 2d       	mov	r25, r11
    15f8:	08 e0       	ldi	r16, 0x08	; 8
    15fa:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__ashrdi3>
    15fe:	a2 2e       	mov	r10, r18
    1600:	b3 2e       	mov	r11, r19
    1602:	c4 2e       	mov	r12, r20
    1604:	d5 2e       	mov	r13, r21
    1606:	e6 2e       	mov	r14, r22
    1608:	f7 2e       	mov	r15, r23
    160a:	08 2f       	mov	r16, r24
    160c:	19 2f       	mov	r17, r25
    160e:	22 2d       	mov	r18, r2
    1610:	3d 85       	ldd	r19, Y+13	; 0x0d
    1612:	4e 85       	ldd	r20, Y+14	; 0x0e
    1614:	5f 85       	ldd	r21, Y+15	; 0x0f
    1616:	68 89       	ldd	r22, Y+16	; 0x10
    1618:	79 89       	ldd	r23, Y+17	; 0x11
    161a:	8a 89       	ldd	r24, Y+18	; 0x12
    161c:	9b 89       	ldd	r25, Y+19	; 0x13
    161e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__adddi3>
	int32_t pressure = ((((int64_t)d1) * (((uint64_t)sens)/2097152)) - (int64_t)offset)/32768;
    1622:	05 e1       	ldi	r16, 0x15	; 21
    1624:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__lshrdi3>
    1628:	cd 80       	ldd	r12, Y+5	; 0x05
    162a:	de 80       	ldd	r13, Y+6	; 0x06
    162c:	ef 80       	ldd	r14, Y+7	; 0x07
    162e:	f8 84       	ldd	r15, Y+8	; 0x08
    1630:	56 01       	movw	r10, r12
    1632:	67 01       	movw	r12, r14
    1634:	e1 2c       	mov	r14, r1
    1636:	f1 2c       	mov	r15, r1
    1638:	87 01       	movw	r16, r14
    163a:	ad 82       	std	Y+5, r10	; 0x05
    163c:	be 82       	std	Y+6, r11	; 0x06
    163e:	cf 82       	std	Y+7, r12	; 0x07
    1640:	d8 86       	std	Y+8, r13	; 0x08
    1642:	e9 86       	std	Y+9, r14	; 0x09
    1644:	fa 86       	std	Y+10, r15	; 0x0a
    1646:	0b 87       	std	Y+11, r16	; 0x0b
    1648:	1c 87       	std	Y+12, r17	; 0x0c
    164a:	e1 2c       	mov	r14, r1
    164c:	f1 2c       	mov	r15, r1
    164e:	00 e0       	ldi	r16, 0x00	; 0
    1650:	10 e0       	ldi	r17, 0x00	; 0
    1652:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__muldi3>
    1656:	2d 83       	std	Y+5, r18	; 0x05
    1658:	3d 87       	std	Y+13, r19	; 0x0d
    165a:	4e 87       	std	Y+14, r20	; 0x0e
    165c:	5f 87       	std	Y+15, r21	; 0x0f
    165e:	68 8b       	std	Y+16, r22	; 0x10
    1660:	79 8b       	std	Y+17, r23	; 0x11
    1662:	8a 8b       	std	Y+18, r24	; 0x12
    1664:	9b 8b       	std	Y+19, r25	; 0x13
	spi_deselect();
	//printf("d2: %li\n",d2);
	

	int32_t dT = (int64_t)d2 - (((int64_t)c5)*(256));
	int64_t offset = ((int64_t)c2)*(65536) + ((((int64_t)c4)*((int64_t)dT))/(128));
    1666:	80 91 5c 20 	lds	r24, 0x205C	; 0x80205c <c2>
    166a:	90 91 5d 20 	lds	r25, 0x205D	; 0x80205d <c2+0x1>
    166e:	4c 01       	movw	r8, r24
    1670:	28 2f       	mov	r18, r24
    1672:	39 2d       	mov	r19, r9
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	00 e1       	ldi	r16, 0x10	; 16
    1682:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <__ashldi3>
    1686:	22 2e       	mov	r2, r18
    1688:	33 2e       	mov	r3, r19
    168a:	84 2e       	mov	r8, r20
    168c:	95 2e       	mov	r9, r21
    168e:	6c 8b       	std	Y+20, r22	; 0x14
    1690:	7d 8b       	std	Y+21, r23	; 0x15
    1692:	8e 8b       	std	Y+22, r24	; 0x16
    1694:	9f 8b       	std	Y+23, r25	; 0x17
    1696:	40 91 5a 20 	lds	r20, 0x205A	; 0x80205a <c4>
    169a:	50 91 5b 20 	lds	r21, 0x205B	; 0x80205b <c4+0x1>
    169e:	5a 01       	movw	r10, r20
    16a0:	c1 2c       	mov	r12, r1
    16a2:	d1 2c       	mov	r13, r1
    16a4:	e1 2c       	mov	r14, r1
    16a6:	f1 2c       	mov	r15, r1
    16a8:	87 01       	movw	r16, r14
    16aa:	48 8f       	std	Y+24, r20	; 0x18
    16ac:	b9 8e       	std	Y+25, r11	; 0x19
    16ae:	ca 8e       	std	Y+26, r12	; 0x1a
    16b0:	db 8e       	std	Y+27, r13	; 0x1b
    16b2:	ec 8e       	std	Y+28, r14	; 0x1c
    16b4:	fd 8e       	std	Y+29, r15	; 0x1d
    16b6:	0e 8f       	std	Y+30, r16	; 0x1e
    16b8:	1f 8f       	std	Y+31, r17	; 0x1f
    16ba:	a4 2c       	mov	r10, r4
    16bc:	b5 2c       	mov	r11, r5
    16be:	c6 2c       	mov	r12, r6
    16c0:	d7 2c       	mov	r13, r7
    16c2:	e9 80       	ldd	r14, Y+1	; 0x01
    16c4:	fe 2c       	mov	r15, r14
    16c6:	0e 2d       	mov	r16, r14
    16c8:	1e 2d       	mov	r17, r14
    16ca:	28 8d       	ldd	r18, Y+24	; 0x18
    16cc:	39 8d       	ldd	r19, Y+25	; 0x19
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	50 e0       	ldi	r21, 0x00	; 0
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__muldi3>
    16de:	e2 2f       	mov	r30, r18
    16e0:	73 2e       	mov	r7, r19
    16e2:	64 2e       	mov	r6, r20
    16e4:	55 2e       	mov	r5, r21
    16e6:	46 2e       	mov	r4, r22
    16e8:	79 83       	std	Y+1, r23	; 0x01
    16ea:	a8 2e       	mov	r10, r24
    16ec:	b9 2e       	mov	r11, r25
    16ee:	a0 e0       	ldi	r26, 0x00	; 0
    16f0:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__cmpdi2_s8>
    16f4:	5c f4       	brge	.+22     	; 0x170c <getPressure+0x2d2>
    16f6:	af e7       	ldi	r26, 0x7F	; 127
    16f8:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__adddi3_s8>
    16fc:	e2 2f       	mov	r30, r18
    16fe:	73 2e       	mov	r7, r19
    1700:	64 2e       	mov	r6, r20
    1702:	55 2e       	mov	r5, r21
    1704:	46 2e       	mov	r4, r22
    1706:	79 83       	std	Y+1, r23	; 0x01
    1708:	a8 2e       	mov	r10, r24
    170a:	b9 2e       	mov	r11, r25
    170c:	2e 2f       	mov	r18, r30
    170e:	37 2d       	mov	r19, r7
    1710:	46 2d       	mov	r20, r6
    1712:	55 2d       	mov	r21, r5
    1714:	64 2d       	mov	r22, r4
    1716:	79 81       	ldd	r23, Y+1	; 0x01
    1718:	8a 2d       	mov	r24, r10
    171a:	9b 2d       	mov	r25, r11
    171c:	07 e0       	ldi	r16, 0x07	; 7
    171e:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__ashrdi3>
    1722:	a2 2e       	mov	r10, r18
    1724:	b3 2e       	mov	r11, r19
    1726:	c4 2e       	mov	r12, r20
    1728:	d5 2e       	mov	r13, r21
    172a:	e6 2e       	mov	r14, r22
    172c:	f7 2e       	mov	r15, r23
    172e:	08 2f       	mov	r16, r24
    1730:	19 2f       	mov	r17, r25
    1732:	22 2d       	mov	r18, r2
    1734:	33 2d       	mov	r19, r3
    1736:	48 2d       	mov	r20, r8
    1738:	59 2d       	mov	r21, r9
    173a:	6c 89       	ldd	r22, Y+20	; 0x14
    173c:	7d 89       	ldd	r23, Y+21	; 0x15
    173e:	8e 89       	ldd	r24, Y+22	; 0x16
    1740:	9f 89       	ldd	r25, Y+23	; 0x17
    1742:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__adddi3>
    1746:	a2 2e       	mov	r10, r18
    1748:	b3 2e       	mov	r11, r19
    174a:	c4 2e       	mov	r12, r20
    174c:	d5 2e       	mov	r13, r21
    174e:	e6 2e       	mov	r14, r22
    1750:	f7 2e       	mov	r15, r23
    1752:	08 2f       	mov	r16, r24
    1754:	19 2f       	mov	r17, r25
	int64_t sens = (((int64_t)c1)*(32768)) + ((((int64_t)c3)*((int64_t)dT))/256);
	int32_t pressure = ((((int64_t)d1) * (((uint64_t)sens)/2097152)) - (int64_t)offset)/32768;
    1756:	2d 81       	ldd	r18, Y+5	; 0x05
    1758:	3d 85       	ldd	r19, Y+13	; 0x0d
    175a:	4e 85       	ldd	r20, Y+14	; 0x0e
    175c:	5f 85       	ldd	r21, Y+15	; 0x0f
    175e:	68 89       	ldd	r22, Y+16	; 0x10
    1760:	79 89       	ldd	r23, Y+17	; 0x11
    1762:	8a 89       	ldd	r24, Y+18	; 0x12
    1764:	9b 89       	ldd	r25, Y+19	; 0x13
    1766:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__subdi3>
    176a:	0f e0       	ldi	r16, 0x0F	; 15
    176c:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__lshrdi3>
    1770:	62 2f       	mov	r22, r18
    1772:	73 2f       	mov	r23, r19
    1774:	84 2f       	mov	r24, r20
    1776:	95 2f       	mov	r25, r21
	
	return pressure;
    1778:	6f 96       	adiw	r28, 0x1f	; 31
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	bf 90       	pop	r11
    1790:	af 90       	pop	r10
    1792:	9f 90       	pop	r9
    1794:	8f 90       	pop	r8
    1796:	7f 90       	pop	r7
    1798:	6f 90       	pop	r6
    179a:	5f 90       	pop	r5
    179c:	4f 90       	pop	r4
    179e:	3f 90       	pop	r3
    17a0:	2f 90       	pop	r2
    17a2:	08 95       	ret

000017a4 <getTemperature>:
 #include <math.h>
 #include "Drivers/Temperature/getTemperature.h"

 /* getTemperature method for NTC Thermistor 10k Bead */

 float getTemperature(void){
    17a4:	8f 92       	push	r8
    17a6:	9f 92       	push	r9
    17a8:	af 92       	push	r10
    17aa:	bf 92       	push	r11
    17ac:	cf 92       	push	r12
    17ae:	df 92       	push	r13
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
	ADCA.CH0.CTRL |= 0b10000000; //Start the conversion.. FOR THOMAS: THIS IS A BITWISE OPERATOR THAT KEEPS 1's and MODIFIES ZEROES.
    17b4:	e0 e0       	ldi	r30, 0x00	; 0
    17b6:	f2 e0       	ldi	r31, 0x02	; 2
    17b8:	80 a1       	ldd	r24, Z+32	; 0x20
    17ba:	80 68       	ori	r24, 0x80	; 128
    17bc:	80 a3       	std	Z+32, r24	; 0x20
		
	while(ADCA.CH0.INTFLAGS == 0); //Wait until conversion is done.
    17be:	83 a1       	ldd	r24, Z+35	; 0x23
    17c0:	88 23       	and	r24, r24
    17c2:	e9 f3       	breq	.-6      	; 0x17be <getTemperature+0x1a>
		
	uint16_t read_adc = ADCA.CH0.RES; // save reading
    17c4:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    17c8:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
	//printf("read adc: %i\n",read_adc);
	float voltage = (0.000502512562*read_adc - 0.095979899); //converts the adc reading into an actual voltage based off of slope.
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a2 d3       	rcall	.+1860   	; 0x1f16 <__floatunsisf>
    17d2:	2c e0       	ldi	r18, 0x0C	; 12
    17d4:	3b eb       	ldi	r19, 0xBB	; 187
    17d6:	43 e0       	ldi	r20, 0x03	; 3
    17d8:	5a e3       	ldi	r21, 0x3A	; 58
    17da:	be d4       	rcall	.+2428   	; 0x2158 <__mulsf3>
    17dc:	2c e1       	ldi	r18, 0x1C	; 28
    17de:	31 e9       	ldi	r19, 0x91	; 145
    17e0:	44 ec       	ldi	r20, 0xC4	; 196
    17e2:	5d e3       	ldi	r21, 0x3D	; 61
    17e4:	65 d2       	rcall	.+1226   	; 0x1cb0 <__subsf3>
    17e6:	9b 01       	movw	r18, r22
    17e8:	ac 01       	movw	r20, r24

	float resistance = (3.3*10000)/(3.3 - voltage) - 10000; //Need to convert our voltage reading into the resistance across the thermistor. To find this we use 3.3(R1)/(3.3-vadc) - R1
    17ea:	63 e3       	ldi	r22, 0x33	; 51
    17ec:	73 e3       	ldi	r23, 0x33	; 51
    17ee:	83 e5       	ldi	r24, 0x53	; 83
    17f0:	90 e4       	ldi	r25, 0x40	; 64
    17f2:	5e d2       	rcall	.+1212   	; 0x1cb0 <__subsf3>
    17f4:	9b 01       	movw	r18, r22
    17f6:	ac 01       	movw	r20, r24
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	78 ee       	ldi	r23, 0xE8	; 232
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	97 e4       	ldi	r25, 0x47	; 71
    1800:	bc d2       	rcall	.+1400   	; 0x1d7a <__divsf3>
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e4       	ldi	r19, 0x40	; 64
    1806:	4c e1       	ldi	r20, 0x1C	; 28
    1808:	56 e4       	ldi	r21, 0x46	; 70
    180a:	52 d2       	rcall	.+1188   	; 0x1cb0 <__subsf3>
	
	float a_const = 0.003354016; //A value for the NTCLE100E3103HT1 in the Steinhart-Hart equation (T = 1/(A + Bln(resistance) + Dln^3(resistance))
	float b_const = 0.000256985; //B value
	float d_const = 0.00000006383091; //D value.
	return 1/(a_const+ b_const*log(resistance/10000) + d_const*log(resistance/10000)*log(resistance/10000)*log(resistance/10000)); //Steinhart-Hart to find temperature then return it.
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e4       	ldi	r19, 0x40	; 64
    1810:	4c e1       	ldi	r20, 0x1C	; 28
    1812:	56 e4       	ldi	r21, 0x46	; 70
    1814:	b2 d2       	rcall	.+1380   	; 0x1d7a <__divsf3>
    1816:	60 d4       	rcall	.+2240   	; 0x20d8 <log>
    1818:	6b 01       	movw	r12, r22
    181a:	7c 01       	movw	r14, r24
    181c:	21 ef       	ldi	r18, 0xF1	; 241
    181e:	3b eb       	ldi	r19, 0xBB	; 187
    1820:	46 e8       	ldi	r20, 0x86	; 134
    1822:	59 e3       	ldi	r21, 0x39	; 57
    1824:	99 d4       	rcall	.+2354   	; 0x2158 <__mulsf3>
    1826:	2d e0       	ldi	r18, 0x0D	; 13
    1828:	3f ec       	ldi	r19, 0xCF	; 207
    182a:	4b e5       	ldi	r20, 0x5B	; 91
    182c:	5b e3       	ldi	r21, 0x3B	; 59
    182e:	41 d2       	rcall	.+1154   	; 0x1cb2 <__addsf3>
    1830:	4b 01       	movw	r8, r22
    1832:	5c 01       	movw	r10, r24
    1834:	2a e6       	ldi	r18, 0x6A	; 106
    1836:	33 e1       	ldi	r19, 0x13	; 19
    1838:	49 e8       	ldi	r20, 0x89	; 137
    183a:	53 e3       	ldi	r21, 0x33	; 51
    183c:	c7 01       	movw	r24, r14
    183e:	b6 01       	movw	r22, r12
    1840:	8b d4       	rcall	.+2326   	; 0x2158 <__mulsf3>
    1842:	9b 01       	movw	r18, r22
    1844:	ac 01       	movw	r20, r24
    1846:	c7 01       	movw	r24, r14
    1848:	b6 01       	movw	r22, r12
    184a:	86 d4       	rcall	.+2316   	; 0x2158 <__mulsf3>
    184c:	9b 01       	movw	r18, r22
    184e:	ac 01       	movw	r20, r24
    1850:	c7 01       	movw	r24, r14
    1852:	b6 01       	movw	r22, r12
    1854:	81 d4       	rcall	.+2306   	; 0x2158 <__mulsf3>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	c5 01       	movw	r24, r10
    185c:	b4 01       	movw	r22, r8
    185e:	29 d2       	rcall	.+1106   	; 0x1cb2 <__addsf3>
    1860:	9b 01       	movw	r18, r22
    1862:	ac 01       	movw	r20, r24
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	80 e8       	ldi	r24, 0x80	; 128
    186a:	9f e3       	ldi	r25, 0x3F	; 63
    186c:	86 d2       	rcall	.+1292   	; 0x1d7a <__divsf3>
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	df 90       	pop	r13
    1874:	cf 90       	pop	r12
    1876:	bf 90       	pop	r11
    1878:	af 90       	pop	r10
    187a:	9f 90       	pop	r9
    187c:	8f 90       	pop	r8
    187e:	08 95       	ret

00001880 <TCD0_init>:
	TCE0.CCB = TCE0.PER - (TCE0.PER/duty_cycle);
	TCE0.CCC = TCE0.PER - (TCE0.PER/duty_cycle);
	TCE0.CCD = TCE0.PER - (TCE0.PER/duty_cycle);
}
void TCD0_init(void){
	PORTD.DIR = 0b11111111; //sets to output.
    1880:	8f ef       	ldi	r24, 0xFF	; 255
    1882:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	TCD0.CTRLA = 0b00000110; //0110 is prescalar 256.
    1886:	e0 e0       	ldi	r30, 0x00	; 0
    1888:	f9 e0       	ldi	r31, 0x09	; 9
    188a:	86 e0       	ldi	r24, 0x06	; 6
    188c:	80 83       	st	Z, r24
	TCD0.CTRLB = 0b10110011; //OCn output pin (currently set at 0) and single slope PWM.
    188e:	83 eb       	ldi	r24, 0xB3	; 179
    1890:	81 83       	std	Z+1, r24	; 0x01
    1892:	08 95       	ret

00001894 <TCF0_init>:
}

void TCF0_init(void){
	TCF0.CTRLA = 0b00000111; //presc 1024
    1894:	e0 e0       	ldi	r30, 0x00	; 0
    1896:	fb e0       	ldi	r31, 0x0B	; 11
    1898:	87 e0       	ldi	r24, 0x07	; 7
    189a:	80 83       	st	Z, r24
	TCF0.CTRLB = 0b00000000;
    189c:	11 82       	std	Z+1, r1	; 0x01
	TCF0.CNT = 0;
    189e:	10 a2       	std	Z+32, r1	; 0x20
    18a0:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.PER = 312; //period of 312 = ~100Hz = ~10ms before overflow
    18a2:	88 e3       	ldi	r24, 0x38	; 56
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	86 a3       	std	Z+38, r24	; 0x26
    18a8:	97 a3       	std	Z+39, r25	; 0x27
    18aa:	08 95       	ret

000018ac <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    18b2:	78 da       	rcall	.-2832   	; 0xda4 <usart_getchar>
    18b4:	88 83       	st	Y, r24
}
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	08 95       	ret

000018bc <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    18bc:	6b ca       	rjmp	.-2858   	; 0xd94 <usart_putchar>
}
    18be:	08 95       	ret

000018c0 <UART_Comms_Init>:
   to start the uart communications */

#include "conf_usart_serial.h" //Includes the information in the config file
#include <asf.h>

void UART_Comms_Init(void){
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	27 97       	sbiw	r28, 0x07	; 7
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	de bf       	out	0x3e, r29	; 62
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	//Must set TX pin as output
	PORTC.DIRSET=0b00001000;
    18ce:	e0 e4       	ldi	r30, 0x40	; 64
    18d0:	f6 e0       	ldi	r31, 0x06	; 6
    18d2:	88 e0       	ldi	r24, 0x08	; 8
    18d4:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET=0b00001000;
    18d6:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUT=0xFF;
    18d8:	8f ef       	ldi	r24, 0xFF	; 255
    18da:	84 83       	std	Z+4, r24	; 0x04
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    18dc:	80 ea       	ldi	r24, 0xA0	; 160
    18de:	98 e0       	ldi	r25, 0x08	; 8
    18e0:	80 93 52 20 	sts	0x2052, r24	; 0x802052 <stdio_base>
    18e4:	90 93 53 20 	sts	0x2053, r25	; 0x802053 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    18e8:	8e e5       	ldi	r24, 0x5E	; 94
    18ea:	9c e0       	ldi	r25, 0x0C	; 12
    18ec:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <ptr_put>
    18f0:	90 93 51 20 	sts	0x2051, r25	; 0x802051 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    18f4:	86 e5       	ldi	r24, 0x56	; 86
    18f6:	9c e0       	ldi	r25, 0x0C	; 12
    18f8:	80 93 4e 20 	sts	0x204E, r24	; 0x80204e <ptr_get>
    18fc:	90 93 4f 20 	sts	0x204F, r25	; 0x80204f <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1900:	e6 e0       	ldi	r30, 0x06	; 6
    1902:	f0 e2       	ldi	r31, 0x20	; 32
    1904:	84 81       	ldd	r24, Z+4	; 0x04
    1906:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1908:	85 81       	ldd	r24, Z+5	; 0x05
    190a:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    190c:	86 81       	ldd	r24, Z+6	; 0x06
    190e:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	a2 81       	ldd	r26, Z+2	; 0x02
    1916:	b3 81       	ldd	r27, Z+3	; 0x03
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	ab 83       	std	Y+3, r26	; 0x03
    191e:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    1920:	60 e1       	ldi	r22, 0x10	; 16
    1922:	83 e0       	ldi	r24, 0x03	; 3
    1924:	08 d8       	rcall	.-4080   	; 0x936 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1926:	be 01       	movw	r22, r28
    1928:	6f 5f       	subi	r22, 0xFF	; 255
    192a:	7f 4f       	sbci	r23, 0xFF	; 255
    192c:	80 ea       	ldi	r24, 0xA0	; 160
    192e:	98 e0       	ldi	r25, 0x08	; 8
    1930:	58 db       	rcall	.-2384   	; 0xfe2 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1932:	67 ea       	ldi	r22, 0xA7	; 167
    1934:	74 e0       	ldi	r23, 0x04	; 4
    1936:	80 ec       	ldi	r24, 0xC0	; 192
    1938:	94 e0       	ldi	r25, 0x04	; 4
    193a:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <fdevopen>

	stdio_serial_init(&USARTC0, &usart_options); //ASF function that initializes the UART peripheral
}
    193e:	27 96       	adiw	r28, 0x07	; 7
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	09 f4       	brne	.+2      	; 0x1950 <sysclk_enable_peripheral_clock+0x6>
    194e:	5c c1       	rjmp	.+696    	; 0x1c08 <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1950:	80 3c       	cpi	r24, 0xC0	; 192
    1952:	91 05       	cpc	r25, r1
    1954:	29 f4       	brne	.+10     	; 0x1960 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1956:	60 e1       	ldi	r22, 0x10	; 16
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    195e:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1960:	80 34       	cpi	r24, 0x40	; 64
    1962:	24 e0       	ldi	r18, 0x04	; 4
    1964:	92 07       	cpc	r25, r18
    1966:	29 f4       	brne	.+10     	; 0x1972 <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1968:	68 e0       	ldi	r22, 0x08	; 8
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1970:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1972:	81 15       	cp	r24, r1
    1974:	24 e0       	ldi	r18, 0x04	; 4
    1976:	92 07       	cpc	r25, r18
    1978:	29 f4       	brne	.+10     	; 0x1984 <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    197a:	64 e0       	ldi	r22, 0x04	; 4
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1982:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1984:	80 38       	cpi	r24, 0x80	; 128
    1986:	21 e0       	ldi	r18, 0x01	; 1
    1988:	92 07       	cpc	r25, r18
    198a:	29 f4       	brne	.+10     	; 0x1996 <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    198c:	62 e0       	ldi	r22, 0x02	; 2
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1994:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1996:	81 15       	cp	r24, r1
    1998:	21 e0       	ldi	r18, 0x01	; 1
    199a:	92 07       	cpc	r25, r18
    199c:	29 f4       	brne	.+10     	; 0x19a8 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    199e:	61 e0       	ldi	r22, 0x01	; 1
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    19a6:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    19a8:	80 38       	cpi	r24, 0x80	; 128
    19aa:	23 e0       	ldi	r18, 0x03	; 3
    19ac:	92 07       	cpc	r25, r18
    19ae:	29 f4       	brne	.+10     	; 0x19ba <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    19b8:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    19ba:	80 39       	cpi	r24, 0x90	; 144
    19bc:	23 e0       	ldi	r18, 0x03	; 3
    19be:	92 07       	cpc	r25, r18
    19c0:	29 f4       	brne	.+10     	; 0x19cc <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    19ca:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    19cc:	81 15       	cp	r24, r1
    19ce:	22 e0       	ldi	r18, 0x02	; 2
    19d0:	92 07       	cpc	r25, r18
    19d2:	29 f4       	brne	.+10     	; 0x19de <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    19d4:	62 e0       	ldi	r22, 0x02	; 2
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    19dc:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    19de:	80 34       	cpi	r24, 0x40	; 64
    19e0:	22 e0       	ldi	r18, 0x02	; 2
    19e2:	92 07       	cpc	r25, r18
    19e4:	29 f4       	brne	.+10     	; 0x19f0 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    19e6:	62 e0       	ldi	r22, 0x02	; 2
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    19ee:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    19f0:	81 15       	cp	r24, r1
    19f2:	23 e0       	ldi	r18, 0x03	; 3
    19f4:	92 07       	cpc	r25, r18
    19f6:	29 f4       	brne	.+10     	; 0x1a02 <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    19f8:	64 e0       	ldi	r22, 0x04	; 4
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1a00:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1a02:	80 32       	cpi	r24, 0x20	; 32
    1a04:	23 e0       	ldi	r18, 0x03	; 3
    1a06:	92 07       	cpc	r25, r18
    1a08:	29 f4       	brne	.+10     	; 0x1a14 <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1a0a:	64 e0       	ldi	r22, 0x04	; 4
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1a12:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1a14:	81 15       	cp	r24, r1
    1a16:	28 e0       	ldi	r18, 0x08	; 8
    1a18:	92 07       	cpc	r25, r18
    1a1a:	29 f4       	brne	.+10     	; 0x1a26 <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1a24:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1a26:	81 15       	cp	r24, r1
    1a28:	29 e0       	ldi	r18, 0x09	; 9
    1a2a:	92 07       	cpc	r25, r18
    1a2c:	29 f4       	brne	.+10     	; 0x1a38 <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	84 e0       	ldi	r24, 0x04	; 4
    1a32:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1a36:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1a38:	81 15       	cp	r24, r1
    1a3a:	2a e0       	ldi	r18, 0x0A	; 10
    1a3c:	92 07       	cpc	r25, r18
    1a3e:	29 f4       	brne	.+10     	; 0x1a4a <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	85 e0       	ldi	r24, 0x05	; 5
    1a44:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1a48:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1a4a:	81 15       	cp	r24, r1
    1a4c:	2b e0       	ldi	r18, 0x0B	; 11
    1a4e:	92 07       	cpc	r25, r18
    1a50:	29 f4       	brne	.+10     	; 0x1a5c <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1a52:	61 e0       	ldi	r22, 0x01	; 1
    1a54:	86 e0       	ldi	r24, 0x06	; 6
    1a56:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1a5a:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1a5c:	80 34       	cpi	r24, 0x40	; 64
    1a5e:	28 e0       	ldi	r18, 0x08	; 8
    1a60:	92 07       	cpc	r25, r18
    1a62:	29 f4       	brne	.+10     	; 0x1a6e <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1a64:	62 e0       	ldi	r22, 0x02	; 2
    1a66:	83 e0       	ldi	r24, 0x03	; 3
    1a68:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1a6c:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1a6e:	80 34       	cpi	r24, 0x40	; 64
    1a70:	29 e0       	ldi	r18, 0x09	; 9
    1a72:	92 07       	cpc	r25, r18
    1a74:	29 f4       	brne	.+10     	; 0x1a80 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1a76:	62 e0       	ldi	r22, 0x02	; 2
    1a78:	84 e0       	ldi	r24, 0x04	; 4
    1a7a:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1a7e:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1a80:	80 34       	cpi	r24, 0x40	; 64
    1a82:	2a e0       	ldi	r18, 0x0A	; 10
    1a84:	92 07       	cpc	r25, r18
    1a86:	29 f4       	brne	.+10     	; 0x1a92 <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1a88:	62 e0       	ldi	r22, 0x02	; 2
    1a8a:	85 e0       	ldi	r24, 0x05	; 5
    1a8c:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1a90:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1a92:	80 34       	cpi	r24, 0x40	; 64
    1a94:	2b e0       	ldi	r18, 0x0B	; 11
    1a96:	92 07       	cpc	r25, r18
    1a98:	29 f4       	brne	.+10     	; 0x1aa4 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1a9a:	62 e0       	ldi	r22, 0x02	; 2
    1a9c:	86 e0       	ldi	r24, 0x06	; 6
    1a9e:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1aa2:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1aa4:	80 39       	cpi	r24, 0x90	; 144
    1aa6:	28 e0       	ldi	r18, 0x08	; 8
    1aa8:	92 07       	cpc	r25, r18
    1aaa:	29 f4       	brne	.+10     	; 0x1ab6 <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1aac:	64 e0       	ldi	r22, 0x04	; 4
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1ab4:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1ab6:	80 39       	cpi	r24, 0x90	; 144
    1ab8:	29 e0       	ldi	r18, 0x09	; 9
    1aba:	92 07       	cpc	r25, r18
    1abc:	29 f4       	brne	.+10     	; 0x1ac8 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1ac6:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1ac8:	80 39       	cpi	r24, 0x90	; 144
    1aca:	2a e0       	ldi	r18, 0x0A	; 10
    1acc:	92 07       	cpc	r25, r18
    1ace:	29 f4       	brne	.+10     	; 0x1ada <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1ad0:	64 e0       	ldi	r22, 0x04	; 4
    1ad2:	85 e0       	ldi	r24, 0x05	; 5
    1ad4:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1ad8:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1ada:	80 39       	cpi	r24, 0x90	; 144
    1adc:	2b e0       	ldi	r18, 0x0B	; 11
    1ade:	92 07       	cpc	r25, r18
    1ae0:	29 f4       	brne	.+10     	; 0x1aec <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1ae2:	64 e0       	ldi	r22, 0x04	; 4
    1ae4:	86 e0       	ldi	r24, 0x06	; 6
    1ae6:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1aea:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1aec:	80 3c       	cpi	r24, 0xC0	; 192
    1aee:	28 e0       	ldi	r18, 0x08	; 8
    1af0:	92 07       	cpc	r25, r18
    1af2:	29 f4       	brne	.+10     	; 0x1afe <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1af4:	68 e0       	ldi	r22, 0x08	; 8
    1af6:	83 e0       	ldi	r24, 0x03	; 3
    1af8:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1afc:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1afe:	80 3c       	cpi	r24, 0xC0	; 192
    1b00:	29 e0       	ldi	r18, 0x09	; 9
    1b02:	92 07       	cpc	r25, r18
    1b04:	29 f4       	brne	.+10     	; 0x1b10 <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1b06:	68 e0       	ldi	r22, 0x08	; 8
    1b08:	84 e0       	ldi	r24, 0x04	; 4
    1b0a:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1b0e:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1b10:	80 3c       	cpi	r24, 0xC0	; 192
    1b12:	2a e0       	ldi	r18, 0x0A	; 10
    1b14:	92 07       	cpc	r25, r18
    1b16:	29 f4       	brne	.+10     	; 0x1b22 <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1b18:	68 e0       	ldi	r22, 0x08	; 8
    1b1a:	85 e0       	ldi	r24, 0x05	; 5
    1b1c:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1b20:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1b22:	80 3c       	cpi	r24, 0xC0	; 192
    1b24:	2b e0       	ldi	r18, 0x0B	; 11
    1b26:	92 07       	cpc	r25, r18
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1b2a:	68 e0       	ldi	r22, 0x08	; 8
    1b2c:	86 e0       	ldi	r24, 0x06	; 6
    1b2e:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1b32:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1b34:	80 3a       	cpi	r24, 0xA0	; 160
    1b36:	28 e0       	ldi	r18, 0x08	; 8
    1b38:	92 07       	cpc	r25, r18
    1b3a:	29 f4       	brne	.+10     	; 0x1b46 <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1b3c:	60 e1       	ldi	r22, 0x10	; 16
    1b3e:	83 e0       	ldi	r24, 0x03	; 3
    1b40:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1b44:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1b46:	80 3a       	cpi	r24, 0xA0	; 160
    1b48:	29 e0       	ldi	r18, 0x09	; 9
    1b4a:	92 07       	cpc	r25, r18
    1b4c:	29 f4       	brne	.+10     	; 0x1b58 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1b4e:	60 e1       	ldi	r22, 0x10	; 16
    1b50:	84 e0       	ldi	r24, 0x04	; 4
    1b52:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1b56:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1b58:	80 3a       	cpi	r24, 0xA0	; 160
    1b5a:	2a e0       	ldi	r18, 0x0A	; 10
    1b5c:	92 07       	cpc	r25, r18
    1b5e:	29 f4       	brne	.+10     	; 0x1b6a <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1b60:	60 e1       	ldi	r22, 0x10	; 16
    1b62:	85 e0       	ldi	r24, 0x05	; 5
    1b64:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1b68:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1b6a:	80 3a       	cpi	r24, 0xA0	; 160
    1b6c:	2b e0       	ldi	r18, 0x0B	; 11
    1b6e:	92 07       	cpc	r25, r18
    1b70:	29 f4       	brne	.+10     	; 0x1b7c <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1b72:	60 e1       	ldi	r22, 0x10	; 16
    1b74:	86 e0       	ldi	r24, 0x06	; 6
    1b76:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1b7a:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1b7c:	80 3b       	cpi	r24, 0xB0	; 176
    1b7e:	28 e0       	ldi	r18, 0x08	; 8
    1b80:	92 07       	cpc	r25, r18
    1b82:	29 f4       	brne	.+10     	; 0x1b8e <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1b84:	60 e2       	ldi	r22, 0x20	; 32
    1b86:	83 e0       	ldi	r24, 0x03	; 3
    1b88:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1b8c:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1b8e:	80 3b       	cpi	r24, 0xB0	; 176
    1b90:	29 e0       	ldi	r18, 0x09	; 9
    1b92:	92 07       	cpc	r25, r18
    1b94:	29 f4       	brne	.+10     	; 0x1ba0 <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1b96:	60 e2       	ldi	r22, 0x20	; 32
    1b98:	84 e0       	ldi	r24, 0x04	; 4
    1b9a:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1b9e:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1ba0:	80 3b       	cpi	r24, 0xB0	; 176
    1ba2:	2a e0       	ldi	r18, 0x0A	; 10
    1ba4:	92 07       	cpc	r25, r18
    1ba6:	29 f4       	brne	.+10     	; 0x1bb2 <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1ba8:	60 e2       	ldi	r22, 0x20	; 32
    1baa:	85 e0       	ldi	r24, 0x05	; 5
    1bac:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1bb0:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1bb2:	80 3b       	cpi	r24, 0xB0	; 176
    1bb4:	2b e0       	ldi	r18, 0x0B	; 11
    1bb6:	92 07       	cpc	r25, r18
    1bb8:	29 f4       	brne	.+10     	; 0x1bc4 <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1bba:	60 e2       	ldi	r22, 0x20	; 32
    1bbc:	86 e0       	ldi	r24, 0x06	; 6
    1bbe:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1bc2:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1bc4:	80 38       	cpi	r24, 0x80	; 128
    1bc6:	24 e0       	ldi	r18, 0x04	; 4
    1bc8:	92 07       	cpc	r25, r18
    1bca:	29 f4       	brne	.+10     	; 0x1bd6 <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1bcc:	60 e4       	ldi	r22, 0x40	; 64
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1bd4:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1bd6:	80 39       	cpi	r24, 0x90	; 144
    1bd8:	24 e0       	ldi	r18, 0x04	; 4
    1bda:	92 07       	cpc	r25, r18
    1bdc:	29 f4       	brne	.+10     	; 0x1be8 <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1bde:	60 e4       	ldi	r22, 0x40	; 64
    1be0:	84 e0       	ldi	r24, 0x04	; 4
    1be2:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1be6:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1be8:	80 3a       	cpi	r24, 0xA0	; 160
    1bea:	24 e0       	ldi	r18, 0x04	; 4
    1bec:	92 07       	cpc	r25, r18
    1bee:	29 f4       	brne	.+10     	; 0x1bfa <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1bf0:	60 e4       	ldi	r22, 0x40	; 64
    1bf2:	85 e0       	ldi	r24, 0x05	; 5
    1bf4:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1bf8:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1bfa:	80 3b       	cpi	r24, 0xB0	; 176
    1bfc:	94 40       	sbci	r25, 0x04	; 4
    1bfe:	21 f4       	brne	.+8      	; 0x1c08 <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1c00:	60 e4       	ldi	r22, 0x40	; 64
    1c02:	86 e0       	ldi	r24, 0x06	; 6
    1c04:	0c 94 9b 04 	jmp	0x936	; 0x936 <sysclk_enable_module>
    1c08:	08 95       	ret

00001c0a <main>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main (void)
{
	/* Initialize the system clock, 32MHz, this also turns off all peripheral clocks */
	sysclk_init();
    1c0a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <sysclk_init>
	//rtc_init();

	/* Peripheral clock inits */
	sysclk_enable_peripheral_clock(&USARTC0); //For every peripheral, you must enable the clock like shown here. Ex. Timer counters, SPI, ADCs
    1c0e:	80 ea       	ldi	r24, 0xA0	; 160
    1c10:	98 e0       	ldi	r25, 0x08	; 8
    1c12:	9b de       	rcall	.-714    	; 0x194a <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&ADCA); //Analog to Digital Converter clock initialization.
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	92 e0       	ldi	r25, 0x02	; 2
    1c18:	98 de       	rcall	.-720    	; 0x194a <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCE0); //Timer Counter clock initialization
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	9a e0       	ldi	r25, 0x0A	; 10
    1c1e:	95 de       	rcall	.-726    	; 0x194a <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCD0);
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	99 e0       	ldi	r25, 0x09	; 9
    1c24:	92 de       	rcall	.-732    	; 0x194a <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCC0);
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	98 e0       	ldi	r25, 0x08	; 8
    1c2a:	8f de       	rcall	.-738    	; 0x194a <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCF0);
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	9b e0       	ldi	r25, 0x0B	; 11
    1c30:	8c de       	rcall	.-744    	; 0x194a <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&SPIC); //Serial Port Interface initialization.
    1c32:	80 ec       	ldi	r24, 0xC0	; 192
    1c34:	98 e0       	ldi	r25, 0x08	; 8
    1c36:	89 de       	rcall	.-750    	; 0x194a <sysclk_enable_peripheral_clock>
	
	/* Example, Timer Counter on PORTE */

	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES); //You must have this line for every timer counter due to a flaw in the design of the chip **************************
    1c38:	64 e0       	ldi	r22, 0x04	; 4
    1c3a:	85 e0       	ldi	r24, 0x05	; 5
    1c3c:	0e 94 9b 04 	call	0x936	; 0x936 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1c40:	64 e0       	ldi	r22, 0x04	; 4
    1c42:	84 e0       	ldi	r24, 0x04	; 4
    1c44:	0e 94 9b 04 	call	0x936	; 0x936 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1c48:	64 e0       	ldi	r22, 0x04	; 4
    1c4a:	86 e0       	ldi	r24, 0x06	; 6
    1c4c:	0e 94 9b 04 	call	0x936	; 0x936 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C,PR_SPI_bm);
    1c50:	68 e0       	ldi	r22, 0x08	; 8
    1c52:	83 e0       	ldi	r24, 0x03	; 3
    1c54:	0e 94 9b 04 	call	0x936	; 0x936 <sysclk_enable_module>
	
	/* Initializations */

	UART_Comms_Init();
    1c58:	33 de       	rcall	.-922    	; 0x18c0 <UART_Comms_Init>
	//printf("Initializing");
	SPI_init();
    1c5a:	e2 db       	rcall	.-2108   	; 0x1420 <SPI_init>
	//TCE0_init(12499,100);
	TCD0_init();
    1c5c:	11 de       	rcall	.-990    	; 0x1880 <TCD0_init>
	TCF0_init();
    1c5e:	1a de       	rcall	.-972    	; 0x1894 <TCF0_init>
	ADC_init();
    1c60:	21 db       	rcall	.-2494   	; 0x12a4 <ADC_init>
	EP_address = 0;
    1c62:	10 92 3e 20 	sts	0x203E, r1	; 0x80203e <EP_address>
	alt = 0;
    1c66:	10 92 3c 20 	sts	0x203C, r1	; 0x80203c <alt>
    1c6a:	10 92 3d 20 	sts	0x203D, r1	; 0x80203d <alt+0x1>
	t = 0;
    1c6e:	10 92 36 20 	sts	0x2036, r1	; 0x802036 <__data_end>
    1c72:	10 92 37 20 	sts	0x2037, r1	; 0x802037 <__data_end+0x1>
    1c76:	10 92 38 20 	sts	0x2038, r1	; 0x802038 <__data_end+0x2>
    1c7a:	10 92 39 20 	sts	0x2039, r1	; 0x802039 <__data_end+0x3>

	PORTD.DIR = 0b11111111;
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	PORTE.DIR = 0b11111111;
    1c84:	e0 e8       	ldi	r30, 0x80	; 128
    1c86:	f6 e0       	ldi	r31, 0x06	; 6
    1c88:	80 83       	st	Z, r24
	PORTF.DIR = 0b00000011;
    1c8a:	83 e0       	ldi	r24, 0x03	; 3
    1c8c:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
	
	PORTE.OUT = 0b00000000;
    1c90:	14 82       	std	Z+4, r1	; 0x04
	/* Flight States */
	//flightStateZero();
	//flightStateOne();
	//flightStateTwo();
	// flightStateThree();
	initAlt = getAltitude();
    1c92:	0e 94 76 02 	call	0x4ec	; 0x4ec <getAltitude>
    1c96:	13 d1       	rcall	.+550    	; 0x1ebe <__fixunssfsi>
    1c98:	60 93 3a 20 	sts	0x203A, r22	; 0x80203a <initAlt>
    1c9c:	70 93 3b 20 	sts	0x203B, r23	; 0x80203b <initAlt+0x1>

	LED(62500,5);//Set LED to .5Hz, 5% DC.
    1ca0:	65 e0       	ldi	r22, 0x05	; 5
    1ca2:	84 e2       	ldi	r24, 0x24	; 36
    1ca4:	94 ef       	ldi	r25, 0xF4	; 244
    1ca6:	0e 94 b9 03 	call	0x772	; 0x772 <LED>


		//while (TCF0.CNT != TCF0.PER); //wait until TCF0 overflows
		//printf("overflow\n");
		
		test();
    1caa:	0e 94 4d 04 	call	0x89a	; 0x89a <test>
		lightChase(50);

			if(EP_address >= 2047)
				EP_address = 0;
				*/
	}
    1cae:	fd cf       	rjmp	.-6      	; 0x1caa <main+0xa0>

00001cb0 <__subsf3>:
    1cb0:	50 58       	subi	r21, 0x80	; 128

00001cb2 <__addsf3>:
    1cb2:	bb 27       	eor	r27, r27
    1cb4:	aa 27       	eor	r26, r26
    1cb6:	0e d0       	rcall	.+28     	; 0x1cd4 <__addsf3x>
    1cb8:	d0 c1       	rjmp	.+928    	; 0x205a <__fp_round>
    1cba:	c1 d1       	rcall	.+898    	; 0x203e <__fp_pscA>
    1cbc:	30 f0       	brcs	.+12     	; 0x1cca <__addsf3+0x18>
    1cbe:	c6 d1       	rcall	.+908    	; 0x204c <__fp_pscB>
    1cc0:	20 f0       	brcs	.+8      	; 0x1cca <__addsf3+0x18>
    1cc2:	31 f4       	brne	.+12     	; 0x1cd0 <__addsf3+0x1e>
    1cc4:	9f 3f       	cpi	r25, 0xFF	; 255
    1cc6:	11 f4       	brne	.+4      	; 0x1ccc <__addsf3+0x1a>
    1cc8:	1e f4       	brtc	.+6      	; 0x1cd0 <__addsf3+0x1e>
    1cca:	a6 c1       	rjmp	.+844    	; 0x2018 <__fp_nan>
    1ccc:	0e f4       	brtc	.+2      	; 0x1cd0 <__addsf3+0x1e>
    1cce:	e0 95       	com	r30
    1cd0:	e7 fb       	bst	r30, 7
    1cd2:	9c c1       	rjmp	.+824    	; 0x200c <__fp_inf>

00001cd4 <__addsf3x>:
    1cd4:	e9 2f       	mov	r30, r25
    1cd6:	d2 d1       	rcall	.+932    	; 0x207c <__fp_split3>
    1cd8:	80 f3       	brcs	.-32     	; 0x1cba <__addsf3+0x8>
    1cda:	ba 17       	cp	r27, r26
    1cdc:	62 07       	cpc	r22, r18
    1cde:	73 07       	cpc	r23, r19
    1ce0:	84 07       	cpc	r24, r20
    1ce2:	95 07       	cpc	r25, r21
    1ce4:	18 f0       	brcs	.+6      	; 0x1cec <__addsf3x+0x18>
    1ce6:	71 f4       	brne	.+28     	; 0x1d04 <__addsf3x+0x30>
    1ce8:	9e f5       	brtc	.+102    	; 0x1d50 <__addsf3x+0x7c>
    1cea:	ea c1       	rjmp	.+980    	; 0x20c0 <__fp_zero>
    1cec:	0e f4       	brtc	.+2      	; 0x1cf0 <__addsf3x+0x1c>
    1cee:	e0 95       	com	r30
    1cf0:	0b 2e       	mov	r0, r27
    1cf2:	ba 2f       	mov	r27, r26
    1cf4:	a0 2d       	mov	r26, r0
    1cf6:	0b 01       	movw	r0, r22
    1cf8:	b9 01       	movw	r22, r18
    1cfa:	90 01       	movw	r18, r0
    1cfc:	0c 01       	movw	r0, r24
    1cfe:	ca 01       	movw	r24, r20
    1d00:	a0 01       	movw	r20, r0
    1d02:	11 24       	eor	r1, r1
    1d04:	ff 27       	eor	r31, r31
    1d06:	59 1b       	sub	r21, r25
    1d08:	99 f0       	breq	.+38     	; 0x1d30 <__addsf3x+0x5c>
    1d0a:	59 3f       	cpi	r21, 0xF9	; 249
    1d0c:	50 f4       	brcc	.+20     	; 0x1d22 <__addsf3x+0x4e>
    1d0e:	50 3e       	cpi	r21, 0xE0	; 224
    1d10:	68 f1       	brcs	.+90     	; 0x1d6c <__addsf3x+0x98>
    1d12:	1a 16       	cp	r1, r26
    1d14:	f0 40       	sbci	r31, 0x00	; 0
    1d16:	a2 2f       	mov	r26, r18
    1d18:	23 2f       	mov	r18, r19
    1d1a:	34 2f       	mov	r19, r20
    1d1c:	44 27       	eor	r20, r20
    1d1e:	58 5f       	subi	r21, 0xF8	; 248
    1d20:	f3 cf       	rjmp	.-26     	; 0x1d08 <__addsf3x+0x34>
    1d22:	46 95       	lsr	r20
    1d24:	37 95       	ror	r19
    1d26:	27 95       	ror	r18
    1d28:	a7 95       	ror	r26
    1d2a:	f0 40       	sbci	r31, 0x00	; 0
    1d2c:	53 95       	inc	r21
    1d2e:	c9 f7       	brne	.-14     	; 0x1d22 <__addsf3x+0x4e>
    1d30:	7e f4       	brtc	.+30     	; 0x1d50 <__addsf3x+0x7c>
    1d32:	1f 16       	cp	r1, r31
    1d34:	ba 0b       	sbc	r27, r26
    1d36:	62 0b       	sbc	r22, r18
    1d38:	73 0b       	sbc	r23, r19
    1d3a:	84 0b       	sbc	r24, r20
    1d3c:	ba f0       	brmi	.+46     	; 0x1d6c <__addsf3x+0x98>
    1d3e:	91 50       	subi	r25, 0x01	; 1
    1d40:	a1 f0       	breq	.+40     	; 0x1d6a <__addsf3x+0x96>
    1d42:	ff 0f       	add	r31, r31
    1d44:	bb 1f       	adc	r27, r27
    1d46:	66 1f       	adc	r22, r22
    1d48:	77 1f       	adc	r23, r23
    1d4a:	88 1f       	adc	r24, r24
    1d4c:	c2 f7       	brpl	.-16     	; 0x1d3e <__addsf3x+0x6a>
    1d4e:	0e c0       	rjmp	.+28     	; 0x1d6c <__addsf3x+0x98>
    1d50:	ba 0f       	add	r27, r26
    1d52:	62 1f       	adc	r22, r18
    1d54:	73 1f       	adc	r23, r19
    1d56:	84 1f       	adc	r24, r20
    1d58:	48 f4       	brcc	.+18     	; 0x1d6c <__addsf3x+0x98>
    1d5a:	87 95       	ror	r24
    1d5c:	77 95       	ror	r23
    1d5e:	67 95       	ror	r22
    1d60:	b7 95       	ror	r27
    1d62:	f7 95       	ror	r31
    1d64:	9e 3f       	cpi	r25, 0xFE	; 254
    1d66:	08 f0       	brcs	.+2      	; 0x1d6a <__addsf3x+0x96>
    1d68:	b3 cf       	rjmp	.-154    	; 0x1cd0 <__addsf3+0x1e>
    1d6a:	93 95       	inc	r25
    1d6c:	88 0f       	add	r24, r24
    1d6e:	08 f0       	brcs	.+2      	; 0x1d72 <__addsf3x+0x9e>
    1d70:	99 27       	eor	r25, r25
    1d72:	ee 0f       	add	r30, r30
    1d74:	97 95       	ror	r25
    1d76:	87 95       	ror	r24
    1d78:	08 95       	ret

00001d7a <__divsf3>:
    1d7a:	0c d0       	rcall	.+24     	; 0x1d94 <__divsf3x>
    1d7c:	6e c1       	rjmp	.+732    	; 0x205a <__fp_round>
    1d7e:	66 d1       	rcall	.+716    	; 0x204c <__fp_pscB>
    1d80:	40 f0       	brcs	.+16     	; 0x1d92 <__divsf3+0x18>
    1d82:	5d d1       	rcall	.+698    	; 0x203e <__fp_pscA>
    1d84:	30 f0       	brcs	.+12     	; 0x1d92 <__divsf3+0x18>
    1d86:	21 f4       	brne	.+8      	; 0x1d90 <__divsf3+0x16>
    1d88:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8a:	19 f0       	breq	.+6      	; 0x1d92 <__divsf3+0x18>
    1d8c:	3f c1       	rjmp	.+638    	; 0x200c <__fp_inf>
    1d8e:	51 11       	cpse	r21, r1
    1d90:	98 c1       	rjmp	.+816    	; 0x20c2 <__fp_szero>
    1d92:	42 c1       	rjmp	.+644    	; 0x2018 <__fp_nan>

00001d94 <__divsf3x>:
    1d94:	73 d1       	rcall	.+742    	; 0x207c <__fp_split3>
    1d96:	98 f3       	brcs	.-26     	; 0x1d7e <__divsf3+0x4>

00001d98 <__divsf3_pse>:
    1d98:	99 23       	and	r25, r25
    1d9a:	c9 f3       	breq	.-14     	; 0x1d8e <__divsf3+0x14>
    1d9c:	55 23       	and	r21, r21
    1d9e:	b1 f3       	breq	.-20     	; 0x1d8c <__divsf3+0x12>
    1da0:	95 1b       	sub	r25, r21
    1da2:	55 0b       	sbc	r21, r21
    1da4:	bb 27       	eor	r27, r27
    1da6:	aa 27       	eor	r26, r26
    1da8:	62 17       	cp	r22, r18
    1daa:	73 07       	cpc	r23, r19
    1dac:	84 07       	cpc	r24, r20
    1dae:	38 f0       	brcs	.+14     	; 0x1dbe <__divsf3_pse+0x26>
    1db0:	9f 5f       	subi	r25, 0xFF	; 255
    1db2:	5f 4f       	sbci	r21, 0xFF	; 255
    1db4:	22 0f       	add	r18, r18
    1db6:	33 1f       	adc	r19, r19
    1db8:	44 1f       	adc	r20, r20
    1dba:	aa 1f       	adc	r26, r26
    1dbc:	a9 f3       	breq	.-22     	; 0x1da8 <__divsf3_pse+0x10>
    1dbe:	33 d0       	rcall	.+102    	; 0x1e26 <__divsf3_pse+0x8e>
    1dc0:	0e 2e       	mov	r0, r30
    1dc2:	3a f0       	brmi	.+14     	; 0x1dd2 <__divsf3_pse+0x3a>
    1dc4:	e0 e8       	ldi	r30, 0x80	; 128
    1dc6:	30 d0       	rcall	.+96     	; 0x1e28 <__divsf3_pse+0x90>
    1dc8:	91 50       	subi	r25, 0x01	; 1
    1dca:	50 40       	sbci	r21, 0x00	; 0
    1dcc:	e6 95       	lsr	r30
    1dce:	00 1c       	adc	r0, r0
    1dd0:	ca f7       	brpl	.-14     	; 0x1dc4 <__divsf3_pse+0x2c>
    1dd2:	29 d0       	rcall	.+82     	; 0x1e26 <__divsf3_pse+0x8e>
    1dd4:	fe 2f       	mov	r31, r30
    1dd6:	27 d0       	rcall	.+78     	; 0x1e26 <__divsf3_pse+0x8e>
    1dd8:	66 0f       	add	r22, r22
    1dda:	77 1f       	adc	r23, r23
    1ddc:	88 1f       	adc	r24, r24
    1dde:	bb 1f       	adc	r27, r27
    1de0:	26 17       	cp	r18, r22
    1de2:	37 07       	cpc	r19, r23
    1de4:	48 07       	cpc	r20, r24
    1de6:	ab 07       	cpc	r26, r27
    1de8:	b0 e8       	ldi	r27, 0x80	; 128
    1dea:	09 f0       	breq	.+2      	; 0x1dee <__divsf3_pse+0x56>
    1dec:	bb 0b       	sbc	r27, r27
    1dee:	80 2d       	mov	r24, r0
    1df0:	bf 01       	movw	r22, r30
    1df2:	ff 27       	eor	r31, r31
    1df4:	93 58       	subi	r25, 0x83	; 131
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	2a f0       	brmi	.+10     	; 0x1e04 <__divsf3_pse+0x6c>
    1dfa:	9e 3f       	cpi	r25, 0xFE	; 254
    1dfc:	51 05       	cpc	r21, r1
    1dfe:	68 f0       	brcs	.+26     	; 0x1e1a <__divsf3_pse+0x82>
    1e00:	05 c1       	rjmp	.+522    	; 0x200c <__fp_inf>
    1e02:	5f c1       	rjmp	.+702    	; 0x20c2 <__fp_szero>
    1e04:	5f 3f       	cpi	r21, 0xFF	; 255
    1e06:	ec f3       	brlt	.-6      	; 0x1e02 <__divsf3_pse+0x6a>
    1e08:	98 3e       	cpi	r25, 0xE8	; 232
    1e0a:	dc f3       	brlt	.-10     	; 0x1e02 <__divsf3_pse+0x6a>
    1e0c:	86 95       	lsr	r24
    1e0e:	77 95       	ror	r23
    1e10:	67 95       	ror	r22
    1e12:	b7 95       	ror	r27
    1e14:	f7 95       	ror	r31
    1e16:	9f 5f       	subi	r25, 0xFF	; 255
    1e18:	c9 f7       	brne	.-14     	; 0x1e0c <__divsf3_pse+0x74>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	91 1d       	adc	r25, r1
    1e1e:	96 95       	lsr	r25
    1e20:	87 95       	ror	r24
    1e22:	97 f9       	bld	r25, 7
    1e24:	08 95       	ret
    1e26:	e1 e0       	ldi	r30, 0x01	; 1
    1e28:	66 0f       	add	r22, r22
    1e2a:	77 1f       	adc	r23, r23
    1e2c:	88 1f       	adc	r24, r24
    1e2e:	bb 1f       	adc	r27, r27
    1e30:	62 17       	cp	r22, r18
    1e32:	73 07       	cpc	r23, r19
    1e34:	84 07       	cpc	r24, r20
    1e36:	ba 07       	cpc	r27, r26
    1e38:	20 f0       	brcs	.+8      	; 0x1e42 <__divsf3_pse+0xaa>
    1e3a:	62 1b       	sub	r22, r18
    1e3c:	73 0b       	sbc	r23, r19
    1e3e:	84 0b       	sbc	r24, r20
    1e40:	ba 0b       	sbc	r27, r26
    1e42:	ee 1f       	adc	r30, r30
    1e44:	88 f7       	brcc	.-30     	; 0x1e28 <__divsf3_pse+0x90>
    1e46:	e0 95       	com	r30
    1e48:	08 95       	ret

00001e4a <__fixsfdi>:
    1e4a:	be e3       	ldi	r27, 0x3E	; 62
    1e4c:	04 d0       	rcall	.+8      	; 0x1e56 <__fixunssfdi+0x2>
    1e4e:	08 f4       	brcc	.+2      	; 0x1e52 <__fixsfdi+0x8>
    1e50:	90 e8       	ldi	r25, 0x80	; 128
    1e52:	08 95       	ret

00001e54 <__fixunssfdi>:
    1e54:	bf e3       	ldi	r27, 0x3F	; 63
    1e56:	22 27       	eor	r18, r18
    1e58:	33 27       	eor	r19, r19
    1e5a:	a9 01       	movw	r20, r18
    1e5c:	17 d1       	rcall	.+558    	; 0x208c <__fp_splitA>
    1e5e:	58 f1       	brcs	.+86     	; 0x1eb6 <__fixunssfdi+0x62>
    1e60:	9f 57       	subi	r25, 0x7F	; 127
    1e62:	40 f1       	brcs	.+80     	; 0x1eb4 <__fixunssfdi+0x60>
    1e64:	b9 17       	cp	r27, r25
    1e66:	38 f1       	brcs	.+78     	; 0x1eb6 <__fixunssfdi+0x62>
    1e68:	bf e3       	ldi	r27, 0x3F	; 63
    1e6a:	b9 1b       	sub	r27, r25
    1e6c:	99 27       	eor	r25, r25
    1e6e:	b8 50       	subi	r27, 0x08	; 8
    1e70:	3a f4       	brpl	.+14     	; 0x1e80 <__fixunssfdi+0x2c>
    1e72:	66 0f       	add	r22, r22
    1e74:	77 1f       	adc	r23, r23
    1e76:	88 1f       	adc	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	b3 95       	inc	r27
    1e7c:	d2 f3       	brmi	.-12     	; 0x1e72 <__fixunssfdi+0x1e>
    1e7e:	16 c0       	rjmp	.+44     	; 0x1eac <__fixunssfdi+0x58>
    1e80:	b8 50       	subi	r27, 0x08	; 8
    1e82:	4a f0       	brmi	.+18     	; 0x1e96 <__fixunssfdi+0x42>
    1e84:	23 2f       	mov	r18, r19
    1e86:	34 2f       	mov	r19, r20
    1e88:	45 2f       	mov	r20, r21
    1e8a:	56 2f       	mov	r21, r22
    1e8c:	67 2f       	mov	r22, r23
    1e8e:	78 2f       	mov	r23, r24
    1e90:	88 27       	eor	r24, r24
    1e92:	b8 50       	subi	r27, 0x08	; 8
    1e94:	ba f7       	brpl	.-18     	; 0x1e84 <__fixunssfdi+0x30>
    1e96:	b8 5f       	subi	r27, 0xF8	; 248
    1e98:	49 f0       	breq	.+18     	; 0x1eac <__fixunssfdi+0x58>
    1e9a:	86 95       	lsr	r24
    1e9c:	77 95       	ror	r23
    1e9e:	67 95       	ror	r22
    1ea0:	57 95       	ror	r21
    1ea2:	47 95       	ror	r20
    1ea4:	37 95       	ror	r19
    1ea6:	27 95       	ror	r18
    1ea8:	ba 95       	dec	r27
    1eaa:	b9 f7       	brne	.-18     	; 0x1e9a <__fixunssfdi+0x46>
    1eac:	0e f4       	brtc	.+2      	; 0x1eb0 <__fixunssfdi+0x5c>
    1eae:	b7 d0       	rcall	.+366    	; 0x201e <__fp_negdi>
    1eb0:	88 94       	clc
    1eb2:	08 95       	ret
    1eb4:	88 94       	clc
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	cb 01       	movw	r24, r22
    1ebc:	08 95       	ret

00001ebe <__fixunssfsi>:
    1ebe:	e6 d0       	rcall	.+460    	; 0x208c <__fp_splitA>
    1ec0:	88 f0       	brcs	.+34     	; 0x1ee4 <__fixunssfsi+0x26>
    1ec2:	9f 57       	subi	r25, 0x7F	; 127
    1ec4:	90 f0       	brcs	.+36     	; 0x1eea <__fixunssfsi+0x2c>
    1ec6:	b9 2f       	mov	r27, r25
    1ec8:	99 27       	eor	r25, r25
    1eca:	b7 51       	subi	r27, 0x17	; 23
    1ecc:	a0 f0       	brcs	.+40     	; 0x1ef6 <__fixunssfsi+0x38>
    1ece:	d1 f0       	breq	.+52     	; 0x1f04 <__fixunssfsi+0x46>
    1ed0:	66 0f       	add	r22, r22
    1ed2:	77 1f       	adc	r23, r23
    1ed4:	88 1f       	adc	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	1a f0       	brmi	.+6      	; 0x1ee0 <__fixunssfsi+0x22>
    1eda:	ba 95       	dec	r27
    1edc:	c9 f7       	brne	.-14     	; 0x1ed0 <__fixunssfsi+0x12>
    1ede:	12 c0       	rjmp	.+36     	; 0x1f04 <__fixunssfsi+0x46>
    1ee0:	b1 30       	cpi	r27, 0x01	; 1
    1ee2:	81 f0       	breq	.+32     	; 0x1f04 <__fixunssfsi+0x46>
    1ee4:	ed d0       	rcall	.+474    	; 0x20c0 <__fp_zero>
    1ee6:	b1 e0       	ldi	r27, 0x01	; 1
    1ee8:	08 95       	ret
    1eea:	ea c0       	rjmp	.+468    	; 0x20c0 <__fp_zero>
    1eec:	67 2f       	mov	r22, r23
    1eee:	78 2f       	mov	r23, r24
    1ef0:	88 27       	eor	r24, r24
    1ef2:	b8 5f       	subi	r27, 0xF8	; 248
    1ef4:	39 f0       	breq	.+14     	; 0x1f04 <__fixunssfsi+0x46>
    1ef6:	b9 3f       	cpi	r27, 0xF9	; 249
    1ef8:	cc f3       	brlt	.-14     	; 0x1eec <__fixunssfsi+0x2e>
    1efa:	86 95       	lsr	r24
    1efc:	77 95       	ror	r23
    1efe:	67 95       	ror	r22
    1f00:	b3 95       	inc	r27
    1f02:	d9 f7       	brne	.-10     	; 0x1efa <__fixunssfsi+0x3c>
    1f04:	3e f4       	brtc	.+14     	; 0x1f14 <__fixunssfsi+0x56>
    1f06:	90 95       	com	r25
    1f08:	80 95       	com	r24
    1f0a:	70 95       	com	r23
    1f0c:	61 95       	neg	r22
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	8f 4f       	sbci	r24, 0xFF	; 255
    1f12:	9f 4f       	sbci	r25, 0xFF	; 255
    1f14:	08 95       	ret

00001f16 <__floatunsisf>:
    1f16:	e8 94       	clt
    1f18:	09 c0       	rjmp	.+18     	; 0x1f2c <__floatsisf+0x12>

00001f1a <__floatsisf>:
    1f1a:	97 fb       	bst	r25, 7
    1f1c:	3e f4       	brtc	.+14     	; 0x1f2c <__floatsisf+0x12>
    1f1e:	90 95       	com	r25
    1f20:	80 95       	com	r24
    1f22:	70 95       	com	r23
    1f24:	61 95       	neg	r22
    1f26:	7f 4f       	sbci	r23, 0xFF	; 255
    1f28:	8f 4f       	sbci	r24, 0xFF	; 255
    1f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2c:	99 23       	and	r25, r25
    1f2e:	a9 f0       	breq	.+42     	; 0x1f5a <__floatsisf+0x40>
    1f30:	f9 2f       	mov	r31, r25
    1f32:	96 e9       	ldi	r25, 0x96	; 150
    1f34:	bb 27       	eor	r27, r27
    1f36:	93 95       	inc	r25
    1f38:	f6 95       	lsr	r31
    1f3a:	87 95       	ror	r24
    1f3c:	77 95       	ror	r23
    1f3e:	67 95       	ror	r22
    1f40:	b7 95       	ror	r27
    1f42:	f1 11       	cpse	r31, r1
    1f44:	f8 cf       	rjmp	.-16     	; 0x1f36 <__floatsisf+0x1c>
    1f46:	fa f4       	brpl	.+62     	; 0x1f86 <__floatsisf+0x6c>
    1f48:	bb 0f       	add	r27, r27
    1f4a:	11 f4       	brne	.+4      	; 0x1f50 <__floatsisf+0x36>
    1f4c:	60 ff       	sbrs	r22, 0
    1f4e:	1b c0       	rjmp	.+54     	; 0x1f86 <__floatsisf+0x6c>
    1f50:	6f 5f       	subi	r22, 0xFF	; 255
    1f52:	7f 4f       	sbci	r23, 0xFF	; 255
    1f54:	8f 4f       	sbci	r24, 0xFF	; 255
    1f56:	9f 4f       	sbci	r25, 0xFF	; 255
    1f58:	16 c0       	rjmp	.+44     	; 0x1f86 <__floatsisf+0x6c>
    1f5a:	88 23       	and	r24, r24
    1f5c:	11 f0       	breq	.+4      	; 0x1f62 <__floatsisf+0x48>
    1f5e:	96 e9       	ldi	r25, 0x96	; 150
    1f60:	11 c0       	rjmp	.+34     	; 0x1f84 <__floatsisf+0x6a>
    1f62:	77 23       	and	r23, r23
    1f64:	21 f0       	breq	.+8      	; 0x1f6e <__floatsisf+0x54>
    1f66:	9e e8       	ldi	r25, 0x8E	; 142
    1f68:	87 2f       	mov	r24, r23
    1f6a:	76 2f       	mov	r23, r22
    1f6c:	05 c0       	rjmp	.+10     	; 0x1f78 <__floatsisf+0x5e>
    1f6e:	66 23       	and	r22, r22
    1f70:	71 f0       	breq	.+28     	; 0x1f8e <__floatsisf+0x74>
    1f72:	96 e8       	ldi	r25, 0x86	; 134
    1f74:	86 2f       	mov	r24, r22
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	2a f0       	brmi	.+10     	; 0x1f86 <__floatsisf+0x6c>
    1f7c:	9a 95       	dec	r25
    1f7e:	66 0f       	add	r22, r22
    1f80:	77 1f       	adc	r23, r23
    1f82:	88 1f       	adc	r24, r24
    1f84:	da f7       	brpl	.-10     	; 0x1f7c <__floatsisf+0x62>
    1f86:	88 0f       	add	r24, r24
    1f88:	96 95       	lsr	r25
    1f8a:	87 95       	ror	r24
    1f8c:	97 f9       	bld	r25, 7
    1f8e:	08 95       	ret

00001f90 <__floatundisf>:
    1f90:	e8 94       	clt

00001f92 <__fp_di2sf>:
    1f92:	f9 2f       	mov	r31, r25
    1f94:	96 eb       	ldi	r25, 0xB6	; 182
    1f96:	ff 23       	and	r31, r31
    1f98:	81 f0       	breq	.+32     	; 0x1fba <__fp_di2sf+0x28>
    1f9a:	12 16       	cp	r1, r18
    1f9c:	13 06       	cpc	r1, r19
    1f9e:	14 06       	cpc	r1, r20
    1fa0:	44 0b       	sbc	r20, r20
    1fa2:	93 95       	inc	r25
    1fa4:	f6 95       	lsr	r31
    1fa6:	87 95       	ror	r24
    1fa8:	77 95       	ror	r23
    1faa:	67 95       	ror	r22
    1fac:	57 95       	ror	r21
    1fae:	40 40       	sbci	r20, 0x00	; 0
    1fb0:	ff 23       	and	r31, r31
    1fb2:	b9 f7       	brne	.-18     	; 0x1fa2 <__fp_di2sf+0x10>
    1fb4:	1b c0       	rjmp	.+54     	; 0x1fec <__fp_di2sf+0x5a>
    1fb6:	99 27       	eor	r25, r25
    1fb8:	08 95       	ret
    1fba:	88 23       	and	r24, r24
    1fbc:	51 f4       	brne	.+20     	; 0x1fd2 <__fp_di2sf+0x40>
    1fbe:	98 50       	subi	r25, 0x08	; 8
    1fc0:	d2 f7       	brpl	.-12     	; 0x1fb6 <__fp_di2sf+0x24>
    1fc2:	87 2b       	or	r24, r23
    1fc4:	76 2f       	mov	r23, r22
    1fc6:	65 2f       	mov	r22, r21
    1fc8:	54 2f       	mov	r21, r20
    1fca:	43 2f       	mov	r20, r19
    1fcc:	32 2f       	mov	r19, r18
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	b1 f3       	breq	.-20     	; 0x1fbe <__fp_di2sf+0x2c>
    1fd2:	12 16       	cp	r1, r18
    1fd4:	13 06       	cpc	r1, r19
    1fd6:	14 06       	cpc	r1, r20
    1fd8:	44 0b       	sbc	r20, r20
    1fda:	88 23       	and	r24, r24
    1fdc:	3a f0       	brmi	.+14     	; 0x1fec <__fp_di2sf+0x5a>
    1fde:	9a 95       	dec	r25
    1fe0:	44 0f       	add	r20, r20
    1fe2:	55 1f       	adc	r21, r21
    1fe4:	66 1f       	adc	r22, r22
    1fe6:	77 1f       	adc	r23, r23
    1fe8:	88 1f       	adc	r24, r24
    1fea:	ca f7       	brpl	.-14     	; 0x1fde <__fp_di2sf+0x4c>
    1fec:	55 23       	and	r21, r21
    1fee:	4a f4       	brpl	.+18     	; 0x2002 <__fp_di2sf+0x70>
    1ff0:	44 0f       	add	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	11 f4       	brne	.+4      	; 0x1ffa <__fp_di2sf+0x68>
    1ff6:	60 ff       	sbrs	r22, 0
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <__fp_di2sf+0x70>
    1ffa:	6f 5f       	subi	r22, 0xFF	; 255
    1ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	88 0f       	add	r24, r24
    2004:	96 95       	lsr	r25
    2006:	87 95       	ror	r24
    2008:	97 f9       	bld	r25, 7
    200a:	08 95       	ret

0000200c <__fp_inf>:
    200c:	97 f9       	bld	r25, 7
    200e:	9f 67       	ori	r25, 0x7F	; 127
    2010:	80 e8       	ldi	r24, 0x80	; 128
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	08 95       	ret

00002018 <__fp_nan>:
    2018:	9f ef       	ldi	r25, 0xFF	; 255
    201a:	80 ec       	ldi	r24, 0xC0	; 192
    201c:	08 95       	ret

0000201e <__fp_negdi>:
    201e:	90 95       	com	r25
    2020:	80 95       	com	r24
    2022:	70 95       	com	r23
    2024:	60 95       	com	r22
    2026:	50 95       	com	r21
    2028:	40 95       	com	r20
    202a:	30 95       	com	r19
    202c:	21 95       	neg	r18
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	4f 4f       	sbci	r20, 0xFF	; 255
    2032:	5f 4f       	sbci	r21, 0xFF	; 255
    2034:	6f 4f       	sbci	r22, 0xFF	; 255
    2036:	7f 4f       	sbci	r23, 0xFF	; 255
    2038:	8f 4f       	sbci	r24, 0xFF	; 255
    203a:	9f 4f       	sbci	r25, 0xFF	; 255
    203c:	08 95       	ret

0000203e <__fp_pscA>:
    203e:	00 24       	eor	r0, r0
    2040:	0a 94       	dec	r0
    2042:	16 16       	cp	r1, r22
    2044:	17 06       	cpc	r1, r23
    2046:	18 06       	cpc	r1, r24
    2048:	09 06       	cpc	r0, r25
    204a:	08 95       	ret

0000204c <__fp_pscB>:
    204c:	00 24       	eor	r0, r0
    204e:	0a 94       	dec	r0
    2050:	12 16       	cp	r1, r18
    2052:	13 06       	cpc	r1, r19
    2054:	14 06       	cpc	r1, r20
    2056:	05 06       	cpc	r0, r21
    2058:	08 95       	ret

0000205a <__fp_round>:
    205a:	09 2e       	mov	r0, r25
    205c:	03 94       	inc	r0
    205e:	00 0c       	add	r0, r0
    2060:	11 f4       	brne	.+4      	; 0x2066 <__fp_round+0xc>
    2062:	88 23       	and	r24, r24
    2064:	52 f0       	brmi	.+20     	; 0x207a <__fp_round+0x20>
    2066:	bb 0f       	add	r27, r27
    2068:	40 f4       	brcc	.+16     	; 0x207a <__fp_round+0x20>
    206a:	bf 2b       	or	r27, r31
    206c:	11 f4       	brne	.+4      	; 0x2072 <__fp_round+0x18>
    206e:	60 ff       	sbrs	r22, 0
    2070:	04 c0       	rjmp	.+8      	; 0x207a <__fp_round+0x20>
    2072:	6f 5f       	subi	r22, 0xFF	; 255
    2074:	7f 4f       	sbci	r23, 0xFF	; 255
    2076:	8f 4f       	sbci	r24, 0xFF	; 255
    2078:	9f 4f       	sbci	r25, 0xFF	; 255
    207a:	08 95       	ret

0000207c <__fp_split3>:
    207c:	57 fd       	sbrc	r21, 7
    207e:	90 58       	subi	r25, 0x80	; 128
    2080:	44 0f       	add	r20, r20
    2082:	55 1f       	adc	r21, r21
    2084:	59 f0       	breq	.+22     	; 0x209c <__fp_splitA+0x10>
    2086:	5f 3f       	cpi	r21, 0xFF	; 255
    2088:	71 f0       	breq	.+28     	; 0x20a6 <__fp_splitA+0x1a>
    208a:	47 95       	ror	r20

0000208c <__fp_splitA>:
    208c:	88 0f       	add	r24, r24
    208e:	97 fb       	bst	r25, 7
    2090:	99 1f       	adc	r25, r25
    2092:	61 f0       	breq	.+24     	; 0x20ac <__fp_splitA+0x20>
    2094:	9f 3f       	cpi	r25, 0xFF	; 255
    2096:	79 f0       	breq	.+30     	; 0x20b6 <__fp_splitA+0x2a>
    2098:	87 95       	ror	r24
    209a:	08 95       	ret
    209c:	12 16       	cp	r1, r18
    209e:	13 06       	cpc	r1, r19
    20a0:	14 06       	cpc	r1, r20
    20a2:	55 1f       	adc	r21, r21
    20a4:	f2 cf       	rjmp	.-28     	; 0x208a <__fp_split3+0xe>
    20a6:	46 95       	lsr	r20
    20a8:	f1 df       	rcall	.-30     	; 0x208c <__fp_splitA>
    20aa:	08 c0       	rjmp	.+16     	; 0x20bc <__fp_splitA+0x30>
    20ac:	16 16       	cp	r1, r22
    20ae:	17 06       	cpc	r1, r23
    20b0:	18 06       	cpc	r1, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	f1 cf       	rjmp	.-30     	; 0x2098 <__fp_splitA+0xc>
    20b6:	86 95       	lsr	r24
    20b8:	71 05       	cpc	r23, r1
    20ba:	61 05       	cpc	r22, r1
    20bc:	08 94       	sec
    20be:	08 95       	ret

000020c0 <__fp_zero>:
    20c0:	e8 94       	clt

000020c2 <__fp_szero>:
    20c2:	bb 27       	eor	r27, r27
    20c4:	66 27       	eor	r22, r22
    20c6:	77 27       	eor	r23, r23
    20c8:	cb 01       	movw	r24, r22
    20ca:	97 f9       	bld	r25, 7
    20cc:	08 95       	ret
    20ce:	0e f0       	brts	.+2      	; 0x20d2 <__fp_szero+0x10>
    20d0:	a6 c0       	rjmp	.+332    	; 0x221e <__fp_mpack>
    20d2:	a2 cf       	rjmp	.-188    	; 0x2018 <__fp_nan>
    20d4:	68 94       	set
    20d6:	9a cf       	rjmp	.-204    	; 0x200c <__fp_inf>

000020d8 <log>:
    20d8:	d9 df       	rcall	.-78     	; 0x208c <__fp_splitA>
    20da:	c8 f3       	brcs	.-14     	; 0x20ce <__fp_szero+0xc>
    20dc:	99 23       	and	r25, r25
    20de:	d1 f3       	breq	.-12     	; 0x20d4 <__fp_szero+0x12>
    20e0:	c6 f3       	brts	.-16     	; 0x20d2 <__fp_szero+0x10>
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	1f 93       	push	r17
    20e8:	0f 93       	push	r16
    20ea:	ff 92       	push	r15
    20ec:	c9 2f       	mov	r28, r25
    20ee:	dd 27       	eor	r29, r29
    20f0:	88 23       	and	r24, r24
    20f2:	2a f0       	brmi	.+10     	; 0x20fe <log+0x26>
    20f4:	21 97       	sbiw	r28, 0x01	; 1
    20f6:	66 0f       	add	r22, r22
    20f8:	77 1f       	adc	r23, r23
    20fa:	88 1f       	adc	r24, r24
    20fc:	da f7       	brpl	.-10     	; 0x20f4 <log+0x1c>
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e8       	ldi	r20, 0x80	; 128
    2104:	5f eb       	ldi	r21, 0xBF	; 191
    2106:	9f e3       	ldi	r25, 0x3F	; 63
    2108:	88 39       	cpi	r24, 0x98	; 152
    210a:	20 f0       	brcs	.+8      	; 0x2114 <log+0x3c>
    210c:	80 3e       	cpi	r24, 0xE0	; 224
    210e:	30 f0       	brcs	.+12     	; 0x211c <log+0x44>
    2110:	21 96       	adiw	r28, 0x01	; 1
    2112:	8f 77       	andi	r24, 0x7F	; 127
    2114:	ce dd       	rcall	.-1124   	; 0x1cb2 <__addsf3>
    2116:	e4 ef       	ldi	r30, 0xF4	; 244
    2118:	f1 e0       	ldi	r31, 0x01	; 1
    211a:	03 c0       	rjmp	.+6      	; 0x2122 <log+0x4a>
    211c:	ca dd       	rcall	.-1132   	; 0x1cb2 <__addsf3>
    211e:	e1 e2       	ldi	r30, 0x21	; 33
    2120:	f2 e0       	ldi	r31, 0x02	; 2
    2122:	8b d0       	rcall	.+278    	; 0x223a <__fp_powser>
    2124:	8b 01       	movw	r16, r22
    2126:	be 01       	movw	r22, r28
    2128:	ec 01       	movw	r28, r24
    212a:	fb 2e       	mov	r15, r27
    212c:	6f 57       	subi	r22, 0x7F	; 127
    212e:	71 09       	sbc	r23, r1
    2130:	75 95       	asr	r23
    2132:	77 1f       	adc	r23, r23
    2134:	88 0b       	sbc	r24, r24
    2136:	99 0b       	sbc	r25, r25
    2138:	f0 de       	rcall	.-544    	; 0x1f1a <__floatsisf>
    213a:	28 e1       	ldi	r18, 0x18	; 24
    213c:	32 e7       	ldi	r19, 0x72	; 114
    213e:	41 e3       	ldi	r20, 0x31	; 49
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	16 d0       	rcall	.+44     	; 0x2170 <__mulsf3x>
    2144:	af 2d       	mov	r26, r15
    2146:	98 01       	movw	r18, r16
    2148:	ae 01       	movw	r20, r28
    214a:	ff 90       	pop	r15
    214c:	0f 91       	pop	r16
    214e:	1f 91       	pop	r17
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	bf dd       	rcall	.-1154   	; 0x1cd4 <__addsf3x>
    2156:	81 cf       	rjmp	.-254    	; 0x205a <__fp_round>

00002158 <__mulsf3>:
    2158:	0b d0       	rcall	.+22     	; 0x2170 <__mulsf3x>
    215a:	7f cf       	rjmp	.-258    	; 0x205a <__fp_round>
    215c:	70 df       	rcall	.-288    	; 0x203e <__fp_pscA>
    215e:	28 f0       	brcs	.+10     	; 0x216a <__mulsf3+0x12>
    2160:	75 df       	rcall	.-278    	; 0x204c <__fp_pscB>
    2162:	18 f0       	brcs	.+6      	; 0x216a <__mulsf3+0x12>
    2164:	95 23       	and	r25, r21
    2166:	09 f0       	breq	.+2      	; 0x216a <__mulsf3+0x12>
    2168:	51 cf       	rjmp	.-350    	; 0x200c <__fp_inf>
    216a:	56 cf       	rjmp	.-340    	; 0x2018 <__fp_nan>
    216c:	11 24       	eor	r1, r1
    216e:	a9 cf       	rjmp	.-174    	; 0x20c2 <__fp_szero>

00002170 <__mulsf3x>:
    2170:	85 df       	rcall	.-246    	; 0x207c <__fp_split3>
    2172:	a0 f3       	brcs	.-24     	; 0x215c <__mulsf3+0x4>

00002174 <__mulsf3_pse>:
    2174:	95 9f       	mul	r25, r21
    2176:	d1 f3       	breq	.-12     	; 0x216c <__mulsf3+0x14>
    2178:	95 0f       	add	r25, r21
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	55 1f       	adc	r21, r21
    217e:	62 9f       	mul	r22, r18
    2180:	f0 01       	movw	r30, r0
    2182:	72 9f       	mul	r23, r18
    2184:	bb 27       	eor	r27, r27
    2186:	f0 0d       	add	r31, r0
    2188:	b1 1d       	adc	r27, r1
    218a:	63 9f       	mul	r22, r19
    218c:	aa 27       	eor	r26, r26
    218e:	f0 0d       	add	r31, r0
    2190:	b1 1d       	adc	r27, r1
    2192:	aa 1f       	adc	r26, r26
    2194:	64 9f       	mul	r22, r20
    2196:	66 27       	eor	r22, r22
    2198:	b0 0d       	add	r27, r0
    219a:	a1 1d       	adc	r26, r1
    219c:	66 1f       	adc	r22, r22
    219e:	82 9f       	mul	r24, r18
    21a0:	22 27       	eor	r18, r18
    21a2:	b0 0d       	add	r27, r0
    21a4:	a1 1d       	adc	r26, r1
    21a6:	62 1f       	adc	r22, r18
    21a8:	73 9f       	mul	r23, r19
    21aa:	b0 0d       	add	r27, r0
    21ac:	a1 1d       	adc	r26, r1
    21ae:	62 1f       	adc	r22, r18
    21b0:	83 9f       	mul	r24, r19
    21b2:	a0 0d       	add	r26, r0
    21b4:	61 1d       	adc	r22, r1
    21b6:	22 1f       	adc	r18, r18
    21b8:	74 9f       	mul	r23, r20
    21ba:	33 27       	eor	r19, r19
    21bc:	a0 0d       	add	r26, r0
    21be:	61 1d       	adc	r22, r1
    21c0:	23 1f       	adc	r18, r19
    21c2:	84 9f       	mul	r24, r20
    21c4:	60 0d       	add	r22, r0
    21c6:	21 1d       	adc	r18, r1
    21c8:	82 2f       	mov	r24, r18
    21ca:	76 2f       	mov	r23, r22
    21cc:	6a 2f       	mov	r22, r26
    21ce:	11 24       	eor	r1, r1
    21d0:	9f 57       	subi	r25, 0x7F	; 127
    21d2:	50 40       	sbci	r21, 0x00	; 0
    21d4:	8a f0       	brmi	.+34     	; 0x21f8 <__mulsf3_pse+0x84>
    21d6:	e1 f0       	breq	.+56     	; 0x2210 <__mulsf3_pse+0x9c>
    21d8:	88 23       	and	r24, r24
    21da:	4a f0       	brmi	.+18     	; 0x21ee <__mulsf3_pse+0x7a>
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	bb 1f       	adc	r27, r27
    21e2:	66 1f       	adc	r22, r22
    21e4:	77 1f       	adc	r23, r23
    21e6:	88 1f       	adc	r24, r24
    21e8:	91 50       	subi	r25, 0x01	; 1
    21ea:	50 40       	sbci	r21, 0x00	; 0
    21ec:	a9 f7       	brne	.-22     	; 0x21d8 <__mulsf3_pse+0x64>
    21ee:	9e 3f       	cpi	r25, 0xFE	; 254
    21f0:	51 05       	cpc	r21, r1
    21f2:	70 f0       	brcs	.+28     	; 0x2210 <__mulsf3_pse+0x9c>
    21f4:	0b cf       	rjmp	.-490    	; 0x200c <__fp_inf>
    21f6:	65 cf       	rjmp	.-310    	; 0x20c2 <__fp_szero>
    21f8:	5f 3f       	cpi	r21, 0xFF	; 255
    21fa:	ec f3       	brlt	.-6      	; 0x21f6 <__mulsf3_pse+0x82>
    21fc:	98 3e       	cpi	r25, 0xE8	; 232
    21fe:	dc f3       	brlt	.-10     	; 0x21f6 <__mulsf3_pse+0x82>
    2200:	86 95       	lsr	r24
    2202:	77 95       	ror	r23
    2204:	67 95       	ror	r22
    2206:	b7 95       	ror	r27
    2208:	f7 95       	ror	r31
    220a:	e7 95       	ror	r30
    220c:	9f 5f       	subi	r25, 0xFF	; 255
    220e:	c1 f7       	brne	.-16     	; 0x2200 <__mulsf3_pse+0x8c>
    2210:	fe 2b       	or	r31, r30
    2212:	88 0f       	add	r24, r24
    2214:	91 1d       	adc	r25, r1
    2216:	96 95       	lsr	r25
    2218:	87 95       	ror	r24
    221a:	97 f9       	bld	r25, 7
    221c:	08 95       	ret

0000221e <__fp_mpack>:
    221e:	9f 3f       	cpi	r25, 0xFF	; 255
    2220:	31 f0       	breq	.+12     	; 0x222e <__fp_mpack_finite+0xc>

00002222 <__fp_mpack_finite>:
    2222:	91 50       	subi	r25, 0x01	; 1
    2224:	20 f4       	brcc	.+8      	; 0x222e <__fp_mpack_finite+0xc>
    2226:	87 95       	ror	r24
    2228:	77 95       	ror	r23
    222a:	67 95       	ror	r22
    222c:	b7 95       	ror	r27
    222e:	88 0f       	add	r24, r24
    2230:	91 1d       	adc	r25, r1
    2232:	96 95       	lsr	r25
    2234:	87 95       	ror	r24
    2236:	97 f9       	bld	r25, 7
    2238:	08 95       	ret

0000223a <__fp_powser>:
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	1f 93       	push	r17
    2240:	0f 93       	push	r16
    2242:	ff 92       	push	r15
    2244:	ef 92       	push	r14
    2246:	df 92       	push	r13
    2248:	7b 01       	movw	r14, r22
    224a:	8c 01       	movw	r16, r24
    224c:	68 94       	set
    224e:	05 c0       	rjmp	.+10     	; 0x225a <__fp_powser+0x20>
    2250:	da 2e       	mov	r13, r26
    2252:	ef 01       	movw	r28, r30
    2254:	8d df       	rcall	.-230    	; 0x2170 <__mulsf3x>
    2256:	fe 01       	movw	r30, r28
    2258:	e8 94       	clt
    225a:	a5 91       	lpm	r26, Z+
    225c:	25 91       	lpm	r18, Z+
    225e:	35 91       	lpm	r19, Z+
    2260:	45 91       	lpm	r20, Z+
    2262:	55 91       	lpm	r21, Z+
    2264:	ae f3       	brts	.-22     	; 0x2250 <__fp_powser+0x16>
    2266:	ef 01       	movw	r28, r30
    2268:	35 dd       	rcall	.-1430   	; 0x1cd4 <__addsf3x>
    226a:	fe 01       	movw	r30, r28
    226c:	97 01       	movw	r18, r14
    226e:	a8 01       	movw	r20, r16
    2270:	da 94       	dec	r13
    2272:	79 f7       	brne	.-34     	; 0x2252 <__fp_powser+0x18>
    2274:	df 90       	pop	r13
    2276:	ef 90       	pop	r14
    2278:	ff 90       	pop	r15
    227a:	0f 91       	pop	r16
    227c:	1f 91       	pop	r17
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <vfprintf>:
    2284:	2f 92       	push	r2
    2286:	3f 92       	push	r3
    2288:	4f 92       	push	r4
    228a:	5f 92       	push	r5
    228c:	6f 92       	push	r6
    228e:	7f 92       	push	r7
    2290:	8f 92       	push	r8
    2292:	9f 92       	push	r9
    2294:	af 92       	push	r10
    2296:	bf 92       	push	r11
    2298:	cf 92       	push	r12
    229a:	df 92       	push	r13
    229c:	ef 92       	push	r14
    229e:	ff 92       	push	r15
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	63 97       	sbiw	r28, 0x13	; 19
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	6c 01       	movw	r12, r24
    22b4:	4b 01       	movw	r8, r22
    22b6:	2a 01       	movw	r4, r20
    22b8:	fc 01       	movw	r30, r24
    22ba:	16 82       	std	Z+6, r1	; 0x06
    22bc:	17 82       	std	Z+7, r1	; 0x07
    22be:	83 81       	ldd	r24, Z+3	; 0x03
    22c0:	81 ff       	sbrs	r24, 1
    22c2:	29 c3       	rjmp	.+1618   	; 0x2916 <vfprintf+0x692>
    22c4:	ae 01       	movw	r20, r28
    22c6:	4f 5f       	subi	r20, 0xFF	; 255
    22c8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ca:	3a 01       	movw	r6, r20
    22cc:	f6 01       	movw	r30, r12
    22ce:	93 81       	ldd	r25, Z+3	; 0x03
    22d0:	f4 01       	movw	r30, r8
    22d2:	93 fd       	sbrc	r25, 3
    22d4:	85 91       	lpm	r24, Z+
    22d6:	93 ff       	sbrs	r25, 3
    22d8:	81 91       	ld	r24, Z+
    22da:	4f 01       	movw	r8, r30
    22dc:	88 23       	and	r24, r24
    22de:	09 f4       	brne	.+2      	; 0x22e2 <vfprintf+0x5e>
    22e0:	16 c3       	rjmp	.+1580   	; 0x290e <vfprintf+0x68a>
    22e2:	85 32       	cpi	r24, 0x25	; 37
    22e4:	39 f4       	brne	.+14     	; 0x22f4 <vfprintf+0x70>
    22e6:	93 fd       	sbrc	r25, 3
    22e8:	85 91       	lpm	r24, Z+
    22ea:	93 ff       	sbrs	r25, 3
    22ec:	81 91       	ld	r24, Z+
    22ee:	4f 01       	movw	r8, r30
    22f0:	85 32       	cpi	r24, 0x25	; 37
    22f2:	31 f4       	brne	.+12     	; 0x2300 <vfprintf+0x7c>
    22f4:	b6 01       	movw	r22, r12
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	80 d5       	rcall	.+2816   	; 0x2dfa <fputc>
    22fa:	52 01       	movw	r10, r4
    22fc:	25 01       	movw	r4, r10
    22fe:	e6 cf       	rjmp	.-52     	; 0x22cc <vfprintf+0x48>
    2300:	10 e0       	ldi	r17, 0x00	; 0
    2302:	f1 2c       	mov	r15, r1
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	20 32       	cpi	r18, 0x20	; 32
    2308:	a0 f4       	brcc	.+40     	; 0x2332 <vfprintf+0xae>
    230a:	8b 32       	cpi	r24, 0x2B	; 43
    230c:	69 f0       	breq	.+26     	; 0x2328 <vfprintf+0xa4>
    230e:	30 f4       	brcc	.+12     	; 0x231c <vfprintf+0x98>
    2310:	80 32       	cpi	r24, 0x20	; 32
    2312:	59 f0       	breq	.+22     	; 0x232a <vfprintf+0xa6>
    2314:	83 32       	cpi	r24, 0x23	; 35
    2316:	69 f4       	brne	.+26     	; 0x2332 <vfprintf+0xae>
    2318:	20 61       	ori	r18, 0x10	; 16
    231a:	2c c0       	rjmp	.+88     	; 0x2374 <vfprintf+0xf0>
    231c:	8d 32       	cpi	r24, 0x2D	; 45
    231e:	39 f0       	breq	.+14     	; 0x232e <vfprintf+0xaa>
    2320:	80 33       	cpi	r24, 0x30	; 48
    2322:	39 f4       	brne	.+14     	; 0x2332 <vfprintf+0xae>
    2324:	21 60       	ori	r18, 0x01	; 1
    2326:	26 c0       	rjmp	.+76     	; 0x2374 <vfprintf+0xf0>
    2328:	22 60       	ori	r18, 0x02	; 2
    232a:	24 60       	ori	r18, 0x04	; 4
    232c:	23 c0       	rjmp	.+70     	; 0x2374 <vfprintf+0xf0>
    232e:	28 60       	ori	r18, 0x08	; 8
    2330:	21 c0       	rjmp	.+66     	; 0x2374 <vfprintf+0xf0>
    2332:	27 fd       	sbrc	r18, 7
    2334:	27 c0       	rjmp	.+78     	; 0x2384 <vfprintf+0x100>
    2336:	30 ed       	ldi	r19, 0xD0	; 208
    2338:	38 0f       	add	r19, r24
    233a:	3a 30       	cpi	r19, 0x0A	; 10
    233c:	78 f4       	brcc	.+30     	; 0x235c <vfprintf+0xd8>
    233e:	26 ff       	sbrs	r18, 6
    2340:	06 c0       	rjmp	.+12     	; 0x234e <vfprintf+0xca>
    2342:	fa e0       	ldi	r31, 0x0A	; 10
    2344:	1f 9f       	mul	r17, r31
    2346:	30 0d       	add	r19, r0
    2348:	11 24       	eor	r1, r1
    234a:	13 2f       	mov	r17, r19
    234c:	13 c0       	rjmp	.+38     	; 0x2374 <vfprintf+0xf0>
    234e:	4a e0       	ldi	r20, 0x0A	; 10
    2350:	f4 9e       	mul	r15, r20
    2352:	30 0d       	add	r19, r0
    2354:	11 24       	eor	r1, r1
    2356:	f3 2e       	mov	r15, r19
    2358:	20 62       	ori	r18, 0x20	; 32
    235a:	0c c0       	rjmp	.+24     	; 0x2374 <vfprintf+0xf0>
    235c:	8e 32       	cpi	r24, 0x2E	; 46
    235e:	21 f4       	brne	.+8      	; 0x2368 <vfprintf+0xe4>
    2360:	26 fd       	sbrc	r18, 6
    2362:	d5 c2       	rjmp	.+1450   	; 0x290e <vfprintf+0x68a>
    2364:	20 64       	ori	r18, 0x40	; 64
    2366:	06 c0       	rjmp	.+12     	; 0x2374 <vfprintf+0xf0>
    2368:	8c 36       	cpi	r24, 0x6C	; 108
    236a:	11 f4       	brne	.+4      	; 0x2370 <vfprintf+0xec>
    236c:	20 68       	ori	r18, 0x80	; 128
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <vfprintf+0xf0>
    2370:	88 36       	cpi	r24, 0x68	; 104
    2372:	41 f4       	brne	.+16     	; 0x2384 <vfprintf+0x100>
    2374:	f4 01       	movw	r30, r8
    2376:	93 fd       	sbrc	r25, 3
    2378:	85 91       	lpm	r24, Z+
    237a:	93 ff       	sbrs	r25, 3
    237c:	81 91       	ld	r24, Z+
    237e:	4f 01       	movw	r8, r30
    2380:	81 11       	cpse	r24, r1
    2382:	c1 cf       	rjmp	.-126    	; 0x2306 <vfprintf+0x82>
    2384:	9b eb       	ldi	r25, 0xBB	; 187
    2386:	98 0f       	add	r25, r24
    2388:	93 30       	cpi	r25, 0x03	; 3
    238a:	18 f4       	brcc	.+6      	; 0x2392 <vfprintf+0x10e>
    238c:	20 61       	ori	r18, 0x10	; 16
    238e:	80 5e       	subi	r24, 0xE0	; 224
    2390:	06 c0       	rjmp	.+12     	; 0x239e <vfprintf+0x11a>
    2392:	9b e9       	ldi	r25, 0x9B	; 155
    2394:	98 0f       	add	r25, r24
    2396:	93 30       	cpi	r25, 0x03	; 3
    2398:	08 f0       	brcs	.+2      	; 0x239c <vfprintf+0x118>
    239a:	64 c1       	rjmp	.+712    	; 0x2664 <vfprintf+0x3e0>
    239c:	2f 7e       	andi	r18, 0xEF	; 239
    239e:	26 ff       	sbrs	r18, 6
    23a0:	16 e0       	ldi	r17, 0x06	; 6
    23a2:	2f 73       	andi	r18, 0x3F	; 63
    23a4:	32 2e       	mov	r3, r18
    23a6:	85 36       	cpi	r24, 0x65	; 101
    23a8:	19 f4       	brne	.+6      	; 0x23b0 <vfprintf+0x12c>
    23aa:	20 64       	ori	r18, 0x40	; 64
    23ac:	32 2e       	mov	r3, r18
    23ae:	08 c0       	rjmp	.+16     	; 0x23c0 <vfprintf+0x13c>
    23b0:	86 36       	cpi	r24, 0x66	; 102
    23b2:	21 f4       	brne	.+8      	; 0x23bc <vfprintf+0x138>
    23b4:	f2 2f       	mov	r31, r18
    23b6:	f0 68       	ori	r31, 0x80	; 128
    23b8:	3f 2e       	mov	r3, r31
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <vfprintf+0x13c>
    23bc:	11 11       	cpse	r17, r1
    23be:	11 50       	subi	r17, 0x01	; 1
    23c0:	37 fe       	sbrs	r3, 7
    23c2:	07 c0       	rjmp	.+14     	; 0x23d2 <vfprintf+0x14e>
    23c4:	1c 33       	cpi	r17, 0x3C	; 60
    23c6:	50 f4       	brcc	.+20     	; 0x23dc <vfprintf+0x158>
    23c8:	ee 24       	eor	r14, r14
    23ca:	e3 94       	inc	r14
    23cc:	e1 0e       	add	r14, r17
    23ce:	27 e0       	ldi	r18, 0x07	; 7
    23d0:	0b c0       	rjmp	.+22     	; 0x23e8 <vfprintf+0x164>
    23d2:	18 30       	cpi	r17, 0x08	; 8
    23d4:	38 f0       	brcs	.+14     	; 0x23e4 <vfprintf+0x160>
    23d6:	27 e0       	ldi	r18, 0x07	; 7
    23d8:	17 e0       	ldi	r17, 0x07	; 7
    23da:	05 c0       	rjmp	.+10     	; 0x23e6 <vfprintf+0x162>
    23dc:	27 e0       	ldi	r18, 0x07	; 7
    23de:	4c e3       	ldi	r20, 0x3C	; 60
    23e0:	e4 2e       	mov	r14, r20
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <vfprintf+0x164>
    23e4:	21 2f       	mov	r18, r17
    23e6:	e1 2c       	mov	r14, r1
    23e8:	52 01       	movw	r10, r4
    23ea:	44 e0       	ldi	r20, 0x04	; 4
    23ec:	a4 0e       	add	r10, r20
    23ee:	b1 1c       	adc	r11, r1
    23f0:	f2 01       	movw	r30, r4
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	0e 2d       	mov	r16, r14
    23fc:	a3 01       	movw	r20, r6
    23fe:	c5 d3       	rcall	.+1930   	; 0x2b8a <__ftoa_engine>
    2400:	2c 01       	movw	r4, r24
    2402:	09 81       	ldd	r16, Y+1	; 0x01
    2404:	00 ff       	sbrs	r16, 0
    2406:	02 c0       	rjmp	.+4      	; 0x240c <vfprintf+0x188>
    2408:	03 ff       	sbrs	r16, 3
    240a:	07 c0       	rjmp	.+14     	; 0x241a <vfprintf+0x196>
    240c:	31 fc       	sbrc	r3, 1
    240e:	08 c0       	rjmp	.+16     	; 0x2420 <vfprintf+0x19c>
    2410:	32 fe       	sbrs	r3, 2
    2412:	09 c0       	rjmp	.+18     	; 0x2426 <vfprintf+0x1a2>
    2414:	30 e2       	ldi	r19, 0x20	; 32
    2416:	23 2e       	mov	r2, r19
    2418:	07 c0       	rjmp	.+14     	; 0x2428 <vfprintf+0x1a4>
    241a:	2d e2       	ldi	r18, 0x2D	; 45
    241c:	22 2e       	mov	r2, r18
    241e:	04 c0       	rjmp	.+8      	; 0x2428 <vfprintf+0x1a4>
    2420:	9b e2       	ldi	r25, 0x2B	; 43
    2422:	29 2e       	mov	r2, r25
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <vfprintf+0x1a4>
    2426:	21 2c       	mov	r2, r1
    2428:	80 2f       	mov	r24, r16
    242a:	8c 70       	andi	r24, 0x0C	; 12
    242c:	19 f0       	breq	.+6      	; 0x2434 <vfprintf+0x1b0>
    242e:	21 10       	cpse	r2, r1
    2430:	51 c2       	rjmp	.+1186   	; 0x28d4 <vfprintf+0x650>
    2432:	8d c2       	rjmp	.+1306   	; 0x294e <vfprintf+0x6ca>
    2434:	37 fe       	sbrs	r3, 7
    2436:	0f c0       	rjmp	.+30     	; 0x2456 <vfprintf+0x1d2>
    2438:	e4 0c       	add	r14, r4
    243a:	04 ff       	sbrs	r16, 4
    243c:	04 c0       	rjmp	.+8      	; 0x2446 <vfprintf+0x1c2>
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	81 33       	cpi	r24, 0x31	; 49
    2442:	09 f4       	brne	.+2      	; 0x2446 <vfprintf+0x1c2>
    2444:	ea 94       	dec	r14
    2446:	1e 14       	cp	r1, r14
    2448:	74 f5       	brge	.+92     	; 0x24a6 <vfprintf+0x222>
    244a:	f8 e0       	ldi	r31, 0x08	; 8
    244c:	fe 15       	cp	r31, r14
    244e:	78 f5       	brcc	.+94     	; 0x24ae <vfprintf+0x22a>
    2450:	88 e0       	ldi	r24, 0x08	; 8
    2452:	e8 2e       	mov	r14, r24
    2454:	2c c0       	rjmp	.+88     	; 0x24ae <vfprintf+0x22a>
    2456:	36 fc       	sbrc	r3, 6
    2458:	2a c0       	rjmp	.+84     	; 0x24ae <vfprintf+0x22a>
    245a:	81 2f       	mov	r24, r17
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	84 15       	cp	r24, r4
    2460:	95 05       	cpc	r25, r5
    2462:	9c f0       	brlt	.+38     	; 0x248a <vfprintf+0x206>
    2464:	2c ef       	ldi	r18, 0xFC	; 252
    2466:	42 16       	cp	r4, r18
    2468:	2f ef       	ldi	r18, 0xFF	; 255
    246a:	52 06       	cpc	r5, r18
    246c:	74 f0       	brlt	.+28     	; 0x248a <vfprintf+0x206>
    246e:	43 2d       	mov	r20, r3
    2470:	40 68       	ori	r20, 0x80	; 128
    2472:	34 2e       	mov	r3, r20
    2474:	0a c0       	rjmp	.+20     	; 0x248a <vfprintf+0x206>
    2476:	e2 e0       	ldi	r30, 0x02	; 2
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	ec 0f       	add	r30, r28
    247c:	fd 1f       	adc	r31, r29
    247e:	e1 0f       	add	r30, r17
    2480:	f1 1d       	adc	r31, r1
    2482:	80 81       	ld	r24, Z
    2484:	80 33       	cpi	r24, 0x30	; 48
    2486:	19 f4       	brne	.+6      	; 0x248e <vfprintf+0x20a>
    2488:	11 50       	subi	r17, 0x01	; 1
    248a:	11 11       	cpse	r17, r1
    248c:	f4 cf       	rjmp	.-24     	; 0x2476 <vfprintf+0x1f2>
    248e:	37 fe       	sbrs	r3, 7
    2490:	0e c0       	rjmp	.+28     	; 0x24ae <vfprintf+0x22a>
    2492:	ee 24       	eor	r14, r14
    2494:	e3 94       	inc	r14
    2496:	e1 0e       	add	r14, r17
    2498:	81 2f       	mov	r24, r17
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	48 16       	cp	r4, r24
    249e:	59 06       	cpc	r5, r25
    24a0:	2c f4       	brge	.+10     	; 0x24ac <vfprintf+0x228>
    24a2:	14 19       	sub	r17, r4
    24a4:	04 c0       	rjmp	.+8      	; 0x24ae <vfprintf+0x22a>
    24a6:	ee 24       	eor	r14, r14
    24a8:	e3 94       	inc	r14
    24aa:	01 c0       	rjmp	.+2      	; 0x24ae <vfprintf+0x22a>
    24ac:	10 e0       	ldi	r17, 0x00	; 0
    24ae:	37 fe       	sbrs	r3, 7
    24b0:	06 c0       	rjmp	.+12     	; 0x24be <vfprintf+0x23a>
    24b2:	14 14       	cp	r1, r4
    24b4:	15 04       	cpc	r1, r5
    24b6:	34 f4       	brge	.+12     	; 0x24c4 <vfprintf+0x240>
    24b8:	c2 01       	movw	r24, r4
    24ba:	01 96       	adiw	r24, 0x01	; 1
    24bc:	05 c0       	rjmp	.+10     	; 0x24c8 <vfprintf+0x244>
    24be:	85 e0       	ldi	r24, 0x05	; 5
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <vfprintf+0x244>
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	21 10       	cpse	r2, r1
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	11 23       	and	r17, r17
    24ce:	31 f0       	breq	.+12     	; 0x24dc <vfprintf+0x258>
    24d0:	21 2f       	mov	r18, r17
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	2f 5f       	subi	r18, 0xFF	; 255
    24d6:	3f 4f       	sbci	r19, 0xFF	; 255
    24d8:	82 0f       	add	r24, r18
    24da:	93 1f       	adc	r25, r19
    24dc:	2f 2d       	mov	r18, r15
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	82 17       	cp	r24, r18
    24e2:	93 07       	cpc	r25, r19
    24e4:	14 f4       	brge	.+4      	; 0x24ea <vfprintf+0x266>
    24e6:	f8 1a       	sub	r15, r24
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <vfprintf+0x268>
    24ea:	f1 2c       	mov	r15, r1
    24ec:	83 2d       	mov	r24, r3
    24ee:	89 70       	andi	r24, 0x09	; 9
    24f0:	41 f4       	brne	.+16     	; 0x2502 <vfprintf+0x27e>
    24f2:	ff 20       	and	r15, r15
    24f4:	31 f0       	breq	.+12     	; 0x2502 <vfprintf+0x27e>
    24f6:	b6 01       	movw	r22, r12
    24f8:	80 e2       	ldi	r24, 0x20	; 32
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	7e d4       	rcall	.+2300   	; 0x2dfa <fputc>
    24fe:	fa 94       	dec	r15
    2500:	f8 cf       	rjmp	.-16     	; 0x24f2 <vfprintf+0x26e>
    2502:	22 20       	and	r2, r2
    2504:	21 f0       	breq	.+8      	; 0x250e <vfprintf+0x28a>
    2506:	b6 01       	movw	r22, r12
    2508:	82 2d       	mov	r24, r2
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	76 d4       	rcall	.+2284   	; 0x2dfa <fputc>
    250e:	33 fc       	sbrc	r3, 3
    2510:	08 c0       	rjmp	.+16     	; 0x2522 <vfprintf+0x29e>
    2512:	ff 20       	and	r15, r15
    2514:	31 f0       	breq	.+12     	; 0x2522 <vfprintf+0x29e>
    2516:	b6 01       	movw	r22, r12
    2518:	80 e3       	ldi	r24, 0x30	; 48
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	6e d4       	rcall	.+2268   	; 0x2dfa <fputc>
    251e:	fa 94       	dec	r15
    2520:	f8 cf       	rjmp	.-16     	; 0x2512 <vfprintf+0x28e>
    2522:	37 fe       	sbrs	r3, 7
    2524:	58 c0       	rjmp	.+176    	; 0x25d6 <vfprintf+0x352>
    2526:	94 2d       	mov	r25, r4
    2528:	85 2d       	mov	r24, r5
    252a:	57 fe       	sbrs	r5, 7
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <vfprintf+0x2ae>
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	29 2e       	mov	r2, r25
    2534:	38 2e       	mov	r3, r24
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	a2 01       	movw	r20, r4
    253c:	4e 19       	sub	r20, r14
    253e:	51 09       	sbc	r21, r1
    2540:	4c 87       	std	Y+12, r20	; 0x0c
    2542:	5d 87       	std	Y+13, r21	; 0x0d
    2544:	a2 01       	movw	r20, r4
    2546:	42 19       	sub	r20, r2
    2548:	53 09       	sbc	r21, r3
    254a:	4e 87       	std	Y+14, r20	; 0x0e
    254c:	5f 87       	std	Y+15, r21	; 0x0f
    254e:	61 2f       	mov	r22, r17
    2550:	70 e0       	ldi	r23, 0x00	; 0
    2552:	44 27       	eor	r20, r20
    2554:	55 27       	eor	r21, r21
    2556:	46 1b       	sub	r20, r22
    2558:	57 0b       	sbc	r21, r23
    255a:	48 8b       	std	Y+16, r20	; 0x10
    255c:	59 8b       	std	Y+17, r21	; 0x11
    255e:	5f ef       	ldi	r21, 0xFF	; 255
    2560:	25 16       	cp	r2, r21
    2562:	35 06       	cpc	r3, r21
    2564:	41 f4       	brne	.+16     	; 0x2576 <vfprintf+0x2f2>
    2566:	b6 01       	movw	r22, r12
    2568:	8e e2       	ldi	r24, 0x2E	; 46
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	2a 8b       	std	Y+18, r18	; 0x12
    256e:	3b 8b       	std	Y+19, r19	; 0x13
    2570:	44 d4       	rcall	.+2184   	; 0x2dfa <fputc>
    2572:	3b 89       	ldd	r19, Y+19	; 0x13
    2574:	2a 89       	ldd	r18, Y+18	; 0x12
    2576:	42 14       	cp	r4, r2
    2578:	53 04       	cpc	r5, r3
    257a:	6c f0       	brlt	.+26     	; 0x2596 <vfprintf+0x312>
    257c:	4c 85       	ldd	r20, Y+12	; 0x0c
    257e:	5d 85       	ldd	r21, Y+13	; 0x0d
    2580:	42 15       	cp	r20, r2
    2582:	53 05       	cpc	r21, r3
    2584:	44 f4       	brge	.+16     	; 0x2596 <vfprintf+0x312>
    2586:	ee 85       	ldd	r30, Y+14	; 0x0e
    2588:	ff 85       	ldd	r31, Y+15	; 0x0f
    258a:	e2 0f       	add	r30, r18
    258c:	f3 1f       	adc	r31, r19
    258e:	e6 0d       	add	r30, r6
    2590:	f7 1d       	adc	r31, r7
    2592:	81 81       	ldd	r24, Z+1	; 0x01
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <vfprintf+0x314>
    2596:	80 e3       	ldi	r24, 0x30	; 48
    2598:	51 e0       	ldi	r21, 0x01	; 1
    259a:	25 1a       	sub	r2, r21
    259c:	31 08       	sbc	r3, r1
    259e:	2f 5f       	subi	r18, 0xFF	; 255
    25a0:	3f 4f       	sbci	r19, 0xFF	; 255
    25a2:	48 89       	ldd	r20, Y+16	; 0x10
    25a4:	59 89       	ldd	r21, Y+17	; 0x11
    25a6:	24 16       	cp	r2, r20
    25a8:	35 06       	cpc	r3, r21
    25aa:	44 f0       	brlt	.+16     	; 0x25bc <vfprintf+0x338>
    25ac:	b6 01       	movw	r22, r12
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	2a 8b       	std	Y+18, r18	; 0x12
    25b2:	3b 8b       	std	Y+19, r19	; 0x13
    25b4:	22 d4       	rcall	.+2116   	; 0x2dfa <fputc>
    25b6:	2a 89       	ldd	r18, Y+18	; 0x12
    25b8:	3b 89       	ldd	r19, Y+19	; 0x13
    25ba:	d1 cf       	rjmp	.-94     	; 0x255e <vfprintf+0x2da>
    25bc:	24 14       	cp	r2, r4
    25be:	35 04       	cpc	r3, r5
    25c0:	39 f4       	brne	.+14     	; 0x25d0 <vfprintf+0x34c>
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	96 33       	cpi	r25, 0x36	; 54
    25c6:	18 f4       	brcc	.+6      	; 0x25ce <vfprintf+0x34a>
    25c8:	95 33       	cpi	r25, 0x35	; 53
    25ca:	11 f4       	brne	.+4      	; 0x25d0 <vfprintf+0x34c>
    25cc:	04 ff       	sbrs	r16, 4
    25ce:	81 e3       	ldi	r24, 0x31	; 49
    25d0:	b6 01       	movw	r22, r12
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	45 c0       	rjmp	.+138    	; 0x2660 <vfprintf+0x3dc>
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	81 33       	cpi	r24, 0x31	; 49
    25da:	09 f0       	breq	.+2      	; 0x25de <vfprintf+0x35a>
    25dc:	0f 7e       	andi	r16, 0xEF	; 239
    25de:	b6 01       	movw	r22, r12
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0b d4       	rcall	.+2070   	; 0x2dfa <fputc>
    25e4:	11 11       	cpse	r17, r1
    25e6:	05 c0       	rjmp	.+10     	; 0x25f2 <vfprintf+0x36e>
    25e8:	34 fc       	sbrc	r3, 4
    25ea:	16 c0       	rjmp	.+44     	; 0x2618 <vfprintf+0x394>
    25ec:	85 e6       	ldi	r24, 0x65	; 101
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	15 c0       	rjmp	.+42     	; 0x261c <vfprintf+0x398>
    25f2:	b6 01       	movw	r22, r12
    25f4:	8e e2       	ldi	r24, 0x2E	; 46
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	00 d4       	rcall	.+2048   	; 0x2dfa <fputc>
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	ee 24       	eor	r14, r14
    25fe:	e3 94       	inc	r14
    2600:	e8 0e       	add	r14, r24
    2602:	f3 01       	movw	r30, r6
    2604:	e8 0f       	add	r30, r24
    2606:	f1 1d       	adc	r31, r1
    2608:	80 81       	ld	r24, Z
    260a:	b6 01       	movw	r22, r12
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	f5 d3       	rcall	.+2026   	; 0x2dfa <fputc>
    2610:	11 50       	subi	r17, 0x01	; 1
    2612:	8e 2d       	mov	r24, r14
    2614:	99 f7       	brne	.-26     	; 0x25fc <vfprintf+0x378>
    2616:	e8 cf       	rjmp	.-48     	; 0x25e8 <vfprintf+0x364>
    2618:	85 e4       	ldi	r24, 0x45	; 69
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	b6 01       	movw	r22, r12
    261e:	ed d3       	rcall	.+2010   	; 0x2dfa <fputc>
    2620:	57 fc       	sbrc	r5, 7
    2622:	05 c0       	rjmp	.+10     	; 0x262e <vfprintf+0x3aa>
    2624:	41 14       	cp	r4, r1
    2626:	51 04       	cpc	r5, r1
    2628:	39 f4       	brne	.+14     	; 0x2638 <vfprintf+0x3b4>
    262a:	04 ff       	sbrs	r16, 4
    262c:	05 c0       	rjmp	.+10     	; 0x2638 <vfprintf+0x3b4>
    262e:	51 94       	neg	r5
    2630:	41 94       	neg	r4
    2632:	51 08       	sbc	r5, r1
    2634:	8d e2       	ldi	r24, 0x2D	; 45
    2636:	01 c0       	rjmp	.+2      	; 0x263a <vfprintf+0x3b6>
    2638:	8b e2       	ldi	r24, 0x2B	; 43
    263a:	b6 01       	movw	r22, r12
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	dd d3       	rcall	.+1978   	; 0x2dfa <fputc>
    2640:	80 e3       	ldi	r24, 0x30	; 48
    2642:	9a e0       	ldi	r25, 0x0A	; 10
    2644:	49 16       	cp	r4, r25
    2646:	51 04       	cpc	r5, r1
    2648:	2c f0       	brlt	.+10     	; 0x2654 <vfprintf+0x3d0>
    264a:	8f 5f       	subi	r24, 0xFF	; 255
    264c:	5a e0       	ldi	r21, 0x0A	; 10
    264e:	45 1a       	sub	r4, r21
    2650:	51 08       	sbc	r5, r1
    2652:	f7 cf       	rjmp	.-18     	; 0x2642 <vfprintf+0x3be>
    2654:	b6 01       	movw	r22, r12
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	d0 d3       	rcall	.+1952   	; 0x2dfa <fputc>
    265a:	b6 01       	movw	r22, r12
    265c:	c2 01       	movw	r24, r4
    265e:	c0 96       	adiw	r24, 0x30	; 48
    2660:	cc d3       	rcall	.+1944   	; 0x2dfa <fputc>
    2662:	4c c1       	rjmp	.+664    	; 0x28fc <vfprintf+0x678>
    2664:	83 36       	cpi	r24, 0x63	; 99
    2666:	31 f0       	breq	.+12     	; 0x2674 <vfprintf+0x3f0>
    2668:	83 37       	cpi	r24, 0x73	; 115
    266a:	79 f0       	breq	.+30     	; 0x268a <vfprintf+0x406>
    266c:	83 35       	cpi	r24, 0x53	; 83
    266e:	09 f0       	breq	.+2      	; 0x2672 <vfprintf+0x3ee>
    2670:	54 c0       	rjmp	.+168    	; 0x271a <vfprintf+0x496>
    2672:	20 c0       	rjmp	.+64     	; 0x26b4 <vfprintf+0x430>
    2674:	52 01       	movw	r10, r4
    2676:	e2 e0       	ldi	r30, 0x02	; 2
    2678:	ae 0e       	add	r10, r30
    267a:	b1 1c       	adc	r11, r1
    267c:	f2 01       	movw	r30, r4
    267e:	80 81       	ld	r24, Z
    2680:	89 83       	std	Y+1, r24	; 0x01
    2682:	01 e0       	ldi	r16, 0x01	; 1
    2684:	10 e0       	ldi	r17, 0x00	; 0
    2686:	23 01       	movw	r4, r6
    2688:	13 c0       	rjmp	.+38     	; 0x26b0 <vfprintf+0x42c>
    268a:	52 01       	movw	r10, r4
    268c:	f2 e0       	ldi	r31, 0x02	; 2
    268e:	af 0e       	add	r10, r31
    2690:	b1 1c       	adc	r11, r1
    2692:	f2 01       	movw	r30, r4
    2694:	40 80       	ld	r4, Z
    2696:	51 80       	ldd	r5, Z+1	; 0x01
    2698:	26 ff       	sbrs	r18, 6
    269a:	03 c0       	rjmp	.+6      	; 0x26a2 <vfprintf+0x41e>
    269c:	61 2f       	mov	r22, r17
    269e:	70 e0       	ldi	r23, 0x00	; 0
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <vfprintf+0x422>
    26a2:	6f ef       	ldi	r22, 0xFF	; 255
    26a4:	7f ef       	ldi	r23, 0xFF	; 255
    26a6:	c2 01       	movw	r24, r4
    26a8:	2a 8b       	std	Y+18, r18	; 0x12
    26aa:	52 d3       	rcall	.+1700   	; 0x2d50 <strnlen>
    26ac:	8c 01       	movw	r16, r24
    26ae:	2a 89       	ldd	r18, Y+18	; 0x12
    26b0:	2f 77       	andi	r18, 0x7F	; 127
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <vfprintf+0x458>
    26b4:	52 01       	movw	r10, r4
    26b6:	f2 e0       	ldi	r31, 0x02	; 2
    26b8:	af 0e       	add	r10, r31
    26ba:	b1 1c       	adc	r11, r1
    26bc:	f2 01       	movw	r30, r4
    26be:	40 80       	ld	r4, Z
    26c0:	51 80       	ldd	r5, Z+1	; 0x01
    26c2:	26 ff       	sbrs	r18, 6
    26c4:	03 c0       	rjmp	.+6      	; 0x26cc <vfprintf+0x448>
    26c6:	61 2f       	mov	r22, r17
    26c8:	70 e0       	ldi	r23, 0x00	; 0
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <vfprintf+0x44c>
    26cc:	6f ef       	ldi	r22, 0xFF	; 255
    26ce:	7f ef       	ldi	r23, 0xFF	; 255
    26d0:	c2 01       	movw	r24, r4
    26d2:	2a 8b       	std	Y+18, r18	; 0x12
    26d4:	32 d3       	rcall	.+1636   	; 0x2d3a <strnlen_P>
    26d6:	8c 01       	movw	r16, r24
    26d8:	2a 89       	ldd	r18, Y+18	; 0x12
    26da:	20 68       	ori	r18, 0x80	; 128
    26dc:	32 2e       	mov	r3, r18
    26de:	23 fd       	sbrc	r18, 3
    26e0:	18 c0       	rjmp	.+48     	; 0x2712 <vfprintf+0x48e>
    26e2:	8f 2d       	mov	r24, r15
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	08 17       	cp	r16, r24
    26e8:	19 07       	cpc	r17, r25
    26ea:	98 f4       	brcc	.+38     	; 0x2712 <vfprintf+0x48e>
    26ec:	b6 01       	movw	r22, r12
    26ee:	80 e2       	ldi	r24, 0x20	; 32
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	83 d3       	rcall	.+1798   	; 0x2dfa <fputc>
    26f4:	fa 94       	dec	r15
    26f6:	f5 cf       	rjmp	.-22     	; 0x26e2 <vfprintf+0x45e>
    26f8:	f2 01       	movw	r30, r4
    26fa:	37 fc       	sbrc	r3, 7
    26fc:	85 91       	lpm	r24, Z+
    26fe:	37 fe       	sbrs	r3, 7
    2700:	81 91       	ld	r24, Z+
    2702:	2f 01       	movw	r4, r30
    2704:	b6 01       	movw	r22, r12
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	78 d3       	rcall	.+1776   	; 0x2dfa <fputc>
    270a:	f1 10       	cpse	r15, r1
    270c:	fa 94       	dec	r15
    270e:	01 50       	subi	r16, 0x01	; 1
    2710:	11 09       	sbc	r17, r1
    2712:	01 15       	cp	r16, r1
    2714:	11 05       	cpc	r17, r1
    2716:	81 f7       	brne	.-32     	; 0x26f8 <vfprintf+0x474>
    2718:	f1 c0       	rjmp	.+482    	; 0x28fc <vfprintf+0x678>
    271a:	84 36       	cpi	r24, 0x64	; 100
    271c:	11 f0       	breq	.+4      	; 0x2722 <vfprintf+0x49e>
    271e:	89 36       	cpi	r24, 0x69	; 105
    2720:	51 f5       	brne	.+84     	; 0x2776 <vfprintf+0x4f2>
    2722:	52 01       	movw	r10, r4
    2724:	27 ff       	sbrs	r18, 7
    2726:	09 c0       	rjmp	.+18     	; 0x273a <vfprintf+0x4b6>
    2728:	f4 e0       	ldi	r31, 0x04	; 4
    272a:	af 0e       	add	r10, r31
    272c:	b1 1c       	adc	r11, r1
    272e:	f2 01       	movw	r30, r4
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	82 81       	ldd	r24, Z+2	; 0x02
    2736:	93 81       	ldd	r25, Z+3	; 0x03
    2738:	0a c0       	rjmp	.+20     	; 0x274e <vfprintf+0x4ca>
    273a:	f2 e0       	ldi	r31, 0x02	; 2
    273c:	af 0e       	add	r10, r31
    273e:	b1 1c       	adc	r11, r1
    2740:	f2 01       	movw	r30, r4
    2742:	60 81       	ld	r22, Z
    2744:	71 81       	ldd	r23, Z+1	; 0x01
    2746:	07 2e       	mov	r0, r23
    2748:	00 0c       	add	r0, r0
    274a:	88 0b       	sbc	r24, r24
    274c:	99 0b       	sbc	r25, r25
    274e:	2f 76       	andi	r18, 0x6F	; 111
    2750:	32 2e       	mov	r3, r18
    2752:	97 ff       	sbrs	r25, 7
    2754:	09 c0       	rjmp	.+18     	; 0x2768 <vfprintf+0x4e4>
    2756:	90 95       	com	r25
    2758:	80 95       	com	r24
    275a:	70 95       	com	r23
    275c:	61 95       	neg	r22
    275e:	7f 4f       	sbci	r23, 0xFF	; 255
    2760:	8f 4f       	sbci	r24, 0xFF	; 255
    2762:	9f 4f       	sbci	r25, 0xFF	; 255
    2764:	20 68       	ori	r18, 0x80	; 128
    2766:	32 2e       	mov	r3, r18
    2768:	2a e0       	ldi	r18, 0x0A	; 10
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	a3 01       	movw	r20, r6
    276e:	90 d3       	rcall	.+1824   	; 0x2e90 <__ultoa_invert>
    2770:	e8 2e       	mov	r14, r24
    2772:	e6 18       	sub	r14, r6
    2774:	3e c0       	rjmp	.+124    	; 0x27f2 <vfprintf+0x56e>
    2776:	02 2f       	mov	r16, r18
    2778:	85 37       	cpi	r24, 0x75	; 117
    277a:	21 f4       	brne	.+8      	; 0x2784 <vfprintf+0x500>
    277c:	0f 7e       	andi	r16, 0xEF	; 239
    277e:	2a e0       	ldi	r18, 0x0A	; 10
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	1d c0       	rjmp	.+58     	; 0x27be <vfprintf+0x53a>
    2784:	09 7f       	andi	r16, 0xF9	; 249
    2786:	8f 36       	cpi	r24, 0x6F	; 111
    2788:	91 f0       	breq	.+36     	; 0x27ae <vfprintf+0x52a>
    278a:	18 f4       	brcc	.+6      	; 0x2792 <vfprintf+0x50e>
    278c:	88 35       	cpi	r24, 0x58	; 88
    278e:	59 f0       	breq	.+22     	; 0x27a6 <vfprintf+0x522>
    2790:	be c0       	rjmp	.+380    	; 0x290e <vfprintf+0x68a>
    2792:	80 37       	cpi	r24, 0x70	; 112
    2794:	19 f0       	breq	.+6      	; 0x279c <vfprintf+0x518>
    2796:	88 37       	cpi	r24, 0x78	; 120
    2798:	11 f0       	breq	.+4      	; 0x279e <vfprintf+0x51a>
    279a:	b9 c0       	rjmp	.+370    	; 0x290e <vfprintf+0x68a>
    279c:	00 61       	ori	r16, 0x10	; 16
    279e:	04 ff       	sbrs	r16, 4
    27a0:	09 c0       	rjmp	.+18     	; 0x27b4 <vfprintf+0x530>
    27a2:	04 60       	ori	r16, 0x04	; 4
    27a4:	07 c0       	rjmp	.+14     	; 0x27b4 <vfprintf+0x530>
    27a6:	24 ff       	sbrs	r18, 4
    27a8:	08 c0       	rjmp	.+16     	; 0x27ba <vfprintf+0x536>
    27aa:	06 60       	ori	r16, 0x06	; 6
    27ac:	06 c0       	rjmp	.+12     	; 0x27ba <vfprintf+0x536>
    27ae:	28 e0       	ldi	r18, 0x08	; 8
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	05 c0       	rjmp	.+10     	; 0x27be <vfprintf+0x53a>
    27b4:	20 e1       	ldi	r18, 0x10	; 16
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <vfprintf+0x53a>
    27ba:	20 e1       	ldi	r18, 0x10	; 16
    27bc:	32 e0       	ldi	r19, 0x02	; 2
    27be:	52 01       	movw	r10, r4
    27c0:	07 ff       	sbrs	r16, 7
    27c2:	09 c0       	rjmp	.+18     	; 0x27d6 <vfprintf+0x552>
    27c4:	f4 e0       	ldi	r31, 0x04	; 4
    27c6:	af 0e       	add	r10, r31
    27c8:	b1 1c       	adc	r11, r1
    27ca:	f2 01       	movw	r30, r4
    27cc:	60 81       	ld	r22, Z
    27ce:	71 81       	ldd	r23, Z+1	; 0x01
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	93 81       	ldd	r25, Z+3	; 0x03
    27d4:	08 c0       	rjmp	.+16     	; 0x27e6 <vfprintf+0x562>
    27d6:	f2 e0       	ldi	r31, 0x02	; 2
    27d8:	af 0e       	add	r10, r31
    27da:	b1 1c       	adc	r11, r1
    27dc:	f2 01       	movw	r30, r4
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	a3 01       	movw	r20, r6
    27e8:	53 d3       	rcall	.+1702   	; 0x2e90 <__ultoa_invert>
    27ea:	e8 2e       	mov	r14, r24
    27ec:	e6 18       	sub	r14, r6
    27ee:	0f 77       	andi	r16, 0x7F	; 127
    27f0:	30 2e       	mov	r3, r16
    27f2:	36 fe       	sbrs	r3, 6
    27f4:	0b c0       	rjmp	.+22     	; 0x280c <vfprintf+0x588>
    27f6:	33 2d       	mov	r19, r3
    27f8:	3e 7f       	andi	r19, 0xFE	; 254
    27fa:	e1 16       	cp	r14, r17
    27fc:	50 f4       	brcc	.+20     	; 0x2812 <vfprintf+0x58e>
    27fe:	34 fe       	sbrs	r3, 4
    2800:	0a c0       	rjmp	.+20     	; 0x2816 <vfprintf+0x592>
    2802:	32 fc       	sbrc	r3, 2
    2804:	08 c0       	rjmp	.+16     	; 0x2816 <vfprintf+0x592>
    2806:	33 2d       	mov	r19, r3
    2808:	3e 7e       	andi	r19, 0xEE	; 238
    280a:	05 c0       	rjmp	.+10     	; 0x2816 <vfprintf+0x592>
    280c:	0e 2d       	mov	r16, r14
    280e:	33 2d       	mov	r19, r3
    2810:	03 c0       	rjmp	.+6      	; 0x2818 <vfprintf+0x594>
    2812:	0e 2d       	mov	r16, r14
    2814:	01 c0       	rjmp	.+2      	; 0x2818 <vfprintf+0x594>
    2816:	01 2f       	mov	r16, r17
    2818:	34 ff       	sbrs	r19, 4
    281a:	0c c0       	rjmp	.+24     	; 0x2834 <vfprintf+0x5b0>
    281c:	fe 01       	movw	r30, r28
    281e:	ee 0d       	add	r30, r14
    2820:	f1 1d       	adc	r31, r1
    2822:	80 81       	ld	r24, Z
    2824:	80 33       	cpi	r24, 0x30	; 48
    2826:	11 f4       	brne	.+4      	; 0x282c <vfprintf+0x5a8>
    2828:	39 7e       	andi	r19, 0xE9	; 233
    282a:	08 c0       	rjmp	.+16     	; 0x283c <vfprintf+0x5b8>
    282c:	32 ff       	sbrs	r19, 2
    282e:	05 c0       	rjmp	.+10     	; 0x283a <vfprintf+0x5b6>
    2830:	0e 5f       	subi	r16, 0xFE	; 254
    2832:	04 c0       	rjmp	.+8      	; 0x283c <vfprintf+0x5b8>
    2834:	83 2f       	mov	r24, r19
    2836:	86 78       	andi	r24, 0x86	; 134
    2838:	09 f0       	breq	.+2      	; 0x283c <vfprintf+0x5b8>
    283a:	0f 5f       	subi	r16, 0xFF	; 255
    283c:	33 fd       	sbrc	r19, 3
    283e:	12 c0       	rjmp	.+36     	; 0x2864 <vfprintf+0x5e0>
    2840:	30 ff       	sbrs	r19, 0
    2842:	06 c0       	rjmp	.+12     	; 0x2850 <vfprintf+0x5cc>
    2844:	1e 2d       	mov	r17, r14
    2846:	0f 15       	cp	r16, r15
    2848:	18 f4       	brcc	.+6      	; 0x2850 <vfprintf+0x5cc>
    284a:	1f 0d       	add	r17, r15
    284c:	10 1b       	sub	r17, r16
    284e:	0f 2d       	mov	r16, r15
    2850:	0f 15       	cp	r16, r15
    2852:	60 f4       	brcc	.+24     	; 0x286c <vfprintf+0x5e8>
    2854:	b6 01       	movw	r22, r12
    2856:	80 e2       	ldi	r24, 0x20	; 32
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	3b 8b       	std	Y+19, r19	; 0x13
    285c:	ce d2       	rcall	.+1436   	; 0x2dfa <fputc>
    285e:	0f 5f       	subi	r16, 0xFF	; 255
    2860:	3b 89       	ldd	r19, Y+19	; 0x13
    2862:	f6 cf       	rjmp	.-20     	; 0x2850 <vfprintf+0x5cc>
    2864:	0f 15       	cp	r16, r15
    2866:	10 f4       	brcc	.+4      	; 0x286c <vfprintf+0x5e8>
    2868:	f0 1a       	sub	r15, r16
    286a:	01 c0       	rjmp	.+2      	; 0x286e <vfprintf+0x5ea>
    286c:	f1 2c       	mov	r15, r1
    286e:	34 ff       	sbrs	r19, 4
    2870:	11 c0       	rjmp	.+34     	; 0x2894 <vfprintf+0x610>
    2872:	b6 01       	movw	r22, r12
    2874:	80 e3       	ldi	r24, 0x30	; 48
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	3b 8b       	std	Y+19, r19	; 0x13
    287a:	bf d2       	rcall	.+1406   	; 0x2dfa <fputc>
    287c:	3b 89       	ldd	r19, Y+19	; 0x13
    287e:	32 ff       	sbrs	r19, 2
    2880:	16 c0       	rjmp	.+44     	; 0x28ae <vfprintf+0x62a>
    2882:	31 fd       	sbrc	r19, 1
    2884:	03 c0       	rjmp	.+6      	; 0x288c <vfprintf+0x608>
    2886:	88 e7       	ldi	r24, 0x78	; 120
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <vfprintf+0x60c>
    288c:	88 e5       	ldi	r24, 0x58	; 88
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	b6 01       	movw	r22, r12
    2892:	0c c0       	rjmp	.+24     	; 0x28ac <vfprintf+0x628>
    2894:	83 2f       	mov	r24, r19
    2896:	86 78       	andi	r24, 0x86	; 134
    2898:	51 f0       	breq	.+20     	; 0x28ae <vfprintf+0x62a>
    289a:	31 ff       	sbrs	r19, 1
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <vfprintf+0x61e>
    289e:	8b e2       	ldi	r24, 0x2B	; 43
    28a0:	01 c0       	rjmp	.+2      	; 0x28a4 <vfprintf+0x620>
    28a2:	80 e2       	ldi	r24, 0x20	; 32
    28a4:	37 fd       	sbrc	r19, 7
    28a6:	8d e2       	ldi	r24, 0x2D	; 45
    28a8:	b6 01       	movw	r22, r12
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	a6 d2       	rcall	.+1356   	; 0x2dfa <fputc>
    28ae:	e1 16       	cp	r14, r17
    28b0:	30 f4       	brcc	.+12     	; 0x28be <vfprintf+0x63a>
    28b2:	b6 01       	movw	r22, r12
    28b4:	80 e3       	ldi	r24, 0x30	; 48
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	a0 d2       	rcall	.+1344   	; 0x2dfa <fputc>
    28ba:	11 50       	subi	r17, 0x01	; 1
    28bc:	f8 cf       	rjmp	.-16     	; 0x28ae <vfprintf+0x62a>
    28be:	ea 94       	dec	r14
    28c0:	f3 01       	movw	r30, r6
    28c2:	ee 0d       	add	r30, r14
    28c4:	f1 1d       	adc	r31, r1
    28c6:	80 81       	ld	r24, Z
    28c8:	b6 01       	movw	r22, r12
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	96 d2       	rcall	.+1324   	; 0x2dfa <fputc>
    28ce:	e1 10       	cpse	r14, r1
    28d0:	f6 cf       	rjmp	.-20     	; 0x28be <vfprintf+0x63a>
    28d2:	14 c0       	rjmp	.+40     	; 0x28fc <vfprintf+0x678>
    28d4:	f4 e0       	ldi	r31, 0x04	; 4
    28d6:	ff 15       	cp	r31, r15
    28d8:	48 f5       	brcc	.+82     	; 0x292c <vfprintf+0x6a8>
    28da:	84 e0       	ldi	r24, 0x04	; 4
    28dc:	f8 1a       	sub	r15, r24
    28de:	33 fe       	sbrs	r3, 3
    28e0:	1d c0       	rjmp	.+58     	; 0x291c <vfprintf+0x698>
    28e2:	21 10       	cpse	r2, r1
    28e4:	24 c0       	rjmp	.+72     	; 0x292e <vfprintf+0x6aa>
    28e6:	03 ff       	sbrs	r16, 3
    28e8:	27 c0       	rjmp	.+78     	; 0x2938 <vfprintf+0x6b4>
    28ea:	0e e4       	ldi	r16, 0x4E	; 78
    28ec:	12 e0       	ldi	r17, 0x02	; 2
    28ee:	f3 2d       	mov	r31, r3
    28f0:	f0 71       	andi	r31, 0x10	; 16
    28f2:	3f 2e       	mov	r3, r31
    28f4:	f8 01       	movw	r30, r16
    28f6:	84 91       	lpm	r24, Z
    28f8:	81 11       	cpse	r24, r1
    28fa:	21 c0       	rjmp	.+66     	; 0x293e <vfprintf+0x6ba>
    28fc:	ff 20       	and	r15, r15
    28fe:	09 f4       	brne	.+2      	; 0x2902 <vfprintf+0x67e>
    2900:	fd cc       	rjmp	.-1542   	; 0x22fc <vfprintf+0x78>
    2902:	b6 01       	movw	r22, r12
    2904:	80 e2       	ldi	r24, 0x20	; 32
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	78 d2       	rcall	.+1264   	; 0x2dfa <fputc>
    290a:	fa 94       	dec	r15
    290c:	f7 cf       	rjmp	.-18     	; 0x28fc <vfprintf+0x678>
    290e:	f6 01       	movw	r30, r12
    2910:	86 81       	ldd	r24, Z+6	; 0x06
    2912:	97 81       	ldd	r25, Z+7	; 0x07
    2914:	23 c0       	rjmp	.+70     	; 0x295c <vfprintf+0x6d8>
    2916:	8f ef       	ldi	r24, 0xFF	; 255
    2918:	9f ef       	ldi	r25, 0xFF	; 255
    291a:	20 c0       	rjmp	.+64     	; 0x295c <vfprintf+0x6d8>
    291c:	b6 01       	movw	r22, r12
    291e:	80 e2       	ldi	r24, 0x20	; 32
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	6b d2       	rcall	.+1238   	; 0x2dfa <fputc>
    2924:	fa 94       	dec	r15
    2926:	f1 10       	cpse	r15, r1
    2928:	f9 cf       	rjmp	.-14     	; 0x291c <vfprintf+0x698>
    292a:	db cf       	rjmp	.-74     	; 0x28e2 <vfprintf+0x65e>
    292c:	f1 2c       	mov	r15, r1
    292e:	b6 01       	movw	r22, r12
    2930:	82 2d       	mov	r24, r2
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	62 d2       	rcall	.+1220   	; 0x2dfa <fputc>
    2936:	d7 cf       	rjmp	.-82     	; 0x28e6 <vfprintf+0x662>
    2938:	02 e5       	ldi	r16, 0x52	; 82
    293a:	12 e0       	ldi	r17, 0x02	; 2
    293c:	d8 cf       	rjmp	.-80     	; 0x28ee <vfprintf+0x66a>
    293e:	31 10       	cpse	r3, r1
    2940:	80 52       	subi	r24, 0x20	; 32
    2942:	b6 01       	movw	r22, r12
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	59 d2       	rcall	.+1202   	; 0x2dfa <fputc>
    2948:	0f 5f       	subi	r16, 0xFF	; 255
    294a:	1f 4f       	sbci	r17, 0xFF	; 255
    294c:	d3 cf       	rjmp	.-90     	; 0x28f4 <vfprintf+0x670>
    294e:	23 e0       	ldi	r18, 0x03	; 3
    2950:	2f 15       	cp	r18, r15
    2952:	10 f4       	brcc	.+4      	; 0x2958 <vfprintf+0x6d4>
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	c2 cf       	rjmp	.-124    	; 0x28dc <vfprintf+0x658>
    2958:	f1 2c       	mov	r15, r1
    295a:	c5 cf       	rjmp	.-118    	; 0x28e6 <vfprintf+0x662>
    295c:	63 96       	adiw	r28, 0x13	; 19
    295e:	cd bf       	out	0x3d, r28	; 61
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	df 91       	pop	r29
    2964:	cf 91       	pop	r28
    2966:	1f 91       	pop	r17
    2968:	0f 91       	pop	r16
    296a:	ff 90       	pop	r15
    296c:	ef 90       	pop	r14
    296e:	df 90       	pop	r13
    2970:	cf 90       	pop	r12
    2972:	bf 90       	pop	r11
    2974:	af 90       	pop	r10
    2976:	9f 90       	pop	r9
    2978:	8f 90       	pop	r8
    297a:	7f 90       	pop	r7
    297c:	6f 90       	pop	r6
    297e:	5f 90       	pop	r5
    2980:	4f 90       	pop	r4
    2982:	3f 90       	pop	r3
    2984:	2f 90       	pop	r2
    2986:	08 95       	ret

00002988 <__udivmodhi4>:
    2988:	aa 1b       	sub	r26, r26
    298a:	bb 1b       	sub	r27, r27
    298c:	51 e1       	ldi	r21, 0x11	; 17
    298e:	07 c0       	rjmp	.+14     	; 0x299e <__udivmodhi4_ep>

00002990 <__udivmodhi4_loop>:
    2990:	aa 1f       	adc	r26, r26
    2992:	bb 1f       	adc	r27, r27
    2994:	a6 17       	cp	r26, r22
    2996:	b7 07       	cpc	r27, r23
    2998:	10 f0       	brcs	.+4      	; 0x299e <__udivmodhi4_ep>
    299a:	a6 1b       	sub	r26, r22
    299c:	b7 0b       	sbc	r27, r23

0000299e <__udivmodhi4_ep>:
    299e:	88 1f       	adc	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	5a 95       	dec	r21
    29a4:	a9 f7       	brne	.-22     	; 0x2990 <__udivmodhi4_loop>
    29a6:	80 95       	com	r24
    29a8:	90 95       	com	r25
    29aa:	bc 01       	movw	r22, r24
    29ac:	cd 01       	movw	r24, r26
    29ae:	08 95       	ret

000029b0 <__udivmodsi4>:
    29b0:	a1 e2       	ldi	r26, 0x21	; 33
    29b2:	1a 2e       	mov	r1, r26
    29b4:	aa 1b       	sub	r26, r26
    29b6:	bb 1b       	sub	r27, r27
    29b8:	fd 01       	movw	r30, r26
    29ba:	0d c0       	rjmp	.+26     	; 0x29d6 <__udivmodsi4_ep>

000029bc <__udivmodsi4_loop>:
    29bc:	aa 1f       	adc	r26, r26
    29be:	bb 1f       	adc	r27, r27
    29c0:	ee 1f       	adc	r30, r30
    29c2:	ff 1f       	adc	r31, r31
    29c4:	a2 17       	cp	r26, r18
    29c6:	b3 07       	cpc	r27, r19
    29c8:	e4 07       	cpc	r30, r20
    29ca:	f5 07       	cpc	r31, r21
    29cc:	20 f0       	brcs	.+8      	; 0x29d6 <__udivmodsi4_ep>
    29ce:	a2 1b       	sub	r26, r18
    29d0:	b3 0b       	sbc	r27, r19
    29d2:	e4 0b       	sbc	r30, r20
    29d4:	f5 0b       	sbc	r31, r21

000029d6 <__udivmodsi4_ep>:
    29d6:	66 1f       	adc	r22, r22
    29d8:	77 1f       	adc	r23, r23
    29da:	88 1f       	adc	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	1a 94       	dec	r1
    29e0:	69 f7       	brne	.-38     	; 0x29bc <__udivmodsi4_loop>
    29e2:	60 95       	com	r22
    29e4:	70 95       	com	r23
    29e6:	80 95       	com	r24
    29e8:	90 95       	com	r25
    29ea:	9b 01       	movw	r18, r22
    29ec:	ac 01       	movw	r20, r24
    29ee:	bd 01       	movw	r22, r26
    29f0:	cf 01       	movw	r24, r30
    29f2:	08 95       	ret

000029f4 <__muluhisi3>:
    29f4:	bb d0       	rcall	.+374    	; 0x2b6c <__umulhisi3>
    29f6:	a5 9f       	mul	r26, r21
    29f8:	90 0d       	add	r25, r0
    29fa:	b4 9f       	mul	r27, r20
    29fc:	90 0d       	add	r25, r0
    29fe:	a4 9f       	mul	r26, r20
    2a00:	80 0d       	add	r24, r0
    2a02:	91 1d       	adc	r25, r1
    2a04:	11 24       	eor	r1, r1
    2a06:	08 95       	ret

00002a08 <__muldi3>:
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	1f 93       	push	r17
    2a0e:	0f 93       	push	r16
    2a10:	9a 9d       	mul	r25, r10
    2a12:	f0 2d       	mov	r31, r0
    2a14:	21 9f       	mul	r18, r17
    2a16:	f0 0d       	add	r31, r0
    2a18:	8b 9d       	mul	r24, r11
    2a1a:	f0 0d       	add	r31, r0
    2a1c:	8a 9d       	mul	r24, r10
    2a1e:	e0 2d       	mov	r30, r0
    2a20:	f1 0d       	add	r31, r1
    2a22:	03 9f       	mul	r16, r19
    2a24:	f0 0d       	add	r31, r0
    2a26:	02 9f       	mul	r16, r18
    2a28:	e0 0d       	add	r30, r0
    2a2a:	f1 1d       	adc	r31, r1
    2a2c:	4e 9d       	mul	r20, r14
    2a2e:	e0 0d       	add	r30, r0
    2a30:	f1 1d       	adc	r31, r1
    2a32:	5e 9d       	mul	r21, r14
    2a34:	f0 0d       	add	r31, r0
    2a36:	4f 9d       	mul	r20, r15
    2a38:	f0 0d       	add	r31, r0
    2a3a:	7f 93       	push	r23
    2a3c:	6f 93       	push	r22
    2a3e:	bf 92       	push	r11
    2a40:	af 92       	push	r10
    2a42:	5f 93       	push	r21
    2a44:	4f 93       	push	r20
    2a46:	d5 01       	movw	r26, r10
    2a48:	91 d0       	rcall	.+290    	; 0x2b6c <__umulhisi3>
    2a4a:	8b 01       	movw	r16, r22
    2a4c:	ac 01       	movw	r20, r24
    2a4e:	d7 01       	movw	r26, r14
    2a50:	8d d0       	rcall	.+282    	; 0x2b6c <__umulhisi3>
    2a52:	eb 01       	movw	r28, r22
    2a54:	e8 0f       	add	r30, r24
    2a56:	f9 1f       	adc	r31, r25
    2a58:	d6 01       	movw	r26, r12
    2a5a:	1f d0       	rcall	.+62     	; 0x2a9a <__muldi3_6>
    2a5c:	2f 91       	pop	r18
    2a5e:	3f 91       	pop	r19
    2a60:	d6 01       	movw	r26, r12
    2a62:	84 d0       	rcall	.+264    	; 0x2b6c <__umulhisi3>
    2a64:	c6 0f       	add	r28, r22
    2a66:	d7 1f       	adc	r29, r23
    2a68:	e8 1f       	adc	r30, r24
    2a6a:	f9 1f       	adc	r31, r25
    2a6c:	af 91       	pop	r26
    2a6e:	bf 91       	pop	r27
    2a70:	14 d0       	rcall	.+40     	; 0x2a9a <__muldi3_6>
    2a72:	2f 91       	pop	r18
    2a74:	3f 91       	pop	r19
    2a76:	7a d0       	rcall	.+244    	; 0x2b6c <__umulhisi3>
    2a78:	c6 0f       	add	r28, r22
    2a7a:	d7 1f       	adc	r29, r23
    2a7c:	e8 1f       	adc	r30, r24
    2a7e:	f9 1f       	adc	r31, r25
    2a80:	d6 01       	movw	r26, r12
    2a82:	74 d0       	rcall	.+232    	; 0x2b6c <__umulhisi3>
    2a84:	e6 0f       	add	r30, r22
    2a86:	f7 1f       	adc	r31, r23
    2a88:	98 01       	movw	r18, r16
    2a8a:	be 01       	movw	r22, r28
    2a8c:	cf 01       	movw	r24, r30
    2a8e:	11 24       	eor	r1, r1
    2a90:	0f 91       	pop	r16
    2a92:	1f 91       	pop	r17
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <__muldi3_6>:
    2a9a:	68 d0       	rcall	.+208    	; 0x2b6c <__umulhisi3>
    2a9c:	46 0f       	add	r20, r22
    2a9e:	57 1f       	adc	r21, r23
    2aa0:	c8 1f       	adc	r28, r24
    2aa2:	d9 1f       	adc	r29, r25
    2aa4:	08 f4       	brcc	.+2      	; 0x2aa8 <__muldi3_6+0xe>
    2aa6:	31 96       	adiw	r30, 0x01	; 1
    2aa8:	08 95       	ret

00002aaa <__ashldi3>:
    2aaa:	0f 93       	push	r16
    2aac:	08 30       	cpi	r16, 0x08	; 8
    2aae:	90 f0       	brcs	.+36     	; 0x2ad4 <__ashldi3+0x2a>
    2ab0:	98 2f       	mov	r25, r24
    2ab2:	87 2f       	mov	r24, r23
    2ab4:	76 2f       	mov	r23, r22
    2ab6:	65 2f       	mov	r22, r21
    2ab8:	54 2f       	mov	r21, r20
    2aba:	43 2f       	mov	r20, r19
    2abc:	32 2f       	mov	r19, r18
    2abe:	22 27       	eor	r18, r18
    2ac0:	08 50       	subi	r16, 0x08	; 8
    2ac2:	f4 cf       	rjmp	.-24     	; 0x2aac <__ashldi3+0x2>
    2ac4:	22 0f       	add	r18, r18
    2ac6:	33 1f       	adc	r19, r19
    2ac8:	44 1f       	adc	r20, r20
    2aca:	55 1f       	adc	r21, r21
    2acc:	66 1f       	adc	r22, r22
    2ace:	77 1f       	adc	r23, r23
    2ad0:	88 1f       	adc	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	0a 95       	dec	r16
    2ad6:	b2 f7       	brpl	.-20     	; 0x2ac4 <__ashldi3+0x1a>
    2ad8:	0f 91       	pop	r16
    2ada:	08 95       	ret

00002adc <__ashrdi3>:
    2adc:	97 fb       	bst	r25, 7
    2ade:	10 f8       	bld	r1, 0

00002ae0 <__lshrdi3>:
    2ae0:	16 94       	lsr	r1
    2ae2:	00 08       	sbc	r0, r0
    2ae4:	0f 93       	push	r16
    2ae6:	08 30       	cpi	r16, 0x08	; 8
    2ae8:	98 f0       	brcs	.+38     	; 0x2b10 <__lshrdi3+0x30>
    2aea:	08 50       	subi	r16, 0x08	; 8
    2aec:	23 2f       	mov	r18, r19
    2aee:	34 2f       	mov	r19, r20
    2af0:	45 2f       	mov	r20, r21
    2af2:	56 2f       	mov	r21, r22
    2af4:	67 2f       	mov	r22, r23
    2af6:	78 2f       	mov	r23, r24
    2af8:	89 2f       	mov	r24, r25
    2afa:	90 2d       	mov	r25, r0
    2afc:	f4 cf       	rjmp	.-24     	; 0x2ae6 <__lshrdi3+0x6>
    2afe:	05 94       	asr	r0
    2b00:	97 95       	ror	r25
    2b02:	87 95       	ror	r24
    2b04:	77 95       	ror	r23
    2b06:	67 95       	ror	r22
    2b08:	57 95       	ror	r21
    2b0a:	47 95       	ror	r20
    2b0c:	37 95       	ror	r19
    2b0e:	27 95       	ror	r18
    2b10:	0a 95       	dec	r16
    2b12:	aa f7       	brpl	.-22     	; 0x2afe <__lshrdi3+0x1e>
    2b14:	0f 91       	pop	r16
    2b16:	08 95       	ret

00002b18 <__adddi3>:
    2b18:	2a 0d       	add	r18, r10
    2b1a:	3b 1d       	adc	r19, r11
    2b1c:	4c 1d       	adc	r20, r12
    2b1e:	5d 1d       	adc	r21, r13
    2b20:	6e 1d       	adc	r22, r14
    2b22:	7f 1d       	adc	r23, r15
    2b24:	80 1f       	adc	r24, r16
    2b26:	91 1f       	adc	r25, r17
    2b28:	08 95       	ret

00002b2a <__adddi3_s8>:
    2b2a:	00 24       	eor	r0, r0
    2b2c:	a7 fd       	sbrc	r26, 7
    2b2e:	00 94       	com	r0
    2b30:	2a 0f       	add	r18, r26
    2b32:	30 1d       	adc	r19, r0
    2b34:	40 1d       	adc	r20, r0
    2b36:	50 1d       	adc	r21, r0
    2b38:	60 1d       	adc	r22, r0
    2b3a:	70 1d       	adc	r23, r0
    2b3c:	80 1d       	adc	r24, r0
    2b3e:	90 1d       	adc	r25, r0
    2b40:	08 95       	ret

00002b42 <__subdi3>:
    2b42:	2a 19       	sub	r18, r10
    2b44:	3b 09       	sbc	r19, r11
    2b46:	4c 09       	sbc	r20, r12
    2b48:	5d 09       	sbc	r21, r13
    2b4a:	6e 09       	sbc	r22, r14
    2b4c:	7f 09       	sbc	r23, r15
    2b4e:	80 0b       	sbc	r24, r16
    2b50:	91 0b       	sbc	r25, r17
    2b52:	08 95       	ret

00002b54 <__cmpdi2_s8>:
    2b54:	00 24       	eor	r0, r0
    2b56:	a7 fd       	sbrc	r26, 7
    2b58:	00 94       	com	r0
    2b5a:	2a 17       	cp	r18, r26
    2b5c:	30 05       	cpc	r19, r0
    2b5e:	40 05       	cpc	r20, r0
    2b60:	50 05       	cpc	r21, r0
    2b62:	60 05       	cpc	r22, r0
    2b64:	70 05       	cpc	r23, r0
    2b66:	80 05       	cpc	r24, r0
    2b68:	90 05       	cpc	r25, r0
    2b6a:	08 95       	ret

00002b6c <__umulhisi3>:
    2b6c:	a2 9f       	mul	r26, r18
    2b6e:	b0 01       	movw	r22, r0
    2b70:	b3 9f       	mul	r27, r19
    2b72:	c0 01       	movw	r24, r0
    2b74:	a3 9f       	mul	r26, r19
    2b76:	70 0d       	add	r23, r0
    2b78:	81 1d       	adc	r24, r1
    2b7a:	11 24       	eor	r1, r1
    2b7c:	91 1d       	adc	r25, r1
    2b7e:	b2 9f       	mul	r27, r18
    2b80:	70 0d       	add	r23, r0
    2b82:	81 1d       	adc	r24, r1
    2b84:	11 24       	eor	r1, r1
    2b86:	91 1d       	adc	r25, r1
    2b88:	08 95       	ret

00002b8a <__ftoa_engine>:
    2b8a:	28 30       	cpi	r18, 0x08	; 8
    2b8c:	08 f0       	brcs	.+2      	; 0x2b90 <__ftoa_engine+0x6>
    2b8e:	27 e0       	ldi	r18, 0x07	; 7
    2b90:	33 27       	eor	r19, r19
    2b92:	da 01       	movw	r26, r20
    2b94:	99 0f       	add	r25, r25
    2b96:	31 1d       	adc	r19, r1
    2b98:	87 fd       	sbrc	r24, 7
    2b9a:	91 60       	ori	r25, 0x01	; 1
    2b9c:	00 96       	adiw	r24, 0x00	; 0
    2b9e:	61 05       	cpc	r22, r1
    2ba0:	71 05       	cpc	r23, r1
    2ba2:	39 f4       	brne	.+14     	; 0x2bb2 <__ftoa_engine+0x28>
    2ba4:	32 60       	ori	r19, 0x02	; 2
    2ba6:	2e 5f       	subi	r18, 0xFE	; 254
    2ba8:	3d 93       	st	X+, r19
    2baa:	30 e3       	ldi	r19, 0x30	; 48
    2bac:	2a 95       	dec	r18
    2bae:	e1 f7       	brne	.-8      	; 0x2ba8 <__ftoa_engine+0x1e>
    2bb0:	08 95       	ret
    2bb2:	9f 3f       	cpi	r25, 0xFF	; 255
    2bb4:	30 f0       	brcs	.+12     	; 0x2bc2 <__ftoa_engine+0x38>
    2bb6:	80 38       	cpi	r24, 0x80	; 128
    2bb8:	71 05       	cpc	r23, r1
    2bba:	61 05       	cpc	r22, r1
    2bbc:	09 f0       	breq	.+2      	; 0x2bc0 <__ftoa_engine+0x36>
    2bbe:	3c 5f       	subi	r19, 0xFC	; 252
    2bc0:	3c 5f       	subi	r19, 0xFC	; 252
    2bc2:	3d 93       	st	X+, r19
    2bc4:	91 30       	cpi	r25, 0x01	; 1
    2bc6:	08 f0       	brcs	.+2      	; 0x2bca <__ftoa_engine+0x40>
    2bc8:	80 68       	ori	r24, 0x80	; 128
    2bca:	91 1d       	adc	r25, r1
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	1f 93       	push	r17
    2bd2:	0f 93       	push	r16
    2bd4:	ff 92       	push	r15
    2bd6:	ef 92       	push	r14
    2bd8:	19 2f       	mov	r17, r25
    2bda:	98 7f       	andi	r25, 0xF8	; 248
    2bdc:	96 95       	lsr	r25
    2bde:	e9 2f       	mov	r30, r25
    2be0:	96 95       	lsr	r25
    2be2:	96 95       	lsr	r25
    2be4:	e9 0f       	add	r30, r25
    2be6:	ff 27       	eor	r31, r31
    2be8:	e0 55       	subi	r30, 0x50	; 80
    2bea:	fd 4f       	sbci	r31, 0xFD	; 253
    2bec:	99 27       	eor	r25, r25
    2bee:	33 27       	eor	r19, r19
    2bf0:	ee 24       	eor	r14, r14
    2bf2:	ff 24       	eor	r15, r15
    2bf4:	a7 01       	movw	r20, r14
    2bf6:	e7 01       	movw	r28, r14
    2bf8:	05 90       	lpm	r0, Z+
    2bfa:	08 94       	sec
    2bfc:	07 94       	ror	r0
    2bfe:	28 f4       	brcc	.+10     	; 0x2c0a <__ftoa_engine+0x80>
    2c00:	36 0f       	add	r19, r22
    2c02:	e7 1e       	adc	r14, r23
    2c04:	f8 1e       	adc	r15, r24
    2c06:	49 1f       	adc	r20, r25
    2c08:	51 1d       	adc	r21, r1
    2c0a:	66 0f       	add	r22, r22
    2c0c:	77 1f       	adc	r23, r23
    2c0e:	88 1f       	adc	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	06 94       	lsr	r0
    2c14:	a1 f7       	brne	.-24     	; 0x2bfe <__ftoa_engine+0x74>
    2c16:	05 90       	lpm	r0, Z+
    2c18:	07 94       	ror	r0
    2c1a:	28 f4       	brcc	.+10     	; 0x2c26 <__ftoa_engine+0x9c>
    2c1c:	e7 0e       	add	r14, r23
    2c1e:	f8 1e       	adc	r15, r24
    2c20:	49 1f       	adc	r20, r25
    2c22:	56 1f       	adc	r21, r22
    2c24:	c1 1d       	adc	r28, r1
    2c26:	77 0f       	add	r23, r23
    2c28:	88 1f       	adc	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	66 1f       	adc	r22, r22
    2c2e:	06 94       	lsr	r0
    2c30:	a1 f7       	brne	.-24     	; 0x2c1a <__ftoa_engine+0x90>
    2c32:	05 90       	lpm	r0, Z+
    2c34:	07 94       	ror	r0
    2c36:	28 f4       	brcc	.+10     	; 0x2c42 <__ftoa_engine+0xb8>
    2c38:	f8 0e       	add	r15, r24
    2c3a:	49 1f       	adc	r20, r25
    2c3c:	56 1f       	adc	r21, r22
    2c3e:	c7 1f       	adc	r28, r23
    2c40:	d1 1d       	adc	r29, r1
    2c42:	88 0f       	add	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	66 1f       	adc	r22, r22
    2c48:	77 1f       	adc	r23, r23
    2c4a:	06 94       	lsr	r0
    2c4c:	a1 f7       	brne	.-24     	; 0x2c36 <__ftoa_engine+0xac>
    2c4e:	05 90       	lpm	r0, Z+
    2c50:	07 94       	ror	r0
    2c52:	20 f4       	brcc	.+8      	; 0x2c5c <__ftoa_engine+0xd2>
    2c54:	49 0f       	add	r20, r25
    2c56:	56 1f       	adc	r21, r22
    2c58:	c7 1f       	adc	r28, r23
    2c5a:	d8 1f       	adc	r29, r24
    2c5c:	99 0f       	add	r25, r25
    2c5e:	66 1f       	adc	r22, r22
    2c60:	77 1f       	adc	r23, r23
    2c62:	88 1f       	adc	r24, r24
    2c64:	06 94       	lsr	r0
    2c66:	a9 f7       	brne	.-22     	; 0x2c52 <__ftoa_engine+0xc8>
    2c68:	84 91       	lpm	r24, Z
    2c6a:	10 95       	com	r17
    2c6c:	17 70       	andi	r17, 0x07	; 7
    2c6e:	41 f0       	breq	.+16     	; 0x2c80 <__ftoa_engine+0xf6>
    2c70:	d6 95       	lsr	r29
    2c72:	c7 95       	ror	r28
    2c74:	57 95       	ror	r21
    2c76:	47 95       	ror	r20
    2c78:	f7 94       	ror	r15
    2c7a:	e7 94       	ror	r14
    2c7c:	1a 95       	dec	r17
    2c7e:	c1 f7       	brne	.-16     	; 0x2c70 <__ftoa_engine+0xe6>
    2c80:	e6 e5       	ldi	r30, 0x56	; 86
    2c82:	f2 e0       	ldi	r31, 0x02	; 2
    2c84:	68 94       	set
    2c86:	15 90       	lpm	r1, Z+
    2c88:	15 91       	lpm	r17, Z+
    2c8a:	35 91       	lpm	r19, Z+
    2c8c:	65 91       	lpm	r22, Z+
    2c8e:	95 91       	lpm	r25, Z+
    2c90:	05 90       	lpm	r0, Z+
    2c92:	7f e2       	ldi	r23, 0x2F	; 47
    2c94:	73 95       	inc	r23
    2c96:	e1 18       	sub	r14, r1
    2c98:	f1 0a       	sbc	r15, r17
    2c9a:	43 0b       	sbc	r20, r19
    2c9c:	56 0b       	sbc	r21, r22
    2c9e:	c9 0b       	sbc	r28, r25
    2ca0:	d0 09       	sbc	r29, r0
    2ca2:	c0 f7       	brcc	.-16     	; 0x2c94 <__ftoa_engine+0x10a>
    2ca4:	e1 0c       	add	r14, r1
    2ca6:	f1 1e       	adc	r15, r17
    2ca8:	43 1f       	adc	r20, r19
    2caa:	56 1f       	adc	r21, r22
    2cac:	c9 1f       	adc	r28, r25
    2cae:	d0 1d       	adc	r29, r0
    2cb0:	7e f4       	brtc	.+30     	; 0x2cd0 <__ftoa_engine+0x146>
    2cb2:	70 33       	cpi	r23, 0x30	; 48
    2cb4:	11 f4       	brne	.+4      	; 0x2cba <__ftoa_engine+0x130>
    2cb6:	8a 95       	dec	r24
    2cb8:	e6 cf       	rjmp	.-52     	; 0x2c86 <__ftoa_engine+0xfc>
    2cba:	e8 94       	clt
    2cbc:	01 50       	subi	r16, 0x01	; 1
    2cbe:	30 f0       	brcs	.+12     	; 0x2ccc <__ftoa_engine+0x142>
    2cc0:	08 0f       	add	r16, r24
    2cc2:	0a f4       	brpl	.+2      	; 0x2cc6 <__ftoa_engine+0x13c>
    2cc4:	00 27       	eor	r16, r16
    2cc6:	02 17       	cp	r16, r18
    2cc8:	08 f4       	brcc	.+2      	; 0x2ccc <__ftoa_engine+0x142>
    2cca:	20 2f       	mov	r18, r16
    2ccc:	23 95       	inc	r18
    2cce:	02 2f       	mov	r16, r18
    2cd0:	7a 33       	cpi	r23, 0x3A	; 58
    2cd2:	28 f0       	brcs	.+10     	; 0x2cde <__ftoa_engine+0x154>
    2cd4:	79 e3       	ldi	r23, 0x39	; 57
    2cd6:	7d 93       	st	X+, r23
    2cd8:	2a 95       	dec	r18
    2cda:	e9 f7       	brne	.-6      	; 0x2cd6 <__ftoa_engine+0x14c>
    2cdc:	10 c0       	rjmp	.+32     	; 0x2cfe <__ftoa_engine+0x174>
    2cde:	7d 93       	st	X+, r23
    2ce0:	2a 95       	dec	r18
    2ce2:	89 f6       	brne	.-94     	; 0x2c86 <__ftoa_engine+0xfc>
    2ce4:	06 94       	lsr	r0
    2ce6:	97 95       	ror	r25
    2ce8:	67 95       	ror	r22
    2cea:	37 95       	ror	r19
    2cec:	17 95       	ror	r17
    2cee:	17 94       	ror	r1
    2cf0:	e1 18       	sub	r14, r1
    2cf2:	f1 0a       	sbc	r15, r17
    2cf4:	43 0b       	sbc	r20, r19
    2cf6:	56 0b       	sbc	r21, r22
    2cf8:	c9 0b       	sbc	r28, r25
    2cfa:	d0 09       	sbc	r29, r0
    2cfc:	98 f0       	brcs	.+38     	; 0x2d24 <__ftoa_engine+0x19a>
    2cfe:	23 95       	inc	r18
    2d00:	7e 91       	ld	r23, -X
    2d02:	73 95       	inc	r23
    2d04:	7a 33       	cpi	r23, 0x3A	; 58
    2d06:	08 f0       	brcs	.+2      	; 0x2d0a <__ftoa_engine+0x180>
    2d08:	70 e3       	ldi	r23, 0x30	; 48
    2d0a:	7c 93       	st	X, r23
    2d0c:	20 13       	cpse	r18, r16
    2d0e:	b8 f7       	brcc	.-18     	; 0x2cfe <__ftoa_engine+0x174>
    2d10:	7e 91       	ld	r23, -X
    2d12:	70 61       	ori	r23, 0x10	; 16
    2d14:	7d 93       	st	X+, r23
    2d16:	30 f0       	brcs	.+12     	; 0x2d24 <__ftoa_engine+0x19a>
    2d18:	83 95       	inc	r24
    2d1a:	71 e3       	ldi	r23, 0x31	; 49
    2d1c:	7d 93       	st	X+, r23
    2d1e:	70 e3       	ldi	r23, 0x30	; 48
    2d20:	2a 95       	dec	r18
    2d22:	e1 f7       	brne	.-8      	; 0x2d1c <__ftoa_engine+0x192>
    2d24:	11 24       	eor	r1, r1
    2d26:	ef 90       	pop	r14
    2d28:	ff 90       	pop	r15
    2d2a:	0f 91       	pop	r16
    2d2c:	1f 91       	pop	r17
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	99 27       	eor	r25, r25
    2d34:	87 fd       	sbrc	r24, 7
    2d36:	90 95       	com	r25
    2d38:	08 95       	ret

00002d3a <strnlen_P>:
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	05 90       	lpm	r0, Z+
    2d3e:	61 50       	subi	r22, 0x01	; 1
    2d40:	70 40       	sbci	r23, 0x00	; 0
    2d42:	01 10       	cpse	r0, r1
    2d44:	d8 f7       	brcc	.-10     	; 0x2d3c <strnlen_P+0x2>
    2d46:	80 95       	com	r24
    2d48:	90 95       	com	r25
    2d4a:	8e 0f       	add	r24, r30
    2d4c:	9f 1f       	adc	r25, r31
    2d4e:	08 95       	ret

00002d50 <strnlen>:
    2d50:	fc 01       	movw	r30, r24
    2d52:	61 50       	subi	r22, 0x01	; 1
    2d54:	70 40       	sbci	r23, 0x00	; 0
    2d56:	01 90       	ld	r0, Z+
    2d58:	01 10       	cpse	r0, r1
    2d5a:	d8 f7       	brcc	.-10     	; 0x2d52 <strnlen+0x2>
    2d5c:	80 95       	com	r24
    2d5e:	90 95       	com	r25
    2d60:	8e 0f       	add	r24, r30
    2d62:	9f 1f       	adc	r25, r31
    2d64:	08 95       	ret

00002d66 <fdevopen>:
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	31 f4       	brne	.+12     	; 0x2d7e <fdevopen+0x18>
    2d72:	61 15       	cp	r22, r1
    2d74:	71 05       	cpc	r23, r1
    2d76:	19 f4       	brne	.+6      	; 0x2d7e <fdevopen+0x18>
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	39 c0       	rjmp	.+114    	; 0x2df0 <fdevopen+0x8a>
    2d7e:	8b 01       	movw	r16, r22
    2d80:	ec 01       	movw	r28, r24
    2d82:	6e e0       	ldi	r22, 0x0E	; 14
    2d84:	70 e0       	ldi	r23, 0x00	; 0
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	e0 d0       	rcall	.+448    	; 0x2f4c <calloc>
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	89 2b       	or	r24, r25
    2d90:	99 f3       	breq	.-26     	; 0x2d78 <fdevopen+0x12>
    2d92:	80 e8       	ldi	r24, 0x80	; 128
    2d94:	83 83       	std	Z+3, r24	; 0x03
    2d96:	01 15       	cp	r16, r1
    2d98:	11 05       	cpc	r17, r1
    2d9a:	71 f0       	breq	.+28     	; 0x2db8 <fdevopen+0x52>
    2d9c:	02 87       	std	Z+10, r16	; 0x0a
    2d9e:	13 87       	std	Z+11, r17	; 0x0b
    2da0:	81 e8       	ldi	r24, 0x81	; 129
    2da2:	83 83       	std	Z+3, r24	; 0x03
    2da4:	80 91 64 20 	lds	r24, 0x2064	; 0x802064 <__iob>
    2da8:	90 91 65 20 	lds	r25, 0x2065	; 0x802065 <__iob+0x1>
    2dac:	89 2b       	or	r24, r25
    2dae:	21 f4       	brne	.+8      	; 0x2db8 <fdevopen+0x52>
    2db0:	e0 93 64 20 	sts	0x2064, r30	; 0x802064 <__iob>
    2db4:	f0 93 65 20 	sts	0x2065, r31	; 0x802065 <__iob+0x1>
    2db8:	20 97       	sbiw	r28, 0x00	; 0
    2dba:	c9 f0       	breq	.+50     	; 0x2dee <fdevopen+0x88>
    2dbc:	c0 87       	std	Z+8, r28	; 0x08
    2dbe:	d1 87       	std	Z+9, r29	; 0x09
    2dc0:	83 81       	ldd	r24, Z+3	; 0x03
    2dc2:	82 60       	ori	r24, 0x02	; 2
    2dc4:	83 83       	std	Z+3, r24	; 0x03
    2dc6:	80 91 66 20 	lds	r24, 0x2066	; 0x802066 <__iob+0x2>
    2dca:	90 91 67 20 	lds	r25, 0x2067	; 0x802067 <__iob+0x3>
    2dce:	89 2b       	or	r24, r25
    2dd0:	71 f4       	brne	.+28     	; 0x2dee <fdevopen+0x88>
    2dd2:	e0 93 66 20 	sts	0x2066, r30	; 0x802066 <__iob+0x2>
    2dd6:	f0 93 67 20 	sts	0x2067, r31	; 0x802067 <__iob+0x3>
    2dda:	80 91 68 20 	lds	r24, 0x2068	; 0x802068 <__iob+0x4>
    2dde:	90 91 69 20 	lds	r25, 0x2069	; 0x802069 <__iob+0x5>
    2de2:	89 2b       	or	r24, r25
    2de4:	21 f4       	brne	.+8      	; 0x2dee <fdevopen+0x88>
    2de6:	e0 93 68 20 	sts	0x2068, r30	; 0x802068 <__iob+0x4>
    2dea:	f0 93 69 20 	sts	0x2069, r31	; 0x802069 <__iob+0x5>
    2dee:	cf 01       	movw	r24, r30
    2df0:	df 91       	pop	r29
    2df2:	cf 91       	pop	r28
    2df4:	1f 91       	pop	r17
    2df6:	0f 91       	pop	r16
    2df8:	08 95       	ret

00002dfa <fputc>:
    2dfa:	0f 93       	push	r16
    2dfc:	1f 93       	push	r17
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	fb 01       	movw	r30, r22
    2e04:	23 81       	ldd	r18, Z+3	; 0x03
    2e06:	21 fd       	sbrc	r18, 1
    2e08:	03 c0       	rjmp	.+6      	; 0x2e10 <fputc+0x16>
    2e0a:	8f ef       	ldi	r24, 0xFF	; 255
    2e0c:	9f ef       	ldi	r25, 0xFF	; 255
    2e0e:	28 c0       	rjmp	.+80     	; 0x2e60 <fputc+0x66>
    2e10:	22 ff       	sbrs	r18, 2
    2e12:	16 c0       	rjmp	.+44     	; 0x2e40 <fputc+0x46>
    2e14:	46 81       	ldd	r20, Z+6	; 0x06
    2e16:	57 81       	ldd	r21, Z+7	; 0x07
    2e18:	24 81       	ldd	r18, Z+4	; 0x04
    2e1a:	35 81       	ldd	r19, Z+5	; 0x05
    2e1c:	42 17       	cp	r20, r18
    2e1e:	53 07       	cpc	r21, r19
    2e20:	44 f4       	brge	.+16     	; 0x2e32 <fputc+0x38>
    2e22:	a0 81       	ld	r26, Z
    2e24:	b1 81       	ldd	r27, Z+1	; 0x01
    2e26:	9d 01       	movw	r18, r26
    2e28:	2f 5f       	subi	r18, 0xFF	; 255
    2e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2c:	20 83       	st	Z, r18
    2e2e:	31 83       	std	Z+1, r19	; 0x01
    2e30:	8c 93       	st	X, r24
    2e32:	26 81       	ldd	r18, Z+6	; 0x06
    2e34:	37 81       	ldd	r19, Z+7	; 0x07
    2e36:	2f 5f       	subi	r18, 0xFF	; 255
    2e38:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3a:	26 83       	std	Z+6, r18	; 0x06
    2e3c:	37 83       	std	Z+7, r19	; 0x07
    2e3e:	10 c0       	rjmp	.+32     	; 0x2e60 <fputc+0x66>
    2e40:	eb 01       	movw	r28, r22
    2e42:	09 2f       	mov	r16, r25
    2e44:	18 2f       	mov	r17, r24
    2e46:	00 84       	ldd	r0, Z+8	; 0x08
    2e48:	f1 85       	ldd	r31, Z+9	; 0x09
    2e4a:	e0 2d       	mov	r30, r0
    2e4c:	19 95       	eicall
    2e4e:	89 2b       	or	r24, r25
    2e50:	e1 f6       	brne	.-72     	; 0x2e0a <fputc+0x10>
    2e52:	8e 81       	ldd	r24, Y+6	; 0x06
    2e54:	9f 81       	ldd	r25, Y+7	; 0x07
    2e56:	01 96       	adiw	r24, 0x01	; 1
    2e58:	8e 83       	std	Y+6, r24	; 0x06
    2e5a:	9f 83       	std	Y+7, r25	; 0x07
    2e5c:	81 2f       	mov	r24, r17
    2e5e:	90 2f       	mov	r25, r16
    2e60:	df 91       	pop	r29
    2e62:	cf 91       	pop	r28
    2e64:	1f 91       	pop	r17
    2e66:	0f 91       	pop	r16
    2e68:	08 95       	ret

00002e6a <printf>:
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	ae 01       	movw	r20, r28
    2e74:	4a 5f       	subi	r20, 0xFA	; 250
    2e76:	5f 4f       	sbci	r21, 0xFF	; 255
    2e78:	fa 01       	movw	r30, r20
    2e7a:	61 91       	ld	r22, Z+
    2e7c:	71 91       	ld	r23, Z+
    2e7e:	af 01       	movw	r20, r30
    2e80:	80 91 66 20 	lds	r24, 0x2066	; 0x802066 <__iob+0x2>
    2e84:	90 91 67 20 	lds	r25, 0x2067	; 0x802067 <__iob+0x3>
    2e88:	fd d9       	rcall	.-3078   	; 0x2284 <vfprintf>
    2e8a:	df 91       	pop	r29
    2e8c:	cf 91       	pop	r28
    2e8e:	08 95       	ret

00002e90 <__ultoa_invert>:
    2e90:	fa 01       	movw	r30, r20
    2e92:	aa 27       	eor	r26, r26
    2e94:	28 30       	cpi	r18, 0x08	; 8
    2e96:	51 f1       	breq	.+84     	; 0x2eec <__ultoa_invert+0x5c>
    2e98:	20 31       	cpi	r18, 0x10	; 16
    2e9a:	81 f1       	breq	.+96     	; 0x2efc <__ultoa_invert+0x6c>
    2e9c:	e8 94       	clt
    2e9e:	6f 93       	push	r22
    2ea0:	6e 7f       	andi	r22, 0xFE	; 254
    2ea2:	6e 5f       	subi	r22, 0xFE	; 254
    2ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eaa:	af 4f       	sbci	r26, 0xFF	; 255
    2eac:	b1 e0       	ldi	r27, 0x01	; 1
    2eae:	3e d0       	rcall	.+124    	; 0x2f2c <__ultoa_invert+0x9c>
    2eb0:	b4 e0       	ldi	r27, 0x04	; 4
    2eb2:	3c d0       	rcall	.+120    	; 0x2f2c <__ultoa_invert+0x9c>
    2eb4:	67 0f       	add	r22, r23
    2eb6:	78 1f       	adc	r23, r24
    2eb8:	89 1f       	adc	r24, r25
    2eba:	9a 1f       	adc	r25, r26
    2ebc:	a1 1d       	adc	r26, r1
    2ebe:	68 0f       	add	r22, r24
    2ec0:	79 1f       	adc	r23, r25
    2ec2:	8a 1f       	adc	r24, r26
    2ec4:	91 1d       	adc	r25, r1
    2ec6:	a1 1d       	adc	r26, r1
    2ec8:	6a 0f       	add	r22, r26
    2eca:	71 1d       	adc	r23, r1
    2ecc:	81 1d       	adc	r24, r1
    2ece:	91 1d       	adc	r25, r1
    2ed0:	a1 1d       	adc	r26, r1
    2ed2:	20 d0       	rcall	.+64     	; 0x2f14 <__ultoa_invert+0x84>
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <__ultoa_invert+0x48>
    2ed6:	68 94       	set
    2ed8:	3f 91       	pop	r19
    2eda:	2a e0       	ldi	r18, 0x0A	; 10
    2edc:	26 9f       	mul	r18, r22
    2ede:	11 24       	eor	r1, r1
    2ee0:	30 19       	sub	r19, r0
    2ee2:	30 5d       	subi	r19, 0xD0	; 208
    2ee4:	31 93       	st	Z+, r19
    2ee6:	de f6       	brtc	.-74     	; 0x2e9e <__ultoa_invert+0xe>
    2ee8:	cf 01       	movw	r24, r30
    2eea:	08 95       	ret
    2eec:	46 2f       	mov	r20, r22
    2eee:	47 70       	andi	r20, 0x07	; 7
    2ef0:	40 5d       	subi	r20, 0xD0	; 208
    2ef2:	41 93       	st	Z+, r20
    2ef4:	b3 e0       	ldi	r27, 0x03	; 3
    2ef6:	0f d0       	rcall	.+30     	; 0x2f16 <__ultoa_invert+0x86>
    2ef8:	c9 f7       	brne	.-14     	; 0x2eec <__ultoa_invert+0x5c>
    2efa:	f6 cf       	rjmp	.-20     	; 0x2ee8 <__ultoa_invert+0x58>
    2efc:	46 2f       	mov	r20, r22
    2efe:	4f 70       	andi	r20, 0x0F	; 15
    2f00:	40 5d       	subi	r20, 0xD0	; 208
    2f02:	4a 33       	cpi	r20, 0x3A	; 58
    2f04:	18 f0       	brcs	.+6      	; 0x2f0c <__ultoa_invert+0x7c>
    2f06:	49 5d       	subi	r20, 0xD9	; 217
    2f08:	31 fd       	sbrc	r19, 1
    2f0a:	40 52       	subi	r20, 0x20	; 32
    2f0c:	41 93       	st	Z+, r20
    2f0e:	02 d0       	rcall	.+4      	; 0x2f14 <__ultoa_invert+0x84>
    2f10:	a9 f7       	brne	.-22     	; 0x2efc <__ultoa_invert+0x6c>
    2f12:	ea cf       	rjmp	.-44     	; 0x2ee8 <__ultoa_invert+0x58>
    2f14:	b4 e0       	ldi	r27, 0x04	; 4
    2f16:	a6 95       	lsr	r26
    2f18:	97 95       	ror	r25
    2f1a:	87 95       	ror	r24
    2f1c:	77 95       	ror	r23
    2f1e:	67 95       	ror	r22
    2f20:	ba 95       	dec	r27
    2f22:	c9 f7       	brne	.-14     	; 0x2f16 <__ultoa_invert+0x86>
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	61 05       	cpc	r22, r1
    2f28:	71 05       	cpc	r23, r1
    2f2a:	08 95       	ret
    2f2c:	9b 01       	movw	r18, r22
    2f2e:	ac 01       	movw	r20, r24
    2f30:	0a 2e       	mov	r0, r26
    2f32:	06 94       	lsr	r0
    2f34:	57 95       	ror	r21
    2f36:	47 95       	ror	r20
    2f38:	37 95       	ror	r19
    2f3a:	27 95       	ror	r18
    2f3c:	ba 95       	dec	r27
    2f3e:	c9 f7       	brne	.-14     	; 0x2f32 <__ultoa_invert+0xa2>
    2f40:	62 0f       	add	r22, r18
    2f42:	73 1f       	adc	r23, r19
    2f44:	84 1f       	adc	r24, r20
    2f46:	95 1f       	adc	r25, r21
    2f48:	a0 1d       	adc	r26, r0
    2f4a:	08 95       	ret

00002f4c <calloc>:
    2f4c:	0f 93       	push	r16
    2f4e:	1f 93       	push	r17
    2f50:	cf 93       	push	r28
    2f52:	df 93       	push	r29
    2f54:	86 9f       	mul	r24, r22
    2f56:	80 01       	movw	r16, r0
    2f58:	87 9f       	mul	r24, r23
    2f5a:	10 0d       	add	r17, r0
    2f5c:	96 9f       	mul	r25, r22
    2f5e:	10 0d       	add	r17, r0
    2f60:	11 24       	eor	r1, r1
    2f62:	c8 01       	movw	r24, r16
    2f64:	0d d0       	rcall	.+26     	; 0x2f80 <malloc>
    2f66:	ec 01       	movw	r28, r24
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	21 f0       	breq	.+8      	; 0x2f74 <calloc+0x28>
    2f6c:	a8 01       	movw	r20, r16
    2f6e:	60 e0       	ldi	r22, 0x00	; 0
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	33 d1       	rcall	.+614    	; 0x31da <memset>
    2f74:	ce 01       	movw	r24, r28
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	1f 91       	pop	r17
    2f7c:	0f 91       	pop	r16
    2f7e:	08 95       	ret

00002f80 <malloc>:
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	82 30       	cpi	r24, 0x02	; 2
    2f86:	91 05       	cpc	r25, r1
    2f88:	10 f4       	brcc	.+4      	; 0x2f8e <malloc+0xe>
    2f8a:	82 e0       	ldi	r24, 0x02	; 2
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	e0 91 6c 20 	lds	r30, 0x206C	; 0x80206c <__flp>
    2f92:	f0 91 6d 20 	lds	r31, 0x206D	; 0x80206d <__flp+0x1>
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	c0 e0       	ldi	r28, 0x00	; 0
    2f9c:	d0 e0       	ldi	r29, 0x00	; 0
    2f9e:	30 97       	sbiw	r30, 0x00	; 0
    2fa0:	11 f1       	breq	.+68     	; 0x2fe6 <malloc+0x66>
    2fa2:	40 81       	ld	r20, Z
    2fa4:	51 81       	ldd	r21, Z+1	; 0x01
    2fa6:	48 17       	cp	r20, r24
    2fa8:	59 07       	cpc	r21, r25
    2faa:	c0 f0       	brcs	.+48     	; 0x2fdc <malloc+0x5c>
    2fac:	48 17       	cp	r20, r24
    2fae:	59 07       	cpc	r21, r25
    2fb0:	61 f4       	brne	.+24     	; 0x2fca <malloc+0x4a>
    2fb2:	82 81       	ldd	r24, Z+2	; 0x02
    2fb4:	93 81       	ldd	r25, Z+3	; 0x03
    2fb6:	20 97       	sbiw	r28, 0x00	; 0
    2fb8:	19 f0       	breq	.+6      	; 0x2fc0 <malloc+0x40>
    2fba:	8a 83       	std	Y+2, r24	; 0x02
    2fbc:	9b 83       	std	Y+3, r25	; 0x03
    2fbe:	2b c0       	rjmp	.+86     	; 0x3016 <malloc+0x96>
    2fc0:	80 93 6c 20 	sts	0x206C, r24	; 0x80206c <__flp>
    2fc4:	90 93 6d 20 	sts	0x206D, r25	; 0x80206d <__flp+0x1>
    2fc8:	26 c0       	rjmp	.+76     	; 0x3016 <malloc+0x96>
    2fca:	21 15       	cp	r18, r1
    2fcc:	31 05       	cpc	r19, r1
    2fce:	19 f0       	breq	.+6      	; 0x2fd6 <malloc+0x56>
    2fd0:	42 17       	cp	r20, r18
    2fd2:	53 07       	cpc	r21, r19
    2fd4:	18 f4       	brcc	.+6      	; 0x2fdc <malloc+0x5c>
    2fd6:	9a 01       	movw	r18, r20
    2fd8:	be 01       	movw	r22, r28
    2fda:	df 01       	movw	r26, r30
    2fdc:	ef 01       	movw	r28, r30
    2fde:	02 80       	ldd	r0, Z+2	; 0x02
    2fe0:	f3 81       	ldd	r31, Z+3	; 0x03
    2fe2:	e0 2d       	mov	r30, r0
    2fe4:	dc cf       	rjmp	.-72     	; 0x2f9e <malloc+0x1e>
    2fe6:	21 15       	cp	r18, r1
    2fe8:	31 05       	cpc	r19, r1
    2fea:	09 f1       	breq	.+66     	; 0x302e <malloc+0xae>
    2fec:	28 1b       	sub	r18, r24
    2fee:	39 0b       	sbc	r19, r25
    2ff0:	24 30       	cpi	r18, 0x04	; 4
    2ff2:	31 05       	cpc	r19, r1
    2ff4:	90 f4       	brcc	.+36     	; 0x301a <malloc+0x9a>
    2ff6:	12 96       	adiw	r26, 0x02	; 2
    2ff8:	8d 91       	ld	r24, X+
    2ffa:	9c 91       	ld	r25, X
    2ffc:	13 97       	sbiw	r26, 0x03	; 3
    2ffe:	61 15       	cp	r22, r1
    3000:	71 05       	cpc	r23, r1
    3002:	21 f0       	breq	.+8      	; 0x300c <malloc+0x8c>
    3004:	fb 01       	movw	r30, r22
    3006:	82 83       	std	Z+2, r24	; 0x02
    3008:	93 83       	std	Z+3, r25	; 0x03
    300a:	04 c0       	rjmp	.+8      	; 0x3014 <malloc+0x94>
    300c:	80 93 6c 20 	sts	0x206C, r24	; 0x80206c <__flp>
    3010:	90 93 6d 20 	sts	0x206D, r25	; 0x80206d <__flp+0x1>
    3014:	fd 01       	movw	r30, r26
    3016:	32 96       	adiw	r30, 0x02	; 2
    3018:	44 c0       	rjmp	.+136    	; 0x30a2 <malloc+0x122>
    301a:	fd 01       	movw	r30, r26
    301c:	e2 0f       	add	r30, r18
    301e:	f3 1f       	adc	r31, r19
    3020:	81 93       	st	Z+, r24
    3022:	91 93       	st	Z+, r25
    3024:	22 50       	subi	r18, 0x02	; 2
    3026:	31 09       	sbc	r19, r1
    3028:	2d 93       	st	X+, r18
    302a:	3c 93       	st	X, r19
    302c:	3a c0       	rjmp	.+116    	; 0x30a2 <malloc+0x122>
    302e:	20 91 6a 20 	lds	r18, 0x206A	; 0x80206a <__brkval>
    3032:	30 91 6b 20 	lds	r19, 0x206B	; 0x80206b <__brkval+0x1>
    3036:	23 2b       	or	r18, r19
    3038:	41 f4       	brne	.+16     	; 0x304a <malloc+0xca>
    303a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    303e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    3042:	20 93 6a 20 	sts	0x206A, r18	; 0x80206a <__brkval>
    3046:	30 93 6b 20 	sts	0x206B, r19	; 0x80206b <__brkval+0x1>
    304a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    304e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    3052:	21 15       	cp	r18, r1
    3054:	31 05       	cpc	r19, r1
    3056:	41 f4       	brne	.+16     	; 0x3068 <malloc+0xe8>
    3058:	2d b7       	in	r18, 0x3d	; 61
    305a:	3e b7       	in	r19, 0x3e	; 62
    305c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    3060:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    3064:	24 1b       	sub	r18, r20
    3066:	35 0b       	sbc	r19, r21
    3068:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <__brkval>
    306c:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <__brkval+0x1>
    3070:	e2 17       	cp	r30, r18
    3072:	f3 07       	cpc	r31, r19
    3074:	a0 f4       	brcc	.+40     	; 0x309e <malloc+0x11e>
    3076:	2e 1b       	sub	r18, r30
    3078:	3f 0b       	sbc	r19, r31
    307a:	28 17       	cp	r18, r24
    307c:	39 07       	cpc	r19, r25
    307e:	78 f0       	brcs	.+30     	; 0x309e <malloc+0x11e>
    3080:	ac 01       	movw	r20, r24
    3082:	4e 5f       	subi	r20, 0xFE	; 254
    3084:	5f 4f       	sbci	r21, 0xFF	; 255
    3086:	24 17       	cp	r18, r20
    3088:	35 07       	cpc	r19, r21
    308a:	48 f0       	brcs	.+18     	; 0x309e <malloc+0x11e>
    308c:	4e 0f       	add	r20, r30
    308e:	5f 1f       	adc	r21, r31
    3090:	40 93 6a 20 	sts	0x206A, r20	; 0x80206a <__brkval>
    3094:	50 93 6b 20 	sts	0x206B, r21	; 0x80206b <__brkval+0x1>
    3098:	81 93       	st	Z+, r24
    309a:	91 93       	st	Z+, r25
    309c:	02 c0       	rjmp	.+4      	; 0x30a2 <malloc+0x122>
    309e:	e0 e0       	ldi	r30, 0x00	; 0
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	cf 01       	movw	r24, r30
    30a4:	df 91       	pop	r29
    30a6:	cf 91       	pop	r28
    30a8:	08 95       	ret

000030aa <free>:
    30aa:	0f 93       	push	r16
    30ac:	1f 93       	push	r17
    30ae:	cf 93       	push	r28
    30b0:	df 93       	push	r29
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <free+0xe>
    30b6:	8c c0       	rjmp	.+280    	; 0x31d0 <free+0x126>
    30b8:	fc 01       	movw	r30, r24
    30ba:	32 97       	sbiw	r30, 0x02	; 2
    30bc:	12 82       	std	Z+2, r1	; 0x02
    30be:	13 82       	std	Z+3, r1	; 0x03
    30c0:	00 91 6c 20 	lds	r16, 0x206C	; 0x80206c <__flp>
    30c4:	10 91 6d 20 	lds	r17, 0x206D	; 0x80206d <__flp+0x1>
    30c8:	01 15       	cp	r16, r1
    30ca:	11 05       	cpc	r17, r1
    30cc:	81 f4       	brne	.+32     	; 0x30ee <free+0x44>
    30ce:	20 81       	ld	r18, Z
    30d0:	31 81       	ldd	r19, Z+1	; 0x01
    30d2:	82 0f       	add	r24, r18
    30d4:	93 1f       	adc	r25, r19
    30d6:	20 91 6a 20 	lds	r18, 0x206A	; 0x80206a <__brkval>
    30da:	30 91 6b 20 	lds	r19, 0x206B	; 0x80206b <__brkval+0x1>
    30de:	28 17       	cp	r18, r24
    30e0:	39 07       	cpc	r19, r25
    30e2:	79 f5       	brne	.+94     	; 0x3142 <free+0x98>
    30e4:	e0 93 6a 20 	sts	0x206A, r30	; 0x80206a <__brkval>
    30e8:	f0 93 6b 20 	sts	0x206B, r31	; 0x80206b <__brkval+0x1>
    30ec:	71 c0       	rjmp	.+226    	; 0x31d0 <free+0x126>
    30ee:	d8 01       	movw	r26, r16
    30f0:	40 e0       	ldi	r20, 0x00	; 0
    30f2:	50 e0       	ldi	r21, 0x00	; 0
    30f4:	ae 17       	cp	r26, r30
    30f6:	bf 07       	cpc	r27, r31
    30f8:	50 f4       	brcc	.+20     	; 0x310e <free+0x64>
    30fa:	12 96       	adiw	r26, 0x02	; 2
    30fc:	2d 91       	ld	r18, X+
    30fe:	3c 91       	ld	r19, X
    3100:	13 97       	sbiw	r26, 0x03	; 3
    3102:	ad 01       	movw	r20, r26
    3104:	21 15       	cp	r18, r1
    3106:	31 05       	cpc	r19, r1
    3108:	09 f1       	breq	.+66     	; 0x314c <free+0xa2>
    310a:	d9 01       	movw	r26, r18
    310c:	f3 cf       	rjmp	.-26     	; 0x30f4 <free+0x4a>
    310e:	9d 01       	movw	r18, r26
    3110:	da 01       	movw	r26, r20
    3112:	22 83       	std	Z+2, r18	; 0x02
    3114:	33 83       	std	Z+3, r19	; 0x03
    3116:	60 81       	ld	r22, Z
    3118:	71 81       	ldd	r23, Z+1	; 0x01
    311a:	86 0f       	add	r24, r22
    311c:	97 1f       	adc	r25, r23
    311e:	82 17       	cp	r24, r18
    3120:	93 07       	cpc	r25, r19
    3122:	69 f4       	brne	.+26     	; 0x313e <free+0x94>
    3124:	ec 01       	movw	r28, r24
    3126:	28 81       	ld	r18, Y
    3128:	39 81       	ldd	r19, Y+1	; 0x01
    312a:	26 0f       	add	r18, r22
    312c:	37 1f       	adc	r19, r23
    312e:	2e 5f       	subi	r18, 0xFE	; 254
    3130:	3f 4f       	sbci	r19, 0xFF	; 255
    3132:	20 83       	st	Z, r18
    3134:	31 83       	std	Z+1, r19	; 0x01
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	9b 81       	ldd	r25, Y+3	; 0x03
    313a:	82 83       	std	Z+2, r24	; 0x02
    313c:	93 83       	std	Z+3, r25	; 0x03
    313e:	45 2b       	or	r20, r21
    3140:	29 f4       	brne	.+10     	; 0x314c <free+0xa2>
    3142:	e0 93 6c 20 	sts	0x206C, r30	; 0x80206c <__flp>
    3146:	f0 93 6d 20 	sts	0x206D, r31	; 0x80206d <__flp+0x1>
    314a:	42 c0       	rjmp	.+132    	; 0x31d0 <free+0x126>
    314c:	12 96       	adiw	r26, 0x02	; 2
    314e:	ed 93       	st	X+, r30
    3150:	fc 93       	st	X, r31
    3152:	13 97       	sbiw	r26, 0x03	; 3
    3154:	ed 01       	movw	r28, r26
    3156:	49 91       	ld	r20, Y+
    3158:	59 91       	ld	r21, Y+
    315a:	9e 01       	movw	r18, r28
    315c:	24 0f       	add	r18, r20
    315e:	35 1f       	adc	r19, r21
    3160:	e2 17       	cp	r30, r18
    3162:	f3 07       	cpc	r31, r19
    3164:	71 f4       	brne	.+28     	; 0x3182 <free+0xd8>
    3166:	80 81       	ld	r24, Z
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	84 0f       	add	r24, r20
    316c:	95 1f       	adc	r25, r21
    316e:	02 96       	adiw	r24, 0x02	; 2
    3170:	8d 93       	st	X+, r24
    3172:	9c 93       	st	X, r25
    3174:	11 97       	sbiw	r26, 0x01	; 1
    3176:	82 81       	ldd	r24, Z+2	; 0x02
    3178:	93 81       	ldd	r25, Z+3	; 0x03
    317a:	12 96       	adiw	r26, 0x02	; 2
    317c:	8d 93       	st	X+, r24
    317e:	9c 93       	st	X, r25
    3180:	13 97       	sbiw	r26, 0x03	; 3
    3182:	e0 e0       	ldi	r30, 0x00	; 0
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	d8 01       	movw	r26, r16
    3188:	12 96       	adiw	r26, 0x02	; 2
    318a:	8d 91       	ld	r24, X+
    318c:	9c 91       	ld	r25, X
    318e:	13 97       	sbiw	r26, 0x03	; 3
    3190:	00 97       	sbiw	r24, 0x00	; 0
    3192:	19 f0       	breq	.+6      	; 0x319a <free+0xf0>
    3194:	f8 01       	movw	r30, r16
    3196:	8c 01       	movw	r16, r24
    3198:	f6 cf       	rjmp	.-20     	; 0x3186 <free+0xdc>
    319a:	8d 91       	ld	r24, X+
    319c:	9c 91       	ld	r25, X
    319e:	98 01       	movw	r18, r16
    31a0:	2e 5f       	subi	r18, 0xFE	; 254
    31a2:	3f 4f       	sbci	r19, 0xFF	; 255
    31a4:	82 0f       	add	r24, r18
    31a6:	93 1f       	adc	r25, r19
    31a8:	20 91 6a 20 	lds	r18, 0x206A	; 0x80206a <__brkval>
    31ac:	30 91 6b 20 	lds	r19, 0x206B	; 0x80206b <__brkval+0x1>
    31b0:	28 17       	cp	r18, r24
    31b2:	39 07       	cpc	r19, r25
    31b4:	69 f4       	brne	.+26     	; 0x31d0 <free+0x126>
    31b6:	30 97       	sbiw	r30, 0x00	; 0
    31b8:	29 f4       	brne	.+10     	; 0x31c4 <free+0x11a>
    31ba:	10 92 6c 20 	sts	0x206C, r1	; 0x80206c <__flp>
    31be:	10 92 6d 20 	sts	0x206D, r1	; 0x80206d <__flp+0x1>
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <free+0x11e>
    31c4:	12 82       	std	Z+2, r1	; 0x02
    31c6:	13 82       	std	Z+3, r1	; 0x03
    31c8:	00 93 6a 20 	sts	0x206A, r16	; 0x80206a <__brkval>
    31cc:	10 93 6b 20 	sts	0x206B, r17	; 0x80206b <__brkval+0x1>
    31d0:	df 91       	pop	r29
    31d2:	cf 91       	pop	r28
    31d4:	1f 91       	pop	r17
    31d6:	0f 91       	pop	r16
    31d8:	08 95       	ret

000031da <memset>:
    31da:	dc 01       	movw	r26, r24
    31dc:	01 c0       	rjmp	.+2      	; 0x31e0 <memset+0x6>
    31de:	6d 93       	st	X+, r22
    31e0:	41 50       	subi	r20, 0x01	; 1
    31e2:	50 40       	sbci	r21, 0x00	; 0
    31e4:	e0 f7       	brcc	.-8      	; 0x31de <memset+0x4>
    31e6:	08 95       	ret

000031e8 <_exit>:
    31e8:	f8 94       	cli

000031ea <__stop_program>:
    31ea:	ff cf       	rjmp	.-2      	; 0x31ea <__stop_program>
