
TEAM2 ONE MONTH CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00802000  00002a3e  00002ad2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00802074  00802074  00002b46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ba4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  00002be8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d360  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002855  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ac60  00000000  00000000  00012c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ef8  00000000  00000000  0001d8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002b04b  00000000  00000000  0001e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000485e  00000000  00000000  000497f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  0004e058  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bc93  00000000  00000000  0004e410  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3a c1       	rjmp	.+628    	; 0x276 <__ctors_end>
       2:	00 00       	nop
       4:	5e c1       	rjmp	.+700    	; 0x2c2 <__bad_interrupt>
       6:	00 00       	nop
       8:	5c c1       	rjmp	.+696    	; 0x2c2 <__bad_interrupt>
       a:	00 00       	nop
       c:	5a c1       	rjmp	.+692    	; 0x2c2 <__bad_interrupt>
       e:	00 00       	nop
      10:	58 c1       	rjmp	.+688    	; 0x2c2 <__bad_interrupt>
      12:	00 00       	nop
      14:	56 c1       	rjmp	.+684    	; 0x2c2 <__bad_interrupt>
      16:	00 00       	nop
      18:	54 c1       	rjmp	.+680    	; 0x2c2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	52 c1       	rjmp	.+676    	; 0x2c2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	50 c1       	rjmp	.+672    	; 0x2c2 <__bad_interrupt>
      22:	00 00       	nop
      24:	4e c1       	rjmp	.+668    	; 0x2c2 <__bad_interrupt>
      26:	00 00       	nop
      28:	93 c1       	rjmp	.+806    	; 0x350 <__vector_10>
      2a:	00 00       	nop
      2c:	b4 c1       	rjmp	.+872    	; 0x396 <__vector_11>
      2e:	00 00       	nop
      30:	48 c1       	rjmp	.+656    	; 0x2c2 <__bad_interrupt>
      32:	00 00       	nop
      34:	46 c1       	rjmp	.+652    	; 0x2c2 <__bad_interrupt>
      36:	00 00       	nop
      38:	44 c1       	rjmp	.+648    	; 0x2c2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	42 c1       	rjmp	.+644    	; 0x2c2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	40 c1       	rjmp	.+640    	; 0x2c2 <__bad_interrupt>
      42:	00 00       	nop
      44:	3e c1       	rjmp	.+636    	; 0x2c2 <__bad_interrupt>
      46:	00 00       	nop
      48:	3c c1       	rjmp	.+632    	; 0x2c2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3a c1       	rjmp	.+628    	; 0x2c2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	38 c1       	rjmp	.+624    	; 0x2c2 <__bad_interrupt>
      52:	00 00       	nop
      54:	36 c1       	rjmp	.+620    	; 0x2c2 <__bad_interrupt>
      56:	00 00       	nop
      58:	34 c1       	rjmp	.+616    	; 0x2c2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	32 c1       	rjmp	.+612    	; 0x2c2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	30 c1       	rjmp	.+608    	; 0x2c2 <__bad_interrupt>
      62:	00 00       	nop
      64:	2e c1       	rjmp	.+604    	; 0x2c2 <__bad_interrupt>
      66:	00 00       	nop
      68:	2c c1       	rjmp	.+600    	; 0x2c2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2a c1       	rjmp	.+596    	; 0x2c2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	28 c1       	rjmp	.+592    	; 0x2c2 <__bad_interrupt>
      72:	00 00       	nop
      74:	26 c1       	rjmp	.+588    	; 0x2c2 <__bad_interrupt>
      76:	00 00       	nop
      78:	24 c1       	rjmp	.+584    	; 0x2c2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	22 c1       	rjmp	.+580    	; 0x2c2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	20 c1       	rjmp	.+576    	; 0x2c2 <__bad_interrupt>
      82:	00 00       	nop
      84:	1e c1       	rjmp	.+572    	; 0x2c2 <__bad_interrupt>
      86:	00 00       	nop
      88:	1c c1       	rjmp	.+568    	; 0x2c2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1a c1       	rjmp	.+564    	; 0x2c2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	18 c1       	rjmp	.+560    	; 0x2c2 <__bad_interrupt>
      92:	00 00       	nop
      94:	16 c1       	rjmp	.+556    	; 0x2c2 <__bad_interrupt>
      96:	00 00       	nop
      98:	14 c1       	rjmp	.+552    	; 0x2c2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8b c5       	rjmp	.+2838   	; 0xbb4 <__vector_39>
      9e:	00 00       	nop
      a0:	c6 c5       	rjmp	.+2956   	; 0xc2e <__vector_40>
      a2:	00 00       	nop
      a4:	01 c6       	rjmp	.+3074   	; 0xca8 <__vector_41>
      a6:	00 00       	nop
      a8:	3c c6       	rjmp	.+3192   	; 0xd22 <__vector_42>
      aa:	00 00       	nop
      ac:	0a c1       	rjmp	.+532    	; 0x2c2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	08 c1       	rjmp	.+528    	; 0x2c2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	06 c1       	rjmp	.+524    	; 0x2c2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	04 c1       	rjmp	.+520    	; 0x2c2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	02 c1       	rjmp	.+516    	; 0x2c2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	00 c1       	rjmp	.+512    	; 0x2c2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	fe c0       	rjmp	.+508    	; 0x2c2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	fc c0       	rjmp	.+504    	; 0x2c2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fa c0       	rjmp	.+500    	; 0x2c2 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	f8 c0       	rjmp	.+496    	; 0x2c2 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f6 c0       	rjmp	.+492    	; 0x2c2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f4 c0       	rjmp	.+488    	; 0x2c2 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f2 c0       	rjmp	.+484    	; 0x2c2 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f0 c0       	rjmp	.+480    	; 0x2c2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ee c0       	rjmp	.+476    	; 0x2c2 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ec c0       	rjmp	.+472    	; 0x2c2 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ea c0       	rjmp	.+468    	; 0x2c2 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	e8 c0       	rjmp	.+464    	; 0x2c2 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	e6 c0       	rjmp	.+460    	; 0x2c2 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	e4 c0       	rjmp	.+456    	; 0x2c2 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e2 c0       	rjmp	.+452    	; 0x2c2 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e0 c0       	rjmp	.+448    	; 0x2c2 <__bad_interrupt>
     102:	00 00       	nop
     104:	de c0       	rjmp	.+444    	; 0x2c2 <__bad_interrupt>
     106:	00 00       	nop
     108:	dc c0       	rjmp	.+440    	; 0x2c2 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	da c0       	rjmp	.+436    	; 0x2c2 <__bad_interrupt>
     10e:	00 00       	nop
     110:	d8 c0       	rjmp	.+432    	; 0x2c2 <__bad_interrupt>
     112:	00 00       	nop
     114:	d6 c0       	rjmp	.+428    	; 0x2c2 <__bad_interrupt>
     116:	00 00       	nop
     118:	d4 c0       	rjmp	.+424    	; 0x2c2 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	57 c4       	rjmp	.+2222   	; 0x9cc <__vector_71>
     11e:	00 00       	nop
     120:	92 c4       	rjmp	.+2340   	; 0xa46 <__vector_72>
     122:	00 00       	nop
     124:	cd c4       	rjmp	.+2458   	; 0xac0 <__vector_73>
     126:	00 00       	nop
     128:	08 c5       	rjmp	.+2576   	; 0xb3a <__vector_74>
     12a:	00 00       	nop
     12c:	ca c0       	rjmp	.+404    	; 0x2c2 <__bad_interrupt>
     12e:	00 00       	nop
     130:	c8 c0       	rjmp	.+400    	; 0x2c2 <__bad_interrupt>
     132:	00 00       	nop
     134:	c6 c0       	rjmp	.+396    	; 0x2c2 <__bad_interrupt>
     136:	00 00       	nop
     138:	c4 c0       	rjmp	.+392    	; 0x2c2 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c2 c0       	rjmp	.+388    	; 0x2c2 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c0 c0       	rjmp	.+384    	; 0x2c2 <__bad_interrupt>
     142:	00 00       	nop
     144:	be c0       	rjmp	.+380    	; 0x2c2 <__bad_interrupt>
     146:	00 00       	nop
     148:	bc c0       	rjmp	.+376    	; 0x2c2 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	ba c0       	rjmp	.+372    	; 0x2c2 <__bad_interrupt>
     14e:	00 00       	nop
     150:	b8 c0       	rjmp	.+368    	; 0x2c2 <__bad_interrupt>
     152:	00 00       	nop
     154:	b6 c0       	rjmp	.+364    	; 0x2c2 <__bad_interrupt>
     156:	00 00       	nop
     158:	b4 c0       	rjmp	.+360    	; 0x2c2 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b2 c0       	rjmp	.+356    	; 0x2c2 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b0 c0       	rjmp	.+352    	; 0x2c2 <__bad_interrupt>
     162:	00 00       	nop
     164:	ae c0       	rjmp	.+348    	; 0x2c2 <__bad_interrupt>
     166:	00 00       	nop
     168:	ac c0       	rjmp	.+344    	; 0x2c2 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	aa c0       	rjmp	.+340    	; 0x2c2 <__bad_interrupt>
     16e:	00 00       	nop
     170:	a8 c0       	rjmp	.+336    	; 0x2c2 <__bad_interrupt>
     172:	00 00       	nop
     174:	a6 c0       	rjmp	.+332    	; 0x2c2 <__bad_interrupt>
     176:	00 00       	nop
     178:	a4 c0       	rjmp	.+328    	; 0x2c2 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a2 c0       	rjmp	.+324    	; 0x2c2 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a0 c0       	rjmp	.+320    	; 0x2c2 <__bad_interrupt>
     182:	00 00       	nop
     184:	9e c0       	rjmp	.+316    	; 0x2c2 <__bad_interrupt>
     186:	00 00       	nop
     188:	9c c0       	rjmp	.+312    	; 0x2c2 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	9a c0       	rjmp	.+308    	; 0x2c2 <__bad_interrupt>
     18e:	00 00       	nop
     190:	98 c0       	rjmp	.+304    	; 0x2c2 <__bad_interrupt>
     192:	00 00       	nop
     194:	96 c0       	rjmp	.+300    	; 0x2c2 <__bad_interrupt>
     196:	00 00       	nop
     198:	94 c0       	rjmp	.+296    	; 0x2c2 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	92 c0       	rjmp	.+292    	; 0x2c2 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	90 c0       	rjmp	.+288    	; 0x2c2 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	8e c0       	rjmp	.+284    	; 0x2c2 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	8c c0       	rjmp	.+280    	; 0x2c2 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	8a c0       	rjmp	.+276    	; 0x2c2 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	88 c0       	rjmp	.+272    	; 0x2c2 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	86 c0       	rjmp	.+268    	; 0x2c2 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	84 c0       	rjmp	.+264    	; 0x2c2 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	82 c0       	rjmp	.+260    	; 0x2c2 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	80 c0       	rjmp	.+256    	; 0x2c2 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	7e c0       	rjmp	.+252    	; 0x2c2 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	7c c0       	rjmp	.+248    	; 0x2c2 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	7a c0       	rjmp	.+244    	; 0x2c2 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	78 c0       	rjmp	.+240    	; 0x2c2 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	76 c0       	rjmp	.+236    	; 0x2c2 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	74 c0       	rjmp	.+232    	; 0x2c2 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	72 c0       	rjmp	.+228    	; 0x2c2 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	70 c0       	rjmp	.+224    	; 0x2c2 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	6e c0       	rjmp	.+220    	; 0x2c2 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	6c c0       	rjmp	.+216    	; 0x2c2 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	6a c0       	rjmp	.+212    	; 0x2c2 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	68 c0       	rjmp	.+208    	; 0x2c2 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	08 00       	.word	0x0008	; ????
     1f6:	00 00       	nop
     1f8:	be 92       	st	-X, r11
     1fa:	24 49       	sbci	r18, 0x94	; 148
     1fc:	12 3e       	cpi	r17, 0xE2	; 226
     1fe:	ab aa       	std	Y+51, r10	; 0x33
     200:	aa 2a       	or	r10, r26
     202:	be cd       	rjmp	.-1156   	; 0xfffffd80 <__eeprom_end+0xff7efd80>
     204:	cc cc       	rjmp	.-1640   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     206:	4c 3e       	cpi	r20, 0xEC	; 236
     208:	00 00       	nop
     20a:	00 80       	ld	r0, Z
     20c:	be ab       	std	Y+54, r27	; 0x36
     20e:	aa aa       	std	Y+50, r10	; 0x32
     210:	aa 3e       	cpi	r26, 0xEA	; 234
     212:	00 00       	nop
     214:	00 00       	nop
     216:	bf 00       	.word	0x00bf	; ????
     218:	00 00       	nop
     21a:	80 3f       	cpi	r24, 0xF0	; 240
     21c:	00 00       	nop
     21e:	00 00       	nop
     220:	00 08       	sbc	r0, r0
     222:	41 78       	andi	r20, 0x81	; 129
     224:	d3 bb       	out	0x13, r29	; 19
     226:	43 87       	std	Z+11, r20	; 0x0b
     228:	d1 13       	cpse	r29, r17
     22a:	3d 19       	sub	r19, r13
     22c:	0e 3c       	cpi	r16, 0xCE	; 206
     22e:	c3 bd       	out	0x23, r28	; 35
     230:	42 82       	std	Z+2, r4	; 0x02
     232:	ad 2b       	or	r26, r29
     234:	3e 68       	ori	r19, 0x8E	; 142
     236:	ec 82       	std	Y+4, r14	; 0x04
     238:	76 be       	out	0x36, r7	; 54
     23a:	d9 8f       	std	Y+25, r29	; 0x19
     23c:	e1 a9       	ldd	r30, Z+49	; 0x31
     23e:	3e 4c       	sbci	r19, 0xCE	; 206
     240:	80 ef       	ldi	r24, 0xF0	; 240
     242:	ff be       	out	0x3f, r15	; 63
     244:	01 c4       	rjmp	.+2050   	; 0xa48 <__vector_72+0x2>
     246:	ff 7f       	andi	r31, 0xFF	; 255
     248:	3f 00       	.word	0x003f	; ????
     24a:	00 00       	nop
     24c:	00 00       	nop
     24e:	07 63       	ori	r16, 0x37	; 55
     250:	42 36       	cpi	r20, 0x62	; 98
     252:	b7 9b       	sbis	0x16, 7	; 22
     254:	d8 a7       	std	Y+40, r29	; 0x28
     256:	1a 39       	cpi	r17, 0x9A	; 154
     258:	68 56       	subi	r22, 0x68	; 104
     25a:	18 ae       	std	Y+56, r1	; 0x38
     25c:	ba ab       	std	Y+50, r27	; 0x32
     25e:	55 8c       	ldd	r5, Z+29	; 0x1d
     260:	1d 3c       	cpi	r17, 0xCD	; 205
     262:	b7 cc       	rjmp	.-1682   	; 0xfffffbd2 <__eeprom_end+0xff7efbd2>
     264:	57 63       	ori	r21, 0x37	; 55
     266:	bd 6d       	ori	r27, 0xDD	; 221
     268:	ed fd       	.word	0xfded	; ????
     26a:	75 3e       	cpi	r23, 0xE5	; 229
     26c:	f6 17       	cp	r31, r22
     26e:	72 31       	cpi	r23, 0x12	; 18
     270:	bf 00       	.word	0x00bf	; ????
     272:	00 00       	nop
     274:	80 3f       	cpi	r24, 0xF0	; 240

00000276 <__ctors_end>:
     276:	11 24       	eor	r1, r1
     278:	1f be       	out	0x3f, r1	; 63
     27a:	cf ef       	ldi	r28, 0xFF	; 255
     27c:	cd bf       	out	0x3d, r28	; 61
     27e:	df e3       	ldi	r29, 0x3F	; 63
     280:	de bf       	out	0x3e, r29	; 62
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0c bf       	out	0x3c, r16	; 60
     286:	18 be       	out	0x38, r1	; 56
     288:	19 be       	out	0x39, r1	; 57
     28a:	1a be       	out	0x3a, r1	; 58
     28c:	1b be       	out	0x3b, r1	; 59

0000028e <__do_copy_data>:
     28e:	10 e2       	ldi	r17, 0x20	; 32
     290:	a0 e0       	ldi	r26, 0x00	; 0
     292:	b0 e2       	ldi	r27, 0x20	; 32
     294:	ee e3       	ldi	r30, 0x3E	; 62
     296:	fa e2       	ldi	r31, 0x2A	; 42
     298:	00 e0       	ldi	r16, 0x00	; 0
     29a:	0b bf       	out	0x3b, r16	; 59
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <__do_copy_data+0x14>
     29e:	07 90       	elpm	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	a4 37       	cpi	r26, 0x74	; 116
     2a4:	b1 07       	cpc	r27, r17
     2a6:	d9 f7       	brne	.-10     	; 0x29e <__do_copy_data+0x10>
     2a8:	1b be       	out	0x3b, r1	; 59

000002aa <__do_clear_bss>:
     2aa:	20 e2       	ldi	r18, 0x20	; 32
     2ac:	a4 e7       	ldi	r26, 0x74	; 116
     2ae:	b0 e2       	ldi	r27, 0x20	; 32
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <.do_clear_bss_start>

000002b2 <.do_clear_bss_loop>:
     2b2:	1d 92       	st	X+, r1

000002b4 <.do_clear_bss_start>:
     2b4:	a2 3a       	cpi	r26, 0xA2	; 162
     2b6:	b2 07       	cpc	r27, r18
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <.do_clear_bss_loop>
     2ba:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <main>
     2be:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <_exit>

000002c2 <__bad_interrupt>:
     2c2:	9e ce       	rjmp	.-708    	; 0x0 <__vectors>

000002c4 <rtc_get_time>:
 *
 * \param callback Callback function pointer
 */
void rtc_set_callback(rtc_callback_t callback)
{
	rtc_data.callback = callback;
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	e0 e0       	ldi	r30, 0x00	; 0
     2ca:	f4 e0       	ldi	r31, 0x04	; 4
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	80 fd       	sbrc	r24, 0
     2d0:	fd cf       	rjmp	.-6      	; 0x2cc <rtc_get_time+0x8>
     2d2:	2f b7       	in	r18, 0x3f	; 63
     2d4:	f8 94       	cli
     2d6:	40 91 79 20 	lds	r20, 0x2079	; 0x802079 <rtc_data>
     2da:	50 91 7a 20 	lds	r21, 0x207A	; 0x80207a <rtc_data+0x1>
     2de:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     2e2:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	31 f4       	brne	.+12     	; 0x2f6 <rtc_get_time+0x32>
     2ea:	30 91 03 04 	lds	r19, 0x0403	; 0x800403 <__TEXT_REGION_LENGTH__+0x700403>
     2ee:	30 ff       	sbrs	r19, 0
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <rtc_get_time+0x32>
     2f2:	4f 5f       	subi	r20, 0xFF	; 255
     2f4:	5f 4f       	sbci	r21, 0xFF	; 255
     2f6:	2f bf       	out	0x3f, r18	; 63
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	ba 01       	movw	r22, r20
     2fe:	55 27       	eor	r21, r21
     300:	44 27       	eor	r20, r20
     302:	a0 e0       	ldi	r26, 0x00	; 0
     304:	b0 e0       	ldi	r27, 0x00	; 0
     306:	8a 01       	movw	r16, r20
     308:	9b 01       	movw	r18, r22
     30a:	08 2b       	or	r16, r24
     30c:	19 2b       	or	r17, r25
     30e:	2a 2b       	or	r18, r26
     310:	3b 2b       	or	r19, r27
     312:	c9 01       	movw	r24, r18
     314:	b8 01       	movw	r22, r16
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	08 95       	ret

0000031c <rtc_init>:
 * \note The RTC clock source used by the RTC module should be set up before
 *       calling this function. 
 */
void rtc_init(void)
{
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     31c:	64 e0       	ldi	r22, 0x04	; 4
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	1e d3       	rcall	.+1596   	; 0x95e <sysclk_enable_module>
	RTC.PER = 0xffff;
     322:	e0 e0       	ldi	r30, 0x00	; 0
     324:	f4 e0       	ldi	r31, 0x04	; 4
     326:	8f ef       	ldi	r24, 0xFF	; 255
     328:	9f ef       	ldi	r25, 0xFF	; 255
     32a:	82 87       	std	Z+10, r24	; 0x0a
     32c:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
     32e:	10 86       	std	Z+8, r1	; 0x08
     330:	11 86       	std	Z+9, r1	; 0x09

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     332:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     334:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     336:	a8 e8       	ldi	r26, 0x88	; 136
     338:	b0 e2       	ldi	r27, 0x20	; 32
     33a:	13 96       	adiw	r26, 0x03	; 3
     33c:	8c 91       	ld	r24, X
     33e:	13 97       	sbiw	r26, 0x03	; 3
     340:	8f 5f       	subi	r24, 0xFF	; 255
     342:	13 96       	adiw	r26, 0x03	; 3
     344:	8c 93       	st	X, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     346:	9f bf       	out	0x3f, r25	; 63
	/* Since overflow interrupt is needed all the time we limit sleep to
	 * power-save.
	 */
	sleepmgr_lock_mode(SLEEPMGR_PSAVE);
	RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	82 83       	std	Z+2, r24	; 0x02
	RTC.CTRL = CONFIG_RTC_PRESCALER;
     34c:	80 83       	st	Z, r24
     34e:	08 95       	ret

00000350 <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     350:	1f 92       	push	r1
     352:	0f 92       	push	r0
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	0f 92       	push	r0
     358:	11 24       	eor	r1, r1
     35a:	08 b6       	in	r0, 0x38	; 56
     35c:	0f 92       	push	r0
     35e:	18 be       	out	0x38, r1	; 56
     360:	0b b6       	in	r0, 0x3b	; 59
     362:	0f 92       	push	r0
     364:	1b be       	out	0x3b, r1	; 59
     366:	8f 93       	push	r24
     368:	9f 93       	push	r25
     36a:	ef 93       	push	r30
     36c:	ff 93       	push	r31
	rtc_data.counter_high++;
     36e:	e9 e7       	ldi	r30, 0x79	; 121
     370:	f0 e2       	ldi	r31, 0x20	; 32
     372:	80 81       	ld	r24, Z
     374:	91 81       	ldd	r25, Z+1	; 0x01
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	80 83       	st	Z, r24
     37a:	91 83       	std	Z+1, r25	; 0x01
}
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	9f 91       	pop	r25
     382:	8f 91       	pop	r24
     384:	0f 90       	pop	r0
     386:	0b be       	out	0x3b, r0	; 59
     388:	0f 90       	pop	r0
     38a:	08 be       	out	0x38, r0	; 56
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     396:	1f 92       	push	r1
     398:	0f 92       	push	r0
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	0f 92       	push	r0
     39e:	11 24       	eor	r1, r1
     3a0:	08 b6       	in	r0, 0x38	; 56
     3a2:	0f 92       	push	r0
     3a4:	18 be       	out	0x38, r1	; 56
     3a6:	09 b6       	in	r0, 0x39	; 57
     3a8:	0f 92       	push	r0
     3aa:	19 be       	out	0x39, r1	; 57
     3ac:	0b b6       	in	r0, 0x3b	; 59
     3ae:	0f 92       	push	r0
     3b0:	1b be       	out	0x3b, r1	; 59
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	2f 93       	push	r18
     3c0:	3f 93       	push	r19
     3c2:	4f 93       	push	r20
     3c4:	5f 93       	push	r21
     3c6:	6f 93       	push	r22
     3c8:	7f 93       	push	r23
     3ca:	8f 93       	push	r24
     3cc:	9f 93       	push	r25
     3ce:	af 93       	push	r26
     3d0:	bf 93       	push	r27
     3d2:	ef 93       	push	r30
     3d4:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     3d6:	e9 e7       	ldi	r30, 0x79	; 121
     3d8:	f0 e2       	ldi	r31, 0x20	; 32
     3da:	80 81       	ld	r24, Z
     3dc:	91 81       	ldd	r25, Z+1	; 0x01
     3de:	22 81       	ldd	r18, Z+2	; 0x02
     3e0:	33 81       	ldd	r19, Z+3	; 0x03
     3e2:	82 17       	cp	r24, r18
     3e4:	93 07       	cpc	r25, r19
     3e6:	f0 f1       	brcs	.+124    	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     3e8:	21 e0       	ldi	r18, 0x01	; 1
     3ea:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     3ee:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <rtc_data+0x6>
     3f2:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <rtc_data+0x7>
     3f6:	30 97       	sbiw	r30, 0x00	; 0
     3f8:	a9 f1       	breq	.+106    	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     3fa:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     3fe:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	dc 01       	movw	r26, r24
     408:	99 27       	eor	r25, r25
     40a:	88 27       	eor	r24, r24
					| RTC.CNT;
     40c:	ab 01       	movw	r20, r22
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     412:	8c 01       	movw	r16, r24
     414:	9d 01       	movw	r18, r26
     416:	04 2b       	or	r16, r20
     418:	15 2b       	or	r17, r21
     41a:	26 2b       	or	r18, r22
     41c:	37 2b       	or	r19, r23
     41e:	c9 01       	movw	r24, r18
     420:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     422:	a9 e7       	ldi	r26, 0x79	; 121
     424:	b0 e2       	ldi	r27, 0x20	; 32
     426:	12 96       	adiw	r26, 0x02	; 2
     428:	0d 91       	ld	r16, X+
     42a:	1c 91       	ld	r17, X
     42c:	13 97       	sbiw	r26, 0x03	; 3
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	98 01       	movw	r18, r16
     434:	11 27       	eor	r17, r17
     436:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     438:	14 96       	adiw	r26, 0x04	; 4
     43a:	cd 90       	ld	r12, X+
     43c:	dc 90       	ld	r13, X
     43e:	15 97       	sbiw	r26, 0x05	; 5
     440:	e1 2c       	mov	r14, r1
     442:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     444:	0c 29       	or	r16, r12
     446:	1d 29       	or	r17, r13
     448:	2e 29       	or	r18, r14
     44a:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     44c:	06 17       	cp	r16, r22
     44e:	17 07       	cpc	r17, r23
     450:	28 07       	cpc	r18, r24
     452:	39 07       	cpc	r19, r25
     454:	30 f0       	brcs	.+12     	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
				count = alarm + 1;
     456:	c9 01       	movw	r24, r18
     458:	b8 01       	movw	r22, r16
     45a:	6f 5f       	subi	r22, 0xFF	; 255
     45c:	7f 4f       	sbci	r23, 0xFF	; 255
     45e:	8f 4f       	sbci	r24, 0xFF	; 255
     460:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     462:	19 95       	eicall
		}
	}
}
     464:	ff 91       	pop	r31
     466:	ef 91       	pop	r30
     468:	bf 91       	pop	r27
     46a:	af 91       	pop	r26
     46c:	9f 91       	pop	r25
     46e:	8f 91       	pop	r24
     470:	7f 91       	pop	r23
     472:	6f 91       	pop	r22
     474:	5f 91       	pop	r21
     476:	4f 91       	pop	r20
     478:	3f 91       	pop	r19
     47a:	2f 91       	pop	r18
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	df 90       	pop	r13
     486:	cf 90       	pop	r12
     488:	0f 90       	pop	r0
     48a:	0b be       	out	0x3b, r0	; 59
     48c:	0f 90       	pop	r0
     48e:	09 be       	out	0x39, r0	; 57
     490:	0f 90       	pop	r0
     492:	08 be       	out	0x38, r0	; 56
     494:	0f 90       	pop	r0
     496:	0f be       	out	0x3f, r0	; 63
     498:	0f 90       	pop	r0
     49a:	1f 90       	pop	r1
     49c:	18 95       	reti

0000049e <getAltitude>:
 #include <asf.h>
 #include <math.h>
 #include "Calculations/Altitude/getAltitude.h"
 #include "Drivers/Pressure/getPressure.h"
 #include "Drivers/Temperature/getTemperature.h"
 float getAltitude(void){
     49e:	8f 92       	push	r8
     4a0:	9f 92       	push	r9
     4a2:	af 92       	push	r10
     4a4:	bf 92       	push	r11
     4a6:	cf 92       	push	r12
     4a8:	df 92       	push	r13
     4aa:	ef 92       	push	r14
     4ac:	ff 92       	push	r15
	return (getTemperature()/-0.0065)*(powf(getPressure()/101325,0.190263236508483566887195756610229817256134454173664313568)-1);  //Equation found here: http://www.mide.com/pages/air-pressure-at-altitude-calculator, PRESSURE IN PASCALS, TEMP IN KELVIN.
     4ae:	a3 d7       	rcall	.+3910   	; 0x13f6 <getTemperature>
     4b0:	6b 01       	movw	r12, r22
     4b2:	7c 01       	movw	r14, r24
     4b4:	8a d7       	rcall	.+3860   	; 0x13ca <getPressure>
     4b6:	bc 01       	movw	r22, r24
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	2d ec       	ldi	r18, 0xCD	; 205
     4be:	3b e8       	ldi	r19, 0x8B	; 139
     4c0:	41 e0       	ldi	r20, 0x01	; 1
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__divmodsi4>
     4c8:	ca 01       	movw	r24, r20
     4ca:	b9 01       	movw	r22, r18
     4cc:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__floatsisf>
     4d0:	2e e5       	ldi	r18, 0x5E	; 94
     4d2:	34 ed       	ldi	r19, 0xD4	; 212
     4d4:	42 e4       	ldi	r20, 0x42	; 66
     4d6:	5e e3       	ldi	r21, 0x3E	; 62
     4d8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <pow>
     4dc:	4b 01       	movw	r8, r22
     4de:	5c 01       	movw	r10, r24
     4e0:	24 ef       	ldi	r18, 0xF4	; 244
     4e2:	3d ef       	ldi	r19, 0xFD	; 253
     4e4:	44 ed       	ldi	r20, 0xD4	; 212
     4e6:	5b eb       	ldi	r21, 0xBB	; 187
     4e8:	c7 01       	movw	r24, r14
     4ea:	b6 01       	movw	r22, r12
     4ec:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__divsf3>
     4f0:	6b 01       	movw	r12, r22
     4f2:	7c 01       	movw	r14, r24
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e8       	ldi	r20, 0x80	; 128
     4fa:	5f e3       	ldi	r21, 0x3F	; 63
     4fc:	c5 01       	movw	r24, r10
     4fe:	b4 01       	movw	r22, r8
     500:	0e 94 5f 0c 	call	0x18be	; 0x18be <__subsf3>
     504:	9b 01       	movw	r18, r22
     506:	ac 01       	movw	r20, r24
     508:	c7 01       	movw	r24, r14
     50a:	b6 01       	movw	r22, r12
     50c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__mulsf3>
     510:	ff 90       	pop	r15
     512:	ef 90       	pop	r14
     514:	df 90       	pop	r13
     516:	cf 90       	pop	r12
     518:	bf 90       	pop	r11
     51a:	af 90       	pop	r10
     51c:	9f 90       	pop	r9
     51e:	8f 90       	pop	r8
     520:	08 95       	ret

00000522 <getVelocity>:
 #include "Calculations/Altitude/getAltitude.h"

 float exponentialSmoothing(float p_smth_vel, float current_vel);

 //Velocity function
 float getVelocity(void){
     522:	2f 92       	push	r2
     524:	3f 92       	push	r3
     526:	4f 92       	push	r4
     528:	5f 92       	push	r5
     52a:	6f 92       	push	r6
     52c:	7f 92       	push	r7
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	c0 59       	subi	r28, 0x90	; 144
     54c:	d1 40       	sbci	r29, 0x01	; 1
     54e:	cd bf       	out	0x3d, r28	; 61
     550:	de bf       	out	0x3e, r29	; 62
	float arr_alt[25]; //Creates an array of size 25 for altitude.
	float arr_vel[25]; //Velocity array.
	float arr_time[25]; //Time array
	float final_alt = getAltitude(); //sets final altitude for the loop to the current altitude.
     552:	a5 df       	rcall	.-182    	; 0x49e <getAltitude>
     554:	2b 01       	movw	r4, r22
     556:	3c 01       	movw	r6, r24
     558:	8e 01       	movw	r16, r28
     55a:	0f 5f       	subi	r16, 0xFF	; 255
     55c:	1f 4f       	sbci	r17, 0xFF	; 255
     55e:	6e 01       	movw	r12, r28
     560:	29 ec       	ldi	r18, 0xC9	; 201
     562:	c2 0e       	add	r12, r18
     564:	d1 1c       	adc	r13, r1
     566:	1e 01       	movw	r2, r28
     568:	85 e6       	ldi	r24, 0x65	; 101
     56a:	28 0e       	add	r2, r24
     56c:	31 1c       	adc	r3, r1
     56e:	78 01       	movw	r14, r16
	uint32_t t = 0;
     570:	81 2c       	mov	r8, r1
     572:	91 2c       	mov	r9, r1
     574:	54 01       	movw	r10, r8
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	85 35       	cpi	r24, 0x55	; 85
     57e:	a0 ed       	ldi	r26, 0xD0	; 208
     580:	9a 07       	cpc	r25, r26
     582:	d9 f7       	brne	.-10     	; 0x57a <getVelocity+0x58>
	for(int i = 0; i < 25; i++){ //For each element in altTable
		delay_ms(10); //Delay for 10ms, creates a sample rate for velocity of 100Hz. 
		arr_alt[i] = final_alt - getAltitude(); //Set the current element to the delta altitude found with final altitude of the previous iteration subtracted by the current altitude.
     584:	8c df       	rcall	.-232    	; 0x49e <getAltitude>
     586:	9b 01       	movw	r18, r22
     588:	ac 01       	movw	r20, r24
     58a:	c3 01       	movw	r24, r6
     58c:	b2 01       	movw	r22, r4
     58e:	0e 94 5f 0c 	call	0x18be	; 0x18be <__subsf3>
     592:	f7 01       	movw	r30, r14
     594:	61 93       	st	Z+, r22
     596:	71 93       	st	Z+, r23
     598:	81 93       	st	Z+, r24
     59a:	91 93       	st	Z+, r25
     59c:	7f 01       	movw	r14, r30
		arr_time[i] = (rtc_get_time() - t)*1000;
     59e:	92 de       	rcall	.-732    	; 0x2c4 <rtc_get_time>
     5a0:	9b 01       	movw	r18, r22
     5a2:	ac 01       	movw	r20, r24
     5a4:	28 19       	sub	r18, r8
     5a6:	39 09       	sbc	r19, r9
     5a8:	4a 09       	sbc	r20, r10
     5aa:	5b 09       	sbc	r21, r11
     5ac:	a8 ee       	ldi	r26, 0xE8	; 232
     5ae:	b3 e0       	ldi	r27, 0x03	; 3
     5b0:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__muluhisi3>
     5b4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__floatunsisf>
     5b8:	d6 01       	movw	r26, r12
     5ba:	6d 93       	st	X+, r22
     5bc:	7d 93       	st	X+, r23
     5be:	8d 93       	st	X+, r24
     5c0:	9d 93       	st	X+, r25
     5c2:	6d 01       	movw	r12, r26
		final_alt = getAltitude(); //Sets the final altitude for the iteration to the current altitude.
     5c4:	6c df       	rcall	.-296    	; 0x49e <getAltitude>
     5c6:	2b 01       	movw	r4, r22
     5c8:	3c 01       	movw	r6, r24
		t = rtc_get_time();
     5ca:	7c de       	rcall	.-776    	; 0x2c4 <rtc_get_time>
     5cc:	4b 01       	movw	r8, r22
     5ce:	5c 01       	movw	r10, r24
	float arr_alt[25]; //Creates an array of size 25 for altitude.
	float arr_vel[25]; //Velocity array.
	float arr_time[25]; //Time array
	float final_alt = getAltitude(); //sets final altitude for the loop to the current altitude.
	uint32_t t = 0;
	for(int i = 0; i < 25; i++){ //For each element in altTable
     5d0:	e2 14       	cp	r14, r2
     5d2:	f3 04       	cpc	r15, r3
     5d4:	81 f6       	brne	.-96     	; 0x576 <getVelocity+0x54>
     5d6:	5e 01       	movw	r10, r28
     5d8:	bd ec       	ldi	r27, 0xCD	; 205
     5da:	ab 0e       	add	r10, r27
     5dc:	b1 1c       	adc	r11, r1
     5de:	7e 01       	movw	r14, r28
     5e0:	e9 e6       	ldi	r30, 0x69	; 105
     5e2:	ee 0e       	add	r14, r30
     5e4:	f1 1c       	adc	r15, r1
     5e6:	4e 01       	movw	r8, r28
     5e8:	f1 e6       	ldi	r31, 0x61	; 97
     5ea:	8f 0e       	add	r8, r31
     5ec:	91 1c       	adc	r9, r1
     5ee:	67 01       	movw	r12, r14
     5f0:	f8 01       	movw	r30, r16
     5f2:	0c 5f       	subi	r16, 0xFC	; 252
     5f4:	1f 4f       	sbci	r17, 0xFF	; 255
		t = rtc_get_time();
	}

	//Attempt at numerical differentiation.
	for(int z = 1; z < 25; z++){
		arr_vel[z] = (arr_alt[z+1] - arr_alt[z-1])/arr_time[z]; //Approximated velocity using a centered difference scheme, reduces noise from taking the derivative.
     5f6:	d5 01       	movw	r26, r10
     5f8:	4d 90       	ld	r4, X+
     5fa:	5d 90       	ld	r5, X+
     5fc:	6d 90       	ld	r6, X+
     5fe:	7d 90       	ld	r7, X+
     600:	5d 01       	movw	r10, r26
     602:	20 81       	ld	r18, Z
     604:	31 81       	ldd	r19, Z+1	; 0x01
     606:	42 81       	ldd	r20, Z+2	; 0x02
     608:	53 81       	ldd	r21, Z+3	; 0x03
     60a:	60 85       	ldd	r22, Z+8	; 0x08
     60c:	71 85       	ldd	r23, Z+9	; 0x09
     60e:	82 85       	ldd	r24, Z+10	; 0x0a
     610:	93 85       	ldd	r25, Z+11	; 0x0b
     612:	0e 94 5f 0c 	call	0x18be	; 0x18be <__subsf3>
     616:	a3 01       	movw	r20, r6
     618:	92 01       	movw	r18, r4
     61a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__divsf3>
     61e:	f6 01       	movw	r30, r12
     620:	61 93       	st	Z+, r22
     622:	71 93       	st	Z+, r23
     624:	81 93       	st	Z+, r24
     626:	91 93       	st	Z+, r25
     628:	6f 01       	movw	r12, r30
		final_alt = getAltitude(); //Sets the final altitude for the iteration to the current altitude.
		t = rtc_get_time();
	}

	//Attempt at numerical differentiation.
	for(int z = 1; z < 25; z++){
     62a:	08 15       	cp	r16, r8
     62c:	19 05       	cpc	r17, r9
     62e:	01 f7       	brne	.-64     	; 0x5f0 <getVelocity+0xce>
		arr_vel[z] = (arr_alt[z+1] - arr_alt[z-1])/arr_time[z]; //Approximated velocity using a centered difference scheme, reduces noise from taking the derivative.
	}

	arr_vel[0] = arr_alt[0]/.1; //Still need to get the first velocity.
     630:	2d ec       	ldi	r18, 0xCD	; 205
     632:	3c ec       	ldi	r19, 0xCC	; 204
     634:	4c ec       	ldi	r20, 0xCC	; 204
     636:	5d e3       	ldi	r21, 0x3D	; 61
     638:	69 81       	ldd	r22, Y+1	; 0x01
     63a:	7a 81       	ldd	r23, Y+2	; 0x02
     63c:	8b 81       	ldd	r24, Y+3	; 0x03
     63e:	9c 81       	ldd	r25, Y+4	; 0x04
     640:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__divsf3>
     644:	a9 96       	adiw	r28, 0x29	; 41
     646:	6c af       	std	Y+60, r22	; 0x3c
     648:	7d af       	std	Y+61, r23	; 0x3d
     64a:	8e af       	std	Y+62, r24	; 0x3e
     64c:	9f af       	std	Y+63, r25	; 0x3f
     64e:	a9 97       	sbiw	r28, 0x29	; 41

	//Now we know the velocity for 25 different samples over a total of 250ms. We now need to exponentially smooth the data to reduce noise again.

	float a_smooth[25]; //Smoothed velocity table of size 25.
	a_smooth[0] = arr_vel[0]; //Sets the initial smoothed value to the first velocity taken.
     650:	c3 5d       	subi	r28, 0xD3	; 211
     652:	de 4f       	sbci	r29, 0xFE	; 254
     654:	68 83       	st	Y, r22
     656:	79 83       	std	Y+1, r23	; 0x01
     658:	8a 83       	std	Y+2, r24	; 0x02
     65a:	9b 83       	std	Y+3, r25	; 0x03
     65c:	cd 52       	subi	r28, 0x2D	; 45
     65e:	d1 40       	sbci	r29, 0x01	; 1
     660:	8e 01       	movw	r16, r28
     662:	03 5d       	subi	r16, 0xD3	; 211
     664:	1e 4f       	sbci	r17, 0xFE	; 254
     666:	6e 01       	movw	r12, r28
     668:	f3 e7       	ldi	r31, 0x73	; 115
     66a:	cf 1a       	sub	r12, r31
     66c:	fe ef       	ldi	r31, 0xFE	; 254
     66e:	df 0a       	sbc	r13, r31
	for(int j = 1; j < 25; j++){ //For our 24 elements of velocity..
		a_smooth[j] = exponentialSmoothing(a_smooth[j - 1], arr_vel[j]); //For the current element of smoothed velocity, set it equal to the value that our exponential smoothing function gives us. We input the previous value for the smoothed table as our forecast/second variable, then the element of velocity at the current position. 
     670:	d7 01       	movw	r26, r14
     672:	6d 91       	ld	r22, X+
     674:	7d 91       	ld	r23, X+
     676:	8d 91       	ld	r24, X+
     678:	9d 91       	ld	r25, X+
     67a:	7d 01       	movw	r14, r26
     67c:	f8 01       	movw	r30, r16
     67e:	41 90       	ld	r4, Z+
     680:	51 90       	ld	r5, Z+
     682:	61 90       	ld	r6, Z+
     684:	71 90       	ld	r7, Z+
     686:	8f 01       	movw	r16, r30
	return s_vel/24; //The function finally ends with returning the average, or the sum of our 24 elements of velocity divided by 24.
 }

 float exponentialSmoothing(float p_smth_vel, float current_vel){ //We need the previous smoothed value as well as the current un-smoothed value, as indicated by the equation on this page: https://en.wikipedia.org/wiki/Exponential_smoothing#Basic_exponential_smoothing
	float smooth_factor = .2; //20% smoothing factor, needs to be tested.
	return (current_vel * smooth_factor) + (p_smth_vel * (1 - smooth_factor)); //returns the smoothed velocity for the current position of our table! That wasn't so hard, was it?
     688:	2d ec       	ldi	r18, 0xCD	; 205
     68a:	3c ec       	ldi	r19, 0xCC	; 204
     68c:	4c e4       	ldi	r20, 0x4C	; 76
     68e:	5e e3       	ldi	r21, 0x3E	; 62
     690:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__mulsf3>
     694:	4b 01       	movw	r8, r22
     696:	5c 01       	movw	r10, r24
     698:	2d ec       	ldi	r18, 0xCD	; 205
     69a:	3c ec       	ldi	r19, 0xCC	; 204
     69c:	4c e4       	ldi	r20, 0x4C	; 76
     69e:	5f e3       	ldi	r21, 0x3F	; 63
     6a0:	c3 01       	movw	r24, r6
     6a2:	b2 01       	movw	r22, r4
     6a4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__mulsf3>
     6a8:	9b 01       	movw	r18, r22
     6aa:	ac 01       	movw	r20, r24
     6ac:	c5 01       	movw	r24, r10
     6ae:	b4 01       	movw	r22, r8
     6b0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__addsf3>
	//Now we know the velocity for 25 different samples over a total of 250ms. We now need to exponentially smooth the data to reduce noise again.

	float a_smooth[25]; //Smoothed velocity table of size 25.
	a_smooth[0] = arr_vel[0]; //Sets the initial smoothed value to the first velocity taken.
	for(int j = 1; j < 25; j++){ //For our 24 elements of velocity..
		a_smooth[j] = exponentialSmoothing(a_smooth[j - 1], arr_vel[j]); //For the current element of smoothed velocity, set it equal to the value that our exponential smoothing function gives us. We input the previous value for the smoothed table as our forecast/second variable, then the element of velocity at the current position. 
     6b4:	d8 01       	movw	r26, r16
     6b6:	6d 93       	st	X+, r22
     6b8:	7d 93       	st	X+, r23
     6ba:	8d 93       	st	X+, r24
     6bc:	9c 93       	st	X, r25
     6be:	13 97       	sbiw	r26, 0x03	; 3

	//Now we know the velocity for 25 different samples over a total of 250ms. We now need to exponentially smooth the data to reduce noise again.

	float a_smooth[25]; //Smoothed velocity table of size 25.
	a_smooth[0] = arr_vel[0]; //Sets the initial smoothed value to the first velocity taken.
	for(int j = 1; j < 25; j++){ //For our 24 elements of velocity..
     6c0:	0c 15       	cp	r16, r12
     6c2:	1d 05       	cpc	r17, r13
     6c4:	a9 f6       	brne	.-86     	; 0x670 <getVelocity+0x14e>
     6c6:	8e 01       	movw	r16, r28
     6c8:	0f 5c       	subi	r16, 0xCF	; 207
     6ca:	1e 4f       	sbci	r17, 0xFE	; 254
     6cc:	7e 01       	movw	r14, r28
     6ce:	bf e6       	ldi	r27, 0x6F	; 111
     6d0:	eb 1a       	sub	r14, r27
     6d2:	be ef       	ldi	r27, 0xFE	; 254
     6d4:	fb 0a       	sbc	r15, r27
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	cb 01       	movw	r24, r22
		a_smooth[j] = exponentialSmoothing(a_smooth[j - 1], arr_vel[j]); //For the current element of smoothed velocity, set it equal to the value that our exponential smoothing function gives us. We input the previous value for the smoothed table as our forecast/second variable, then the element of velocity at the current position. 
	}
	float s_vel = 0; //Summed velocity so we can average it.
	for(int b = 1; b < 25; b++) //For our size 25 smoothed velocity table, we want to ignore the first value because it is a duplicate, then iterate through every other value.
		s_vel += a_smooth[b]; //Set the sum of velocity equal to itself plus the element at our current position. Sums up all of the values in our table.
     6dc:	f8 01       	movw	r30, r16
     6de:	21 91       	ld	r18, Z+
     6e0:	31 91       	ld	r19, Z+
     6e2:	41 91       	ld	r20, Z+
     6e4:	51 91       	ld	r21, Z+
     6e6:	8f 01       	movw	r16, r30
     6e8:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__addsf3>
	a_smooth[0] = arr_vel[0]; //Sets the initial smoothed value to the first velocity taken.
	for(int j = 1; j < 25; j++){ //For our 24 elements of velocity..
		a_smooth[j] = exponentialSmoothing(a_smooth[j - 1], arr_vel[j]); //For the current element of smoothed velocity, set it equal to the value that our exponential smoothing function gives us. We input the previous value for the smoothed table as our forecast/second variable, then the element of velocity at the current position. 
	}
	float s_vel = 0; //Summed velocity so we can average it.
	for(int b = 1; b < 25; b++) //For our size 25 smoothed velocity table, we want to ignore the first value because it is a duplicate, then iterate through every other value.
     6ec:	0e 15       	cp	r16, r14
     6ee:	1f 05       	cpc	r17, r15
     6f0:	a9 f7       	brne	.-22     	; 0x6dc <getVelocity+0x1ba>
		s_vel += a_smooth[b]; //Set the sum of velocity equal to itself plus the element at our current position. Sums up all of the values in our table.
	return s_vel/24; //The function finally ends with returning the average, or the sum of our 24 elements of velocity divided by 24.
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 ec       	ldi	r20, 0xC0	; 192
     6f8:	51 e4       	ldi	r21, 0x41	; 65
     6fa:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__divsf3>
 }
     6fe:	c0 57       	subi	r28, 0x70	; 112
     700:	de 4f       	sbci	r29, 0xFE	; 254
     702:	cd bf       	out	0x3d, r28	; 61
     704:	de bf       	out	0x3e, r29	; 62
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	bf 90       	pop	r11
     718:	af 90       	pop	r10
     71a:	9f 90       	pop	r9
     71c:	8f 90       	pop	r8
     71e:	7f 90       	pop	r7
     720:	6f 90       	pop	r6
     722:	5f 90       	pop	r5
     724:	4f 90       	pop	r4
     726:	3f 90       	pop	r3
     728:	2f 90       	pop	r2
     72a:	08 95       	ret

0000072c <SPI_init>:
 */ 
 #include "Drivers/SPI/SPI_driver.h"
 #include <asf.h>

 void SPI_init(void){
	PORTC.DIR = 0b00000000; //Set port to input.
     72c:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	SPIC.CTRL = 0b01000000; //Clock Double off, enable SPI, MSB DORD, slave mode, SPI transfer mode set to 0, prescalar set to clkper/4 (has no effect in slave mode).
     730:	e0 ec       	ldi	r30, 0xC0	; 192
     732:	f8 e0       	ldi	r31, 0x08	; 8
     734:	80 e4       	ldi	r24, 0x40	; 64
     736:	80 83       	st	Z, r24
	SPIC.INTCTRL = 0b00000011; //High level interrupt.
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	81 83       	std	Z+1, r24	; 0x01
	PMIC.CTRL = 0b00000100; //Enable high-priority interrupts.
     73c:	84 e0       	ldi	r24, 0x04	; 4
     73e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei(); //Enable global interrupts.
     742:	78 94       	sei
     744:	08 95       	ret

00000746 <spi_read>:
 }
 uint8_t spi_read(void){
	SPIC.DATA = 0xFF; //Set the data to something we know.
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); //Wait until new data comes in by monitoring the interrupt flag.
     74c:	e0 ec       	ldi	r30, 0xC0	; 192
     74e:	f8 e0       	ldi	r31, 0x08	; 8
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	88 23       	and	r24, r24
     754:	ec f7       	brge	.-6      	; 0x750 <spi_read+0xa>
	return SPIC.DATA; //Return the data.
     756:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 }
     75a:	08 95       	ret

0000075c <spi_write>:

 void spi_write(uint8_t data){
	SPIC.DATA = data; //Take data from function argument and write it.
     75c:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); //Wait until data has been sent.
     760:	e0 ec       	ldi	r30, 0xC0	; 192
     762:	f8 e0       	ldi	r31, 0x08	; 8
     764:	82 81       	ldd	r24, Z+2	; 0x02
     766:	88 23       	and	r24, r24
     768:	ec f7       	brge	.-6      	; 0x764 <spi_write+0x8>
     76a:	08 95       	ret

0000076c <lightChase>:
	
	return (uint16_t)(voltage*1000); //voltage*1000 converts it into millivolts.
	//If we hadn't multiplied by 1000, the typecast would've truncated the voltage reading to just the one's place.

	delay_ms(delay);
}
     76c:	af 92       	push	r10
     76e:	bf 92       	push	r11
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	90 93 83 20 	sts	0x2083, r25	; 0x802083 <lightNumber>
     786:	a1 2c       	mov	r10, r1
     788:	0f 2e       	mov	r0, r31
     78a:	f8 e4       	ldi	r31, 0x48	; 72
     78c:	bf 2e       	mov	r11, r31
     78e:	f0 2d       	mov	r31, r0
     790:	0f 2e       	mov	r0, r31
     792:	f8 ee       	ldi	r31, 0xE8	; 232
     794:	cf 2e       	mov	r12, r31
     796:	f0 2d       	mov	r31, r0
     798:	dd 24       	eor	r13, r13
     79a:	d3 94       	inc	r13
     79c:	e1 2c       	mov	r14, r1
     79e:	f1 2c       	mov	r15, r1
     7a0:	00 e0       	ldi	r16, 0x00	; 0
     7a2:	10 e0       	ldi	r17, 0x00	; 0
     7a4:	28 2f       	mov	r18, r24
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__muldi3>
     7b8:	29 51       	subi	r18, 0x19	; 25
     7ba:	3c 4f       	sbci	r19, 0xFC	; 252
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	6f 4f       	sbci	r22, 0xFF	; 255
     7c2:	7f 4f       	sbci	r23, 0xFF	; 255
     7c4:	8f 4f       	sbci	r24, 0xFF	; 255
     7c6:	9f 4f       	sbci	r25, 0xFF	; 255
     7c8:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__floatundisf>
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e8       	ldi	r19, 0x80	; 128
     7d0:	4b eb       	ldi	r20, 0xBB	; 187
     7d2:	55 e4       	ldi	r21, 0x45	; 69
     7d4:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__divsf3>
     7d8:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__fixunssfdi>
     7dc:	72 2f       	mov	r23, r18
     7de:	63 2f       	mov	r22, r19
     7e0:	94 2f       	mov	r25, r20
     7e2:	85 2f       	mov	r24, r21
     7e4:	54 2f       	mov	r21, r20
     7e6:	48 2f       	mov	r20, r24
     7e8:	24 e0       	ldi	r18, 0x04	; 4
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	c0 e8       	ldi	r28, 0x80	; 128
     7ee:	d6 e0       	ldi	r29, 0x06	; 6
     7f0:	07 2f       	mov	r16, r23
     7f2:	16 2f       	mov	r17, r22
     7f4:	f9 2f       	mov	r31, r25
     7f6:	e8 2f       	mov	r30, r24
     7f8:	80 91 83 20 	lds	r24, 0x2083	; 0x802083 <lightNumber>
     7fc:	98 2f       	mov	r25, r24
     7fe:	90 95       	com	r25
     800:	9c 83       	std	Y+4, r25	; 0x04
     802:	88 0f       	add	r24, r24
     804:	80 93 83 20 	sts	0x2083, r24	; 0x802083 <lightNumber>
     808:	80 2f       	mov	r24, r16
     80a:	91 2f       	mov	r25, r17
     80c:	af 2f       	mov	r26, r31
     80e:	be 2f       	mov	r27, r30
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	a1 09       	sbc	r26, r1
     814:	b1 09       	sbc	r27, r1
     816:	e1 f7       	brne	.-8      	; 0x810 <lightChase+0xa4>
     818:	21 50       	subi	r18, 0x01	; 1
     81a:	31 09       	sbc	r19, r1
     81c:	69 f7       	brne	.-38     	; 0x7f8 <lightChase+0x8c>
     81e:	80 e8       	ldi	r24, 0x80	; 128
     820:	80 93 83 20 	sts	0x2083, r24	; 0x802083 <lightNumber>
     824:	24 e0       	ldi	r18, 0x04	; 4
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	e0 e8       	ldi	r30, 0x80	; 128
     82a:	f6 e0       	ldi	r31, 0x06	; 6
     82c:	80 91 83 20 	lds	r24, 0x2083	; 0x802083 <lightNumber>
     830:	98 2f       	mov	r25, r24
     832:	90 95       	com	r25
     834:	94 83       	std	Z+4, r25	; 0x04
     836:	86 95       	lsr	r24
     838:	80 93 83 20 	sts	0x2083, r24	; 0x802083 <lightNumber>
     83c:	87 2f       	mov	r24, r23
     83e:	96 2f       	mov	r25, r22
     840:	a5 2f       	mov	r26, r21
     842:	b4 2f       	mov	r27, r20
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	a1 09       	sbc	r26, r1
     848:	b1 09       	sbc	r27, r1
     84a:	e1 f7       	brne	.-8      	; 0x844 <lightChase+0xd8>
     84c:	21 50       	subi	r18, 0x01	; 1
     84e:	31 09       	sbc	r19, r1
     850:	69 f7       	brne	.-38     	; 0x82c <lightChase+0xc0>
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	df 90       	pop	r13
     860:	cf 90       	pop	r12
     862:	bf 90       	pop	r11
     864:	af 90       	pop	r10
     866:	08 95       	ret

00000868 <test>:

void test(void){
     868:	6f 92       	push	r6
     86a:	7f 92       	push	r7
     86c:	8f 92       	push	r8
     86e:	9f 92       	push	r9
     870:	af 92       	push	r10
     872:	bf 92       	push	r11
     874:	cf 92       	push	r12
     876:	df 92       	push	r13
     878:	ef 92       	push	r14
     87a:	ff 92       	push	r15
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
	lightChase(100);
     884:	84 e6       	ldi	r24, 0x64	; 100
     886:	72 df       	rcall	.-284    	; 0x76c <lightChase>
	printf("For time:%i\nPressure is:%i\nTemperature is:%f\nAltitude is: %f\nAnd velocity is:%f\n",rtc_get_time(),getPressure(),getTemperature(),getAltitude(),getVelocity());
     888:	4c de       	rcall	.-872    	; 0x522 <getVelocity>
     88a:	96 2e       	mov	r9, r22
     88c:	87 2e       	mov	r8, r23
     88e:	78 2e       	mov	r7, r24
     890:	69 2e       	mov	r6, r25
     892:	05 de       	rcall	.-1014   	; 0x49e <getAltitude>
     894:	d6 2e       	mov	r13, r22
     896:	c7 2e       	mov	r12, r23
     898:	b8 2e       	mov	r11, r24
     89a:	a9 2e       	mov	r10, r25
     89c:	ac d5       	rcall	.+2904   	; 0x13f6 <getTemperature>
     89e:	16 2f       	mov	r17, r22
     8a0:	07 2f       	mov	r16, r23
     8a2:	f8 2e       	mov	r15, r24
     8a4:	e9 2e       	mov	r14, r25
     8a6:	91 d5       	rcall	.+2850   	; 0x13ca <getPressure>
     8a8:	c8 2f       	mov	r28, r24
     8aa:	d9 2f       	mov	r29, r25
     8ac:	0b dd       	rcall	.-1514   	; 0x2c4 <rtc_get_time>
     8ae:	6f 92       	push	r6
     8b0:	7f 92       	push	r7
     8b2:	8f 92       	push	r8
     8b4:	9f 92       	push	r9
     8b6:	af 92       	push	r10
     8b8:	bf 92       	push	r11
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	df 93       	push	r29
     8c8:	cf 93       	push	r28
     8ca:	9f 93       	push	r25
     8cc:	8f 93       	push	r24
     8ce:	7f 93       	push	r23
     8d0:	6f 93       	push	r22
     8d2:	8d e0       	ldi	r24, 0x0D	; 13
     8d4:	90 e2       	ldi	r25, 0x20	; 32
     8d6:	9f 93       	push	r25
     8d8:	8f 93       	push	r24
     8da:	0e 94 28 11 	call	0x2250	; 0x2250 <printf>
	lightChase(100);
     8de:	84 e6       	ldi	r24, 0x64	; 100
     8e0:	45 df       	rcall	.-374    	; 0x76c <lightChase>
     8e2:	8d b7       	in	r24, 0x3d	; 61
     8e4:	9e b7       	in	r25, 0x3e	; 62
     8e6:	44 96       	adiw	r24, 0x14	; 20
     8e8:	8d bf       	out	0x3d, r24	; 61
     8ea:	9e bf       	out	0x3e, r25	; 62
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	ff 90       	pop	r15
     8f6:	ef 90       	pop	r14
     8f8:	df 90       	pop	r13
     8fa:	cf 90       	pop	r12
     8fc:	bf 90       	pop	r11
     8fe:	af 90       	pop	r10
     900:	9f 90       	pop	r9
     902:	8f 90       	pop	r8
     904:	7f 90       	pop	r7
     906:	6f 90       	pop	r6
     908:	08 95       	ret

0000090a <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     910:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     914:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     918:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     91c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     920:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     924:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     928:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     92a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     92c:	e0 e5       	ldi	r30, 0x50	; 80
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	82 60       	ori	r24, 0x02	; 2
     934:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     936:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     938:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     93a:	81 ff       	sbrs	r24, 1
     93c:	fd cf       	rjmp	.-6      	; 0x938 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     93e:	61 e0       	ldi	r22, 0x01	; 1
     940:	80 e4       	ldi	r24, 0x40	; 64
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	2b d2       	rcall	.+1110   	; 0xd9c <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     946:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     948:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     94a:	e0 e5       	ldi	r30, 0x50	; 80
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	8e 7f       	andi	r24, 0xFE	; 254
     952:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     954:	9f bf       	out	0x3f, r25	; 63
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
     95c:	08 95       	ret

0000095e <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     95e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     960:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     962:	e8 2f       	mov	r30, r24
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	e0 59       	subi	r30, 0x90	; 144
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	60 95       	com	r22
     96c:	80 81       	ld	r24, Z
     96e:	68 23       	and	r22, r24
     970:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     972:	9f bf       	out	0x3f, r25	; 63
     974:	08 95       	ret

00000976 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	1f 92       	push	r1
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     980:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <stdio_base>
     984:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <stdio_base+0x1>
     988:	e0 91 8e 20 	lds	r30, 0x208E	; 0x80208e <ptr_get>
     98c:	f0 91 8f 20 	lds	r31, 0x208F	; 0x80208f <ptr_get+0x1>
     990:	be 01       	movw	r22, r28
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	19 95       	eicall
	return c;
     998:	89 81       	ldd	r24, Y+1	; 0x01
}
     99a:	08 2e       	mov	r0, r24
     99c:	00 0c       	add	r0, r0
     99e:	99 0b       	sbc	r25, r25
     9a0:	0f 90       	pop	r0
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     9a8:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     9aa:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <stdio_base>
     9ae:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <stdio_base+0x1>
     9b2:	e0 91 90 20 	lds	r30, 0x2090	; 0x802090 <ptr_put>
     9b6:	f0 91 91 20 	lds	r31, 0x2091	; 0x802091 <ptr_put+0x1>
     9ba:	19 95       	eicall
     9bc:	99 23       	and	r25, r25
     9be:	1c f0       	brlt	.+6      	; 0x9c6 <_write+0x1e>
		return -1;
	}
	return 1;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     9ca:	08 95       	ret

000009cc <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     9cc:	1f 92       	push	r1
     9ce:	0f 92       	push	r0
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	0f 92       	push	r0
     9d4:	11 24       	eor	r1, r1
     9d6:	08 b6       	in	r0, 0x38	; 56
     9d8:	0f 92       	push	r0
     9da:	18 be       	out	0x38, r1	; 56
     9dc:	09 b6       	in	r0, 0x39	; 57
     9de:	0f 92       	push	r0
     9e0:	19 be       	out	0x39, r1	; 57
     9e2:	0b b6       	in	r0, 0x3b	; 59
     9e4:	0f 92       	push	r0
     9e6:	1b be       	out	0x3b, r1	; 59
     9e8:	2f 93       	push	r18
     9ea:	3f 93       	push	r19
     9ec:	4f 93       	push	r20
     9ee:	5f 93       	push	r21
     9f0:	6f 93       	push	r22
     9f2:	7f 93       	push	r23
     9f4:	8f 93       	push	r24
     9f6:	9f 93       	push	r25
     9f8:	af 93       	push	r26
     9fa:	bf 93       	push	r27
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     a00:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     a04:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     a08:	e0 91 96 20 	lds	r30, 0x2096	; 0x802096 <adca_callback>
     a0c:	f0 91 97 20 	lds	r31, 0x2097	; 0x802097 <adca_callback+0x1>
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	19 95       	eicall
}
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	7f 91       	pop	r23
     a26:	6f 91       	pop	r22
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0b be       	out	0x3b, r0	; 59
     a34:	0f 90       	pop	r0
     a36:	09 be       	out	0x39, r0	; 57
     a38:	0f 90       	pop	r0
     a3a:	08 be       	out	0x38, r0	; 56
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	0f 90       	pop	r0
     a42:	1f 90       	pop	r1
     a44:	18 95       	reti

00000a46 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     a46:	1f 92       	push	r1
     a48:	0f 92       	push	r0
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
     a50:	08 b6       	in	r0, 0x38	; 56
     a52:	0f 92       	push	r0
     a54:	18 be       	out	0x38, r1	; 56
     a56:	09 b6       	in	r0, 0x39	; 57
     a58:	0f 92       	push	r0
     a5a:	19 be       	out	0x39, r1	; 57
     a5c:	0b b6       	in	r0, 0x3b	; 59
     a5e:	0f 92       	push	r0
     a60:	1b be       	out	0x3b, r1	; 59
     a62:	2f 93       	push	r18
     a64:	3f 93       	push	r19
     a66:	4f 93       	push	r20
     a68:	5f 93       	push	r21
     a6a:	6f 93       	push	r22
     a6c:	7f 93       	push	r23
     a6e:	8f 93       	push	r24
     a70:	9f 93       	push	r25
     a72:	af 93       	push	r26
     a74:	bf 93       	push	r27
     a76:	ef 93       	push	r30
     a78:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     a7a:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     a7e:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     a82:	e0 91 96 20 	lds	r30, 0x2096	; 0x802096 <adca_callback>
     a86:	f0 91 97 20 	lds	r31, 0x2097	; 0x802097 <adca_callback+0x1>
     a8a:	62 e0       	ldi	r22, 0x02	; 2
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	19 95       	eicall
}
     a92:	ff 91       	pop	r31
     a94:	ef 91       	pop	r30
     a96:	bf 91       	pop	r27
     a98:	af 91       	pop	r26
     a9a:	9f 91       	pop	r25
     a9c:	8f 91       	pop	r24
     a9e:	7f 91       	pop	r23
     aa0:	6f 91       	pop	r22
     aa2:	5f 91       	pop	r21
     aa4:	4f 91       	pop	r20
     aa6:	3f 91       	pop	r19
     aa8:	2f 91       	pop	r18
     aaa:	0f 90       	pop	r0
     aac:	0b be       	out	0x3b, r0	; 59
     aae:	0f 90       	pop	r0
     ab0:	09 be       	out	0x39, r0	; 57
     ab2:	0f 90       	pop	r0
     ab4:	08 be       	out	0x38, r0	; 56
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	0f 90       	pop	r0
     abc:	1f 90       	pop	r1
     abe:	18 95       	reti

00000ac0 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     ac0:	1f 92       	push	r1
     ac2:	0f 92       	push	r0
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	08 b6       	in	r0, 0x38	; 56
     acc:	0f 92       	push	r0
     ace:	18 be       	out	0x38, r1	; 56
     ad0:	09 b6       	in	r0, 0x39	; 57
     ad2:	0f 92       	push	r0
     ad4:	19 be       	out	0x39, r1	; 57
     ad6:	0b b6       	in	r0, 0x3b	; 59
     ad8:	0f 92       	push	r0
     ada:	1b be       	out	0x3b, r1	; 59
     adc:	2f 93       	push	r18
     ade:	3f 93       	push	r19
     ae0:	4f 93       	push	r20
     ae2:	5f 93       	push	r21
     ae4:	6f 93       	push	r22
     ae6:	7f 93       	push	r23
     ae8:	8f 93       	push	r24
     aea:	9f 93       	push	r25
     aec:	af 93       	push	r26
     aee:	bf 93       	push	r27
     af0:	ef 93       	push	r30
     af2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     af4:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     af8:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     afc:	e0 91 96 20 	lds	r30, 0x2096	; 0x802096 <adca_callback>
     b00:	f0 91 97 20 	lds	r31, 0x2097	; 0x802097 <adca_callback+0x1>
     b04:	64 e0       	ldi	r22, 0x04	; 4
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	19 95       	eicall
}
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0b be       	out	0x3b, r0	; 59
     b28:	0f 90       	pop	r0
     b2a:	09 be       	out	0x39, r0	; 57
     b2c:	0f 90       	pop	r0
     b2e:	08 be       	out	0x38, r0	; 56
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	08 b6       	in	r0, 0x38	; 56
     b46:	0f 92       	push	r0
     b48:	18 be       	out	0x38, r1	; 56
     b4a:	09 b6       	in	r0, 0x39	; 57
     b4c:	0f 92       	push	r0
     b4e:	19 be       	out	0x39, r1	; 57
     b50:	0b b6       	in	r0, 0x3b	; 59
     b52:	0f 92       	push	r0
     b54:	1b be       	out	0x3b, r1	; 59
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	ef 93       	push	r30
     b6c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     b6e:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     b72:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     b76:	e0 91 96 20 	lds	r30, 0x2096	; 0x802096 <adca_callback>
     b7a:	f0 91 97 20 	lds	r31, 0x2097	; 0x802097 <adca_callback+0x1>
     b7e:	68 e0       	ldi	r22, 0x08	; 8
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	19 95       	eicall
}
     b86:	ff 91       	pop	r31
     b88:	ef 91       	pop	r30
     b8a:	bf 91       	pop	r27
     b8c:	af 91       	pop	r26
     b8e:	9f 91       	pop	r25
     b90:	8f 91       	pop	r24
     b92:	7f 91       	pop	r23
     b94:	6f 91       	pop	r22
     b96:	5f 91       	pop	r21
     b98:	4f 91       	pop	r20
     b9a:	3f 91       	pop	r19
     b9c:	2f 91       	pop	r18
     b9e:	0f 90       	pop	r0
     ba0:	0b be       	out	0x3b, r0	; 59
     ba2:	0f 90       	pop	r0
     ba4:	09 be       	out	0x39, r0	; 57
     ba6:	0f 90       	pop	r0
     ba8:	08 be       	out	0x38, r0	; 56
     baa:	0f 90       	pop	r0
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	0f 90       	pop	r0
     bb0:	1f 90       	pop	r1
     bb2:	18 95       	reti

00000bb4 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	08 b6       	in	r0, 0x38	; 56
     bc0:	0f 92       	push	r0
     bc2:	18 be       	out	0x38, r1	; 56
     bc4:	09 b6       	in	r0, 0x39	; 57
     bc6:	0f 92       	push	r0
     bc8:	19 be       	out	0x39, r1	; 57
     bca:	0b b6       	in	r0, 0x3b	; 59
     bcc:	0f 92       	push	r0
     bce:	1b be       	out	0x3b, r1	; 59
     bd0:	2f 93       	push	r18
     bd2:	3f 93       	push	r19
     bd4:	4f 93       	push	r20
     bd6:	5f 93       	push	r21
     bd8:	6f 93       	push	r22
     bda:	7f 93       	push	r23
     bdc:	8f 93       	push	r24
     bde:	9f 93       	push	r25
     be0:	af 93       	push	r26
     be2:	bf 93       	push	r27
     be4:	ef 93       	push	r30
     be6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     be8:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     bec:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     bf0:	e0 91 94 20 	lds	r30, 0x2094	; 0x802094 <adcb_callback>
     bf4:	f0 91 95 20 	lds	r31, 0x2095	; 0x802095 <adcb_callback+0x1>
     bf8:	61 e0       	ldi	r22, 0x01	; 1
     bfa:	80 e4       	ldi	r24, 0x40	; 64
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	19 95       	eicall
}
     c00:	ff 91       	pop	r31
     c02:	ef 91       	pop	r30
     c04:	bf 91       	pop	r27
     c06:	af 91       	pop	r26
     c08:	9f 91       	pop	r25
     c0a:	8f 91       	pop	r24
     c0c:	7f 91       	pop	r23
     c0e:	6f 91       	pop	r22
     c10:	5f 91       	pop	r21
     c12:	4f 91       	pop	r20
     c14:	3f 91       	pop	r19
     c16:	2f 91       	pop	r18
     c18:	0f 90       	pop	r0
     c1a:	0b be       	out	0x3b, r0	; 59
     c1c:	0f 90       	pop	r0
     c1e:	09 be       	out	0x39, r0	; 57
     c20:	0f 90       	pop	r0
     c22:	08 be       	out	0x38, r0	; 56
     c24:	0f 90       	pop	r0
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	0f 90       	pop	r0
     c2a:	1f 90       	pop	r1
     c2c:	18 95       	reti

00000c2e <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	08 b6       	in	r0, 0x38	; 56
     c3a:	0f 92       	push	r0
     c3c:	18 be       	out	0x38, r1	; 56
     c3e:	09 b6       	in	r0, 0x39	; 57
     c40:	0f 92       	push	r0
     c42:	19 be       	out	0x39, r1	; 57
     c44:	0b b6       	in	r0, 0x3b	; 59
     c46:	0f 92       	push	r0
     c48:	1b be       	out	0x3b, r1	; 59
     c4a:	2f 93       	push	r18
     c4c:	3f 93       	push	r19
     c4e:	4f 93       	push	r20
     c50:	5f 93       	push	r21
     c52:	6f 93       	push	r22
     c54:	7f 93       	push	r23
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
     c5a:	af 93       	push	r26
     c5c:	bf 93       	push	r27
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     c62:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     c66:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     c6a:	e0 91 94 20 	lds	r30, 0x2094	; 0x802094 <adcb_callback>
     c6e:	f0 91 95 20 	lds	r31, 0x2095	; 0x802095 <adcb_callback+0x1>
     c72:	62 e0       	ldi	r22, 0x02	; 2
     c74:	80 e4       	ldi	r24, 0x40	; 64
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	19 95       	eicall
}
     c7a:	ff 91       	pop	r31
     c7c:	ef 91       	pop	r30
     c7e:	bf 91       	pop	r27
     c80:	af 91       	pop	r26
     c82:	9f 91       	pop	r25
     c84:	8f 91       	pop	r24
     c86:	7f 91       	pop	r23
     c88:	6f 91       	pop	r22
     c8a:	5f 91       	pop	r21
     c8c:	4f 91       	pop	r20
     c8e:	3f 91       	pop	r19
     c90:	2f 91       	pop	r18
     c92:	0f 90       	pop	r0
     c94:	0b be       	out	0x3b, r0	; 59
     c96:	0f 90       	pop	r0
     c98:	09 be       	out	0x39, r0	; 57
     c9a:	0f 90       	pop	r0
     c9c:	08 be       	out	0x38, r0	; 56
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	08 b6       	in	r0, 0x38	; 56
     cb4:	0f 92       	push	r0
     cb6:	18 be       	out	0x38, r1	; 56
     cb8:	09 b6       	in	r0, 0x39	; 57
     cba:	0f 92       	push	r0
     cbc:	19 be       	out	0x39, r1	; 57
     cbe:	0b b6       	in	r0, 0x3b	; 59
     cc0:	0f 92       	push	r0
     cc2:	1b be       	out	0x3b, r1	; 59
     cc4:	2f 93       	push	r18
     cc6:	3f 93       	push	r19
     cc8:	4f 93       	push	r20
     cca:	5f 93       	push	r21
     ccc:	6f 93       	push	r22
     cce:	7f 93       	push	r23
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	af 93       	push	r26
     cd6:	bf 93       	push	r27
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     cdc:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     ce0:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     ce4:	e0 91 94 20 	lds	r30, 0x2094	; 0x802094 <adcb_callback>
     ce8:	f0 91 95 20 	lds	r31, 0x2095	; 0x802095 <adcb_callback+0x1>
     cec:	64 e0       	ldi	r22, 0x04	; 4
     cee:	80 e4       	ldi	r24, 0x40	; 64
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	19 95       	eicall
}
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	0f 90       	pop	r0
     d0e:	0b be       	out	0x3b, r0	; 59
     d10:	0f 90       	pop	r0
     d12:	09 be       	out	0x39, r0	; 57
     d14:	0f 90       	pop	r0
     d16:	08 be       	out	0x38, r0	; 56
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	08 b6       	in	r0, 0x38	; 56
     d2e:	0f 92       	push	r0
     d30:	18 be       	out	0x38, r1	; 56
     d32:	09 b6       	in	r0, 0x39	; 57
     d34:	0f 92       	push	r0
     d36:	19 be       	out	0x39, r1	; 57
     d38:	0b b6       	in	r0, 0x3b	; 59
     d3a:	0f 92       	push	r0
     d3c:	1b be       	out	0x3b, r1	; 59
     d3e:	2f 93       	push	r18
     d40:	3f 93       	push	r19
     d42:	4f 93       	push	r20
     d44:	5f 93       	push	r21
     d46:	6f 93       	push	r22
     d48:	7f 93       	push	r23
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	af 93       	push	r26
     d50:	bf 93       	push	r27
     d52:	ef 93       	push	r30
     d54:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     d56:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     d5a:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     d5e:	e0 91 94 20 	lds	r30, 0x2094	; 0x802094 <adcb_callback>
     d62:	f0 91 95 20 	lds	r31, 0x2095	; 0x802095 <adcb_callback+0x1>
     d66:	68 e0       	ldi	r22, 0x08	; 8
     d68:	80 e4       	ldi	r24, 0x40	; 64
     d6a:	92 e0       	ldi	r25, 0x02	; 2
     d6c:	19 95       	eicall
}
     d6e:	ff 91       	pop	r31
     d70:	ef 91       	pop	r30
     d72:	bf 91       	pop	r27
     d74:	af 91       	pop	r26
     d76:	9f 91       	pop	r25
     d78:	8f 91       	pop	r24
     d7a:	7f 91       	pop	r23
     d7c:	6f 91       	pop	r22
     d7e:	5f 91       	pop	r21
     d80:	4f 91       	pop	r20
     d82:	3f 91       	pop	r19
     d84:	2f 91       	pop	r18
     d86:	0f 90       	pop	r0
     d88:	0b be       	out	0x3b, r0	; 59
     d8a:	0f 90       	pop	r0
     d8c:	09 be       	out	0x39, r0	; 57
     d8e:	0f 90       	pop	r0
     d90:	08 be       	out	0x38, r0	; 56
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti

00000d9c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     d9c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     d9e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     da0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     da2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     da4:	60 83       	st	Z, r22
	ret                             // Return to caller
     da6:	08 95       	ret

00000da8 <nvm_eeprom_read_byte>:
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
	eeprom_disable_mapping();
}
     da8:	dc 01       	movw	r26, r24
     daa:	e0 ec       	ldi	r30, 0xC0	; 192
     dac:	f1 e0       	ldi	r31, 0x01	; 1
     dae:	97 85       	ldd	r25, Z+15	; 0x0f
     db0:	99 23       	and	r25, r25
     db2:	ec f3       	brlt	.-6      	; 0xdae <nvm_eeprom_read_byte+0x6>
     db4:	ec ec       	ldi	r30, 0xCC	; 204
     db6:	f1 e0       	ldi	r31, 0x01	; 1
     db8:	80 81       	ld	r24, Z
     dba:	88 60       	ori	r24, 0x08	; 8
     dbc:	80 83       	st	Z, r24
     dbe:	b0 5f       	subi	r27, 0xF0	; 240
     dc0:	8c 91       	ld	r24, X
     dc2:	90 81       	ld	r25, Z
     dc4:	97 7f       	andi	r25, 0xF7	; 247
     dc6:	90 83       	st	Z, r25
     dc8:	08 95       	ret

00000dca <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     dca:	e0 ec       	ldi	r30, 0xC0	; 192
     dcc:	f1 e0       	ldi	r31, 0x01	; 1
     dce:	87 85       	ldd	r24, Z+15	; 0x0f
     dd0:	88 23       	and	r24, r24
     dd2:	ec f3       	brlt	.-6      	; 0xdce <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
     dd4:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
     dd8:	81 ff       	sbrs	r24, 1
     dda:	07 c0       	rjmp	.+14     	; 0xdea <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
     ddc:	86 e3       	ldi	r24, 0x36	; 54
     dde:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	8b ec       	ldi	r24, 0xCB	; 203
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	d9 cf       	rjmp	.-78     	; 0xd9c <ccp_write_io>
     dea:	08 95       	ret

00000dec <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     dec:	e0 ec       	ldi	r30, 0xC0	; 192
     dee:	f1 e0       	ldi	r31, 0x01	; 1
     df0:	97 85       	ldd	r25, Z+15	; 0x0f
     df2:	99 23       	and	r25, r25
     df4:	ec f3       	brlt	.-6      	; 0xdf0 <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
     df6:	ac ec       	ldi	r26, 0xCC	; 204
     df8:	b1 e0       	ldi	r27, 0x01	; 1
     dfa:	9c 91       	ld	r25, X
     dfc:	98 60       	ori	r25, 0x08	; 8
     dfe:	9c 93       	st	X, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
     e00:	e8 2f       	mov	r30, r24
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	f0 5f       	subi	r31, 0xF0	; 240
     e06:	60 83       	st	Z, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
     e08:	8c 91       	ld	r24, X
     e0a:	87 7f       	andi	r24, 0xF7	; 247
     e0c:	8c 93       	st	X, r24
     e0e:	08 95       	ret

00000e10 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	18 2f       	mov	r17, r24
     e1c:	f9 2e       	mov	r15, r25
     e1e:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
     e20:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	nvm_eeprom_flush_buffer();
     e24:	d2 df       	rcall	.-92     	; 0xdca <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     e26:	e0 ec       	ldi	r30, 0xC0	; 192
     e28:	f1 e0       	ldi	r31, 0x01	; 1
     e2a:	27 85       	ldd	r18, Z+15	; 0x0f
     e2c:	22 23       	and	r18, r18
     e2e:	ec f3       	brlt	.-6      	; 0xe2a <nvm_eeprom_write_byte+0x1a>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
     e30:	6c 2f       	mov	r22, r28
     e32:	81 2f       	mov	r24, r17
     e34:	db df       	rcall	.-74     	; 0xdec <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
     e36:	c0 ec       	ldi	r28, 0xC0	; 192
     e38:	d1 e0       	ldi	r29, 0x01	; 1
     e3a:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
     e3c:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
     e3e:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
     e40:	85 e3       	ldi	r24, 0x35	; 53
     e42:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	8b ec       	ldi	r24, 0xCB	; 203
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	a8 df       	rcall	.-176    	; 0xd9c <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
     e4c:	0a 87       	std	Y+10, r16	; 0x0a
}
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	08 95       	ret

00000e5a <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     e5a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     e5e:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     e60:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     e62:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     e66:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     e68:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     e6c:	08 95       	ret

00000e6e <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     e6e:	fc 01       	movw	r30, r24
     e70:	91 81       	ldd	r25, Z+1	; 0x01
     e72:	95 ff       	sbrs	r25, 5
     e74:	fd cf       	rjmp	.-6      	; 0xe70 <usart_putchar+0x2>
     e76:	60 83       	st	Z, r22
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	08 95       	ret

00000e7e <usart_getchar>:
     e7e:	fc 01       	movw	r30, r24
     e80:	91 81       	ldd	r25, Z+1	; 0x01
     e82:	99 23       	and	r25, r25
     e84:	ec f7       	brge	.-6      	; 0xe80 <usart_getchar+0x2>
     e86:	80 81       	ld	r24, Z
     e88:	08 95       	ret

00000e8a <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     e8a:	2f 92       	push	r2
     e8c:	3f 92       	push	r3
     e8e:	4f 92       	push	r4
     e90:	5f 92       	push	r5
     e92:	6f 92       	push	r6
     e94:	7f 92       	push	r7
     e96:	8f 92       	push	r8
     e98:	9f 92       	push	r9
     e9a:	af 92       	push	r10
     e9c:	bf 92       	push	r11
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	1c 01       	movw	r2, r24
     eae:	2a 01       	movw	r4, r20
     eb0:	3b 01       	movw	r6, r22
     eb2:	48 01       	movw	r8, r16
     eb4:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     eb6:	d9 01       	movw	r26, r18
     eb8:	c8 01       	movw	r24, r16
     eba:	68 94       	set
     ebc:	12 f8       	bld	r1, 2
     ebe:	b6 95       	lsr	r27
     ec0:	a7 95       	ror	r26
     ec2:	97 95       	ror	r25
     ec4:	87 95       	ror	r24
     ec6:	16 94       	lsr	r1
     ec8:	d1 f7       	brne	.-12     	; 0xebe <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     eca:	b9 01       	movw	r22, r18
     ecc:	a8 01       	movw	r20, r16
     ece:	03 2e       	mov	r0, r19
     ed0:	36 e1       	ldi	r19, 0x16	; 22
     ed2:	76 95       	lsr	r23
     ed4:	67 95       	ror	r22
     ed6:	57 95       	ror	r21
     ed8:	47 95       	ror	r20
     eda:	3a 95       	dec	r19
     edc:	d1 f7       	brne	.-12     	; 0xed2 <usart_set_baudrate+0x48>
     ede:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     ee0:	f1 01       	movw	r30, r2
     ee2:	24 81       	ldd	r18, Z+4	; 0x04
     ee4:	22 fd       	sbrc	r18, 2
     ee6:	08 c0       	rjmp	.+16     	; 0xef8 <usart_set_baudrate+0x6e>
		max_rate /= 2;
     ee8:	b6 95       	lsr	r27
     eea:	a7 95       	ror	r26
     eec:	97 95       	ror	r25
     eee:	87 95       	ror	r24
		min_rate /= 2;
     ef0:	76 95       	lsr	r23
     ef2:	67 95       	ror	r22
     ef4:	57 95       	ror	r21
     ef6:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     ef8:	84 15       	cp	r24, r4
     efa:	95 05       	cpc	r25, r5
     efc:	a6 05       	cpc	r26, r6
     efe:	b7 05       	cpc	r27, r7
     f00:	08 f4       	brcc	.+2      	; 0xf04 <usart_set_baudrate+0x7a>
     f02:	ae c0       	rjmp	.+348    	; 0x1060 <usart_set_baudrate+0x1d6>
     f04:	44 16       	cp	r4, r20
     f06:	55 06       	cpc	r5, r21
     f08:	66 06       	cpc	r6, r22
     f0a:	77 06       	cpc	r7, r23
     f0c:	08 f4       	brcc	.+2      	; 0xf10 <usart_set_baudrate+0x86>
     f0e:	aa c0       	rjmp	.+340    	; 0x1064 <usart_set_baudrate+0x1da>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     f10:	f1 01       	movw	r30, r2
     f12:	84 81       	ldd	r24, Z+4	; 0x04
     f14:	82 fd       	sbrc	r24, 2
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <usart_set_baudrate+0x96>
		baud *= 2;
     f18:	44 0c       	add	r4, r4
     f1a:	55 1c       	adc	r5, r5
     f1c:	66 1c       	adc	r6, r6
     f1e:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     f20:	c5 01       	movw	r24, r10
     f22:	b4 01       	movw	r22, r8
     f24:	a3 01       	movw	r20, r6
     f26:	92 01       	movw	r18, r4
     f28:	0e 94 36 10 	call	0x206c	; 0x206c <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     f2c:	2f 3f       	cpi	r18, 0xFF	; 255
     f2e:	31 05       	cpc	r19, r1
     f30:	41 05       	cpc	r20, r1
     f32:	51 05       	cpc	r21, r1
     f34:	08 f4       	brcc	.+2      	; 0xf38 <usart_set_baudrate+0xae>
     f36:	98 c0       	rjmp	.+304    	; 0x1068 <usart_set_baudrate+0x1de>
     f38:	c1 2c       	mov	r12, r1
     f3a:	d1 2c       	mov	r13, r1
     f3c:	76 01       	movw	r14, r12
     f3e:	ca 94       	dec	r12
     f40:	c9 ef       	ldi	r28, 0xF9	; 249
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <usart_set_baudrate+0xc4>
     f44:	2c 15       	cp	r18, r12
     f46:	3d 05       	cpc	r19, r13
     f48:	4e 05       	cpc	r20, r14
     f4a:	5f 05       	cpc	r21, r15
     f4c:	68 f0       	brcs	.+26     	; 0xf68 <usart_set_baudrate+0xde>
			break;
		}

		limit <<= 1;
     f4e:	cc 0c       	add	r12, r12
     f50:	dd 1c       	adc	r13, r13
     f52:	ee 1c       	adc	r14, r14
     f54:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     f56:	cd 3f       	cpi	r28, 0xFD	; 253
     f58:	14 f4       	brge	.+4      	; 0xf5e <usart_set_baudrate+0xd4>
			limit |= 1;
     f5a:	68 94       	set
     f5c:	c0 f8       	bld	r12, 0
     f5e:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     f60:	c7 30       	cpi	r28, 0x07	; 7
     f62:	81 f7       	brne	.-32     	; 0xf44 <usart_set_baudrate+0xba>
     f64:	8c 2f       	mov	r24, r28
     f66:	56 c0       	rjmp	.+172    	; 0x1014 <usart_set_baudrate+0x18a>
     f68:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     f6a:	cc 23       	and	r28, r28
     f6c:	0c f0       	brlt	.+2      	; 0xf70 <usart_set_baudrate+0xe6>
     f6e:	52 c0       	rjmp	.+164    	; 0x1014 <usart_set_baudrate+0x18a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     f70:	d3 01       	movw	r26, r6
     f72:	c2 01       	movw	r24, r4
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	aa 1f       	adc	r26, r26
     f7a:	bb 1f       	adc	r27, r27
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	aa 1f       	adc	r26, r26
     f82:	bb 1f       	adc	r27, r27
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	aa 1f       	adc	r26, r26
     f8a:	bb 1f       	adc	r27, r27
     f8c:	85 01       	movw	r16, r10
     f8e:	74 01       	movw	r14, r8
     f90:	e8 1a       	sub	r14, r24
     f92:	f9 0a       	sbc	r15, r25
     f94:	0a 0b       	sbc	r16, r26
     f96:	1b 0b       	sbc	r17, r27
     f98:	d8 01       	movw	r26, r16
     f9a:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     f9c:	ce 3f       	cpi	r28, 0xFE	; 254
     f9e:	f4 f4       	brge	.+60     	; 0xfdc <usart_set_baudrate+0x152>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     fa0:	2d ef       	ldi	r18, 0xFD	; 253
     fa2:	3f ef       	ldi	r19, 0xFF	; 255
     fa4:	2c 1b       	sub	r18, r28
     fa6:	31 09       	sbc	r19, r1
     fa8:	c7 fd       	sbrc	r28, 7
     faa:	33 95       	inc	r19
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <usart_set_baudrate+0x12c>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	aa 1f       	adc	r26, r26
     fb4:	bb 1f       	adc	r27, r27
     fb6:	2a 95       	dec	r18
     fb8:	d2 f7       	brpl	.-12     	; 0xfae <usart_set_baudrate+0x124>
     fba:	73 01       	movw	r14, r6
     fbc:	62 01       	movw	r12, r4
     fbe:	f6 94       	lsr	r15
     fc0:	e7 94       	ror	r14
     fc2:	d7 94       	ror	r13
     fc4:	c7 94       	ror	r12
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	6c 0d       	add	r22, r12
     fcc:	7d 1d       	adc	r23, r13
     fce:	8e 1d       	adc	r24, r14
     fd0:	9f 1d       	adc	r25, r15
     fd2:	a3 01       	movw	r20, r6
     fd4:	92 01       	movw	r18, r4
     fd6:	0e 94 36 10 	call	0x206c	; 0x206c <__udivmodsi4>
     fda:	38 c0       	rjmp	.+112    	; 0x104c <usart_set_baudrate+0x1c2>
		} else {
			baud <<= exp + 3;
     fdc:	23 e0       	ldi	r18, 0x03	; 3
     fde:	2c 0f       	add	r18, r28
     fe0:	83 01       	movw	r16, r6
     fe2:	72 01       	movw	r14, r4
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <usart_set_baudrate+0x164>
     fe6:	ee 0c       	add	r14, r14
     fe8:	ff 1c       	adc	r15, r15
     fea:	00 1f       	adc	r16, r16
     fec:	11 1f       	adc	r17, r17
     fee:	2a 95       	dec	r18
     ff0:	d2 f7       	brpl	.-12     	; 0xfe6 <usart_set_baudrate+0x15c>
     ff2:	a8 01       	movw	r20, r16
     ff4:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
     ff6:	67 01       	movw	r12, r14
     ff8:	78 01       	movw	r14, r16
     ffa:	f6 94       	lsr	r15
     ffc:	e7 94       	ror	r14
     ffe:	d7 94       	ror	r13
    1000:	c7 94       	ror	r12
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	6c 0d       	add	r22, r12
    1008:	7d 1d       	adc	r23, r13
    100a:	8e 1d       	adc	r24, r14
    100c:	9f 1d       	adc	r25, r15
    100e:	0e 94 36 10 	call	0x206c	; 0x206c <__udivmodsi4>
    1012:	1c c0       	rjmp	.+56     	; 0x104c <usart_set_baudrate+0x1c2>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1014:	8d 5f       	subi	r24, 0xFD	; 253
    1016:	a3 01       	movw	r20, r6
    1018:	92 01       	movw	r18, r4
    101a:	04 c0       	rjmp	.+8      	; 0x1024 <usart_set_baudrate+0x19a>
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	44 1f       	adc	r20, r20
    1022:	55 1f       	adc	r21, r21
    1024:	8a 95       	dec	r24
    1026:	d2 f7       	brpl	.-12     	; 0x101c <usart_set_baudrate+0x192>
		div = (cpu_hz + baud / 2) / baud - 1;
    1028:	da 01       	movw	r26, r20
    102a:	c9 01       	movw	r24, r18
    102c:	b6 95       	lsr	r27
    102e:	a7 95       	ror	r26
    1030:	97 95       	ror	r25
    1032:	87 95       	ror	r24
    1034:	bc 01       	movw	r22, r24
    1036:	cd 01       	movw	r24, r26
    1038:	68 0d       	add	r22, r8
    103a:	79 1d       	adc	r23, r9
    103c:	8a 1d       	adc	r24, r10
    103e:	9b 1d       	adc	r25, r11
    1040:	0e 94 36 10 	call	0x206c	; 0x206c <__udivmodsi4>
    1044:	21 50       	subi	r18, 0x01	; 1
    1046:	31 09       	sbc	r19, r1
    1048:	41 09       	sbc	r20, r1
    104a:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    104c:	83 2f       	mov	r24, r19
    104e:	8f 70       	andi	r24, 0x0F	; 15
    1050:	c2 95       	swap	r28
    1052:	c0 7f       	andi	r28, 0xF0	; 240
    1054:	c8 2b       	or	r28, r24
    1056:	f1 01       	movw	r30, r2
    1058:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    105a:	26 83       	std	Z+6, r18	; 0x06

	return true;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	1c c0       	rjmp	.+56     	; 0x1098 <usart_set_baudrate+0x20e>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	1a c0       	rjmp	.+52     	; 0x1098 <usart_set_baudrate+0x20e>
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	18 c0       	rjmp	.+48     	; 0x1098 <usart_set_baudrate+0x20e>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1068:	d3 01       	movw	r26, r6
    106a:	c2 01       	movw	r24, r4
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	aa 1f       	adc	r26, r26
    1072:	bb 1f       	adc	r27, r27
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	aa 1f       	adc	r26, r26
    107a:	bb 1f       	adc	r27, r27
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	aa 1f       	adc	r26, r26
    1082:	bb 1f       	adc	r27, r27
    1084:	85 01       	movw	r16, r10
    1086:	74 01       	movw	r14, r8
    1088:	e8 1a       	sub	r14, r24
    108a:	f9 0a       	sbc	r15, r25
    108c:	0a 0b       	sbc	r16, r26
    108e:	1b 0b       	sbc	r17, r27
    1090:	d8 01       	movw	r26, r16
    1092:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1094:	c9 ef       	ldi	r28, 0xF9	; 249
    1096:	84 cf       	rjmp	.-248    	; 0xfa0 <usart_set_baudrate+0x116>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	df 90       	pop	r13
    10a4:	cf 90       	pop	r12
    10a6:	bf 90       	pop	r11
    10a8:	af 90       	pop	r10
    10aa:	9f 90       	pop	r9
    10ac:	8f 90       	pop	r8
    10ae:	7f 90       	pop	r7
    10b0:	6f 90       	pop	r6
    10b2:	5f 90       	pop	r5
    10b4:	4f 90       	pop	r4
    10b6:	3f 90       	pop	r3
    10b8:	2f 90       	pop	r2
    10ba:	08 95       	ret

000010bc <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	ec 01       	movw	r28, r24
    10c6:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	09 f4       	brne	.+2      	; 0x10ce <usart_init_rs232+0x12>
    10cc:	36 c1       	rjmp	.+620    	; 0x133a <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    10ce:	80 3c       	cpi	r24, 0xC0	; 192
    10d0:	91 05       	cpc	r25, r1
    10d2:	21 f4       	brne	.+8      	; 0x10dc <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    10d4:	60 e1       	ldi	r22, 0x10	; 16
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	42 dc       	rcall	.-1916   	; 0x95e <sysclk_enable_module>
    10da:	2f c1       	rjmp	.+606    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    10dc:	c0 34       	cpi	r28, 0x40	; 64
    10de:	84 e0       	ldi	r24, 0x04	; 4
    10e0:	d8 07       	cpc	r29, r24
    10e2:	21 f4       	brne	.+8      	; 0x10ec <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    10e4:	68 e0       	ldi	r22, 0x08	; 8
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	3a dc       	rcall	.-1932   	; 0x95e <sysclk_enable_module>
    10ea:	27 c1       	rjmp	.+590    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    10ec:	c1 15       	cp	r28, r1
    10ee:	e4 e0       	ldi	r30, 0x04	; 4
    10f0:	de 07       	cpc	r29, r30
    10f2:	21 f4       	brne	.+8      	; 0x10fc <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    10f4:	64 e0       	ldi	r22, 0x04	; 4
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	32 dc       	rcall	.-1948   	; 0x95e <sysclk_enable_module>
    10fa:	1f c1       	rjmp	.+574    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    10fc:	c0 38       	cpi	r28, 0x80	; 128
    10fe:	f1 e0       	ldi	r31, 0x01	; 1
    1100:	df 07       	cpc	r29, r31
    1102:	21 f4       	brne	.+8      	; 0x110c <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1104:	62 e0       	ldi	r22, 0x02	; 2
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	2a dc       	rcall	.-1964   	; 0x95e <sysclk_enable_module>
    110a:	17 c1       	rjmp	.+558    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    110c:	c1 15       	cp	r28, r1
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	d8 07       	cpc	r29, r24
    1112:	21 f4       	brne	.+8      	; 0x111c <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	22 dc       	rcall	.-1980   	; 0x95e <sysclk_enable_module>
    111a:	0f c1       	rjmp	.+542    	; 0x133a <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    111c:	c0 38       	cpi	r28, 0x80	; 128
    111e:	e3 e0       	ldi	r30, 0x03	; 3
    1120:	de 07       	cpc	r29, r30
    1122:	21 f4       	brne	.+8      	; 0x112c <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1124:	61 e0       	ldi	r22, 0x01	; 1
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	1a dc       	rcall	.-1996   	; 0x95e <sysclk_enable_module>
    112a:	07 c1       	rjmp	.+526    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    112c:	c0 39       	cpi	r28, 0x90	; 144
    112e:	f3 e0       	ldi	r31, 0x03	; 3
    1130:	df 07       	cpc	r29, r31
    1132:	21 f4       	brne	.+8      	; 0x113c <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	12 dc       	rcall	.-2012   	; 0x95e <sysclk_enable_module>
    113a:	ff c0       	rjmp	.+510    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    113c:	c1 15       	cp	r28, r1
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	d8 07       	cpc	r29, r24
    1142:	21 f4       	brne	.+8      	; 0x114c <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1144:	62 e0       	ldi	r22, 0x02	; 2
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	0a dc       	rcall	.-2028   	; 0x95e <sysclk_enable_module>
    114a:	f7 c0       	rjmp	.+494    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    114c:	c0 34       	cpi	r28, 0x40	; 64
    114e:	e2 e0       	ldi	r30, 0x02	; 2
    1150:	de 07       	cpc	r29, r30
    1152:	21 f4       	brne	.+8      	; 0x115c <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1154:	62 e0       	ldi	r22, 0x02	; 2
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	02 dc       	rcall	.-2044   	; 0x95e <sysclk_enable_module>
    115a:	ef c0       	rjmp	.+478    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    115c:	c1 15       	cp	r28, r1
    115e:	f3 e0       	ldi	r31, 0x03	; 3
    1160:	df 07       	cpc	r29, r31
    1162:	21 f4       	brne	.+8      	; 0x116c <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1164:	64 e0       	ldi	r22, 0x04	; 4
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	fa db       	rcall	.-2060   	; 0x95e <sysclk_enable_module>
    116a:	e7 c0       	rjmp	.+462    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    116c:	c0 32       	cpi	r28, 0x20	; 32
    116e:	83 e0       	ldi	r24, 0x03	; 3
    1170:	d8 07       	cpc	r29, r24
    1172:	21 f4       	brne	.+8      	; 0x117c <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1174:	64 e0       	ldi	r22, 0x04	; 4
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	f2 db       	rcall	.-2076   	; 0x95e <sysclk_enable_module>
    117a:	df c0       	rjmp	.+446    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    117c:	c1 15       	cp	r28, r1
    117e:	e8 e0       	ldi	r30, 0x08	; 8
    1180:	de 07       	cpc	r29, r30
    1182:	21 f4       	brne	.+8      	; 0x118c <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	83 e0       	ldi	r24, 0x03	; 3
    1188:	ea db       	rcall	.-2092   	; 0x95e <sysclk_enable_module>
    118a:	d7 c0       	rjmp	.+430    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    118c:	c1 15       	cp	r28, r1
    118e:	f9 e0       	ldi	r31, 0x09	; 9
    1190:	df 07       	cpc	r29, r31
    1192:	21 f4       	brne	.+8      	; 0x119c <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	84 e0       	ldi	r24, 0x04	; 4
    1198:	e2 db       	rcall	.-2108   	; 0x95e <sysclk_enable_module>
    119a:	cf c0       	rjmp	.+414    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    119c:	c1 15       	cp	r28, r1
    119e:	8a e0       	ldi	r24, 0x0A	; 10
    11a0:	d8 07       	cpc	r29, r24
    11a2:	21 f4       	brne	.+8      	; 0x11ac <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    11a4:	61 e0       	ldi	r22, 0x01	; 1
    11a6:	85 e0       	ldi	r24, 0x05	; 5
    11a8:	da db       	rcall	.-2124   	; 0x95e <sysclk_enable_module>
    11aa:	c7 c0       	rjmp	.+398    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    11ac:	c1 15       	cp	r28, r1
    11ae:	eb e0       	ldi	r30, 0x0B	; 11
    11b0:	de 07       	cpc	r29, r30
    11b2:	21 f4       	brne	.+8      	; 0x11bc <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	86 e0       	ldi	r24, 0x06	; 6
    11b8:	d2 db       	rcall	.-2140   	; 0x95e <sysclk_enable_module>
    11ba:	bf c0       	rjmp	.+382    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    11bc:	c0 34       	cpi	r28, 0x40	; 64
    11be:	f8 e0       	ldi	r31, 0x08	; 8
    11c0:	df 07       	cpc	r29, r31
    11c2:	21 f4       	brne	.+8      	; 0x11cc <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    11c4:	62 e0       	ldi	r22, 0x02	; 2
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	ca db       	rcall	.-2156   	; 0x95e <sysclk_enable_module>
    11ca:	b7 c0       	rjmp	.+366    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    11cc:	c0 34       	cpi	r28, 0x40	; 64
    11ce:	89 e0       	ldi	r24, 0x09	; 9
    11d0:	d8 07       	cpc	r29, r24
    11d2:	21 f4       	brne	.+8      	; 0x11dc <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    11d4:	62 e0       	ldi	r22, 0x02	; 2
    11d6:	84 e0       	ldi	r24, 0x04	; 4
    11d8:	c2 db       	rcall	.-2172   	; 0x95e <sysclk_enable_module>
    11da:	af c0       	rjmp	.+350    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    11dc:	c0 34       	cpi	r28, 0x40	; 64
    11de:	ea e0       	ldi	r30, 0x0A	; 10
    11e0:	de 07       	cpc	r29, r30
    11e2:	21 f4       	brne	.+8      	; 0x11ec <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    11e4:	62 e0       	ldi	r22, 0x02	; 2
    11e6:	85 e0       	ldi	r24, 0x05	; 5
    11e8:	ba db       	rcall	.-2188   	; 0x95e <sysclk_enable_module>
    11ea:	a7 c0       	rjmp	.+334    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    11ec:	c0 34       	cpi	r28, 0x40	; 64
    11ee:	fb e0       	ldi	r31, 0x0B	; 11
    11f0:	df 07       	cpc	r29, r31
    11f2:	21 f4       	brne	.+8      	; 0x11fc <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    11f4:	62 e0       	ldi	r22, 0x02	; 2
    11f6:	86 e0       	ldi	r24, 0x06	; 6
    11f8:	b2 db       	rcall	.-2204   	; 0x95e <sysclk_enable_module>
    11fa:	9f c0       	rjmp	.+318    	; 0x133a <usart_init_rs232+0x27e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    11fc:	c0 39       	cpi	r28, 0x90	; 144
    11fe:	88 e0       	ldi	r24, 0x08	; 8
    1200:	d8 07       	cpc	r29, r24
    1202:	21 f4       	brne	.+8      	; 0x120c <usart_init_rs232+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1204:	64 e0       	ldi	r22, 0x04	; 4
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	aa db       	rcall	.-2220   	; 0x95e <sysclk_enable_module>
    120a:	97 c0       	rjmp	.+302    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    120c:	c0 39       	cpi	r28, 0x90	; 144
    120e:	e9 e0       	ldi	r30, 0x09	; 9
    1210:	de 07       	cpc	r29, r30
    1212:	21 f4       	brne	.+8      	; 0x121c <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1214:	64 e0       	ldi	r22, 0x04	; 4
    1216:	84 e0       	ldi	r24, 0x04	; 4
    1218:	a2 db       	rcall	.-2236   	; 0x95e <sysclk_enable_module>
    121a:	8f c0       	rjmp	.+286    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    121c:	c0 39       	cpi	r28, 0x90	; 144
    121e:	fa e0       	ldi	r31, 0x0A	; 10
    1220:	df 07       	cpc	r29, r31
    1222:	21 f4       	brne	.+8      	; 0x122c <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1224:	64 e0       	ldi	r22, 0x04	; 4
    1226:	85 e0       	ldi	r24, 0x05	; 5
    1228:	9a db       	rcall	.-2252   	; 0x95e <sysclk_enable_module>
    122a:	87 c0       	rjmp	.+270    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    122c:	c0 39       	cpi	r28, 0x90	; 144
    122e:	8b e0       	ldi	r24, 0x0B	; 11
    1230:	d8 07       	cpc	r29, r24
    1232:	21 f4       	brne	.+8      	; 0x123c <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1234:	64 e0       	ldi	r22, 0x04	; 4
    1236:	86 e0       	ldi	r24, 0x06	; 6
    1238:	92 db       	rcall	.-2268   	; 0x95e <sysclk_enable_module>
    123a:	7f c0       	rjmp	.+254    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    123c:	c0 3c       	cpi	r28, 0xC0	; 192
    123e:	e8 e0       	ldi	r30, 0x08	; 8
    1240:	de 07       	cpc	r29, r30
    1242:	21 f4       	brne	.+8      	; 0x124c <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1244:	68 e0       	ldi	r22, 0x08	; 8
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	8a db       	rcall	.-2284   	; 0x95e <sysclk_enable_module>
    124a:	77 c0       	rjmp	.+238    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    124c:	c0 3c       	cpi	r28, 0xC0	; 192
    124e:	f9 e0       	ldi	r31, 0x09	; 9
    1250:	df 07       	cpc	r29, r31
    1252:	21 f4       	brne	.+8      	; 0x125c <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1254:	68 e0       	ldi	r22, 0x08	; 8
    1256:	84 e0       	ldi	r24, 0x04	; 4
    1258:	82 db       	rcall	.-2300   	; 0x95e <sysclk_enable_module>
    125a:	6f c0       	rjmp	.+222    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    125c:	c0 3c       	cpi	r28, 0xC0	; 192
    125e:	8a e0       	ldi	r24, 0x0A	; 10
    1260:	d8 07       	cpc	r29, r24
    1262:	21 f4       	brne	.+8      	; 0x126c <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1264:	68 e0       	ldi	r22, 0x08	; 8
    1266:	85 e0       	ldi	r24, 0x05	; 5
    1268:	7a db       	rcall	.-2316   	; 0x95e <sysclk_enable_module>
    126a:	67 c0       	rjmp	.+206    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    126c:	c0 3c       	cpi	r28, 0xC0	; 192
    126e:	eb e0       	ldi	r30, 0x0B	; 11
    1270:	de 07       	cpc	r29, r30
    1272:	21 f4       	brne	.+8      	; 0x127c <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1274:	68 e0       	ldi	r22, 0x08	; 8
    1276:	86 e0       	ldi	r24, 0x06	; 6
    1278:	72 db       	rcall	.-2332   	; 0x95e <sysclk_enable_module>
    127a:	5f c0       	rjmp	.+190    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    127c:	c0 3a       	cpi	r28, 0xA0	; 160
    127e:	f8 e0       	ldi	r31, 0x08	; 8
    1280:	df 07       	cpc	r29, r31
    1282:	21 f4       	brne	.+8      	; 0x128c <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1284:	60 e1       	ldi	r22, 0x10	; 16
    1286:	83 e0       	ldi	r24, 0x03	; 3
    1288:	6a db       	rcall	.-2348   	; 0x95e <sysclk_enable_module>
    128a:	57 c0       	rjmp	.+174    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    128c:	c0 3a       	cpi	r28, 0xA0	; 160
    128e:	89 e0       	ldi	r24, 0x09	; 9
    1290:	d8 07       	cpc	r29, r24
    1292:	21 f4       	brne	.+8      	; 0x129c <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1294:	60 e1       	ldi	r22, 0x10	; 16
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	62 db       	rcall	.-2364   	; 0x95e <sysclk_enable_module>
    129a:	4f c0       	rjmp	.+158    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    129c:	c0 3a       	cpi	r28, 0xA0	; 160
    129e:	ea e0       	ldi	r30, 0x0A	; 10
    12a0:	de 07       	cpc	r29, r30
    12a2:	21 f4       	brne	.+8      	; 0x12ac <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    12a4:	60 e1       	ldi	r22, 0x10	; 16
    12a6:	85 e0       	ldi	r24, 0x05	; 5
    12a8:	5a db       	rcall	.-2380   	; 0x95e <sysclk_enable_module>
    12aa:	47 c0       	rjmp	.+142    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    12ac:	c0 3a       	cpi	r28, 0xA0	; 160
    12ae:	fb e0       	ldi	r31, 0x0B	; 11
    12b0:	df 07       	cpc	r29, r31
    12b2:	21 f4       	brne	.+8      	; 0x12bc <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    12b4:	60 e1       	ldi	r22, 0x10	; 16
    12b6:	86 e0       	ldi	r24, 0x06	; 6
    12b8:	52 db       	rcall	.-2396   	; 0x95e <sysclk_enable_module>
    12ba:	3f c0       	rjmp	.+126    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    12bc:	c0 3b       	cpi	r28, 0xB0	; 176
    12be:	88 e0       	ldi	r24, 0x08	; 8
    12c0:	d8 07       	cpc	r29, r24
    12c2:	21 f4       	brne	.+8      	; 0x12cc <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    12c4:	60 e2       	ldi	r22, 0x20	; 32
    12c6:	83 e0       	ldi	r24, 0x03	; 3
    12c8:	4a db       	rcall	.-2412   	; 0x95e <sysclk_enable_module>
    12ca:	37 c0       	rjmp	.+110    	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    12cc:	c0 3b       	cpi	r28, 0xB0	; 176
    12ce:	e9 e0       	ldi	r30, 0x09	; 9
    12d0:	de 07       	cpc	r29, r30
    12d2:	21 f4       	brne	.+8      	; 0x12dc <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    12d4:	60 e2       	ldi	r22, 0x20	; 32
    12d6:	84 e0       	ldi	r24, 0x04	; 4
    12d8:	42 db       	rcall	.-2428   	; 0x95e <sysclk_enable_module>
    12da:	2f c0       	rjmp	.+94     	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    12dc:	c0 3b       	cpi	r28, 0xB0	; 176
    12de:	fa e0       	ldi	r31, 0x0A	; 10
    12e0:	df 07       	cpc	r29, r31
    12e2:	21 f4       	brne	.+8      	; 0x12ec <usart_init_rs232+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    12e4:	60 e2       	ldi	r22, 0x20	; 32
    12e6:	85 e0       	ldi	r24, 0x05	; 5
    12e8:	3a db       	rcall	.-2444   	; 0x95e <sysclk_enable_module>
    12ea:	27 c0       	rjmp	.+78     	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    12ec:	c0 3b       	cpi	r28, 0xB0	; 176
    12ee:	8b e0       	ldi	r24, 0x0B	; 11
    12f0:	d8 07       	cpc	r29, r24
    12f2:	21 f4       	brne	.+8      	; 0x12fc <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    12f4:	60 e2       	ldi	r22, 0x20	; 32
    12f6:	86 e0       	ldi	r24, 0x06	; 6
    12f8:	32 db       	rcall	.-2460   	; 0x95e <sysclk_enable_module>
    12fa:	1f c0       	rjmp	.+62     	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    12fc:	c0 38       	cpi	r28, 0x80	; 128
    12fe:	e4 e0       	ldi	r30, 0x04	; 4
    1300:	de 07       	cpc	r29, r30
    1302:	21 f4       	brne	.+8      	; 0x130c <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1304:	60 e4       	ldi	r22, 0x40	; 64
    1306:	83 e0       	ldi	r24, 0x03	; 3
    1308:	2a db       	rcall	.-2476   	; 0x95e <sysclk_enable_module>
    130a:	17 c0       	rjmp	.+46     	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    130c:	c0 39       	cpi	r28, 0x90	; 144
    130e:	f4 e0       	ldi	r31, 0x04	; 4
    1310:	df 07       	cpc	r29, r31
    1312:	21 f4       	brne	.+8      	; 0x131c <usart_init_rs232+0x260>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1314:	60 e4       	ldi	r22, 0x40	; 64
    1316:	84 e0       	ldi	r24, 0x04	; 4
    1318:	22 db       	rcall	.-2492   	; 0x95e <sysclk_enable_module>
    131a:	0f c0       	rjmp	.+30     	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    131c:	c0 3a       	cpi	r28, 0xA0	; 160
    131e:	84 e0       	ldi	r24, 0x04	; 4
    1320:	d8 07       	cpc	r29, r24
    1322:	21 f4       	brne	.+8      	; 0x132c <usart_init_rs232+0x270>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1324:	60 e4       	ldi	r22, 0x40	; 64
    1326:	85 e0       	ldi	r24, 0x05	; 5
    1328:	1a db       	rcall	.-2508   	; 0x95e <sysclk_enable_module>
    132a:	07 c0       	rjmp	.+14     	; 0x133a <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    132c:	c0 3b       	cpi	r28, 0xB0	; 176
    132e:	e4 e0       	ldi	r30, 0x04	; 4
    1330:	de 07       	cpc	r29, r30
    1332:	19 f4       	brne	.+6      	; 0x133a <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1334:	60 e4       	ldi	r22, 0x40	; 64
    1336:	86 e0       	ldi	r24, 0x06	; 6
    1338:	12 db       	rcall	.-2524   	; 0x95e <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	8f 73       	andi	r24, 0x3F	; 63
    133e:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1340:	f8 01       	movw	r30, r16
    1342:	94 81       	ldd	r25, Z+4	; 0x04
    1344:	85 81       	ldd	r24, Z+5	; 0x05
    1346:	89 2b       	or	r24, r25
    1348:	96 81       	ldd	r25, Z+6	; 0x06
    134a:	91 11       	cpse	r25, r1
    134c:	98 e0       	ldi	r25, 0x08	; 8
    134e:	89 2b       	or	r24, r25
    1350:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1352:	f8 01       	movw	r30, r16
    1354:	40 81       	ld	r20, Z
    1356:	51 81       	ldd	r21, Z+1	; 0x01
    1358:	62 81       	ldd	r22, Z+2	; 0x02
    135a:	73 81       	ldd	r23, Z+3	; 0x03
    135c:	00 e0       	ldi	r16, 0x00	; 0
    135e:	18 e4       	ldi	r17, 0x48	; 72
    1360:	28 ee       	ldi	r18, 0xE8	; 232
    1362:	31 e0       	ldi	r19, 0x01	; 1
    1364:	ce 01       	movw	r24, r28
    1366:	91 dd       	rcall	.-1246   	; 0xe8a <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	98 60       	ori	r25, 0x08	; 8
    136c:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	90 61       	ori	r25, 0x10	; 16
    1372:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	08 95       	ret

0000137e <ADC_init>:
 */ 
#include <asf.h>
#include "Drivers/ADC/ADC_init.h"
/* This driver can be used to initialize any of the ADCs */

void ADC_init(void){
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
	ADCA.CTRLA = 0b00000001; //Enables the ADC.
    1388:	c0 e0       	ldi	r28, 0x00	; 0
    138a:	d2 e0       	ldi	r29, 0x02	; 2
    138c:	ff 24       	eor	r15, r15
    138e:	f3 94       	inc	r15
    1390:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000; //Unsigned 12 bit mode.
    1392:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000; //Voltage reference of Vcc/1.6V
    1394:	80 e1       	ldi	r24, 0x10	; 16
    1396:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101; //This is automatic prescalar of 128 on the clock.
    1398:	85 e0       	ldi	r24, 0x05	; 5
    139a:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    139c:	61 e2       	ldi	r22, 0x21	; 33
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	5b dd       	rcall	.-1354   	; 0xe5a <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    13a4:	08 2f       	mov	r16, r24
    13a6:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    13a8:	10 2f       	mov	r17, r16
    13aa:	00 27       	eor	r16, r16
    13ac:	60 e2       	ldi	r22, 0x20	; 32
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	53 dd       	rcall	.-1370   	; 0xe5a <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    13b4:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA); //Retrieve stored calibration data about the ADC.
    13b6:	0c 87       	std	Y+12, r16	; 0x0c
    13b8:	1d 87       	std	Y+13, r17	; 0x0d

	ADCA.CH0.CTRL = 0b00000001; //Single ended input
    13ba:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000000; //Reading ADCA pin 0.
    13bc:	19 a2       	std	Y+33, r1	; 0x21
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	ff 90       	pop	r15
    13c8:	08 95       	ret

000013ca <getPressure>:
 *  Author: seanw
 */
 #include <asf.h>
 #include "Drivers/Pressure/getPressure.h"
 #include "Drivers/SPI/SPI_driver.h"
 uint16_t getPressure(void){
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
	spi_write(0x00); //Write the data to the SPI device.
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	c5 d9       	rcall	.-3190   	; 0x75c <spi_write>

	uint16_t pressure = ((uint16_t)spi_read())<<8; //Typecast the 8 bit data to 16 bit, then move it 8 places to the left. Stores in temp variable.
    13d2:	b9 d9       	rcall	.-3214   	; 0x746 <spi_read>
    13d4:	c8 2f       	mov	r28, r24
    13d6:	d0 e0       	ldi	r29, 0x00	; 0
    13d8:	dc 2f       	mov	r29, r28
    13da:	cc 27       	eor	r28, r28
	pressure += ((uint16_t)spi_read()); //Assign data to data + the new data but in the lower 8 bits.
    13dc:	b4 d9       	rcall	.-3224   	; 0x746 <spi_read>
    13de:	c8 0f       	add	r28, r24
    13e0:	d1 1d       	adc	r29, r1

	return pressure * 100;
    13e2:	84 e6       	ldi	r24, 0x64	; 100
    13e4:	28 2f       	mov	r18, r24
    13e6:	2c 9f       	mul	r18, r28
    13e8:	c0 01       	movw	r24, r0
    13ea:	2d 9f       	mul	r18, r29
    13ec:	90 0d       	add	r25, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <getTemperature>:
 #include <math.h>
 #include "Drivers/Temperature/getTemperature.h"

 /* getTemperature method for NTC Thermistor 10k Bead */

 float getTemperature(void){
    13f6:	8f 92       	push	r8
    13f8:	9f 92       	push	r9
    13fa:	af 92       	push	r10
    13fc:	bf 92       	push	r11
    13fe:	cf 92       	push	r12
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
	ADCA.CH0.CTRL |= 0b10000000; //Start the conversion.. FOR THOMAS: THIS IS A BITWISE OPERATOR THAT KEEPS 1's and MODIFIES ZEROES.
    1406:	e0 e0       	ldi	r30, 0x00	; 0
    1408:	f2 e0       	ldi	r31, 0x02	; 2
    140a:	80 a1       	ldd	r24, Z+32	; 0x20
    140c:	80 68       	ori	r24, 0x80	; 128
    140e:	80 a3       	std	Z+32, r24	; 0x20
		
	while(ADCA.CH0.INTFLAGS == 0); //Wait until conversion is done.
    1410:	83 a1       	ldd	r24, Z+35	; 0x23
    1412:	88 23       	and	r24, r24
    1414:	e9 f3       	breq	.-6      	; 0x1410 <getTemperature+0x1a>
		
	uint16_t read_adc = ADCA.CH0.RES; //Save the result into variable called adcReading.
    1416:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    141a:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
		
	uint16_t voltage = (uint16_t)((0.0005*read_adc) - 0.0941); /* 
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	80 d3       	rcall	.+1792   	; 0x1b24 <__floatunsisf>
    1424:	2f e6       	ldi	r18, 0x6F	; 111
    1426:	32 e1       	ldi	r19, 0x12	; 18
    1428:	43 e0       	ldi	r20, 0x03	; 3
    142a:	5a e3       	ldi	r21, 0x3A	; 58
    142c:	9c d4       	rcall	.+2360   	; 0x1d66 <__mulsf3>
    142e:	20 e8       	ldi	r18, 0x80	; 128
    1430:	37 eb       	ldi	r19, 0xB7	; 183
    1432:	40 ec       	ldi	r20, 0xC0	; 192
    1434:	5d e3       	ldi	r21, 0x3D	; 61
    1436:	43 d2       	rcall	.+1158   	; 0x18be <__subsf3>
    1438:	49 d3       	rcall	.+1682   	; 0x1acc <__fixunssfsi>
																* This converts adcReading into an actual voltage based off of slope. NEED TO TEST AND FIND THE SLOPE! voltage*1000 converts it into millivolts.
																* If we hadn't multiplied by 1000, the typecast would've truncated the voltage reading to just the one's place.
															    */

	float resistance = (10000*(voltage - 3.3))/3.3; //Need to convert our voltage reading into the resistance across the thermistor. To find this we use Rb(Vin - Vout) / Vout
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	72 d3       	rcall	.+1764   	; 0x1b24 <__floatunsisf>
    1440:	23 e3       	ldi	r18, 0x33	; 51
    1442:	33 e3       	ldi	r19, 0x33	; 51
    1444:	43 e5       	ldi	r20, 0x53	; 83
    1446:	50 e4       	ldi	r21, 0x40	; 64
    1448:	3a d2       	rcall	.+1140   	; 0x18be <__subsf3>
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e4       	ldi	r19, 0x40	; 64
    144e:	4c e1       	ldi	r20, 0x1C	; 28
    1450:	56 e4       	ldi	r21, 0x46	; 70
    1452:	89 d4       	rcall	.+2322   	; 0x1d66 <__mulsf3>
    1454:	23 e3       	ldi	r18, 0x33	; 51
    1456:	33 e3       	ldi	r19, 0x33	; 51
    1458:	43 e5       	ldi	r20, 0x53	; 83
    145a:	50 e4       	ldi	r21, 0x40	; 64
    145c:	95 d2       	rcall	.+1322   	; 0x1988 <__divsf3>
	
	float a_const = 0.003354016; //A value for the NTCLE100E3103HT1 in the Steinhart-Hart equation (T = 1/(A + Bln(resistance) + Dln^3(resistance))
	float b_const = 0.000256985; //B value
	float d_const = 0.00000006383091; //D value.
	return 1/(a_const+ b_const*log(resistance/10000) + d_const*log(resistance/10000)*log(resistance/10000)*log(resistance/10000)); //Steinhart-Hart to find temperature then return it.
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e4       	ldi	r19, 0x40	; 64
    1462:	4c e1       	ldi	r20, 0x1C	; 28
    1464:	56 e4       	ldi	r21, 0x46	; 70
    1466:	90 d2       	rcall	.+1312   	; 0x1988 <__divsf3>
    1468:	3e d4       	rcall	.+2172   	; 0x1ce6 <log>
    146a:	6b 01       	movw	r12, r22
    146c:	7c 01       	movw	r14, r24
    146e:	21 ef       	ldi	r18, 0xF1	; 241
    1470:	3b eb       	ldi	r19, 0xBB	; 187
    1472:	46 e8       	ldi	r20, 0x86	; 134
    1474:	59 e3       	ldi	r21, 0x39	; 57
    1476:	77 d4       	rcall	.+2286   	; 0x1d66 <__mulsf3>
    1478:	2d e0       	ldi	r18, 0x0D	; 13
    147a:	3f ec       	ldi	r19, 0xCF	; 207
    147c:	4b e5       	ldi	r20, 0x5B	; 91
    147e:	5b e3       	ldi	r21, 0x3B	; 59
    1480:	1f d2       	rcall	.+1086   	; 0x18c0 <__addsf3>
    1482:	4b 01       	movw	r8, r22
    1484:	5c 01       	movw	r10, r24
    1486:	2a e6       	ldi	r18, 0x6A	; 106
    1488:	33 e1       	ldi	r19, 0x13	; 19
    148a:	49 e8       	ldi	r20, 0x89	; 137
    148c:	53 e3       	ldi	r21, 0x33	; 51
    148e:	c7 01       	movw	r24, r14
    1490:	b6 01       	movw	r22, r12
    1492:	69 d4       	rcall	.+2258   	; 0x1d66 <__mulsf3>
    1494:	9b 01       	movw	r18, r22
    1496:	ac 01       	movw	r20, r24
    1498:	c7 01       	movw	r24, r14
    149a:	b6 01       	movw	r22, r12
    149c:	64 d4       	rcall	.+2248   	; 0x1d66 <__mulsf3>
    149e:	9b 01       	movw	r18, r22
    14a0:	ac 01       	movw	r20, r24
    14a2:	c7 01       	movw	r24, r14
    14a4:	b6 01       	movw	r22, r12
    14a6:	5f d4       	rcall	.+2238   	; 0x1d66 <__mulsf3>
    14a8:	9b 01       	movw	r18, r22
    14aa:	ac 01       	movw	r20, r24
    14ac:	c5 01       	movw	r24, r10
    14ae:	b4 01       	movw	r22, r8
    14b0:	07 d2       	rcall	.+1038   	; 0x18c0 <__addsf3>
    14b2:	9b 01       	movw	r18, r22
    14b4:	ac 01       	movw	r20, r24
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	80 e8       	ldi	r24, 0x80	; 128
    14bc:	9f e3       	ldi	r25, 0x3F	; 63
    14be:	64 d2       	rcall	.+1224   	; 0x1988 <__divsf3>
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	bf 90       	pop	r11
    14ca:	af 90       	pop	r10
    14cc:	9f 90       	pop	r9
    14ce:	8f 90       	pop	r8
    14d0:	08 95       	ret

000014d2 <TCD0_init>:
	TCE0.CCB = TCE0.PER - (TCE0.PER/duty_cycle);
	TCE0.CCC = TCE0.PER - (TCE0.PER/duty_cycle);
	TCE0.CCD = TCE0.PER - (TCE0.PER/duty_cycle);
}
void TCD0_init(void){
	PORTD.DIR = 0b11111111; //sets to output.
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	TCD0.CTRLA = 0b00000110; //0110 is prescalar 256.
    14d8:	e0 e0       	ldi	r30, 0x00	; 0
    14da:	f9 e0       	ldi	r31, 0x09	; 9
    14dc:	86 e0       	ldi	r24, 0x06	; 6
    14de:	80 83       	st	Z, r24
	TCD0.CTRLB = 0b10110011; //OCn output pin (currently set at 0) and single slope PWM.
    14e0:	83 eb       	ldi	r24, 0xB3	; 179
    14e2:	81 83       	std	Z+1, r24	; 0x01
    14e4:	08 95       	ret

000014e6 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    14ec:	c8 dc       	rcall	.-1648   	; 0xe7e <usart_getchar>
    14ee:	88 83       	st	Y, r24
}
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    14f6:	bb cc       	rjmp	.-1674   	; 0xe6e <usart_putchar>
}
    14f8:	08 95       	ret

000014fa <UART_Comms_Init>:
   to start the uart communications */

#include "conf_usart_serial.h" //Includes the information in the config file
#include <asf.h>

void UART_Comms_Init(void){
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	27 97       	sbiw	r28, 0x07	; 7
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	de bf       	out	0x3e, r29	; 62
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	//Must set TX pin as output
	PORTC.DIRSET=0b00001000;
    1508:	e0 e4       	ldi	r30, 0x40	; 64
    150a:	f6 e0       	ldi	r31, 0x06	; 6
    150c:	88 e0       	ldi	r24, 0x08	; 8
    150e:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET=0b00001000;
    1510:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUT=0xFF;
    1512:	8f ef       	ldi	r24, 0xFF	; 255
    1514:	84 83       	std	Z+4, r24	; 0x04
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    1516:	80 ea       	ldi	r24, 0xA0	; 160
    1518:	98 e0       	ldi	r25, 0x08	; 8
    151a:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <stdio_base>
    151e:	90 93 93 20 	sts	0x2093, r25	; 0x802093 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1522:	8b e7       	ldi	r24, 0x7B	; 123
    1524:	9a e0       	ldi	r25, 0x0A	; 10
    1526:	80 93 90 20 	sts	0x2090, r24	; 0x802090 <ptr_put>
    152a:	90 93 91 20 	sts	0x2091, r25	; 0x802091 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    152e:	83 e7       	ldi	r24, 0x73	; 115
    1530:	9a e0       	ldi	r25, 0x0A	; 10
    1532:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <ptr_get>
    1536:	90 93 8f 20 	sts	0x208F, r25	; 0x80208f <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    153a:	e6 e0       	ldi	r30, 0x06	; 6
    153c:	f0 e2       	ldi	r31, 0x20	; 32
    153e:	84 81       	ldd	r24, Z+4	; 0x04
    1540:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1542:	85 81       	ldd	r24, Z+5	; 0x05
    1544:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1546:	86 81       	ldd	r24, Z+6	; 0x06
    1548:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	a2 81       	ldd	r26, Z+2	; 0x02
    1550:	b3 81       	ldd	r27, Z+3	; 0x03
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	9a 83       	std	Y+2, r25	; 0x02
    1556:	ab 83       	std	Y+3, r26	; 0x03
    1558:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    155a:	60 e1       	ldi	r22, 0x10	; 16
    155c:	83 e0       	ldi	r24, 0x03	; 3
    155e:	ff d9       	rcall	.-3074   	; 0x95e <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1560:	be 01       	movw	r22, r28
    1562:	6f 5f       	subi	r22, 0xFF	; 255
    1564:	7f 4f       	sbci	r23, 0xFF	; 255
    1566:	80 ea       	ldi	r24, 0xA0	; 160
    1568:	98 e0       	ldi	r25, 0x08	; 8
    156a:	a8 dd       	rcall	.-1200   	; 0x10bc <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    156c:	6b eb       	ldi	r22, 0xBB	; 187
    156e:	74 e0       	ldi	r23, 0x04	; 4
    1570:	84 ed       	ldi	r24, 0xD4	; 212
    1572:	94 e0       	ldi	r25, 0x04	; 4
    1574:	23 d6       	rcall	.+3142   	; 0x21bc <fdevopen>

	stdio_serial_init(&USARTC0, &usart_options); //ASF function that initializes the UART peripheral
}
    1576:	27 96       	adiw	r28, 0x07	; 7
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	08 95       	ret

00001582 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	09 f4       	brne	.+2      	; 0x1588 <sysclk_enable_peripheral_clock+0x6>
    1586:	35 c1       	rjmp	.+618    	; 0x17f2 <sysclk_enable_peripheral_clock+0x270>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1588:	80 3c       	cpi	r24, 0xC0	; 192
    158a:	91 05       	cpc	r25, r1
    158c:	21 f4       	brne	.+8      	; 0x1596 <sysclk_enable_peripheral_clock+0x14>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    158e:	60 e1       	ldi	r22, 0x10	; 16
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	e5 c9       	rjmp	.-3126   	; 0x95e <sysclk_enable_module>
    1594:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1596:	80 34       	cpi	r24, 0x40	; 64
    1598:	24 e0       	ldi	r18, 0x04	; 4
    159a:	92 07       	cpc	r25, r18
    159c:	21 f4       	brne	.+8      	; 0x15a6 <sysclk_enable_peripheral_clock+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    159e:	68 e0       	ldi	r22, 0x08	; 8
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	dd c9       	rjmp	.-3142   	; 0x95e <sysclk_enable_module>
    15a4:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    15a6:	81 15       	cp	r24, r1
    15a8:	24 e0       	ldi	r18, 0x04	; 4
    15aa:	92 07       	cpc	r25, r18
    15ac:	21 f4       	brne	.+8      	; 0x15b6 <sysclk_enable_peripheral_clock+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    15ae:	64 e0       	ldi	r22, 0x04	; 4
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	d5 c9       	rjmp	.-3158   	; 0x95e <sysclk_enable_module>
    15b4:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    15b6:	80 38       	cpi	r24, 0x80	; 128
    15b8:	21 e0       	ldi	r18, 0x01	; 1
    15ba:	92 07       	cpc	r25, r18
    15bc:	21 f4       	brne	.+8      	; 0x15c6 <sysclk_enable_peripheral_clock+0x44>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    15be:	62 e0       	ldi	r22, 0x02	; 2
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	cd c9       	rjmp	.-3174   	; 0x95e <sysclk_enable_module>
    15c4:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    15c6:	81 15       	cp	r24, r1
    15c8:	21 e0       	ldi	r18, 0x01	; 1
    15ca:	92 07       	cpc	r25, r18
    15cc:	21 f4       	brne	.+8      	; 0x15d6 <sysclk_enable_peripheral_clock+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	c5 c9       	rjmp	.-3190   	; 0x95e <sysclk_enable_module>
    15d4:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    15d6:	80 38       	cpi	r24, 0x80	; 128
    15d8:	23 e0       	ldi	r18, 0x03	; 3
    15da:	92 07       	cpc	r25, r18
    15dc:	21 f4       	brne	.+8      	; 0x15e6 <sysclk_enable_peripheral_clock+0x64>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	bd c9       	rjmp	.-3206   	; 0x95e <sysclk_enable_module>
    15e4:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    15e6:	80 39       	cpi	r24, 0x90	; 144
    15e8:	23 e0       	ldi	r18, 0x03	; 3
    15ea:	92 07       	cpc	r25, r18
    15ec:	21 f4       	brne	.+8      	; 0x15f6 <sysclk_enable_peripheral_clock+0x74>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	b5 c9       	rjmp	.-3222   	; 0x95e <sysclk_enable_module>
    15f4:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    15f6:	81 15       	cp	r24, r1
    15f8:	22 e0       	ldi	r18, 0x02	; 2
    15fa:	92 07       	cpc	r25, r18
    15fc:	21 f4       	brne	.+8      	; 0x1606 <sysclk_enable_peripheral_clock+0x84>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    15fe:	62 e0       	ldi	r22, 0x02	; 2
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	ad c9       	rjmp	.-3238   	; 0x95e <sysclk_enable_module>
    1604:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1606:	80 34       	cpi	r24, 0x40	; 64
    1608:	22 e0       	ldi	r18, 0x02	; 2
    160a:	92 07       	cpc	r25, r18
    160c:	21 f4       	brne	.+8      	; 0x1616 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    160e:	62 e0       	ldi	r22, 0x02	; 2
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	a5 c9       	rjmp	.-3254   	; 0x95e <sysclk_enable_module>
    1614:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1616:	81 15       	cp	r24, r1
    1618:	23 e0       	ldi	r18, 0x03	; 3
    161a:	92 07       	cpc	r25, r18
    161c:	21 f4       	brne	.+8      	; 0x1626 <sysclk_enable_peripheral_clock+0xa4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    161e:	64 e0       	ldi	r22, 0x04	; 4
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	9d c9       	rjmp	.-3270   	; 0x95e <sysclk_enable_module>
    1624:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1626:	80 32       	cpi	r24, 0x20	; 32
    1628:	23 e0       	ldi	r18, 0x03	; 3
    162a:	92 07       	cpc	r25, r18
    162c:	21 f4       	brne	.+8      	; 0x1636 <sysclk_enable_peripheral_clock+0xb4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    162e:	64 e0       	ldi	r22, 0x04	; 4
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	95 c9       	rjmp	.-3286   	; 0x95e <sysclk_enable_module>
    1634:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1636:	81 15       	cp	r24, r1
    1638:	28 e0       	ldi	r18, 0x08	; 8
    163a:	92 07       	cpc	r25, r18
    163c:	21 f4       	brne	.+8      	; 0x1646 <sysclk_enable_peripheral_clock+0xc4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	83 e0       	ldi	r24, 0x03	; 3
    1642:	8d c9       	rjmp	.-3302   	; 0x95e <sysclk_enable_module>
    1644:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1646:	81 15       	cp	r24, r1
    1648:	29 e0       	ldi	r18, 0x09	; 9
    164a:	92 07       	cpc	r25, r18
    164c:	21 f4       	brne	.+8      	; 0x1656 <sysclk_enable_peripheral_clock+0xd4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    164e:	61 e0       	ldi	r22, 0x01	; 1
    1650:	84 e0       	ldi	r24, 0x04	; 4
    1652:	85 c9       	rjmp	.-3318   	; 0x95e <sysclk_enable_module>
    1654:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1656:	81 15       	cp	r24, r1
    1658:	2a e0       	ldi	r18, 0x0A	; 10
    165a:	92 07       	cpc	r25, r18
    165c:	21 f4       	brne	.+8      	; 0x1666 <sysclk_enable_peripheral_clock+0xe4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	85 e0       	ldi	r24, 0x05	; 5
    1662:	7d c9       	rjmp	.-3334   	; 0x95e <sysclk_enable_module>
    1664:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1666:	81 15       	cp	r24, r1
    1668:	2b e0       	ldi	r18, 0x0B	; 11
    166a:	92 07       	cpc	r25, r18
    166c:	21 f4       	brne	.+8      	; 0x1676 <sysclk_enable_peripheral_clock+0xf4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    166e:	61 e0       	ldi	r22, 0x01	; 1
    1670:	86 e0       	ldi	r24, 0x06	; 6
    1672:	75 c9       	rjmp	.-3350   	; 0x95e <sysclk_enable_module>
    1674:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1676:	80 34       	cpi	r24, 0x40	; 64
    1678:	28 e0       	ldi	r18, 0x08	; 8
    167a:	92 07       	cpc	r25, r18
    167c:	21 f4       	brne	.+8      	; 0x1686 <sysclk_enable_peripheral_clock+0x104>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    167e:	62 e0       	ldi	r22, 0x02	; 2
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	6d c9       	rjmp	.-3366   	; 0x95e <sysclk_enable_module>
    1684:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1686:	80 34       	cpi	r24, 0x40	; 64
    1688:	29 e0       	ldi	r18, 0x09	; 9
    168a:	92 07       	cpc	r25, r18
    168c:	21 f4       	brne	.+8      	; 0x1696 <sysclk_enable_peripheral_clock+0x114>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    168e:	62 e0       	ldi	r22, 0x02	; 2
    1690:	84 e0       	ldi	r24, 0x04	; 4
    1692:	65 c9       	rjmp	.-3382   	; 0x95e <sysclk_enable_module>
    1694:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1696:	80 34       	cpi	r24, 0x40	; 64
    1698:	2a e0       	ldi	r18, 0x0A	; 10
    169a:	92 07       	cpc	r25, r18
    169c:	21 f4       	brne	.+8      	; 0x16a6 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    169e:	62 e0       	ldi	r22, 0x02	; 2
    16a0:	85 e0       	ldi	r24, 0x05	; 5
    16a2:	5d c9       	rjmp	.-3398   	; 0x95e <sysclk_enable_module>
    16a4:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    16a6:	80 34       	cpi	r24, 0x40	; 64
    16a8:	2b e0       	ldi	r18, 0x0B	; 11
    16aa:	92 07       	cpc	r25, r18
    16ac:	21 f4       	brne	.+8      	; 0x16b6 <sysclk_enable_peripheral_clock+0x134>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    16ae:	62 e0       	ldi	r22, 0x02	; 2
    16b0:	86 e0       	ldi	r24, 0x06	; 6
    16b2:	55 c9       	rjmp	.-3414   	; 0x95e <sysclk_enable_module>
    16b4:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    16b6:	80 39       	cpi	r24, 0x90	; 144
    16b8:	28 e0       	ldi	r18, 0x08	; 8
    16ba:	92 07       	cpc	r25, r18
    16bc:	21 f4       	brne	.+8      	; 0x16c6 <sysclk_enable_peripheral_clock+0x144>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    16be:	64 e0       	ldi	r22, 0x04	; 4
    16c0:	83 e0       	ldi	r24, 0x03	; 3
    16c2:	4d c9       	rjmp	.-3430   	; 0x95e <sysclk_enable_module>
    16c4:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    16c6:	80 39       	cpi	r24, 0x90	; 144
    16c8:	29 e0       	ldi	r18, 0x09	; 9
    16ca:	92 07       	cpc	r25, r18
    16cc:	21 f4       	brne	.+8      	; 0x16d6 <sysclk_enable_peripheral_clock+0x154>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    16ce:	64 e0       	ldi	r22, 0x04	; 4
    16d0:	84 e0       	ldi	r24, 0x04	; 4
    16d2:	45 c9       	rjmp	.-3446   	; 0x95e <sysclk_enable_module>
    16d4:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    16d6:	80 39       	cpi	r24, 0x90	; 144
    16d8:	2a e0       	ldi	r18, 0x0A	; 10
    16da:	92 07       	cpc	r25, r18
    16dc:	21 f4       	brne	.+8      	; 0x16e6 <sysclk_enable_peripheral_clock+0x164>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    16de:	64 e0       	ldi	r22, 0x04	; 4
    16e0:	85 e0       	ldi	r24, 0x05	; 5
    16e2:	3d c9       	rjmp	.-3462   	; 0x95e <sysclk_enable_module>
    16e4:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    16e6:	80 39       	cpi	r24, 0x90	; 144
    16e8:	2b e0       	ldi	r18, 0x0B	; 11
    16ea:	92 07       	cpc	r25, r18
    16ec:	21 f4       	brne	.+8      	; 0x16f6 <sysclk_enable_peripheral_clock+0x174>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    16ee:	64 e0       	ldi	r22, 0x04	; 4
    16f0:	86 e0       	ldi	r24, 0x06	; 6
    16f2:	35 c9       	rjmp	.-3478   	; 0x95e <sysclk_enable_module>
    16f4:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    16f6:	80 3c       	cpi	r24, 0xC0	; 192
    16f8:	28 e0       	ldi	r18, 0x08	; 8
    16fa:	92 07       	cpc	r25, r18
    16fc:	21 f4       	brne	.+8      	; 0x1706 <sysclk_enable_peripheral_clock+0x184>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    16fe:	68 e0       	ldi	r22, 0x08	; 8
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	2d c9       	rjmp	.-3494   	; 0x95e <sysclk_enable_module>
    1704:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1706:	80 3c       	cpi	r24, 0xC0	; 192
    1708:	29 e0       	ldi	r18, 0x09	; 9
    170a:	92 07       	cpc	r25, r18
    170c:	21 f4       	brne	.+8      	; 0x1716 <sysclk_enable_peripheral_clock+0x194>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    170e:	68 e0       	ldi	r22, 0x08	; 8
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	25 c9       	rjmp	.-3510   	; 0x95e <sysclk_enable_module>
    1714:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1716:	80 3c       	cpi	r24, 0xC0	; 192
    1718:	2a e0       	ldi	r18, 0x0A	; 10
    171a:	92 07       	cpc	r25, r18
    171c:	21 f4       	brne	.+8      	; 0x1726 <sysclk_enable_peripheral_clock+0x1a4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    171e:	68 e0       	ldi	r22, 0x08	; 8
    1720:	85 e0       	ldi	r24, 0x05	; 5
    1722:	1d c9       	rjmp	.-3526   	; 0x95e <sysclk_enable_module>
    1724:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1726:	80 3c       	cpi	r24, 0xC0	; 192
    1728:	2b e0       	ldi	r18, 0x0B	; 11
    172a:	92 07       	cpc	r25, r18
    172c:	21 f4       	brne	.+8      	; 0x1736 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    172e:	68 e0       	ldi	r22, 0x08	; 8
    1730:	86 e0       	ldi	r24, 0x06	; 6
    1732:	15 c9       	rjmp	.-3542   	; 0x95e <sysclk_enable_module>
    1734:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1736:	80 3a       	cpi	r24, 0xA0	; 160
    1738:	28 e0       	ldi	r18, 0x08	; 8
    173a:	92 07       	cpc	r25, r18
    173c:	21 f4       	brne	.+8      	; 0x1746 <sysclk_enable_peripheral_clock+0x1c4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    173e:	60 e1       	ldi	r22, 0x10	; 16
    1740:	83 e0       	ldi	r24, 0x03	; 3
    1742:	0d c9       	rjmp	.-3558   	; 0x95e <sysclk_enable_module>
    1744:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1746:	80 3a       	cpi	r24, 0xA0	; 160
    1748:	29 e0       	ldi	r18, 0x09	; 9
    174a:	92 07       	cpc	r25, r18
    174c:	21 f4       	brne	.+8      	; 0x1756 <sysclk_enable_peripheral_clock+0x1d4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    174e:	60 e1       	ldi	r22, 0x10	; 16
    1750:	84 e0       	ldi	r24, 0x04	; 4
    1752:	05 c9       	rjmp	.-3574   	; 0x95e <sysclk_enable_module>
    1754:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1756:	80 3a       	cpi	r24, 0xA0	; 160
    1758:	2a e0       	ldi	r18, 0x0A	; 10
    175a:	92 07       	cpc	r25, r18
    175c:	21 f4       	brne	.+8      	; 0x1766 <sysclk_enable_peripheral_clock+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    175e:	60 e1       	ldi	r22, 0x10	; 16
    1760:	85 e0       	ldi	r24, 0x05	; 5
    1762:	fd c8       	rjmp	.-3590   	; 0x95e <sysclk_enable_module>
    1764:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1766:	80 3a       	cpi	r24, 0xA0	; 160
    1768:	2b e0       	ldi	r18, 0x0B	; 11
    176a:	92 07       	cpc	r25, r18
    176c:	21 f4       	brne	.+8      	; 0x1776 <sysclk_enable_peripheral_clock+0x1f4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    176e:	60 e1       	ldi	r22, 0x10	; 16
    1770:	86 e0       	ldi	r24, 0x06	; 6
    1772:	f5 c8       	rjmp	.-3606   	; 0x95e <sysclk_enable_module>
    1774:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1776:	80 3b       	cpi	r24, 0xB0	; 176
    1778:	28 e0       	ldi	r18, 0x08	; 8
    177a:	92 07       	cpc	r25, r18
    177c:	21 f4       	brne	.+8      	; 0x1786 <sysclk_enable_peripheral_clock+0x204>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    177e:	60 e2       	ldi	r22, 0x20	; 32
    1780:	83 e0       	ldi	r24, 0x03	; 3
    1782:	ed c8       	rjmp	.-3622   	; 0x95e <sysclk_enable_module>
    1784:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1786:	80 3b       	cpi	r24, 0xB0	; 176
    1788:	29 e0       	ldi	r18, 0x09	; 9
    178a:	92 07       	cpc	r25, r18
    178c:	21 f4       	brne	.+8      	; 0x1796 <sysclk_enable_peripheral_clock+0x214>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    178e:	60 e2       	ldi	r22, 0x20	; 32
    1790:	84 e0       	ldi	r24, 0x04	; 4
    1792:	e5 c8       	rjmp	.-3638   	; 0x95e <sysclk_enable_module>
    1794:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1796:	80 3b       	cpi	r24, 0xB0	; 176
    1798:	2a e0       	ldi	r18, 0x0A	; 10
    179a:	92 07       	cpc	r25, r18
    179c:	21 f4       	brne	.+8      	; 0x17a6 <sysclk_enable_peripheral_clock+0x224>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    179e:	60 e2       	ldi	r22, 0x20	; 32
    17a0:	85 e0       	ldi	r24, 0x05	; 5
    17a2:	dd c8       	rjmp	.-3654   	; 0x95e <sysclk_enable_module>
    17a4:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    17a6:	80 3b       	cpi	r24, 0xB0	; 176
    17a8:	2b e0       	ldi	r18, 0x0B	; 11
    17aa:	92 07       	cpc	r25, r18
    17ac:	21 f4       	brne	.+8      	; 0x17b6 <sysclk_enable_peripheral_clock+0x234>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    17ae:	60 e2       	ldi	r22, 0x20	; 32
    17b0:	86 e0       	ldi	r24, 0x06	; 6
    17b2:	d5 c8       	rjmp	.-3670   	; 0x95e <sysclk_enable_module>
    17b4:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    17b6:	80 38       	cpi	r24, 0x80	; 128
    17b8:	24 e0       	ldi	r18, 0x04	; 4
    17ba:	92 07       	cpc	r25, r18
    17bc:	21 f4       	brne	.+8      	; 0x17c6 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    17be:	60 e4       	ldi	r22, 0x40	; 64
    17c0:	83 e0       	ldi	r24, 0x03	; 3
    17c2:	cd c8       	rjmp	.-3686   	; 0x95e <sysclk_enable_module>
    17c4:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    17c6:	80 39       	cpi	r24, 0x90	; 144
    17c8:	24 e0       	ldi	r18, 0x04	; 4
    17ca:	92 07       	cpc	r25, r18
    17cc:	21 f4       	brne	.+8      	; 0x17d6 <sysclk_enable_peripheral_clock+0x254>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    17ce:	60 e4       	ldi	r22, 0x40	; 64
    17d0:	84 e0       	ldi	r24, 0x04	; 4
    17d2:	c5 c8       	rjmp	.-3702   	; 0x95e <sysclk_enable_module>
    17d4:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    17d6:	80 3a       	cpi	r24, 0xA0	; 160
    17d8:	24 e0       	ldi	r18, 0x04	; 4
    17da:	92 07       	cpc	r25, r18
    17dc:	21 f4       	brne	.+8      	; 0x17e6 <sysclk_enable_peripheral_clock+0x264>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    17de:	60 e4       	ldi	r22, 0x40	; 64
    17e0:	85 e0       	ldi	r24, 0x05	; 5
    17e2:	bd c8       	rjmp	.-3718   	; 0x95e <sysclk_enable_module>
    17e4:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    17e6:	80 3b       	cpi	r24, 0xB0	; 176
    17e8:	94 40       	sbci	r25, 0x04	; 4
    17ea:	19 f4       	brne	.+6      	; 0x17f2 <sysclk_enable_peripheral_clock+0x270>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    17ec:	60 e4       	ldi	r22, 0x40	; 64
    17ee:	86 e0       	ldi	r24, 0x06	; 6
    17f0:	b6 c8       	rjmp	.-3732   	; 0x95e <sysclk_enable_module>
    17f2:	08 95       	ret

000017f4 <main>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main (void)
{
	/* Initialize the system clock, 32MHz, this also turns off all peripheral clocks */
	sysclk_init();
    17f4:	8a d8       	rcall	.-3820   	; 0x90a <sysclk_init>
	rtc_init();
    17f6:	0e 94 8e 01 	call	0x31c	; 0x31c <rtc_init>

	/* Peripheral clock inits */
	sysclk_enable_peripheral_clock(&USARTC0); //For every peripheral, you must enable the clock like shown here. Ex. Timer counters, SPI, ADCs
    17fa:	80 ea       	ldi	r24, 0xA0	; 160
    17fc:	98 e0       	ldi	r25, 0x08	; 8
    17fe:	c1 de       	rcall	.-638    	; 0x1582 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&ADCA); //Analog to Digital Converter clock initialization.
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	be de       	rcall	.-644    	; 0x1582 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCE0); //Timer Counter clock initialization
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	9a e0       	ldi	r25, 0x0A	; 10
    180a:	bb de       	rcall	.-650    	; 0x1582 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCD0);
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	99 e0       	ldi	r25, 0x09	; 9
    1810:	b8 de       	rcall	.-656    	; 0x1582 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCC0);
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	98 e0       	ldi	r25, 0x08	; 8
    1816:	b5 de       	rcall	.-662    	; 0x1582 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&SPIC); //Serial Port Interface initialization.
    1818:	80 ec       	ldi	r24, 0xC0	; 192
    181a:	98 e0       	ldi	r25, 0x08	; 8
    181c:	b2 de       	rcall	.-668    	; 0x1582 <sysclk_enable_peripheral_clock>
	
	/* Example, Timer Counter on PORTE */

	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES); //You must have this line for every timer counter due to a flaw in the design of the chip **************************
    181e:	64 e0       	ldi	r22, 0x04	; 4
    1820:	85 e0       	ldi	r24, 0x05	; 5
    1822:	9d d8       	rcall	.-3782   	; 0x95e <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1824:	64 e0       	ldi	r22, 0x04	; 4
    1826:	84 e0       	ldi	r24, 0x04	; 4
    1828:	9a d8       	rcall	.-3788   	; 0x95e <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C,PR_SPI_bm);
    182a:	68 e0       	ldi	r22, 0x08	; 8
    182c:	83 e0       	ldi	r24, 0x03	; 3
    182e:	97 d8       	rcall	.-3794   	; 0x95e <sysclk_enable_module>
	
	/* Initializations */;
	UART_Comms_Init();
    1830:	64 de       	rcall	.-824    	; 0x14fa <UART_Comms_Init>
	SPI_init();
    1832:	0e 94 96 03 	call	0x72c	; 0x72c <SPI_init>
	//TCE0_init(12499,100);
	TCD0_init();
    1836:	4d de       	rcall	.-870    	; 0x14d2 <TCD0_init>
	ADC_init();
    1838:	a2 dd       	rcall	.-1212   	; 0x137e <ADC_init>

	PORTF.DIR = 0b00000011;
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>

			if(EP_address >= 2047)
				EP_address = 0;
		}
		else
			printf("eeProm at %i reads %i",EP_address,nvm_eeprom_read_byte(EP_address));
    1840:	ce e5       	ldi	r28, 0x5E	; 94
    1842:	d0 e2       	ldi	r29, 0x20	; 32
	//flightStateOne();
	//flightStateTwo();
	// flightStateThree();

	while (1){
		test();
    1844:	11 d8       	rcall	.-4062   	; 0x868 <test>

		/*eeProm test*/
		if(rtc_get_time() - t > 15){
    1846:	0e 94 62 01 	call	0x2c4	; 0x2c4 <rtc_get_time>
    184a:	00 91 74 20 	lds	r16, 0x2074	; 0x802074 <__data_end>
    184e:	10 91 75 20 	lds	r17, 0x2075	; 0x802075 <__data_end+0x1>
    1852:	20 91 76 20 	lds	r18, 0x2076	; 0x802076 <__data_end+0x2>
    1856:	30 91 77 20 	lds	r19, 0x2077	; 0x802077 <__data_end+0x3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	80 1b       	sub	r24, r16
    1860:	91 0b       	sbc	r25, r17
    1862:	a2 0b       	sbc	r26, r18
    1864:	b3 0b       	sbc	r27, r19
    1866:	40 97       	sbiw	r24, 0x10	; 16
    1868:	a1 05       	cpc	r26, r1
    186a:	b1 05       	cpc	r27, r1
    186c:	a0 f0       	brcs	.+40     	; 0x1896 <main+0xa2>
			t = rtc_get_time();
    186e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <rtc_get_time>
    1872:	60 93 74 20 	sts	0x2074, r22	; 0x802074 <__data_end>
    1876:	70 93 75 20 	sts	0x2075, r23	; 0x802075 <__data_end+0x1>
    187a:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <__data_end+0x2>
    187e:	90 93 77 20 	sts	0x2077, r25	; 0x802077 <__data_end+0x3>
			nvm_eeprom_write_byte(EP_address,t);
    1882:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <EP_address>
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	c3 da       	rcall	.-2682   	; 0xe10 <nvm_eeprom_write_byte>
			EP_address++;
    188a:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <EP_address>
    188e:	8f 5f       	subi	r24, 0xFF	; 255
    1890:	80 93 78 20 	sts	0x2078, r24	; 0x802078 <EP_address>
    1894:	d7 cf       	rjmp	.-82     	; 0x1844 <main+0x50>

			if(EP_address >= 2047)
				EP_address = 0;
		}
		else
			printf("eeProm at %i reads %i",EP_address,nvm_eeprom_read_byte(EP_address));
    1896:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <EP_address>
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	85 da       	rcall	.-2806   	; 0xda8 <nvm_eeprom_read_byte>
    189e:	1f 92       	push	r1
    18a0:	8f 93       	push	r24
    18a2:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <EP_address>
    18a6:	1f 92       	push	r1
    18a8:	8f 93       	push	r24
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	d0 d4       	rcall	.+2464   	; 0x2250 <printf>
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	c3 cf       	rjmp	.-122    	; 0x1844 <main+0x50>

000018be <__subsf3>:
    18be:	50 58       	subi	r21, 0x80	; 128

000018c0 <__addsf3>:
    18c0:	bb 27       	eor	r27, r27
    18c2:	aa 27       	eor	r26, r26
    18c4:	0e d0       	rcall	.+28     	; 0x18e2 <__addsf3x>
    18c6:	d0 c1       	rjmp	.+928    	; 0x1c68 <__fp_round>
    18c8:	c1 d1       	rcall	.+898    	; 0x1c4c <__fp_pscA>
    18ca:	30 f0       	brcs	.+12     	; 0x18d8 <__addsf3+0x18>
    18cc:	c6 d1       	rcall	.+908    	; 0x1c5a <__fp_pscB>
    18ce:	20 f0       	brcs	.+8      	; 0x18d8 <__addsf3+0x18>
    18d0:	31 f4       	brne	.+12     	; 0x18de <__addsf3+0x1e>
    18d2:	9f 3f       	cpi	r25, 0xFF	; 255
    18d4:	11 f4       	brne	.+4      	; 0x18da <__addsf3+0x1a>
    18d6:	1e f4       	brtc	.+6      	; 0x18de <__addsf3+0x1e>
    18d8:	a6 c1       	rjmp	.+844    	; 0x1c26 <__fp_nan>
    18da:	0e f4       	brtc	.+2      	; 0x18de <__addsf3+0x1e>
    18dc:	e0 95       	com	r30
    18de:	e7 fb       	bst	r30, 7
    18e0:	9c c1       	rjmp	.+824    	; 0x1c1a <__fp_inf>

000018e2 <__addsf3x>:
    18e2:	e9 2f       	mov	r30, r25
    18e4:	d2 d1       	rcall	.+932    	; 0x1c8a <__fp_split3>
    18e6:	80 f3       	brcs	.-32     	; 0x18c8 <__addsf3+0x8>
    18e8:	ba 17       	cp	r27, r26
    18ea:	62 07       	cpc	r22, r18
    18ec:	73 07       	cpc	r23, r19
    18ee:	84 07       	cpc	r24, r20
    18f0:	95 07       	cpc	r25, r21
    18f2:	18 f0       	brcs	.+6      	; 0x18fa <__addsf3x+0x18>
    18f4:	71 f4       	brne	.+28     	; 0x1912 <__addsf3x+0x30>
    18f6:	9e f5       	brtc	.+102    	; 0x195e <__addsf3x+0x7c>
    18f8:	ea c1       	rjmp	.+980    	; 0x1cce <__fp_zero>
    18fa:	0e f4       	brtc	.+2      	; 0x18fe <__addsf3x+0x1c>
    18fc:	e0 95       	com	r30
    18fe:	0b 2e       	mov	r0, r27
    1900:	ba 2f       	mov	r27, r26
    1902:	a0 2d       	mov	r26, r0
    1904:	0b 01       	movw	r0, r22
    1906:	b9 01       	movw	r22, r18
    1908:	90 01       	movw	r18, r0
    190a:	0c 01       	movw	r0, r24
    190c:	ca 01       	movw	r24, r20
    190e:	a0 01       	movw	r20, r0
    1910:	11 24       	eor	r1, r1
    1912:	ff 27       	eor	r31, r31
    1914:	59 1b       	sub	r21, r25
    1916:	99 f0       	breq	.+38     	; 0x193e <__addsf3x+0x5c>
    1918:	59 3f       	cpi	r21, 0xF9	; 249
    191a:	50 f4       	brcc	.+20     	; 0x1930 <__addsf3x+0x4e>
    191c:	50 3e       	cpi	r21, 0xE0	; 224
    191e:	68 f1       	brcs	.+90     	; 0x197a <__addsf3x+0x98>
    1920:	1a 16       	cp	r1, r26
    1922:	f0 40       	sbci	r31, 0x00	; 0
    1924:	a2 2f       	mov	r26, r18
    1926:	23 2f       	mov	r18, r19
    1928:	34 2f       	mov	r19, r20
    192a:	44 27       	eor	r20, r20
    192c:	58 5f       	subi	r21, 0xF8	; 248
    192e:	f3 cf       	rjmp	.-26     	; 0x1916 <__addsf3x+0x34>
    1930:	46 95       	lsr	r20
    1932:	37 95       	ror	r19
    1934:	27 95       	ror	r18
    1936:	a7 95       	ror	r26
    1938:	f0 40       	sbci	r31, 0x00	; 0
    193a:	53 95       	inc	r21
    193c:	c9 f7       	brne	.-14     	; 0x1930 <__addsf3x+0x4e>
    193e:	7e f4       	brtc	.+30     	; 0x195e <__addsf3x+0x7c>
    1940:	1f 16       	cp	r1, r31
    1942:	ba 0b       	sbc	r27, r26
    1944:	62 0b       	sbc	r22, r18
    1946:	73 0b       	sbc	r23, r19
    1948:	84 0b       	sbc	r24, r20
    194a:	ba f0       	brmi	.+46     	; 0x197a <__addsf3x+0x98>
    194c:	91 50       	subi	r25, 0x01	; 1
    194e:	a1 f0       	breq	.+40     	; 0x1978 <__addsf3x+0x96>
    1950:	ff 0f       	add	r31, r31
    1952:	bb 1f       	adc	r27, r27
    1954:	66 1f       	adc	r22, r22
    1956:	77 1f       	adc	r23, r23
    1958:	88 1f       	adc	r24, r24
    195a:	c2 f7       	brpl	.-16     	; 0x194c <__addsf3x+0x6a>
    195c:	0e c0       	rjmp	.+28     	; 0x197a <__addsf3x+0x98>
    195e:	ba 0f       	add	r27, r26
    1960:	62 1f       	adc	r22, r18
    1962:	73 1f       	adc	r23, r19
    1964:	84 1f       	adc	r24, r20
    1966:	48 f4       	brcc	.+18     	; 0x197a <__addsf3x+0x98>
    1968:	87 95       	ror	r24
    196a:	77 95       	ror	r23
    196c:	67 95       	ror	r22
    196e:	b7 95       	ror	r27
    1970:	f7 95       	ror	r31
    1972:	9e 3f       	cpi	r25, 0xFE	; 254
    1974:	08 f0       	brcs	.+2      	; 0x1978 <__addsf3x+0x96>
    1976:	b3 cf       	rjmp	.-154    	; 0x18de <__addsf3+0x1e>
    1978:	93 95       	inc	r25
    197a:	88 0f       	add	r24, r24
    197c:	08 f0       	brcs	.+2      	; 0x1980 <__addsf3x+0x9e>
    197e:	99 27       	eor	r25, r25
    1980:	ee 0f       	add	r30, r30
    1982:	97 95       	ror	r25
    1984:	87 95       	ror	r24
    1986:	08 95       	ret

00001988 <__divsf3>:
    1988:	0c d0       	rcall	.+24     	; 0x19a2 <__divsf3x>
    198a:	6e c1       	rjmp	.+732    	; 0x1c68 <__fp_round>
    198c:	66 d1       	rcall	.+716    	; 0x1c5a <__fp_pscB>
    198e:	40 f0       	brcs	.+16     	; 0x19a0 <__divsf3+0x18>
    1990:	5d d1       	rcall	.+698    	; 0x1c4c <__fp_pscA>
    1992:	30 f0       	brcs	.+12     	; 0x19a0 <__divsf3+0x18>
    1994:	21 f4       	brne	.+8      	; 0x199e <__divsf3+0x16>
    1996:	5f 3f       	cpi	r21, 0xFF	; 255
    1998:	19 f0       	breq	.+6      	; 0x19a0 <__divsf3+0x18>
    199a:	3f c1       	rjmp	.+638    	; 0x1c1a <__fp_inf>
    199c:	51 11       	cpse	r21, r1
    199e:	98 c1       	rjmp	.+816    	; 0x1cd0 <__fp_szero>
    19a0:	42 c1       	rjmp	.+644    	; 0x1c26 <__fp_nan>

000019a2 <__divsf3x>:
    19a2:	73 d1       	rcall	.+742    	; 0x1c8a <__fp_split3>
    19a4:	98 f3       	brcs	.-26     	; 0x198c <__divsf3+0x4>

000019a6 <__divsf3_pse>:
    19a6:	99 23       	and	r25, r25
    19a8:	c9 f3       	breq	.-14     	; 0x199c <__divsf3+0x14>
    19aa:	55 23       	and	r21, r21
    19ac:	b1 f3       	breq	.-20     	; 0x199a <__divsf3+0x12>
    19ae:	95 1b       	sub	r25, r21
    19b0:	55 0b       	sbc	r21, r21
    19b2:	bb 27       	eor	r27, r27
    19b4:	aa 27       	eor	r26, r26
    19b6:	62 17       	cp	r22, r18
    19b8:	73 07       	cpc	r23, r19
    19ba:	84 07       	cpc	r24, r20
    19bc:	38 f0       	brcs	.+14     	; 0x19cc <__divsf3_pse+0x26>
    19be:	9f 5f       	subi	r25, 0xFF	; 255
    19c0:	5f 4f       	sbci	r21, 0xFF	; 255
    19c2:	22 0f       	add	r18, r18
    19c4:	33 1f       	adc	r19, r19
    19c6:	44 1f       	adc	r20, r20
    19c8:	aa 1f       	adc	r26, r26
    19ca:	a9 f3       	breq	.-22     	; 0x19b6 <__divsf3_pse+0x10>
    19cc:	33 d0       	rcall	.+102    	; 0x1a34 <__divsf3_pse+0x8e>
    19ce:	0e 2e       	mov	r0, r30
    19d0:	3a f0       	brmi	.+14     	; 0x19e0 <__divsf3_pse+0x3a>
    19d2:	e0 e8       	ldi	r30, 0x80	; 128
    19d4:	30 d0       	rcall	.+96     	; 0x1a36 <__divsf3_pse+0x90>
    19d6:	91 50       	subi	r25, 0x01	; 1
    19d8:	50 40       	sbci	r21, 0x00	; 0
    19da:	e6 95       	lsr	r30
    19dc:	00 1c       	adc	r0, r0
    19de:	ca f7       	brpl	.-14     	; 0x19d2 <__divsf3_pse+0x2c>
    19e0:	29 d0       	rcall	.+82     	; 0x1a34 <__divsf3_pse+0x8e>
    19e2:	fe 2f       	mov	r31, r30
    19e4:	27 d0       	rcall	.+78     	; 0x1a34 <__divsf3_pse+0x8e>
    19e6:	66 0f       	add	r22, r22
    19e8:	77 1f       	adc	r23, r23
    19ea:	88 1f       	adc	r24, r24
    19ec:	bb 1f       	adc	r27, r27
    19ee:	26 17       	cp	r18, r22
    19f0:	37 07       	cpc	r19, r23
    19f2:	48 07       	cpc	r20, r24
    19f4:	ab 07       	cpc	r26, r27
    19f6:	b0 e8       	ldi	r27, 0x80	; 128
    19f8:	09 f0       	breq	.+2      	; 0x19fc <__divsf3_pse+0x56>
    19fa:	bb 0b       	sbc	r27, r27
    19fc:	80 2d       	mov	r24, r0
    19fe:	bf 01       	movw	r22, r30
    1a00:	ff 27       	eor	r31, r31
    1a02:	93 58       	subi	r25, 0x83	; 131
    1a04:	5f 4f       	sbci	r21, 0xFF	; 255
    1a06:	2a f0       	brmi	.+10     	; 0x1a12 <__divsf3_pse+0x6c>
    1a08:	9e 3f       	cpi	r25, 0xFE	; 254
    1a0a:	51 05       	cpc	r21, r1
    1a0c:	68 f0       	brcs	.+26     	; 0x1a28 <__divsf3_pse+0x82>
    1a0e:	05 c1       	rjmp	.+522    	; 0x1c1a <__fp_inf>
    1a10:	5f c1       	rjmp	.+702    	; 0x1cd0 <__fp_szero>
    1a12:	5f 3f       	cpi	r21, 0xFF	; 255
    1a14:	ec f3       	brlt	.-6      	; 0x1a10 <__divsf3_pse+0x6a>
    1a16:	98 3e       	cpi	r25, 0xE8	; 232
    1a18:	dc f3       	brlt	.-10     	; 0x1a10 <__divsf3_pse+0x6a>
    1a1a:	86 95       	lsr	r24
    1a1c:	77 95       	ror	r23
    1a1e:	67 95       	ror	r22
    1a20:	b7 95       	ror	r27
    1a22:	f7 95       	ror	r31
    1a24:	9f 5f       	subi	r25, 0xFF	; 255
    1a26:	c9 f7       	brne	.-14     	; 0x1a1a <__divsf3_pse+0x74>
    1a28:	88 0f       	add	r24, r24
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	96 95       	lsr	r25
    1a2e:	87 95       	ror	r24
    1a30:	97 f9       	bld	r25, 7
    1a32:	08 95       	ret
    1a34:	e1 e0       	ldi	r30, 0x01	; 1
    1a36:	66 0f       	add	r22, r22
    1a38:	77 1f       	adc	r23, r23
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	62 17       	cp	r22, r18
    1a40:	73 07       	cpc	r23, r19
    1a42:	84 07       	cpc	r24, r20
    1a44:	ba 07       	cpc	r27, r26
    1a46:	20 f0       	brcs	.+8      	; 0x1a50 <__divsf3_pse+0xaa>
    1a48:	62 1b       	sub	r22, r18
    1a4a:	73 0b       	sbc	r23, r19
    1a4c:	84 0b       	sbc	r24, r20
    1a4e:	ba 0b       	sbc	r27, r26
    1a50:	ee 1f       	adc	r30, r30
    1a52:	88 f7       	brcc	.-30     	; 0x1a36 <__divsf3_pse+0x90>
    1a54:	e0 95       	com	r30
    1a56:	08 95       	ret

00001a58 <__fixsfdi>:
    1a58:	be e3       	ldi	r27, 0x3E	; 62
    1a5a:	04 d0       	rcall	.+8      	; 0x1a64 <__fixunssfdi+0x2>
    1a5c:	08 f4       	brcc	.+2      	; 0x1a60 <__fixsfdi+0x8>
    1a5e:	90 e8       	ldi	r25, 0x80	; 128
    1a60:	08 95       	ret

00001a62 <__fixunssfdi>:
    1a62:	bf e3       	ldi	r27, 0x3F	; 63
    1a64:	22 27       	eor	r18, r18
    1a66:	33 27       	eor	r19, r19
    1a68:	a9 01       	movw	r20, r18
    1a6a:	17 d1       	rcall	.+558    	; 0x1c9a <__fp_splitA>
    1a6c:	58 f1       	brcs	.+86     	; 0x1ac4 <__fixunssfdi+0x62>
    1a6e:	9f 57       	subi	r25, 0x7F	; 127
    1a70:	40 f1       	brcs	.+80     	; 0x1ac2 <__fixunssfdi+0x60>
    1a72:	b9 17       	cp	r27, r25
    1a74:	38 f1       	brcs	.+78     	; 0x1ac4 <__fixunssfdi+0x62>
    1a76:	bf e3       	ldi	r27, 0x3F	; 63
    1a78:	b9 1b       	sub	r27, r25
    1a7a:	99 27       	eor	r25, r25
    1a7c:	b8 50       	subi	r27, 0x08	; 8
    1a7e:	3a f4       	brpl	.+14     	; 0x1a8e <__fixunssfdi+0x2c>
    1a80:	66 0f       	add	r22, r22
    1a82:	77 1f       	adc	r23, r23
    1a84:	88 1f       	adc	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	b3 95       	inc	r27
    1a8a:	d2 f3       	brmi	.-12     	; 0x1a80 <__fixunssfdi+0x1e>
    1a8c:	16 c0       	rjmp	.+44     	; 0x1aba <__fixunssfdi+0x58>
    1a8e:	b8 50       	subi	r27, 0x08	; 8
    1a90:	4a f0       	brmi	.+18     	; 0x1aa4 <__fixunssfdi+0x42>
    1a92:	23 2f       	mov	r18, r19
    1a94:	34 2f       	mov	r19, r20
    1a96:	45 2f       	mov	r20, r21
    1a98:	56 2f       	mov	r21, r22
    1a9a:	67 2f       	mov	r22, r23
    1a9c:	78 2f       	mov	r23, r24
    1a9e:	88 27       	eor	r24, r24
    1aa0:	b8 50       	subi	r27, 0x08	; 8
    1aa2:	ba f7       	brpl	.-18     	; 0x1a92 <__fixunssfdi+0x30>
    1aa4:	b8 5f       	subi	r27, 0xF8	; 248
    1aa6:	49 f0       	breq	.+18     	; 0x1aba <__fixunssfdi+0x58>
    1aa8:	86 95       	lsr	r24
    1aaa:	77 95       	ror	r23
    1aac:	67 95       	ror	r22
    1aae:	57 95       	ror	r21
    1ab0:	47 95       	ror	r20
    1ab2:	37 95       	ror	r19
    1ab4:	27 95       	ror	r18
    1ab6:	ba 95       	dec	r27
    1ab8:	b9 f7       	brne	.-18     	; 0x1aa8 <__fixunssfdi+0x46>
    1aba:	0e f4       	brtc	.+2      	; 0x1abe <__fixunssfdi+0x5c>
    1abc:	b7 d0       	rcall	.+366    	; 0x1c2c <__fp_negdi>
    1abe:	88 94       	clc
    1ac0:	08 95       	ret
    1ac2:	88 94       	clc
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	cb 01       	movw	r24, r22
    1aca:	08 95       	ret

00001acc <__fixunssfsi>:
    1acc:	e6 d0       	rcall	.+460    	; 0x1c9a <__fp_splitA>
    1ace:	88 f0       	brcs	.+34     	; 0x1af2 <__fixunssfsi+0x26>
    1ad0:	9f 57       	subi	r25, 0x7F	; 127
    1ad2:	90 f0       	brcs	.+36     	; 0x1af8 <__fixunssfsi+0x2c>
    1ad4:	b9 2f       	mov	r27, r25
    1ad6:	99 27       	eor	r25, r25
    1ad8:	b7 51       	subi	r27, 0x17	; 23
    1ada:	a0 f0       	brcs	.+40     	; 0x1b04 <__fixunssfsi+0x38>
    1adc:	d1 f0       	breq	.+52     	; 0x1b12 <__fixunssfsi+0x46>
    1ade:	66 0f       	add	r22, r22
    1ae0:	77 1f       	adc	r23, r23
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	1a f0       	brmi	.+6      	; 0x1aee <__fixunssfsi+0x22>
    1ae8:	ba 95       	dec	r27
    1aea:	c9 f7       	brne	.-14     	; 0x1ade <__fixunssfsi+0x12>
    1aec:	12 c0       	rjmp	.+36     	; 0x1b12 <__fixunssfsi+0x46>
    1aee:	b1 30       	cpi	r27, 0x01	; 1
    1af0:	81 f0       	breq	.+32     	; 0x1b12 <__fixunssfsi+0x46>
    1af2:	ed d0       	rcall	.+474    	; 0x1cce <__fp_zero>
    1af4:	b1 e0       	ldi	r27, 0x01	; 1
    1af6:	08 95       	ret
    1af8:	ea c0       	rjmp	.+468    	; 0x1cce <__fp_zero>
    1afa:	67 2f       	mov	r22, r23
    1afc:	78 2f       	mov	r23, r24
    1afe:	88 27       	eor	r24, r24
    1b00:	b8 5f       	subi	r27, 0xF8	; 248
    1b02:	39 f0       	breq	.+14     	; 0x1b12 <__fixunssfsi+0x46>
    1b04:	b9 3f       	cpi	r27, 0xF9	; 249
    1b06:	cc f3       	brlt	.-14     	; 0x1afa <__fixunssfsi+0x2e>
    1b08:	86 95       	lsr	r24
    1b0a:	77 95       	ror	r23
    1b0c:	67 95       	ror	r22
    1b0e:	b3 95       	inc	r27
    1b10:	d9 f7       	brne	.-10     	; 0x1b08 <__fixunssfsi+0x3c>
    1b12:	3e f4       	brtc	.+14     	; 0x1b22 <__fixunssfsi+0x56>
    1b14:	90 95       	com	r25
    1b16:	80 95       	com	r24
    1b18:	70 95       	com	r23
    1b1a:	61 95       	neg	r22
    1b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b20:	9f 4f       	sbci	r25, 0xFF	; 255
    1b22:	08 95       	ret

00001b24 <__floatunsisf>:
    1b24:	e8 94       	clt
    1b26:	09 c0       	rjmp	.+18     	; 0x1b3a <__floatsisf+0x12>

00001b28 <__floatsisf>:
    1b28:	97 fb       	bst	r25, 7
    1b2a:	3e f4       	brtc	.+14     	; 0x1b3a <__floatsisf+0x12>
    1b2c:	90 95       	com	r25
    1b2e:	80 95       	com	r24
    1b30:	70 95       	com	r23
    1b32:	61 95       	neg	r22
    1b34:	7f 4f       	sbci	r23, 0xFF	; 255
    1b36:	8f 4f       	sbci	r24, 0xFF	; 255
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	99 23       	and	r25, r25
    1b3c:	a9 f0       	breq	.+42     	; 0x1b68 <__floatsisf+0x40>
    1b3e:	f9 2f       	mov	r31, r25
    1b40:	96 e9       	ldi	r25, 0x96	; 150
    1b42:	bb 27       	eor	r27, r27
    1b44:	93 95       	inc	r25
    1b46:	f6 95       	lsr	r31
    1b48:	87 95       	ror	r24
    1b4a:	77 95       	ror	r23
    1b4c:	67 95       	ror	r22
    1b4e:	b7 95       	ror	r27
    1b50:	f1 11       	cpse	r31, r1
    1b52:	f8 cf       	rjmp	.-16     	; 0x1b44 <__floatsisf+0x1c>
    1b54:	fa f4       	brpl	.+62     	; 0x1b94 <__floatsisf+0x6c>
    1b56:	bb 0f       	add	r27, r27
    1b58:	11 f4       	brne	.+4      	; 0x1b5e <__floatsisf+0x36>
    1b5a:	60 ff       	sbrs	r22, 0
    1b5c:	1b c0       	rjmp	.+54     	; 0x1b94 <__floatsisf+0x6c>
    1b5e:	6f 5f       	subi	r22, 0xFF	; 255
    1b60:	7f 4f       	sbci	r23, 0xFF	; 255
    1b62:	8f 4f       	sbci	r24, 0xFF	; 255
    1b64:	9f 4f       	sbci	r25, 0xFF	; 255
    1b66:	16 c0       	rjmp	.+44     	; 0x1b94 <__floatsisf+0x6c>
    1b68:	88 23       	and	r24, r24
    1b6a:	11 f0       	breq	.+4      	; 0x1b70 <__floatsisf+0x48>
    1b6c:	96 e9       	ldi	r25, 0x96	; 150
    1b6e:	11 c0       	rjmp	.+34     	; 0x1b92 <__floatsisf+0x6a>
    1b70:	77 23       	and	r23, r23
    1b72:	21 f0       	breq	.+8      	; 0x1b7c <__floatsisf+0x54>
    1b74:	9e e8       	ldi	r25, 0x8E	; 142
    1b76:	87 2f       	mov	r24, r23
    1b78:	76 2f       	mov	r23, r22
    1b7a:	05 c0       	rjmp	.+10     	; 0x1b86 <__floatsisf+0x5e>
    1b7c:	66 23       	and	r22, r22
    1b7e:	71 f0       	breq	.+28     	; 0x1b9c <__floatsisf+0x74>
    1b80:	96 e8       	ldi	r25, 0x86	; 134
    1b82:	86 2f       	mov	r24, r22
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	2a f0       	brmi	.+10     	; 0x1b94 <__floatsisf+0x6c>
    1b8a:	9a 95       	dec	r25
    1b8c:	66 0f       	add	r22, r22
    1b8e:	77 1f       	adc	r23, r23
    1b90:	88 1f       	adc	r24, r24
    1b92:	da f7       	brpl	.-10     	; 0x1b8a <__floatsisf+0x62>
    1b94:	88 0f       	add	r24, r24
    1b96:	96 95       	lsr	r25
    1b98:	87 95       	ror	r24
    1b9a:	97 f9       	bld	r25, 7
    1b9c:	08 95       	ret

00001b9e <__floatundisf>:
    1b9e:	e8 94       	clt

00001ba0 <__fp_di2sf>:
    1ba0:	f9 2f       	mov	r31, r25
    1ba2:	96 eb       	ldi	r25, 0xB6	; 182
    1ba4:	ff 23       	and	r31, r31
    1ba6:	81 f0       	breq	.+32     	; 0x1bc8 <__fp_di2sf+0x28>
    1ba8:	12 16       	cp	r1, r18
    1baa:	13 06       	cpc	r1, r19
    1bac:	14 06       	cpc	r1, r20
    1bae:	44 0b       	sbc	r20, r20
    1bb0:	93 95       	inc	r25
    1bb2:	f6 95       	lsr	r31
    1bb4:	87 95       	ror	r24
    1bb6:	77 95       	ror	r23
    1bb8:	67 95       	ror	r22
    1bba:	57 95       	ror	r21
    1bbc:	40 40       	sbci	r20, 0x00	; 0
    1bbe:	ff 23       	and	r31, r31
    1bc0:	b9 f7       	brne	.-18     	; 0x1bb0 <__fp_di2sf+0x10>
    1bc2:	1b c0       	rjmp	.+54     	; 0x1bfa <__fp_di2sf+0x5a>
    1bc4:	99 27       	eor	r25, r25
    1bc6:	08 95       	ret
    1bc8:	88 23       	and	r24, r24
    1bca:	51 f4       	brne	.+20     	; 0x1be0 <__fp_di2sf+0x40>
    1bcc:	98 50       	subi	r25, 0x08	; 8
    1bce:	d2 f7       	brpl	.-12     	; 0x1bc4 <__fp_di2sf+0x24>
    1bd0:	87 2b       	or	r24, r23
    1bd2:	76 2f       	mov	r23, r22
    1bd4:	65 2f       	mov	r22, r21
    1bd6:	54 2f       	mov	r21, r20
    1bd8:	43 2f       	mov	r20, r19
    1bda:	32 2f       	mov	r19, r18
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	b1 f3       	breq	.-20     	; 0x1bcc <__fp_di2sf+0x2c>
    1be0:	12 16       	cp	r1, r18
    1be2:	13 06       	cpc	r1, r19
    1be4:	14 06       	cpc	r1, r20
    1be6:	44 0b       	sbc	r20, r20
    1be8:	88 23       	and	r24, r24
    1bea:	3a f0       	brmi	.+14     	; 0x1bfa <__fp_di2sf+0x5a>
    1bec:	9a 95       	dec	r25
    1bee:	44 0f       	add	r20, r20
    1bf0:	55 1f       	adc	r21, r21
    1bf2:	66 1f       	adc	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	ca f7       	brpl	.-14     	; 0x1bec <__fp_di2sf+0x4c>
    1bfa:	55 23       	and	r21, r21
    1bfc:	4a f4       	brpl	.+18     	; 0x1c10 <__fp_di2sf+0x70>
    1bfe:	44 0f       	add	r20, r20
    1c00:	55 1f       	adc	r21, r21
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <__fp_di2sf+0x68>
    1c04:	60 ff       	sbrs	r22, 0
    1c06:	04 c0       	rjmp	.+8      	; 0x1c10 <__fp_di2sf+0x70>
    1c08:	6f 5f       	subi	r22, 0xFF	; 255
    1c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c10:	88 0f       	add	r24, r24
    1c12:	96 95       	lsr	r25
    1c14:	87 95       	ror	r24
    1c16:	97 f9       	bld	r25, 7
    1c18:	08 95       	ret

00001c1a <__fp_inf>:
    1c1a:	97 f9       	bld	r25, 7
    1c1c:	9f 67       	ori	r25, 0x7F	; 127
    1c1e:	80 e8       	ldi	r24, 0x80	; 128
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	08 95       	ret

00001c26 <__fp_nan>:
    1c26:	9f ef       	ldi	r25, 0xFF	; 255
    1c28:	80 ec       	ldi	r24, 0xC0	; 192
    1c2a:	08 95       	ret

00001c2c <__fp_negdi>:
    1c2c:	90 95       	com	r25
    1c2e:	80 95       	com	r24
    1c30:	70 95       	com	r23
    1c32:	60 95       	com	r22
    1c34:	50 95       	com	r21
    1c36:	40 95       	com	r20
    1c38:	30 95       	com	r19
    1c3a:	21 95       	neg	r18
    1c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3e:	4f 4f       	sbci	r20, 0xFF	; 255
    1c40:	5f 4f       	sbci	r21, 0xFF	; 255
    1c42:	6f 4f       	sbci	r22, 0xFF	; 255
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255
    1c46:	8f 4f       	sbci	r24, 0xFF	; 255
    1c48:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4a:	08 95       	ret

00001c4c <__fp_pscA>:
    1c4c:	00 24       	eor	r0, r0
    1c4e:	0a 94       	dec	r0
    1c50:	16 16       	cp	r1, r22
    1c52:	17 06       	cpc	r1, r23
    1c54:	18 06       	cpc	r1, r24
    1c56:	09 06       	cpc	r0, r25
    1c58:	08 95       	ret

00001c5a <__fp_pscB>:
    1c5a:	00 24       	eor	r0, r0
    1c5c:	0a 94       	dec	r0
    1c5e:	12 16       	cp	r1, r18
    1c60:	13 06       	cpc	r1, r19
    1c62:	14 06       	cpc	r1, r20
    1c64:	05 06       	cpc	r0, r21
    1c66:	08 95       	ret

00001c68 <__fp_round>:
    1c68:	09 2e       	mov	r0, r25
    1c6a:	03 94       	inc	r0
    1c6c:	00 0c       	add	r0, r0
    1c6e:	11 f4       	brne	.+4      	; 0x1c74 <__fp_round+0xc>
    1c70:	88 23       	and	r24, r24
    1c72:	52 f0       	brmi	.+20     	; 0x1c88 <__fp_round+0x20>
    1c74:	bb 0f       	add	r27, r27
    1c76:	40 f4       	brcc	.+16     	; 0x1c88 <__fp_round+0x20>
    1c78:	bf 2b       	or	r27, r31
    1c7a:	11 f4       	brne	.+4      	; 0x1c80 <__fp_round+0x18>
    1c7c:	60 ff       	sbrs	r22, 0
    1c7e:	04 c0       	rjmp	.+8      	; 0x1c88 <__fp_round+0x20>
    1c80:	6f 5f       	subi	r22, 0xFF	; 255
    1c82:	7f 4f       	sbci	r23, 0xFF	; 255
    1c84:	8f 4f       	sbci	r24, 0xFF	; 255
    1c86:	9f 4f       	sbci	r25, 0xFF	; 255
    1c88:	08 95       	ret

00001c8a <__fp_split3>:
    1c8a:	57 fd       	sbrc	r21, 7
    1c8c:	90 58       	subi	r25, 0x80	; 128
    1c8e:	44 0f       	add	r20, r20
    1c90:	55 1f       	adc	r21, r21
    1c92:	59 f0       	breq	.+22     	; 0x1caa <__fp_splitA+0x10>
    1c94:	5f 3f       	cpi	r21, 0xFF	; 255
    1c96:	71 f0       	breq	.+28     	; 0x1cb4 <__fp_splitA+0x1a>
    1c98:	47 95       	ror	r20

00001c9a <__fp_splitA>:
    1c9a:	88 0f       	add	r24, r24
    1c9c:	97 fb       	bst	r25, 7
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	61 f0       	breq	.+24     	; 0x1cba <__fp_splitA+0x20>
    1ca2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ca4:	79 f0       	breq	.+30     	; 0x1cc4 <__fp_splitA+0x2a>
    1ca6:	87 95       	ror	r24
    1ca8:	08 95       	ret
    1caa:	12 16       	cp	r1, r18
    1cac:	13 06       	cpc	r1, r19
    1cae:	14 06       	cpc	r1, r20
    1cb0:	55 1f       	adc	r21, r21
    1cb2:	f2 cf       	rjmp	.-28     	; 0x1c98 <__fp_split3+0xe>
    1cb4:	46 95       	lsr	r20
    1cb6:	f1 df       	rcall	.-30     	; 0x1c9a <__fp_splitA>
    1cb8:	08 c0       	rjmp	.+16     	; 0x1cca <__fp_splitA+0x30>
    1cba:	16 16       	cp	r1, r22
    1cbc:	17 06       	cpc	r1, r23
    1cbe:	18 06       	cpc	r1, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	f1 cf       	rjmp	.-30     	; 0x1ca6 <__fp_splitA+0xc>
    1cc4:	86 95       	lsr	r24
    1cc6:	71 05       	cpc	r23, r1
    1cc8:	61 05       	cpc	r22, r1
    1cca:	08 94       	sec
    1ccc:	08 95       	ret

00001cce <__fp_zero>:
    1cce:	e8 94       	clt

00001cd0 <__fp_szero>:
    1cd0:	bb 27       	eor	r27, r27
    1cd2:	66 27       	eor	r22, r22
    1cd4:	77 27       	eor	r23, r23
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	97 f9       	bld	r25, 7
    1cda:	08 95       	ret
    1cdc:	0e f0       	brts	.+2      	; 0x1ce0 <__fp_szero+0x10>
    1cde:	23 c1       	rjmp	.+582    	; 0x1f26 <__fp_mpack>
    1ce0:	a2 cf       	rjmp	.-188    	; 0x1c26 <__fp_nan>
    1ce2:	68 94       	set
    1ce4:	9a cf       	rjmp	.-204    	; 0x1c1a <__fp_inf>

00001ce6 <log>:
    1ce6:	d9 df       	rcall	.-78     	; 0x1c9a <__fp_splitA>
    1ce8:	c8 f3       	brcs	.-14     	; 0x1cdc <__fp_szero+0xc>
    1cea:	99 23       	and	r25, r25
    1cec:	d1 f3       	breq	.-12     	; 0x1ce2 <__fp_szero+0x12>
    1cee:	c6 f3       	brts	.-16     	; 0x1ce0 <__fp_szero+0x10>
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	1f 93       	push	r17
    1cf6:	0f 93       	push	r16
    1cf8:	ff 92       	push	r15
    1cfa:	c9 2f       	mov	r28, r25
    1cfc:	dd 27       	eor	r29, r29
    1cfe:	88 23       	and	r24, r24
    1d00:	2a f0       	brmi	.+10     	; 0x1d0c <log+0x26>
    1d02:	21 97       	sbiw	r28, 0x01	; 1
    1d04:	66 0f       	add	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	88 1f       	adc	r24, r24
    1d0a:	da f7       	brpl	.-10     	; 0x1d02 <log+0x1c>
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f eb       	ldi	r21, 0xBF	; 191
    1d14:	9f e3       	ldi	r25, 0x3F	; 63
    1d16:	88 39       	cpi	r24, 0x98	; 152
    1d18:	20 f0       	brcs	.+8      	; 0x1d22 <log+0x3c>
    1d1a:	80 3e       	cpi	r24, 0xE0	; 224
    1d1c:	30 f0       	brcs	.+12     	; 0x1d2a <log+0x44>
    1d1e:	21 96       	adiw	r28, 0x01	; 1
    1d20:	8f 77       	andi	r24, 0x7F	; 127
    1d22:	ce dd       	rcall	.-1124   	; 0x18c0 <__addsf3>
    1d24:	e4 ef       	ldi	r30, 0xF4	; 244
    1d26:	f1 e0       	ldi	r31, 0x01	; 1
    1d28:	03 c0       	rjmp	.+6      	; 0x1d30 <log+0x4a>
    1d2a:	ca dd       	rcall	.-1132   	; 0x18c0 <__addsf3>
    1d2c:	e1 e2       	ldi	r30, 0x21	; 33
    1d2e:	f2 e0       	ldi	r31, 0x02	; 2
    1d30:	08 d1       	rcall	.+528    	; 0x1f42 <__fp_powser>
    1d32:	8b 01       	movw	r16, r22
    1d34:	be 01       	movw	r22, r28
    1d36:	ec 01       	movw	r28, r24
    1d38:	fb 2e       	mov	r15, r27
    1d3a:	6f 57       	subi	r22, 0x7F	; 127
    1d3c:	71 09       	sbc	r23, r1
    1d3e:	75 95       	asr	r23
    1d40:	77 1f       	adc	r23, r23
    1d42:	88 0b       	sbc	r24, r24
    1d44:	99 0b       	sbc	r25, r25
    1d46:	f0 de       	rcall	.-544    	; 0x1b28 <__floatsisf>
    1d48:	28 e1       	ldi	r18, 0x18	; 24
    1d4a:	32 e7       	ldi	r19, 0x72	; 114
    1d4c:	41 e3       	ldi	r20, 0x31	; 49
    1d4e:	5f e3       	ldi	r21, 0x3F	; 63
    1d50:	16 d0       	rcall	.+44     	; 0x1d7e <__mulsf3x>
    1d52:	af 2d       	mov	r26, r15
    1d54:	98 01       	movw	r18, r16
    1d56:	ae 01       	movw	r20, r28
    1d58:	ff 90       	pop	r15
    1d5a:	0f 91       	pop	r16
    1d5c:	1f 91       	pop	r17
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	bf dd       	rcall	.-1154   	; 0x18e2 <__addsf3x>
    1d64:	81 cf       	rjmp	.-254    	; 0x1c68 <__fp_round>

00001d66 <__mulsf3>:
    1d66:	0b d0       	rcall	.+22     	; 0x1d7e <__mulsf3x>
    1d68:	7f cf       	rjmp	.-258    	; 0x1c68 <__fp_round>
    1d6a:	70 df       	rcall	.-288    	; 0x1c4c <__fp_pscA>
    1d6c:	28 f0       	brcs	.+10     	; 0x1d78 <__mulsf3+0x12>
    1d6e:	75 df       	rcall	.-278    	; 0x1c5a <__fp_pscB>
    1d70:	18 f0       	brcs	.+6      	; 0x1d78 <__mulsf3+0x12>
    1d72:	95 23       	and	r25, r21
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <__mulsf3+0x12>
    1d76:	51 cf       	rjmp	.-350    	; 0x1c1a <__fp_inf>
    1d78:	56 cf       	rjmp	.-340    	; 0x1c26 <__fp_nan>
    1d7a:	11 24       	eor	r1, r1
    1d7c:	a9 cf       	rjmp	.-174    	; 0x1cd0 <__fp_szero>

00001d7e <__mulsf3x>:
    1d7e:	85 df       	rcall	.-246    	; 0x1c8a <__fp_split3>
    1d80:	a0 f3       	brcs	.-24     	; 0x1d6a <__mulsf3+0x4>

00001d82 <__mulsf3_pse>:
    1d82:	95 9f       	mul	r25, r21
    1d84:	d1 f3       	breq	.-12     	; 0x1d7a <__mulsf3+0x14>
    1d86:	95 0f       	add	r25, r21
    1d88:	50 e0       	ldi	r21, 0x00	; 0
    1d8a:	55 1f       	adc	r21, r21
    1d8c:	62 9f       	mul	r22, r18
    1d8e:	f0 01       	movw	r30, r0
    1d90:	72 9f       	mul	r23, r18
    1d92:	bb 27       	eor	r27, r27
    1d94:	f0 0d       	add	r31, r0
    1d96:	b1 1d       	adc	r27, r1
    1d98:	63 9f       	mul	r22, r19
    1d9a:	aa 27       	eor	r26, r26
    1d9c:	f0 0d       	add	r31, r0
    1d9e:	b1 1d       	adc	r27, r1
    1da0:	aa 1f       	adc	r26, r26
    1da2:	64 9f       	mul	r22, r20
    1da4:	66 27       	eor	r22, r22
    1da6:	b0 0d       	add	r27, r0
    1da8:	a1 1d       	adc	r26, r1
    1daa:	66 1f       	adc	r22, r22
    1dac:	82 9f       	mul	r24, r18
    1dae:	22 27       	eor	r18, r18
    1db0:	b0 0d       	add	r27, r0
    1db2:	a1 1d       	adc	r26, r1
    1db4:	62 1f       	adc	r22, r18
    1db6:	73 9f       	mul	r23, r19
    1db8:	b0 0d       	add	r27, r0
    1dba:	a1 1d       	adc	r26, r1
    1dbc:	62 1f       	adc	r22, r18
    1dbe:	83 9f       	mul	r24, r19
    1dc0:	a0 0d       	add	r26, r0
    1dc2:	61 1d       	adc	r22, r1
    1dc4:	22 1f       	adc	r18, r18
    1dc6:	74 9f       	mul	r23, r20
    1dc8:	33 27       	eor	r19, r19
    1dca:	a0 0d       	add	r26, r0
    1dcc:	61 1d       	adc	r22, r1
    1dce:	23 1f       	adc	r18, r19
    1dd0:	84 9f       	mul	r24, r20
    1dd2:	60 0d       	add	r22, r0
    1dd4:	21 1d       	adc	r18, r1
    1dd6:	82 2f       	mov	r24, r18
    1dd8:	76 2f       	mov	r23, r22
    1dda:	6a 2f       	mov	r22, r26
    1ddc:	11 24       	eor	r1, r1
    1dde:	9f 57       	subi	r25, 0x7F	; 127
    1de0:	50 40       	sbci	r21, 0x00	; 0
    1de2:	8a f0       	brmi	.+34     	; 0x1e06 <__mulsf3_pse+0x84>
    1de4:	e1 f0       	breq	.+56     	; 0x1e1e <__mulsf3_pse+0x9c>
    1de6:	88 23       	and	r24, r24
    1de8:	4a f0       	brmi	.+18     	; 0x1dfc <__mulsf3_pse+0x7a>
    1dea:	ee 0f       	add	r30, r30
    1dec:	ff 1f       	adc	r31, r31
    1dee:	bb 1f       	adc	r27, r27
    1df0:	66 1f       	adc	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	88 1f       	adc	r24, r24
    1df6:	91 50       	subi	r25, 0x01	; 1
    1df8:	50 40       	sbci	r21, 0x00	; 0
    1dfa:	a9 f7       	brne	.-22     	; 0x1de6 <__mulsf3_pse+0x64>
    1dfc:	9e 3f       	cpi	r25, 0xFE	; 254
    1dfe:	51 05       	cpc	r21, r1
    1e00:	70 f0       	brcs	.+28     	; 0x1e1e <__mulsf3_pse+0x9c>
    1e02:	0b cf       	rjmp	.-490    	; 0x1c1a <__fp_inf>
    1e04:	65 cf       	rjmp	.-310    	; 0x1cd0 <__fp_szero>
    1e06:	5f 3f       	cpi	r21, 0xFF	; 255
    1e08:	ec f3       	brlt	.-6      	; 0x1e04 <__mulsf3_pse+0x82>
    1e0a:	98 3e       	cpi	r25, 0xE8	; 232
    1e0c:	dc f3       	brlt	.-10     	; 0x1e04 <__mulsf3_pse+0x82>
    1e0e:	86 95       	lsr	r24
    1e10:	77 95       	ror	r23
    1e12:	67 95       	ror	r22
    1e14:	b7 95       	ror	r27
    1e16:	f7 95       	ror	r31
    1e18:	e7 95       	ror	r30
    1e1a:	9f 5f       	subi	r25, 0xFF	; 255
    1e1c:	c1 f7       	brne	.-16     	; 0x1e0e <__mulsf3_pse+0x8c>
    1e1e:	fe 2b       	or	r31, r30
    1e20:	88 0f       	add	r24, r24
    1e22:	91 1d       	adc	r25, r1
    1e24:	96 95       	lsr	r25
    1e26:	87 95       	ror	r24
    1e28:	97 f9       	bld	r25, 7
    1e2a:	08 95       	ret

00001e2c <pow>:
    1e2c:	fa 01       	movw	r30, r20
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	30 96       	adiw	r30, 0x00	; 0
    1e34:	21 05       	cpc	r18, r1
    1e36:	31 05       	cpc	r19, r1
    1e38:	99 f1       	breq	.+102    	; 0x1ea0 <pow+0x74>
    1e3a:	61 15       	cp	r22, r1
    1e3c:	71 05       	cpc	r23, r1
    1e3e:	61 f4       	brne	.+24     	; 0x1e58 <pow+0x2c>
    1e40:	80 38       	cpi	r24, 0x80	; 128
    1e42:	bf e3       	ldi	r27, 0x3F	; 63
    1e44:	9b 07       	cpc	r25, r27
    1e46:	49 f1       	breq	.+82     	; 0x1e9a <pow+0x6e>
    1e48:	68 94       	set
    1e4a:	90 38       	cpi	r25, 0x80	; 128
    1e4c:	81 05       	cpc	r24, r1
    1e4e:	61 f0       	breq	.+24     	; 0x1e68 <pow+0x3c>
    1e50:	80 38       	cpi	r24, 0x80	; 128
    1e52:	bf ef       	ldi	r27, 0xFF	; 255
    1e54:	9b 07       	cpc	r25, r27
    1e56:	41 f0       	breq	.+16     	; 0x1e68 <pow+0x3c>
    1e58:	99 23       	and	r25, r25
    1e5a:	42 f5       	brpl	.+80     	; 0x1eac <pow+0x80>
    1e5c:	ff 3f       	cpi	r31, 0xFF	; 255
    1e5e:	e1 05       	cpc	r30, r1
    1e60:	31 05       	cpc	r19, r1
    1e62:	21 05       	cpc	r18, r1
    1e64:	11 f1       	breq	.+68     	; 0x1eaa <pow+0x7e>
    1e66:	e8 94       	clt
    1e68:	08 94       	sec
    1e6a:	e7 95       	ror	r30
    1e6c:	d9 01       	movw	r26, r18
    1e6e:	aa 23       	and	r26, r26
    1e70:	29 f4       	brne	.+10     	; 0x1e7c <pow+0x50>
    1e72:	ab 2f       	mov	r26, r27
    1e74:	be 2f       	mov	r27, r30
    1e76:	f8 5f       	subi	r31, 0xF8	; 248
    1e78:	d0 f3       	brcs	.-12     	; 0x1e6e <pow+0x42>
    1e7a:	10 c0       	rjmp	.+32     	; 0x1e9c <pow+0x70>
    1e7c:	ff 5f       	subi	r31, 0xFF	; 255
    1e7e:	70 f4       	brcc	.+28     	; 0x1e9c <pow+0x70>
    1e80:	a6 95       	lsr	r26
    1e82:	e0 f7       	brcc	.-8      	; 0x1e7c <pow+0x50>
    1e84:	f7 39       	cpi	r31, 0x97	; 151
    1e86:	50 f0       	brcs	.+20     	; 0x1e9c <pow+0x70>
    1e88:	19 f0       	breq	.+6      	; 0x1e90 <pow+0x64>
    1e8a:	ff 3a       	cpi	r31, 0xAF	; 175
    1e8c:	38 f4       	brcc	.+14     	; 0x1e9c <pow+0x70>
    1e8e:	9f 77       	andi	r25, 0x7F	; 127
    1e90:	9f 93       	push	r25
    1e92:	0c d0       	rcall	.+24     	; 0x1eac <pow+0x80>
    1e94:	0f 90       	pop	r0
    1e96:	07 fc       	sbrc	r0, 7
    1e98:	90 58       	subi	r25, 0x80	; 128
    1e9a:	08 95       	ret
    1e9c:	3e f0       	brts	.+14     	; 0x1eac <pow+0x80>
    1e9e:	c3 ce       	rjmp	.-634    	; 0x1c26 <__fp_nan>
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	80 e8       	ldi	r24, 0x80	; 128
    1ea6:	9f e3       	ldi	r25, 0x3F	; 63
    1ea8:	08 95       	ret
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	9f 77       	andi	r25, 0x7F	; 127
    1eae:	5f 93       	push	r21
    1eb0:	4f 93       	push	r20
    1eb2:	3f 93       	push	r19
    1eb4:	2f 93       	push	r18
    1eb6:	17 df       	rcall	.-466    	; 0x1ce6 <log>
    1eb8:	2f 91       	pop	r18
    1eba:	3f 91       	pop	r19
    1ebc:	4f 91       	pop	r20
    1ebe:	5f 91       	pop	r21
    1ec0:	52 df       	rcall	.-348    	; 0x1d66 <__mulsf3>
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <exp>
    1ec4:	19 f4       	brne	.+6      	; 0x1ecc <pow+0xa0>
    1ec6:	0e f0       	brts	.+2      	; 0x1eca <pow+0x9e>
    1ec8:	a8 ce       	rjmp	.-688    	; 0x1c1a <__fp_inf>
    1eca:	01 cf       	rjmp	.-510    	; 0x1cce <__fp_zero>
    1ecc:	ac ce       	rjmp	.-680    	; 0x1c26 <__fp_nan>

00001ece <exp>:
    1ece:	e5 de       	rcall	.-566    	; 0x1c9a <__fp_splitA>
    1ed0:	c8 f3       	brcs	.-14     	; 0x1ec4 <pow+0x98>
    1ed2:	96 38       	cpi	r25, 0x86	; 134
    1ed4:	c0 f7       	brcc	.-16     	; 0x1ec6 <pow+0x9a>
    1ed6:	07 f8       	bld	r0, 7
    1ed8:	0f 92       	push	r0
    1eda:	e8 94       	clt
    1edc:	2b e3       	ldi	r18, 0x3B	; 59
    1ede:	3a ea       	ldi	r19, 0xAA	; 170
    1ee0:	48 eb       	ldi	r20, 0xB8	; 184
    1ee2:	5f e7       	ldi	r21, 0x7F	; 127
    1ee4:	4e df       	rcall	.-356    	; 0x1d82 <__mulsf3_pse>
    1ee6:	0f 92       	push	r0
    1ee8:	0f 92       	push	r0
    1eea:	0f 92       	push	r0
    1eec:	4d b7       	in	r20, 0x3d	; 61
    1eee:	5e b7       	in	r21, 0x3e	; 62
    1ef0:	0f 92       	push	r0
    1ef2:	89 d0       	rcall	.+274    	; 0x2006 <modf>
    1ef4:	ee e4       	ldi	r30, 0x4E	; 78
    1ef6:	f2 e0       	ldi	r31, 0x02	; 2
    1ef8:	24 d0       	rcall	.+72     	; 0x1f42 <__fp_powser>
    1efa:	4f 91       	pop	r20
    1efc:	5f 91       	pop	r21
    1efe:	ef 91       	pop	r30
    1f00:	ff 91       	pop	r31
    1f02:	e5 95       	asr	r30
    1f04:	ee 1f       	adc	r30, r30
    1f06:	ff 1f       	adc	r31, r31
    1f08:	49 f0       	breq	.+18     	; 0x1f1c <exp+0x4e>
    1f0a:	fe 57       	subi	r31, 0x7E	; 126
    1f0c:	e0 68       	ori	r30, 0x80	; 128
    1f0e:	44 27       	eor	r20, r20
    1f10:	ee 0f       	add	r30, r30
    1f12:	44 1f       	adc	r20, r20
    1f14:	fa 95       	dec	r31
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <exp+0x42>
    1f18:	41 95       	neg	r20
    1f1a:	55 0b       	sbc	r21, r21
    1f1c:	40 d0       	rcall	.+128    	; 0x1f9e <ldexp>
    1f1e:	0f 90       	pop	r0
    1f20:	07 fe       	sbrs	r0, 7
    1f22:	34 c0       	rjmp	.+104    	; 0x1f8c <inverse>
    1f24:	08 95       	ret

00001f26 <__fp_mpack>:
    1f26:	9f 3f       	cpi	r25, 0xFF	; 255
    1f28:	31 f0       	breq	.+12     	; 0x1f36 <__fp_mpack_finite+0xc>

00001f2a <__fp_mpack_finite>:
    1f2a:	91 50       	subi	r25, 0x01	; 1
    1f2c:	20 f4       	brcc	.+8      	; 0x1f36 <__fp_mpack_finite+0xc>
    1f2e:	87 95       	ror	r24
    1f30:	77 95       	ror	r23
    1f32:	67 95       	ror	r22
    1f34:	b7 95       	ror	r27
    1f36:	88 0f       	add	r24, r24
    1f38:	91 1d       	adc	r25, r1
    1f3a:	96 95       	lsr	r25
    1f3c:	87 95       	ror	r24
    1f3e:	97 f9       	bld	r25, 7
    1f40:	08 95       	ret

00001f42 <__fp_powser>:
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	1f 93       	push	r17
    1f48:	0f 93       	push	r16
    1f4a:	ff 92       	push	r15
    1f4c:	ef 92       	push	r14
    1f4e:	df 92       	push	r13
    1f50:	7b 01       	movw	r14, r22
    1f52:	8c 01       	movw	r16, r24
    1f54:	68 94       	set
    1f56:	05 c0       	rjmp	.+10     	; 0x1f62 <__fp_powser+0x20>
    1f58:	da 2e       	mov	r13, r26
    1f5a:	ef 01       	movw	r28, r30
    1f5c:	10 df       	rcall	.-480    	; 0x1d7e <__mulsf3x>
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e8 94       	clt
    1f62:	a5 91       	lpm	r26, Z+
    1f64:	25 91       	lpm	r18, Z+
    1f66:	35 91       	lpm	r19, Z+
    1f68:	45 91       	lpm	r20, Z+
    1f6a:	55 91       	lpm	r21, Z+
    1f6c:	ae f3       	brts	.-22     	; 0x1f58 <__fp_powser+0x16>
    1f6e:	ef 01       	movw	r28, r30
    1f70:	b8 dc       	rcall	.-1680   	; 0x18e2 <__addsf3x>
    1f72:	fe 01       	movw	r30, r28
    1f74:	97 01       	movw	r18, r14
    1f76:	a8 01       	movw	r20, r16
    1f78:	da 94       	dec	r13
    1f7a:	79 f7       	brne	.-34     	; 0x1f5a <__fp_powser+0x18>
    1f7c:	df 90       	pop	r13
    1f7e:	ef 90       	pop	r14
    1f80:	ff 90       	pop	r15
    1f82:	0f 91       	pop	r16
    1f84:	1f 91       	pop	r17
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <inverse>:
    1f8c:	9b 01       	movw	r18, r22
    1f8e:	ac 01       	movw	r20, r24
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	70 e0       	ldi	r23, 0x00	; 0
    1f94:	80 e8       	ldi	r24, 0x80	; 128
    1f96:	9f e3       	ldi	r25, 0x3F	; 63
    1f98:	f7 cc       	rjmp	.-1554   	; 0x1988 <__divsf3>
    1f9a:	3f ce       	rjmp	.-898    	; 0x1c1a <__fp_inf>
    1f9c:	c4 cf       	rjmp	.-120    	; 0x1f26 <__fp_mpack>

00001f9e <ldexp>:
    1f9e:	7d de       	rcall	.-774    	; 0x1c9a <__fp_splitA>
    1fa0:	e8 f3       	brcs	.-6      	; 0x1f9c <inverse+0x10>
    1fa2:	99 23       	and	r25, r25
    1fa4:	d9 f3       	breq	.-10     	; 0x1f9c <inverse+0x10>
    1fa6:	94 0f       	add	r25, r20
    1fa8:	51 1d       	adc	r21, r1
    1faa:	bb f3       	brvs	.-18     	; 0x1f9a <inverse+0xe>
    1fac:	91 50       	subi	r25, 0x01	; 1
    1fae:	50 40       	sbci	r21, 0x00	; 0
    1fb0:	94 f0       	brlt	.+36     	; 0x1fd6 <ldexp+0x38>
    1fb2:	59 f0       	breq	.+22     	; 0x1fca <ldexp+0x2c>
    1fb4:	88 23       	and	r24, r24
    1fb6:	32 f0       	brmi	.+12     	; 0x1fc4 <ldexp+0x26>
    1fb8:	66 0f       	add	r22, r22
    1fba:	77 1f       	adc	r23, r23
    1fbc:	88 1f       	adc	r24, r24
    1fbe:	91 50       	subi	r25, 0x01	; 1
    1fc0:	50 40       	sbci	r21, 0x00	; 0
    1fc2:	c1 f7       	brne	.-16     	; 0x1fb4 <ldexp+0x16>
    1fc4:	9e 3f       	cpi	r25, 0xFE	; 254
    1fc6:	51 05       	cpc	r21, r1
    1fc8:	44 f7       	brge	.-48     	; 0x1f9a <inverse+0xe>
    1fca:	88 0f       	add	r24, r24
    1fcc:	91 1d       	adc	r25, r1
    1fce:	96 95       	lsr	r25
    1fd0:	87 95       	ror	r24
    1fd2:	97 f9       	bld	r25, 7
    1fd4:	08 95       	ret
    1fd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fd8:	ac f0       	brlt	.+42     	; 0x2004 <ldexp+0x66>
    1fda:	98 3e       	cpi	r25, 0xE8	; 232
    1fdc:	9c f0       	brlt	.+38     	; 0x2004 <ldexp+0x66>
    1fde:	bb 27       	eor	r27, r27
    1fe0:	86 95       	lsr	r24
    1fe2:	77 95       	ror	r23
    1fe4:	67 95       	ror	r22
    1fe6:	b7 95       	ror	r27
    1fe8:	08 f4       	brcc	.+2      	; 0x1fec <ldexp+0x4e>
    1fea:	b1 60       	ori	r27, 0x01	; 1
    1fec:	93 95       	inc	r25
    1fee:	c1 f7       	brne	.-16     	; 0x1fe0 <ldexp+0x42>
    1ff0:	bb 0f       	add	r27, r27
    1ff2:	58 f7       	brcc	.-42     	; 0x1fca <ldexp+0x2c>
    1ff4:	11 f4       	brne	.+4      	; 0x1ffa <ldexp+0x5c>
    1ff6:	60 ff       	sbrs	r22, 0
    1ff8:	e8 cf       	rjmp	.-48     	; 0x1fca <ldexp+0x2c>
    1ffa:	6f 5f       	subi	r22, 0xFF	; 255
    1ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	e3 cf       	rjmp	.-58     	; 0x1fca <ldexp+0x2c>
    2004:	65 ce       	rjmp	.-822    	; 0x1cd0 <__fp_szero>

00002006 <modf>:
    2006:	fa 01       	movw	r30, r20
    2008:	dc 01       	movw	r26, r24
    200a:	aa 0f       	add	r26, r26
    200c:	bb 1f       	adc	r27, r27
    200e:	9b 01       	movw	r18, r22
    2010:	ac 01       	movw	r20, r24
    2012:	bf 57       	subi	r27, 0x7F	; 127
    2014:	28 f4       	brcc	.+10     	; 0x2020 <modf+0x1a>
    2016:	22 27       	eor	r18, r18
    2018:	33 27       	eor	r19, r19
    201a:	44 27       	eor	r20, r20
    201c:	50 78       	andi	r21, 0x80	; 128
    201e:	1f c0       	rjmp	.+62     	; 0x205e <modf+0x58>
    2020:	b7 51       	subi	r27, 0x17	; 23
    2022:	88 f4       	brcc	.+34     	; 0x2046 <modf+0x40>
    2024:	ab 2f       	mov	r26, r27
    2026:	00 24       	eor	r0, r0
    2028:	46 95       	lsr	r20
    202a:	37 95       	ror	r19
    202c:	27 95       	ror	r18
    202e:	01 1c       	adc	r0, r1
    2030:	a3 95       	inc	r26
    2032:	d2 f3       	brmi	.-12     	; 0x2028 <modf+0x22>
    2034:	00 20       	and	r0, r0
    2036:	69 f0       	breq	.+26     	; 0x2052 <modf+0x4c>
    2038:	22 0f       	add	r18, r18
    203a:	33 1f       	adc	r19, r19
    203c:	44 1f       	adc	r20, r20
    203e:	b3 95       	inc	r27
    2040:	da f3       	brmi	.-10     	; 0x2038 <modf+0x32>
    2042:	0d d0       	rcall	.+26     	; 0x205e <modf+0x58>
    2044:	3c cc       	rjmp	.-1928   	; 0x18be <__subsf3>
    2046:	61 30       	cpi	r22, 0x01	; 1
    2048:	71 05       	cpc	r23, r1
    204a:	a0 e8       	ldi	r26, 0x80	; 128
    204c:	8a 07       	cpc	r24, r26
    204e:	b9 46       	sbci	r27, 0x69	; 105
    2050:	30 f4       	brcc	.+12     	; 0x205e <modf+0x58>
    2052:	9b 01       	movw	r18, r22
    2054:	ac 01       	movw	r20, r24
    2056:	66 27       	eor	r22, r22
    2058:	77 27       	eor	r23, r23
    205a:	88 27       	eor	r24, r24
    205c:	90 78       	andi	r25, 0x80	; 128
    205e:	30 96       	adiw	r30, 0x00	; 0
    2060:	21 f0       	breq	.+8      	; 0x206a <modf+0x64>
    2062:	20 83       	st	Z, r18
    2064:	31 83       	std	Z+1, r19	; 0x01
    2066:	42 83       	std	Z+2, r20	; 0x02
    2068:	53 83       	std	Z+3, r21	; 0x03
    206a:	08 95       	ret

0000206c <__udivmodsi4>:
    206c:	a1 e2       	ldi	r26, 0x21	; 33
    206e:	1a 2e       	mov	r1, r26
    2070:	aa 1b       	sub	r26, r26
    2072:	bb 1b       	sub	r27, r27
    2074:	fd 01       	movw	r30, r26
    2076:	0d c0       	rjmp	.+26     	; 0x2092 <__udivmodsi4_ep>

00002078 <__udivmodsi4_loop>:
    2078:	aa 1f       	adc	r26, r26
    207a:	bb 1f       	adc	r27, r27
    207c:	ee 1f       	adc	r30, r30
    207e:	ff 1f       	adc	r31, r31
    2080:	a2 17       	cp	r26, r18
    2082:	b3 07       	cpc	r27, r19
    2084:	e4 07       	cpc	r30, r20
    2086:	f5 07       	cpc	r31, r21
    2088:	20 f0       	brcs	.+8      	; 0x2092 <__udivmodsi4_ep>
    208a:	a2 1b       	sub	r26, r18
    208c:	b3 0b       	sbc	r27, r19
    208e:	e4 0b       	sbc	r30, r20
    2090:	f5 0b       	sbc	r31, r21

00002092 <__udivmodsi4_ep>:
    2092:	66 1f       	adc	r22, r22
    2094:	77 1f       	adc	r23, r23
    2096:	88 1f       	adc	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	1a 94       	dec	r1
    209c:	69 f7       	brne	.-38     	; 0x2078 <__udivmodsi4_loop>
    209e:	60 95       	com	r22
    20a0:	70 95       	com	r23
    20a2:	80 95       	com	r24
    20a4:	90 95       	com	r25
    20a6:	9b 01       	movw	r18, r22
    20a8:	ac 01       	movw	r20, r24
    20aa:	bd 01       	movw	r22, r26
    20ac:	cf 01       	movw	r24, r30
    20ae:	08 95       	ret

000020b0 <__divmodsi4>:
    20b0:	05 2e       	mov	r0, r21
    20b2:	97 fb       	bst	r25, 7
    20b4:	16 f4       	brtc	.+4      	; 0x20ba <__divmodsi4+0xa>
    20b6:	00 94       	com	r0
    20b8:	0f d0       	rcall	.+30     	; 0x20d8 <__negsi2>
    20ba:	57 fd       	sbrc	r21, 7
    20bc:	05 d0       	rcall	.+10     	; 0x20c8 <__divmodsi4_neg2>
    20be:	d6 df       	rcall	.-84     	; 0x206c <__udivmodsi4>
    20c0:	07 fc       	sbrc	r0, 7
    20c2:	02 d0       	rcall	.+4      	; 0x20c8 <__divmodsi4_neg2>
    20c4:	46 f4       	brtc	.+16     	; 0x20d6 <__divmodsi4_exit>
    20c6:	08 c0       	rjmp	.+16     	; 0x20d8 <__negsi2>

000020c8 <__divmodsi4_neg2>:
    20c8:	50 95       	com	r21
    20ca:	40 95       	com	r20
    20cc:	30 95       	com	r19
    20ce:	21 95       	neg	r18
    20d0:	3f 4f       	sbci	r19, 0xFF	; 255
    20d2:	4f 4f       	sbci	r20, 0xFF	; 255
    20d4:	5f 4f       	sbci	r21, 0xFF	; 255

000020d6 <__divmodsi4_exit>:
    20d6:	08 95       	ret

000020d8 <__negsi2>:
    20d8:	90 95       	com	r25
    20da:	80 95       	com	r24
    20dc:	70 95       	com	r23
    20de:	61 95       	neg	r22
    20e0:	7f 4f       	sbci	r23, 0xFF	; 255
    20e2:	8f 4f       	sbci	r24, 0xFF	; 255
    20e4:	9f 4f       	sbci	r25, 0xFF	; 255
    20e6:	08 95       	ret

000020e8 <__muluhisi3>:
    20e8:	5a d0       	rcall	.+180    	; 0x219e <__umulhisi3>
    20ea:	a5 9f       	mul	r26, r21
    20ec:	90 0d       	add	r25, r0
    20ee:	b4 9f       	mul	r27, r20
    20f0:	90 0d       	add	r25, r0
    20f2:	a4 9f       	mul	r26, r20
    20f4:	80 0d       	add	r24, r0
    20f6:	91 1d       	adc	r25, r1
    20f8:	11 24       	eor	r1, r1
    20fa:	08 95       	ret

000020fc <__muldi3>:
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	1f 93       	push	r17
    2102:	0f 93       	push	r16
    2104:	9a 9d       	mul	r25, r10
    2106:	f0 2d       	mov	r31, r0
    2108:	21 9f       	mul	r18, r17
    210a:	f0 0d       	add	r31, r0
    210c:	8b 9d       	mul	r24, r11
    210e:	f0 0d       	add	r31, r0
    2110:	8a 9d       	mul	r24, r10
    2112:	e0 2d       	mov	r30, r0
    2114:	f1 0d       	add	r31, r1
    2116:	03 9f       	mul	r16, r19
    2118:	f0 0d       	add	r31, r0
    211a:	02 9f       	mul	r16, r18
    211c:	e0 0d       	add	r30, r0
    211e:	f1 1d       	adc	r31, r1
    2120:	4e 9d       	mul	r20, r14
    2122:	e0 0d       	add	r30, r0
    2124:	f1 1d       	adc	r31, r1
    2126:	5e 9d       	mul	r21, r14
    2128:	f0 0d       	add	r31, r0
    212a:	4f 9d       	mul	r20, r15
    212c:	f0 0d       	add	r31, r0
    212e:	7f 93       	push	r23
    2130:	6f 93       	push	r22
    2132:	bf 92       	push	r11
    2134:	af 92       	push	r10
    2136:	5f 93       	push	r21
    2138:	4f 93       	push	r20
    213a:	d5 01       	movw	r26, r10
    213c:	30 d0       	rcall	.+96     	; 0x219e <__umulhisi3>
    213e:	8b 01       	movw	r16, r22
    2140:	ac 01       	movw	r20, r24
    2142:	d7 01       	movw	r26, r14
    2144:	2c d0       	rcall	.+88     	; 0x219e <__umulhisi3>
    2146:	eb 01       	movw	r28, r22
    2148:	e8 0f       	add	r30, r24
    214a:	f9 1f       	adc	r31, r25
    214c:	d6 01       	movw	r26, r12
    214e:	1f d0       	rcall	.+62     	; 0x218e <__muldi3_6>
    2150:	2f 91       	pop	r18
    2152:	3f 91       	pop	r19
    2154:	d6 01       	movw	r26, r12
    2156:	23 d0       	rcall	.+70     	; 0x219e <__umulhisi3>
    2158:	c6 0f       	add	r28, r22
    215a:	d7 1f       	adc	r29, r23
    215c:	e8 1f       	adc	r30, r24
    215e:	f9 1f       	adc	r31, r25
    2160:	af 91       	pop	r26
    2162:	bf 91       	pop	r27
    2164:	14 d0       	rcall	.+40     	; 0x218e <__muldi3_6>
    2166:	2f 91       	pop	r18
    2168:	3f 91       	pop	r19
    216a:	19 d0       	rcall	.+50     	; 0x219e <__umulhisi3>
    216c:	c6 0f       	add	r28, r22
    216e:	d7 1f       	adc	r29, r23
    2170:	e8 1f       	adc	r30, r24
    2172:	f9 1f       	adc	r31, r25
    2174:	d6 01       	movw	r26, r12
    2176:	13 d0       	rcall	.+38     	; 0x219e <__umulhisi3>
    2178:	e6 0f       	add	r30, r22
    217a:	f7 1f       	adc	r31, r23
    217c:	98 01       	movw	r18, r16
    217e:	be 01       	movw	r22, r28
    2180:	cf 01       	movw	r24, r30
    2182:	11 24       	eor	r1, r1
    2184:	0f 91       	pop	r16
    2186:	1f 91       	pop	r17
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <__muldi3_6>:
    218e:	07 d0       	rcall	.+14     	; 0x219e <__umulhisi3>
    2190:	46 0f       	add	r20, r22
    2192:	57 1f       	adc	r21, r23
    2194:	c8 1f       	adc	r28, r24
    2196:	d9 1f       	adc	r29, r25
    2198:	08 f4       	brcc	.+2      	; 0x219c <__muldi3_6+0xe>
    219a:	31 96       	adiw	r30, 0x01	; 1
    219c:	08 95       	ret

0000219e <__umulhisi3>:
    219e:	a2 9f       	mul	r26, r18
    21a0:	b0 01       	movw	r22, r0
    21a2:	b3 9f       	mul	r27, r19
    21a4:	c0 01       	movw	r24, r0
    21a6:	a3 9f       	mul	r26, r19
    21a8:	70 0d       	add	r23, r0
    21aa:	81 1d       	adc	r24, r1
    21ac:	11 24       	eor	r1, r1
    21ae:	91 1d       	adc	r25, r1
    21b0:	b2 9f       	mul	r27, r18
    21b2:	70 0d       	add	r23, r0
    21b4:	81 1d       	adc	r24, r1
    21b6:	11 24       	eor	r1, r1
    21b8:	91 1d       	adc	r25, r1
    21ba:	08 95       	ret

000021bc <fdevopen>:
    21bc:	0f 93       	push	r16
    21be:	1f 93       	push	r17
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	31 f4       	brne	.+12     	; 0x21d4 <fdevopen+0x18>
    21c8:	61 15       	cp	r22, r1
    21ca:	71 05       	cpc	r23, r1
    21cc:	19 f4       	brne	.+6      	; 0x21d4 <fdevopen+0x18>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	39 c0       	rjmp	.+114    	; 0x2246 <fdevopen+0x8a>
    21d4:	8b 01       	movw	r16, r22
    21d6:	ec 01       	movw	r28, r24
    21d8:	6e e0       	ldi	r22, 0x0E	; 14
    21da:	70 e0       	ldi	r23, 0x00	; 0
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	32 d2       	rcall	.+1124   	; 0x2646 <calloc>
    21e2:	fc 01       	movw	r30, r24
    21e4:	89 2b       	or	r24, r25
    21e6:	99 f3       	breq	.-26     	; 0x21ce <fdevopen+0x12>
    21e8:	80 e8       	ldi	r24, 0x80	; 128
    21ea:	83 83       	std	Z+3, r24	; 0x03
    21ec:	01 15       	cp	r16, r1
    21ee:	11 05       	cpc	r17, r1
    21f0:	71 f0       	breq	.+28     	; 0x220e <fdevopen+0x52>
    21f2:	02 87       	std	Z+10, r16	; 0x0a
    21f4:	13 87       	std	Z+11, r17	; 0x0b
    21f6:	81 e8       	ldi	r24, 0x81	; 129
    21f8:	83 83       	std	Z+3, r24	; 0x03
    21fa:	80 91 98 20 	lds	r24, 0x2098	; 0x802098 <__iob>
    21fe:	90 91 99 20 	lds	r25, 0x2099	; 0x802099 <__iob+0x1>
    2202:	89 2b       	or	r24, r25
    2204:	21 f4       	brne	.+8      	; 0x220e <fdevopen+0x52>
    2206:	e0 93 98 20 	sts	0x2098, r30	; 0x802098 <__iob>
    220a:	f0 93 99 20 	sts	0x2099, r31	; 0x802099 <__iob+0x1>
    220e:	20 97       	sbiw	r28, 0x00	; 0
    2210:	c9 f0       	breq	.+50     	; 0x2244 <fdevopen+0x88>
    2212:	c0 87       	std	Z+8, r28	; 0x08
    2214:	d1 87       	std	Z+9, r29	; 0x09
    2216:	83 81       	ldd	r24, Z+3	; 0x03
    2218:	82 60       	ori	r24, 0x02	; 2
    221a:	83 83       	std	Z+3, r24	; 0x03
    221c:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <__iob+0x2>
    2220:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <__iob+0x3>
    2224:	89 2b       	or	r24, r25
    2226:	71 f4       	brne	.+28     	; 0x2244 <fdevopen+0x88>
    2228:	e0 93 9a 20 	sts	0x209A, r30	; 0x80209a <__iob+0x2>
    222c:	f0 93 9b 20 	sts	0x209B, r31	; 0x80209b <__iob+0x3>
    2230:	80 91 9c 20 	lds	r24, 0x209C	; 0x80209c <__iob+0x4>
    2234:	90 91 9d 20 	lds	r25, 0x209D	; 0x80209d <__iob+0x5>
    2238:	89 2b       	or	r24, r25
    223a:	21 f4       	brne	.+8      	; 0x2244 <fdevopen+0x88>
    223c:	e0 93 9c 20 	sts	0x209C, r30	; 0x80209c <__iob+0x4>
    2240:	f0 93 9d 20 	sts	0x209D, r31	; 0x80209d <__iob+0x5>
    2244:	cf 01       	movw	r24, r30
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	1f 91       	pop	r17
    224c:	0f 91       	pop	r16
    224e:	08 95       	ret

00002250 <printf>:
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	ae 01       	movw	r20, r28
    225a:	4a 5f       	subi	r20, 0xFA	; 250
    225c:	5f 4f       	sbci	r21, 0xFF	; 255
    225e:	fa 01       	movw	r30, r20
    2260:	61 91       	ld	r22, Z+
    2262:	71 91       	ld	r23, Z+
    2264:	af 01       	movw	r20, r30
    2266:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <__iob+0x2>
    226a:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <__iob+0x3>
    226e:	03 d0       	rcall	.+6      	; 0x2276 <vfprintf>
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	08 95       	ret

00002276 <vfprintf>:
    2276:	2f 92       	push	r2
    2278:	3f 92       	push	r3
    227a:	4f 92       	push	r4
    227c:	5f 92       	push	r5
    227e:	6f 92       	push	r6
    2280:	7f 92       	push	r7
    2282:	8f 92       	push	r8
    2284:	9f 92       	push	r9
    2286:	af 92       	push	r10
    2288:	bf 92       	push	r11
    228a:	cf 92       	push	r12
    228c:	df 92       	push	r13
    228e:	ef 92       	push	r14
    2290:	ff 92       	push	r15
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	2c 97       	sbiw	r28, 0x0c	; 12
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	7c 01       	movw	r14, r24
    22a6:	6b 01       	movw	r12, r22
    22a8:	8a 01       	movw	r16, r20
    22aa:	fc 01       	movw	r30, r24
    22ac:	16 82       	std	Z+6, r1	; 0x06
    22ae:	17 82       	std	Z+7, r1	; 0x07
    22b0:	83 81       	ldd	r24, Z+3	; 0x03
    22b2:	81 ff       	sbrs	r24, 1
    22b4:	b0 c1       	rjmp	.+864    	; 0x2616 <vfprintf+0x3a0>
    22b6:	ce 01       	movw	r24, r28
    22b8:	01 96       	adiw	r24, 0x01	; 1
    22ba:	4c 01       	movw	r8, r24
    22bc:	f7 01       	movw	r30, r14
    22be:	93 81       	ldd	r25, Z+3	; 0x03
    22c0:	f6 01       	movw	r30, r12
    22c2:	93 fd       	sbrc	r25, 3
    22c4:	85 91       	lpm	r24, Z+
    22c6:	93 ff       	sbrs	r25, 3
    22c8:	81 91       	ld	r24, Z+
    22ca:	6f 01       	movw	r12, r30
    22cc:	88 23       	and	r24, r24
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <vfprintf+0x5c>
    22d0:	9e c1       	rjmp	.+828    	; 0x260e <vfprintf+0x398>
    22d2:	85 32       	cpi	r24, 0x25	; 37
    22d4:	39 f4       	brne	.+14     	; 0x22e4 <vfprintf+0x6e>
    22d6:	93 fd       	sbrc	r25, 3
    22d8:	85 91       	lpm	r24, Z+
    22da:	93 ff       	sbrs	r25, 3
    22dc:	81 91       	ld	r24, Z+
    22de:	6f 01       	movw	r12, r30
    22e0:	85 32       	cpi	r24, 0x25	; 37
    22e2:	21 f4       	brne	.+8      	; 0x22ec <vfprintf+0x76>
    22e4:	b7 01       	movw	r22, r14
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	12 d3       	rcall	.+1572   	; 0x290e <fputc>
    22ea:	e8 cf       	rjmp	.-48     	; 0x22bc <vfprintf+0x46>
    22ec:	51 2c       	mov	r5, r1
    22ee:	31 2c       	mov	r3, r1
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	20 32       	cpi	r18, 0x20	; 32
    22f4:	a0 f4       	brcc	.+40     	; 0x231e <vfprintf+0xa8>
    22f6:	8b 32       	cpi	r24, 0x2B	; 43
    22f8:	69 f0       	breq	.+26     	; 0x2314 <vfprintf+0x9e>
    22fa:	30 f4       	brcc	.+12     	; 0x2308 <vfprintf+0x92>
    22fc:	80 32       	cpi	r24, 0x20	; 32
    22fe:	59 f0       	breq	.+22     	; 0x2316 <vfprintf+0xa0>
    2300:	83 32       	cpi	r24, 0x23	; 35
    2302:	69 f4       	brne	.+26     	; 0x231e <vfprintf+0xa8>
    2304:	20 61       	ori	r18, 0x10	; 16
    2306:	2c c0       	rjmp	.+88     	; 0x2360 <vfprintf+0xea>
    2308:	8d 32       	cpi	r24, 0x2D	; 45
    230a:	39 f0       	breq	.+14     	; 0x231a <vfprintf+0xa4>
    230c:	80 33       	cpi	r24, 0x30	; 48
    230e:	39 f4       	brne	.+14     	; 0x231e <vfprintf+0xa8>
    2310:	21 60       	ori	r18, 0x01	; 1
    2312:	26 c0       	rjmp	.+76     	; 0x2360 <vfprintf+0xea>
    2314:	22 60       	ori	r18, 0x02	; 2
    2316:	24 60       	ori	r18, 0x04	; 4
    2318:	23 c0       	rjmp	.+70     	; 0x2360 <vfprintf+0xea>
    231a:	28 60       	ori	r18, 0x08	; 8
    231c:	21 c0       	rjmp	.+66     	; 0x2360 <vfprintf+0xea>
    231e:	27 fd       	sbrc	r18, 7
    2320:	27 c0       	rjmp	.+78     	; 0x2370 <vfprintf+0xfa>
    2322:	30 ed       	ldi	r19, 0xD0	; 208
    2324:	38 0f       	add	r19, r24
    2326:	3a 30       	cpi	r19, 0x0A	; 10
    2328:	78 f4       	brcc	.+30     	; 0x2348 <vfprintf+0xd2>
    232a:	26 ff       	sbrs	r18, 6
    232c:	06 c0       	rjmp	.+12     	; 0x233a <vfprintf+0xc4>
    232e:	fa e0       	ldi	r31, 0x0A	; 10
    2330:	5f 9e       	mul	r5, r31
    2332:	30 0d       	add	r19, r0
    2334:	11 24       	eor	r1, r1
    2336:	53 2e       	mov	r5, r19
    2338:	13 c0       	rjmp	.+38     	; 0x2360 <vfprintf+0xea>
    233a:	8a e0       	ldi	r24, 0x0A	; 10
    233c:	38 9e       	mul	r3, r24
    233e:	30 0d       	add	r19, r0
    2340:	11 24       	eor	r1, r1
    2342:	33 2e       	mov	r3, r19
    2344:	20 62       	ori	r18, 0x20	; 32
    2346:	0c c0       	rjmp	.+24     	; 0x2360 <vfprintf+0xea>
    2348:	8e 32       	cpi	r24, 0x2E	; 46
    234a:	21 f4       	brne	.+8      	; 0x2354 <vfprintf+0xde>
    234c:	26 fd       	sbrc	r18, 6
    234e:	5f c1       	rjmp	.+702    	; 0x260e <vfprintf+0x398>
    2350:	20 64       	ori	r18, 0x40	; 64
    2352:	06 c0       	rjmp	.+12     	; 0x2360 <vfprintf+0xea>
    2354:	8c 36       	cpi	r24, 0x6C	; 108
    2356:	11 f4       	brne	.+4      	; 0x235c <vfprintf+0xe6>
    2358:	20 68       	ori	r18, 0x80	; 128
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <vfprintf+0xea>
    235c:	88 36       	cpi	r24, 0x68	; 104
    235e:	41 f4       	brne	.+16     	; 0x2370 <vfprintf+0xfa>
    2360:	f6 01       	movw	r30, r12
    2362:	93 fd       	sbrc	r25, 3
    2364:	85 91       	lpm	r24, Z+
    2366:	93 ff       	sbrs	r25, 3
    2368:	81 91       	ld	r24, Z+
    236a:	6f 01       	movw	r12, r30
    236c:	81 11       	cpse	r24, r1
    236e:	c1 cf       	rjmp	.-126    	; 0x22f2 <vfprintf+0x7c>
    2370:	98 2f       	mov	r25, r24
    2372:	9f 7d       	andi	r25, 0xDF	; 223
    2374:	95 54       	subi	r25, 0x45	; 69
    2376:	93 30       	cpi	r25, 0x03	; 3
    2378:	28 f4       	brcc	.+10     	; 0x2384 <vfprintf+0x10e>
    237a:	0c 5f       	subi	r16, 0xFC	; 252
    237c:	1f 4f       	sbci	r17, 0xFF	; 255
    237e:	ff e3       	ldi	r31, 0x3F	; 63
    2380:	f9 83       	std	Y+1, r31	; 0x01
    2382:	0d c0       	rjmp	.+26     	; 0x239e <vfprintf+0x128>
    2384:	83 36       	cpi	r24, 0x63	; 99
    2386:	31 f0       	breq	.+12     	; 0x2394 <vfprintf+0x11e>
    2388:	83 37       	cpi	r24, 0x73	; 115
    238a:	71 f0       	breq	.+28     	; 0x23a8 <vfprintf+0x132>
    238c:	83 35       	cpi	r24, 0x53	; 83
    238e:	09 f0       	breq	.+2      	; 0x2392 <vfprintf+0x11c>
    2390:	57 c0       	rjmp	.+174    	; 0x2440 <vfprintf+0x1ca>
    2392:	21 c0       	rjmp	.+66     	; 0x23d6 <vfprintf+0x160>
    2394:	f8 01       	movw	r30, r16
    2396:	80 81       	ld	r24, Z
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	0e 5f       	subi	r16, 0xFE	; 254
    239c:	1f 4f       	sbci	r17, 0xFF	; 255
    239e:	44 24       	eor	r4, r4
    23a0:	43 94       	inc	r4
    23a2:	51 2c       	mov	r5, r1
    23a4:	54 01       	movw	r10, r8
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <vfprintf+0x15a>
    23a8:	38 01       	movw	r6, r16
    23aa:	f2 e0       	ldi	r31, 0x02	; 2
    23ac:	6f 0e       	add	r6, r31
    23ae:	71 1c       	adc	r7, r1
    23b0:	f8 01       	movw	r30, r16
    23b2:	a0 80       	ld	r10, Z
    23b4:	b1 80       	ldd	r11, Z+1	; 0x01
    23b6:	26 ff       	sbrs	r18, 6
    23b8:	03 c0       	rjmp	.+6      	; 0x23c0 <vfprintf+0x14a>
    23ba:	65 2d       	mov	r22, r5
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <vfprintf+0x14e>
    23c0:	6f ef       	ldi	r22, 0xFF	; 255
    23c2:	7f ef       	ldi	r23, 0xFF	; 255
    23c4:	c5 01       	movw	r24, r10
    23c6:	2c 87       	std	Y+12, r18	; 0x0c
    23c8:	97 d2       	rcall	.+1326   	; 0x28f8 <strnlen>
    23ca:	2c 01       	movw	r4, r24
    23cc:	83 01       	movw	r16, r6
    23ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    23d0:	2f 77       	andi	r18, 0x7F	; 127
    23d2:	22 2e       	mov	r2, r18
    23d4:	16 c0       	rjmp	.+44     	; 0x2402 <vfprintf+0x18c>
    23d6:	38 01       	movw	r6, r16
    23d8:	f2 e0       	ldi	r31, 0x02	; 2
    23da:	6f 0e       	add	r6, r31
    23dc:	71 1c       	adc	r7, r1
    23de:	f8 01       	movw	r30, r16
    23e0:	a0 80       	ld	r10, Z
    23e2:	b1 80       	ldd	r11, Z+1	; 0x01
    23e4:	26 ff       	sbrs	r18, 6
    23e6:	03 c0       	rjmp	.+6      	; 0x23ee <vfprintf+0x178>
    23e8:	65 2d       	mov	r22, r5
    23ea:	70 e0       	ldi	r23, 0x00	; 0
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <vfprintf+0x17c>
    23ee:	6f ef       	ldi	r22, 0xFF	; 255
    23f0:	7f ef       	ldi	r23, 0xFF	; 255
    23f2:	c5 01       	movw	r24, r10
    23f4:	2c 87       	std	Y+12, r18	; 0x0c
    23f6:	6e d2       	rcall	.+1244   	; 0x28d4 <strnlen_P>
    23f8:	2c 01       	movw	r4, r24
    23fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    23fc:	20 68       	ori	r18, 0x80	; 128
    23fe:	22 2e       	mov	r2, r18
    2400:	83 01       	movw	r16, r6
    2402:	23 fc       	sbrc	r2, 3
    2404:	19 c0       	rjmp	.+50     	; 0x2438 <vfprintf+0x1c2>
    2406:	83 2d       	mov	r24, r3
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	48 16       	cp	r4, r24
    240c:	59 06       	cpc	r5, r25
    240e:	a0 f4       	brcc	.+40     	; 0x2438 <vfprintf+0x1c2>
    2410:	b7 01       	movw	r22, r14
    2412:	80 e2       	ldi	r24, 0x20	; 32
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	7b d2       	rcall	.+1270   	; 0x290e <fputc>
    2418:	3a 94       	dec	r3
    241a:	f5 cf       	rjmp	.-22     	; 0x2406 <vfprintf+0x190>
    241c:	f5 01       	movw	r30, r10
    241e:	27 fc       	sbrc	r2, 7
    2420:	85 91       	lpm	r24, Z+
    2422:	27 fe       	sbrs	r2, 7
    2424:	81 91       	ld	r24, Z+
    2426:	5f 01       	movw	r10, r30
    2428:	b7 01       	movw	r22, r14
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	70 d2       	rcall	.+1248   	; 0x290e <fputc>
    242e:	31 10       	cpse	r3, r1
    2430:	3a 94       	dec	r3
    2432:	f1 e0       	ldi	r31, 0x01	; 1
    2434:	4f 1a       	sub	r4, r31
    2436:	51 08       	sbc	r5, r1
    2438:	41 14       	cp	r4, r1
    243a:	51 04       	cpc	r5, r1
    243c:	79 f7       	brne	.-34     	; 0x241c <vfprintf+0x1a6>
    243e:	de c0       	rjmp	.+444    	; 0x25fc <vfprintf+0x386>
    2440:	84 36       	cpi	r24, 0x64	; 100
    2442:	11 f0       	breq	.+4      	; 0x2448 <vfprintf+0x1d2>
    2444:	89 36       	cpi	r24, 0x69	; 105
    2446:	31 f5       	brne	.+76     	; 0x2494 <vfprintf+0x21e>
    2448:	f8 01       	movw	r30, r16
    244a:	27 ff       	sbrs	r18, 7
    244c:	07 c0       	rjmp	.+14     	; 0x245c <vfprintf+0x1e6>
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	0c 5f       	subi	r16, 0xFC	; 252
    2458:	1f 4f       	sbci	r17, 0xFF	; 255
    245a:	08 c0       	rjmp	.+16     	; 0x246c <vfprintf+0x1f6>
    245c:	60 81       	ld	r22, Z
    245e:	71 81       	ldd	r23, Z+1	; 0x01
    2460:	07 2e       	mov	r0, r23
    2462:	00 0c       	add	r0, r0
    2464:	88 0b       	sbc	r24, r24
    2466:	99 0b       	sbc	r25, r25
    2468:	0e 5f       	subi	r16, 0xFE	; 254
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
    246c:	2f 76       	andi	r18, 0x6F	; 111
    246e:	72 2e       	mov	r7, r18
    2470:	97 ff       	sbrs	r25, 7
    2472:	09 c0       	rjmp	.+18     	; 0x2486 <vfprintf+0x210>
    2474:	90 95       	com	r25
    2476:	80 95       	com	r24
    2478:	70 95       	com	r23
    247a:	61 95       	neg	r22
    247c:	7f 4f       	sbci	r23, 0xFF	; 255
    247e:	8f 4f       	sbci	r24, 0xFF	; 255
    2480:	9f 4f       	sbci	r25, 0xFF	; 255
    2482:	20 68       	ori	r18, 0x80	; 128
    2484:	72 2e       	mov	r7, r18
    2486:	2a e0       	ldi	r18, 0x0A	; 10
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	a4 01       	movw	r20, r8
    248c:	78 d2       	rcall	.+1264   	; 0x297e <__ultoa_invert>
    248e:	a8 2e       	mov	r10, r24
    2490:	a8 18       	sub	r10, r8
    2492:	43 c0       	rjmp	.+134    	; 0x251a <vfprintf+0x2a4>
    2494:	85 37       	cpi	r24, 0x75	; 117
    2496:	29 f4       	brne	.+10     	; 0x24a2 <vfprintf+0x22c>
    2498:	2f 7e       	andi	r18, 0xEF	; 239
    249a:	b2 2e       	mov	r11, r18
    249c:	2a e0       	ldi	r18, 0x0A	; 10
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	25 c0       	rjmp	.+74     	; 0x24ec <vfprintf+0x276>
    24a2:	f2 2f       	mov	r31, r18
    24a4:	f9 7f       	andi	r31, 0xF9	; 249
    24a6:	bf 2e       	mov	r11, r31
    24a8:	8f 36       	cpi	r24, 0x6F	; 111
    24aa:	c1 f0       	breq	.+48     	; 0x24dc <vfprintf+0x266>
    24ac:	18 f4       	brcc	.+6      	; 0x24b4 <vfprintf+0x23e>
    24ae:	88 35       	cpi	r24, 0x58	; 88
    24b0:	79 f0       	breq	.+30     	; 0x24d0 <vfprintf+0x25a>
    24b2:	ad c0       	rjmp	.+346    	; 0x260e <vfprintf+0x398>
    24b4:	80 37       	cpi	r24, 0x70	; 112
    24b6:	19 f0       	breq	.+6      	; 0x24be <vfprintf+0x248>
    24b8:	88 37       	cpi	r24, 0x78	; 120
    24ba:	21 f0       	breq	.+8      	; 0x24c4 <vfprintf+0x24e>
    24bc:	a8 c0       	rjmp	.+336    	; 0x260e <vfprintf+0x398>
    24be:	2f 2f       	mov	r18, r31
    24c0:	20 61       	ori	r18, 0x10	; 16
    24c2:	b2 2e       	mov	r11, r18
    24c4:	b4 fe       	sbrs	r11, 4
    24c6:	0d c0       	rjmp	.+26     	; 0x24e2 <vfprintf+0x26c>
    24c8:	8b 2d       	mov	r24, r11
    24ca:	84 60       	ori	r24, 0x04	; 4
    24cc:	b8 2e       	mov	r11, r24
    24ce:	09 c0       	rjmp	.+18     	; 0x24e2 <vfprintf+0x26c>
    24d0:	24 ff       	sbrs	r18, 4
    24d2:	0a c0       	rjmp	.+20     	; 0x24e8 <vfprintf+0x272>
    24d4:	9f 2f       	mov	r25, r31
    24d6:	96 60       	ori	r25, 0x06	; 6
    24d8:	b9 2e       	mov	r11, r25
    24da:	06 c0       	rjmp	.+12     	; 0x24e8 <vfprintf+0x272>
    24dc:	28 e0       	ldi	r18, 0x08	; 8
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	05 c0       	rjmp	.+10     	; 0x24ec <vfprintf+0x276>
    24e2:	20 e1       	ldi	r18, 0x10	; 16
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <vfprintf+0x276>
    24e8:	20 e1       	ldi	r18, 0x10	; 16
    24ea:	32 e0       	ldi	r19, 0x02	; 2
    24ec:	f8 01       	movw	r30, r16
    24ee:	b7 fe       	sbrs	r11, 7
    24f0:	07 c0       	rjmp	.+14     	; 0x2500 <vfprintf+0x28a>
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	0c 5f       	subi	r16, 0xFC	; 252
    24fc:	1f 4f       	sbci	r17, 0xFF	; 255
    24fe:	06 c0       	rjmp	.+12     	; 0x250c <vfprintf+0x296>
    2500:	60 81       	ld	r22, Z
    2502:	71 81       	ldd	r23, Z+1	; 0x01
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0e 5f       	subi	r16, 0xFE	; 254
    250a:	1f 4f       	sbci	r17, 0xFF	; 255
    250c:	a4 01       	movw	r20, r8
    250e:	37 d2       	rcall	.+1134   	; 0x297e <__ultoa_invert>
    2510:	a8 2e       	mov	r10, r24
    2512:	a8 18       	sub	r10, r8
    2514:	fb 2d       	mov	r31, r11
    2516:	ff 77       	andi	r31, 0x7F	; 127
    2518:	7f 2e       	mov	r7, r31
    251a:	76 fe       	sbrs	r7, 6
    251c:	0b c0       	rjmp	.+22     	; 0x2534 <vfprintf+0x2be>
    251e:	37 2d       	mov	r19, r7
    2520:	3e 7f       	andi	r19, 0xFE	; 254
    2522:	a5 14       	cp	r10, r5
    2524:	50 f4       	brcc	.+20     	; 0x253a <vfprintf+0x2c4>
    2526:	74 fe       	sbrs	r7, 4
    2528:	0a c0       	rjmp	.+20     	; 0x253e <vfprintf+0x2c8>
    252a:	72 fc       	sbrc	r7, 2
    252c:	08 c0       	rjmp	.+16     	; 0x253e <vfprintf+0x2c8>
    252e:	37 2d       	mov	r19, r7
    2530:	3e 7e       	andi	r19, 0xEE	; 238
    2532:	05 c0       	rjmp	.+10     	; 0x253e <vfprintf+0x2c8>
    2534:	ba 2c       	mov	r11, r10
    2536:	37 2d       	mov	r19, r7
    2538:	03 c0       	rjmp	.+6      	; 0x2540 <vfprintf+0x2ca>
    253a:	ba 2c       	mov	r11, r10
    253c:	01 c0       	rjmp	.+2      	; 0x2540 <vfprintf+0x2ca>
    253e:	b5 2c       	mov	r11, r5
    2540:	34 ff       	sbrs	r19, 4
    2542:	0d c0       	rjmp	.+26     	; 0x255e <vfprintf+0x2e8>
    2544:	fe 01       	movw	r30, r28
    2546:	ea 0d       	add	r30, r10
    2548:	f1 1d       	adc	r31, r1
    254a:	80 81       	ld	r24, Z
    254c:	80 33       	cpi	r24, 0x30	; 48
    254e:	11 f4       	brne	.+4      	; 0x2554 <vfprintf+0x2de>
    2550:	39 7e       	andi	r19, 0xE9	; 233
    2552:	09 c0       	rjmp	.+18     	; 0x2566 <vfprintf+0x2f0>
    2554:	32 ff       	sbrs	r19, 2
    2556:	06 c0       	rjmp	.+12     	; 0x2564 <vfprintf+0x2ee>
    2558:	b3 94       	inc	r11
    255a:	b3 94       	inc	r11
    255c:	04 c0       	rjmp	.+8      	; 0x2566 <vfprintf+0x2f0>
    255e:	83 2f       	mov	r24, r19
    2560:	86 78       	andi	r24, 0x86	; 134
    2562:	09 f0       	breq	.+2      	; 0x2566 <vfprintf+0x2f0>
    2564:	b3 94       	inc	r11
    2566:	33 fd       	sbrc	r19, 3
    2568:	12 c0       	rjmp	.+36     	; 0x258e <vfprintf+0x318>
    256a:	30 ff       	sbrs	r19, 0
    256c:	06 c0       	rjmp	.+12     	; 0x257a <vfprintf+0x304>
    256e:	5a 2c       	mov	r5, r10
    2570:	b3 14       	cp	r11, r3
    2572:	18 f4       	brcc	.+6      	; 0x257a <vfprintf+0x304>
    2574:	53 0c       	add	r5, r3
    2576:	5b 18       	sub	r5, r11
    2578:	b3 2c       	mov	r11, r3
    257a:	b3 14       	cp	r11, r3
    257c:	60 f4       	brcc	.+24     	; 0x2596 <vfprintf+0x320>
    257e:	b7 01       	movw	r22, r14
    2580:	80 e2       	ldi	r24, 0x20	; 32
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	3c 87       	std	Y+12, r19	; 0x0c
    2586:	c3 d1       	rcall	.+902    	; 0x290e <fputc>
    2588:	b3 94       	inc	r11
    258a:	3c 85       	ldd	r19, Y+12	; 0x0c
    258c:	f6 cf       	rjmp	.-20     	; 0x257a <vfprintf+0x304>
    258e:	b3 14       	cp	r11, r3
    2590:	10 f4       	brcc	.+4      	; 0x2596 <vfprintf+0x320>
    2592:	3b 18       	sub	r3, r11
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <vfprintf+0x322>
    2596:	31 2c       	mov	r3, r1
    2598:	34 ff       	sbrs	r19, 4
    259a:	11 c0       	rjmp	.+34     	; 0x25be <vfprintf+0x348>
    259c:	b7 01       	movw	r22, r14
    259e:	80 e3       	ldi	r24, 0x30	; 48
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	3c 87       	std	Y+12, r19	; 0x0c
    25a4:	b4 d1       	rcall	.+872    	; 0x290e <fputc>
    25a6:	3c 85       	ldd	r19, Y+12	; 0x0c
    25a8:	32 ff       	sbrs	r19, 2
    25aa:	16 c0       	rjmp	.+44     	; 0x25d8 <vfprintf+0x362>
    25ac:	31 fd       	sbrc	r19, 1
    25ae:	03 c0       	rjmp	.+6      	; 0x25b6 <vfprintf+0x340>
    25b0:	88 e7       	ldi	r24, 0x78	; 120
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <vfprintf+0x344>
    25b6:	88 e5       	ldi	r24, 0x58	; 88
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	b7 01       	movw	r22, r14
    25bc:	0c c0       	rjmp	.+24     	; 0x25d6 <vfprintf+0x360>
    25be:	83 2f       	mov	r24, r19
    25c0:	86 78       	andi	r24, 0x86	; 134
    25c2:	51 f0       	breq	.+20     	; 0x25d8 <vfprintf+0x362>
    25c4:	31 ff       	sbrs	r19, 1
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <vfprintf+0x356>
    25c8:	8b e2       	ldi	r24, 0x2B	; 43
    25ca:	01 c0       	rjmp	.+2      	; 0x25ce <vfprintf+0x358>
    25cc:	80 e2       	ldi	r24, 0x20	; 32
    25ce:	37 fd       	sbrc	r19, 7
    25d0:	8d e2       	ldi	r24, 0x2D	; 45
    25d2:	b7 01       	movw	r22, r14
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	9b d1       	rcall	.+822    	; 0x290e <fputc>
    25d8:	a5 14       	cp	r10, r5
    25da:	30 f4       	brcc	.+12     	; 0x25e8 <vfprintf+0x372>
    25dc:	b7 01       	movw	r22, r14
    25de:	80 e3       	ldi	r24, 0x30	; 48
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	95 d1       	rcall	.+810    	; 0x290e <fputc>
    25e4:	5a 94       	dec	r5
    25e6:	f8 cf       	rjmp	.-16     	; 0x25d8 <vfprintf+0x362>
    25e8:	aa 94       	dec	r10
    25ea:	f4 01       	movw	r30, r8
    25ec:	ea 0d       	add	r30, r10
    25ee:	f1 1d       	adc	r31, r1
    25f0:	80 81       	ld	r24, Z
    25f2:	b7 01       	movw	r22, r14
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	8b d1       	rcall	.+790    	; 0x290e <fputc>
    25f8:	a1 10       	cpse	r10, r1
    25fa:	f6 cf       	rjmp	.-20     	; 0x25e8 <vfprintf+0x372>
    25fc:	33 20       	and	r3, r3
    25fe:	09 f4       	brne	.+2      	; 0x2602 <vfprintf+0x38c>
    2600:	5d ce       	rjmp	.-838    	; 0x22bc <vfprintf+0x46>
    2602:	b7 01       	movw	r22, r14
    2604:	80 e2       	ldi	r24, 0x20	; 32
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	82 d1       	rcall	.+772    	; 0x290e <fputc>
    260a:	3a 94       	dec	r3
    260c:	f7 cf       	rjmp	.-18     	; 0x25fc <vfprintf+0x386>
    260e:	f7 01       	movw	r30, r14
    2610:	86 81       	ldd	r24, Z+6	; 0x06
    2612:	97 81       	ldd	r25, Z+7	; 0x07
    2614:	02 c0       	rjmp	.+4      	; 0x261a <vfprintf+0x3a4>
    2616:	8f ef       	ldi	r24, 0xFF	; 255
    2618:	9f ef       	ldi	r25, 0xFF	; 255
    261a:	2c 96       	adiw	r28, 0x0c	; 12
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	1f 91       	pop	r17
    2626:	0f 91       	pop	r16
    2628:	ff 90       	pop	r15
    262a:	ef 90       	pop	r14
    262c:	df 90       	pop	r13
    262e:	cf 90       	pop	r12
    2630:	bf 90       	pop	r11
    2632:	af 90       	pop	r10
    2634:	9f 90       	pop	r9
    2636:	8f 90       	pop	r8
    2638:	7f 90       	pop	r7
    263a:	6f 90       	pop	r6
    263c:	5f 90       	pop	r5
    263e:	4f 90       	pop	r4
    2640:	3f 90       	pop	r3
    2642:	2f 90       	pop	r2
    2644:	08 95       	ret

00002646 <calloc>:
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	86 9f       	mul	r24, r22
    2650:	80 01       	movw	r16, r0
    2652:	87 9f       	mul	r24, r23
    2654:	10 0d       	add	r17, r0
    2656:	96 9f       	mul	r25, r22
    2658:	10 0d       	add	r17, r0
    265a:	11 24       	eor	r1, r1
    265c:	c8 01       	movw	r24, r16
    265e:	0d d0       	rcall	.+26     	; 0x267a <malloc>
    2660:	ec 01       	movw	r28, r24
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	21 f0       	breq	.+8      	; 0x266e <calloc+0x28>
    2666:	a8 01       	movw	r20, r16
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	3e d1       	rcall	.+636    	; 0x28ea <memset>
    266e:	ce 01       	movw	r24, r28
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	08 95       	ret

0000267a <malloc>:
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	82 30       	cpi	r24, 0x02	; 2
    2680:	91 05       	cpc	r25, r1
    2682:	10 f4       	brcc	.+4      	; 0x2688 <malloc+0xe>
    2684:	82 e0       	ldi	r24, 0x02	; 2
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	e0 91 a0 20 	lds	r30, 0x20A0	; 0x8020a0 <__flp>
    268c:	f0 91 a1 20 	lds	r31, 0x20A1	; 0x8020a1 <__flp+0x1>
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	c0 e0       	ldi	r28, 0x00	; 0
    2696:	d0 e0       	ldi	r29, 0x00	; 0
    2698:	30 97       	sbiw	r30, 0x00	; 0
    269a:	11 f1       	breq	.+68     	; 0x26e0 <malloc+0x66>
    269c:	40 81       	ld	r20, Z
    269e:	51 81       	ldd	r21, Z+1	; 0x01
    26a0:	48 17       	cp	r20, r24
    26a2:	59 07       	cpc	r21, r25
    26a4:	c0 f0       	brcs	.+48     	; 0x26d6 <malloc+0x5c>
    26a6:	48 17       	cp	r20, r24
    26a8:	59 07       	cpc	r21, r25
    26aa:	61 f4       	brne	.+24     	; 0x26c4 <malloc+0x4a>
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	20 97       	sbiw	r28, 0x00	; 0
    26b2:	19 f0       	breq	.+6      	; 0x26ba <malloc+0x40>
    26b4:	8a 83       	std	Y+2, r24	; 0x02
    26b6:	9b 83       	std	Y+3, r25	; 0x03
    26b8:	2b c0       	rjmp	.+86     	; 0x2710 <malloc+0x96>
    26ba:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <__flp>
    26be:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <__flp+0x1>
    26c2:	26 c0       	rjmp	.+76     	; 0x2710 <malloc+0x96>
    26c4:	21 15       	cp	r18, r1
    26c6:	31 05       	cpc	r19, r1
    26c8:	19 f0       	breq	.+6      	; 0x26d0 <malloc+0x56>
    26ca:	42 17       	cp	r20, r18
    26cc:	53 07       	cpc	r21, r19
    26ce:	18 f4       	brcc	.+6      	; 0x26d6 <malloc+0x5c>
    26d0:	9a 01       	movw	r18, r20
    26d2:	be 01       	movw	r22, r28
    26d4:	df 01       	movw	r26, r30
    26d6:	ef 01       	movw	r28, r30
    26d8:	02 80       	ldd	r0, Z+2	; 0x02
    26da:	f3 81       	ldd	r31, Z+3	; 0x03
    26dc:	e0 2d       	mov	r30, r0
    26de:	dc cf       	rjmp	.-72     	; 0x2698 <malloc+0x1e>
    26e0:	21 15       	cp	r18, r1
    26e2:	31 05       	cpc	r19, r1
    26e4:	09 f1       	breq	.+66     	; 0x2728 <malloc+0xae>
    26e6:	28 1b       	sub	r18, r24
    26e8:	39 0b       	sbc	r19, r25
    26ea:	24 30       	cpi	r18, 0x04	; 4
    26ec:	31 05       	cpc	r19, r1
    26ee:	90 f4       	brcc	.+36     	; 0x2714 <malloc+0x9a>
    26f0:	12 96       	adiw	r26, 0x02	; 2
    26f2:	8d 91       	ld	r24, X+
    26f4:	9c 91       	ld	r25, X
    26f6:	13 97       	sbiw	r26, 0x03	; 3
    26f8:	61 15       	cp	r22, r1
    26fa:	71 05       	cpc	r23, r1
    26fc:	21 f0       	breq	.+8      	; 0x2706 <malloc+0x8c>
    26fe:	fb 01       	movw	r30, r22
    2700:	82 83       	std	Z+2, r24	; 0x02
    2702:	93 83       	std	Z+3, r25	; 0x03
    2704:	04 c0       	rjmp	.+8      	; 0x270e <malloc+0x94>
    2706:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <__flp>
    270a:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <__flp+0x1>
    270e:	fd 01       	movw	r30, r26
    2710:	32 96       	adiw	r30, 0x02	; 2
    2712:	44 c0       	rjmp	.+136    	; 0x279c <malloc+0x122>
    2714:	fd 01       	movw	r30, r26
    2716:	e2 0f       	add	r30, r18
    2718:	f3 1f       	adc	r31, r19
    271a:	81 93       	st	Z+, r24
    271c:	91 93       	st	Z+, r25
    271e:	22 50       	subi	r18, 0x02	; 2
    2720:	31 09       	sbc	r19, r1
    2722:	2d 93       	st	X+, r18
    2724:	3c 93       	st	X, r19
    2726:	3a c0       	rjmp	.+116    	; 0x279c <malloc+0x122>
    2728:	20 91 9e 20 	lds	r18, 0x209E	; 0x80209e <__brkval>
    272c:	30 91 9f 20 	lds	r19, 0x209F	; 0x80209f <__brkval+0x1>
    2730:	23 2b       	or	r18, r19
    2732:	41 f4       	brne	.+16     	; 0x2744 <malloc+0xca>
    2734:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    2738:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    273c:	20 93 9e 20 	sts	0x209E, r18	; 0x80209e <__brkval>
    2740:	30 93 9f 20 	sts	0x209F, r19	; 0x80209f <__brkval+0x1>
    2744:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    2748:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    274c:	21 15       	cp	r18, r1
    274e:	31 05       	cpc	r19, r1
    2750:	41 f4       	brne	.+16     	; 0x2762 <malloc+0xe8>
    2752:	2d b7       	in	r18, 0x3d	; 61
    2754:	3e b7       	in	r19, 0x3e	; 62
    2756:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    275a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    275e:	24 1b       	sub	r18, r20
    2760:	35 0b       	sbc	r19, r21
    2762:	e0 91 9e 20 	lds	r30, 0x209E	; 0x80209e <__brkval>
    2766:	f0 91 9f 20 	lds	r31, 0x209F	; 0x80209f <__brkval+0x1>
    276a:	e2 17       	cp	r30, r18
    276c:	f3 07       	cpc	r31, r19
    276e:	a0 f4       	brcc	.+40     	; 0x2798 <malloc+0x11e>
    2770:	2e 1b       	sub	r18, r30
    2772:	3f 0b       	sbc	r19, r31
    2774:	28 17       	cp	r18, r24
    2776:	39 07       	cpc	r19, r25
    2778:	78 f0       	brcs	.+30     	; 0x2798 <malloc+0x11e>
    277a:	ac 01       	movw	r20, r24
    277c:	4e 5f       	subi	r20, 0xFE	; 254
    277e:	5f 4f       	sbci	r21, 0xFF	; 255
    2780:	24 17       	cp	r18, r20
    2782:	35 07       	cpc	r19, r21
    2784:	48 f0       	brcs	.+18     	; 0x2798 <malloc+0x11e>
    2786:	4e 0f       	add	r20, r30
    2788:	5f 1f       	adc	r21, r31
    278a:	40 93 9e 20 	sts	0x209E, r20	; 0x80209e <__brkval>
    278e:	50 93 9f 20 	sts	0x209F, r21	; 0x80209f <__brkval+0x1>
    2792:	81 93       	st	Z+, r24
    2794:	91 93       	st	Z+, r25
    2796:	02 c0       	rjmp	.+4      	; 0x279c <malloc+0x122>
    2798:	e0 e0       	ldi	r30, 0x00	; 0
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	cf 01       	movw	r24, r30
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	08 95       	ret

000027a4 <free>:
    27a4:	0f 93       	push	r16
    27a6:	1f 93       	push	r17
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <free+0xe>
    27b0:	8c c0       	rjmp	.+280    	; 0x28ca <free+0x126>
    27b2:	fc 01       	movw	r30, r24
    27b4:	32 97       	sbiw	r30, 0x02	; 2
    27b6:	12 82       	std	Z+2, r1	; 0x02
    27b8:	13 82       	std	Z+3, r1	; 0x03
    27ba:	00 91 a0 20 	lds	r16, 0x20A0	; 0x8020a0 <__flp>
    27be:	10 91 a1 20 	lds	r17, 0x20A1	; 0x8020a1 <__flp+0x1>
    27c2:	01 15       	cp	r16, r1
    27c4:	11 05       	cpc	r17, r1
    27c6:	81 f4       	brne	.+32     	; 0x27e8 <free+0x44>
    27c8:	20 81       	ld	r18, Z
    27ca:	31 81       	ldd	r19, Z+1	; 0x01
    27cc:	82 0f       	add	r24, r18
    27ce:	93 1f       	adc	r25, r19
    27d0:	20 91 9e 20 	lds	r18, 0x209E	; 0x80209e <__brkval>
    27d4:	30 91 9f 20 	lds	r19, 0x209F	; 0x80209f <__brkval+0x1>
    27d8:	28 17       	cp	r18, r24
    27da:	39 07       	cpc	r19, r25
    27dc:	79 f5       	brne	.+94     	; 0x283c <free+0x98>
    27de:	e0 93 9e 20 	sts	0x209E, r30	; 0x80209e <__brkval>
    27e2:	f0 93 9f 20 	sts	0x209F, r31	; 0x80209f <__brkval+0x1>
    27e6:	71 c0       	rjmp	.+226    	; 0x28ca <free+0x126>
    27e8:	d8 01       	movw	r26, r16
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	ae 17       	cp	r26, r30
    27f0:	bf 07       	cpc	r27, r31
    27f2:	50 f4       	brcc	.+20     	; 0x2808 <free+0x64>
    27f4:	12 96       	adiw	r26, 0x02	; 2
    27f6:	2d 91       	ld	r18, X+
    27f8:	3c 91       	ld	r19, X
    27fa:	13 97       	sbiw	r26, 0x03	; 3
    27fc:	ad 01       	movw	r20, r26
    27fe:	21 15       	cp	r18, r1
    2800:	31 05       	cpc	r19, r1
    2802:	09 f1       	breq	.+66     	; 0x2846 <free+0xa2>
    2804:	d9 01       	movw	r26, r18
    2806:	f3 cf       	rjmp	.-26     	; 0x27ee <free+0x4a>
    2808:	9d 01       	movw	r18, r26
    280a:	da 01       	movw	r26, r20
    280c:	22 83       	std	Z+2, r18	; 0x02
    280e:	33 83       	std	Z+3, r19	; 0x03
    2810:	60 81       	ld	r22, Z
    2812:	71 81       	ldd	r23, Z+1	; 0x01
    2814:	86 0f       	add	r24, r22
    2816:	97 1f       	adc	r25, r23
    2818:	82 17       	cp	r24, r18
    281a:	93 07       	cpc	r25, r19
    281c:	69 f4       	brne	.+26     	; 0x2838 <free+0x94>
    281e:	ec 01       	movw	r28, r24
    2820:	28 81       	ld	r18, Y
    2822:	39 81       	ldd	r19, Y+1	; 0x01
    2824:	26 0f       	add	r18, r22
    2826:	37 1f       	adc	r19, r23
    2828:	2e 5f       	subi	r18, 0xFE	; 254
    282a:	3f 4f       	sbci	r19, 0xFF	; 255
    282c:	20 83       	st	Z, r18
    282e:	31 83       	std	Z+1, r19	; 0x01
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	9b 81       	ldd	r25, Y+3	; 0x03
    2834:	82 83       	std	Z+2, r24	; 0x02
    2836:	93 83       	std	Z+3, r25	; 0x03
    2838:	45 2b       	or	r20, r21
    283a:	29 f4       	brne	.+10     	; 0x2846 <free+0xa2>
    283c:	e0 93 a0 20 	sts	0x20A0, r30	; 0x8020a0 <__flp>
    2840:	f0 93 a1 20 	sts	0x20A1, r31	; 0x8020a1 <__flp+0x1>
    2844:	42 c0       	rjmp	.+132    	; 0x28ca <free+0x126>
    2846:	12 96       	adiw	r26, 0x02	; 2
    2848:	ed 93       	st	X+, r30
    284a:	fc 93       	st	X, r31
    284c:	13 97       	sbiw	r26, 0x03	; 3
    284e:	ed 01       	movw	r28, r26
    2850:	49 91       	ld	r20, Y+
    2852:	59 91       	ld	r21, Y+
    2854:	9e 01       	movw	r18, r28
    2856:	24 0f       	add	r18, r20
    2858:	35 1f       	adc	r19, r21
    285a:	e2 17       	cp	r30, r18
    285c:	f3 07       	cpc	r31, r19
    285e:	71 f4       	brne	.+28     	; 0x287c <free+0xd8>
    2860:	80 81       	ld	r24, Z
    2862:	91 81       	ldd	r25, Z+1	; 0x01
    2864:	84 0f       	add	r24, r20
    2866:	95 1f       	adc	r25, r21
    2868:	02 96       	adiw	r24, 0x02	; 2
    286a:	8d 93       	st	X+, r24
    286c:	9c 93       	st	X, r25
    286e:	11 97       	sbiw	r26, 0x01	; 1
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	12 96       	adiw	r26, 0x02	; 2
    2876:	8d 93       	st	X+, r24
    2878:	9c 93       	st	X, r25
    287a:	13 97       	sbiw	r26, 0x03	; 3
    287c:	e0 e0       	ldi	r30, 0x00	; 0
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	d8 01       	movw	r26, r16
    2882:	12 96       	adiw	r26, 0x02	; 2
    2884:	8d 91       	ld	r24, X+
    2886:	9c 91       	ld	r25, X
    2888:	13 97       	sbiw	r26, 0x03	; 3
    288a:	00 97       	sbiw	r24, 0x00	; 0
    288c:	19 f0       	breq	.+6      	; 0x2894 <free+0xf0>
    288e:	f8 01       	movw	r30, r16
    2890:	8c 01       	movw	r16, r24
    2892:	f6 cf       	rjmp	.-20     	; 0x2880 <free+0xdc>
    2894:	8d 91       	ld	r24, X+
    2896:	9c 91       	ld	r25, X
    2898:	98 01       	movw	r18, r16
    289a:	2e 5f       	subi	r18, 0xFE	; 254
    289c:	3f 4f       	sbci	r19, 0xFF	; 255
    289e:	82 0f       	add	r24, r18
    28a0:	93 1f       	adc	r25, r19
    28a2:	20 91 9e 20 	lds	r18, 0x209E	; 0x80209e <__brkval>
    28a6:	30 91 9f 20 	lds	r19, 0x209F	; 0x80209f <__brkval+0x1>
    28aa:	28 17       	cp	r18, r24
    28ac:	39 07       	cpc	r19, r25
    28ae:	69 f4       	brne	.+26     	; 0x28ca <free+0x126>
    28b0:	30 97       	sbiw	r30, 0x00	; 0
    28b2:	29 f4       	brne	.+10     	; 0x28be <free+0x11a>
    28b4:	10 92 a0 20 	sts	0x20A0, r1	; 0x8020a0 <__flp>
    28b8:	10 92 a1 20 	sts	0x20A1, r1	; 0x8020a1 <__flp+0x1>
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <free+0x11e>
    28be:	12 82       	std	Z+2, r1	; 0x02
    28c0:	13 82       	std	Z+3, r1	; 0x03
    28c2:	00 93 9e 20 	sts	0x209E, r16	; 0x80209e <__brkval>
    28c6:	10 93 9f 20 	sts	0x209F, r17	; 0x80209f <__brkval+0x1>
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	1f 91       	pop	r17
    28d0:	0f 91       	pop	r16
    28d2:	08 95       	ret

000028d4 <strnlen_P>:
    28d4:	fc 01       	movw	r30, r24
    28d6:	05 90       	lpm	r0, Z+
    28d8:	61 50       	subi	r22, 0x01	; 1
    28da:	70 40       	sbci	r23, 0x00	; 0
    28dc:	01 10       	cpse	r0, r1
    28de:	d8 f7       	brcc	.-10     	; 0x28d6 <strnlen_P+0x2>
    28e0:	80 95       	com	r24
    28e2:	90 95       	com	r25
    28e4:	8e 0f       	add	r24, r30
    28e6:	9f 1f       	adc	r25, r31
    28e8:	08 95       	ret

000028ea <memset>:
    28ea:	dc 01       	movw	r26, r24
    28ec:	01 c0       	rjmp	.+2      	; 0x28f0 <memset+0x6>
    28ee:	6d 93       	st	X+, r22
    28f0:	41 50       	subi	r20, 0x01	; 1
    28f2:	50 40       	sbci	r21, 0x00	; 0
    28f4:	e0 f7       	brcc	.-8      	; 0x28ee <memset+0x4>
    28f6:	08 95       	ret

000028f8 <strnlen>:
    28f8:	fc 01       	movw	r30, r24
    28fa:	61 50       	subi	r22, 0x01	; 1
    28fc:	70 40       	sbci	r23, 0x00	; 0
    28fe:	01 90       	ld	r0, Z+
    2900:	01 10       	cpse	r0, r1
    2902:	d8 f7       	brcc	.-10     	; 0x28fa <strnlen+0x2>
    2904:	80 95       	com	r24
    2906:	90 95       	com	r25
    2908:	8e 0f       	add	r24, r30
    290a:	9f 1f       	adc	r25, r31
    290c:	08 95       	ret

0000290e <fputc>:
    290e:	0f 93       	push	r16
    2910:	1f 93       	push	r17
    2912:	cf 93       	push	r28
    2914:	df 93       	push	r29
    2916:	fb 01       	movw	r30, r22
    2918:	23 81       	ldd	r18, Z+3	; 0x03
    291a:	21 fd       	sbrc	r18, 1
    291c:	03 c0       	rjmp	.+6      	; 0x2924 <fputc+0x16>
    291e:	8f ef       	ldi	r24, 0xFF	; 255
    2920:	9f ef       	ldi	r25, 0xFF	; 255
    2922:	28 c0       	rjmp	.+80     	; 0x2974 <fputc+0x66>
    2924:	22 ff       	sbrs	r18, 2
    2926:	16 c0       	rjmp	.+44     	; 0x2954 <fputc+0x46>
    2928:	46 81       	ldd	r20, Z+6	; 0x06
    292a:	57 81       	ldd	r21, Z+7	; 0x07
    292c:	24 81       	ldd	r18, Z+4	; 0x04
    292e:	35 81       	ldd	r19, Z+5	; 0x05
    2930:	42 17       	cp	r20, r18
    2932:	53 07       	cpc	r21, r19
    2934:	44 f4       	brge	.+16     	; 0x2946 <fputc+0x38>
    2936:	a0 81       	ld	r26, Z
    2938:	b1 81       	ldd	r27, Z+1	; 0x01
    293a:	9d 01       	movw	r18, r26
    293c:	2f 5f       	subi	r18, 0xFF	; 255
    293e:	3f 4f       	sbci	r19, 0xFF	; 255
    2940:	20 83       	st	Z, r18
    2942:	31 83       	std	Z+1, r19	; 0x01
    2944:	8c 93       	st	X, r24
    2946:	26 81       	ldd	r18, Z+6	; 0x06
    2948:	37 81       	ldd	r19, Z+7	; 0x07
    294a:	2f 5f       	subi	r18, 0xFF	; 255
    294c:	3f 4f       	sbci	r19, 0xFF	; 255
    294e:	26 83       	std	Z+6, r18	; 0x06
    2950:	37 83       	std	Z+7, r19	; 0x07
    2952:	10 c0       	rjmp	.+32     	; 0x2974 <fputc+0x66>
    2954:	eb 01       	movw	r28, r22
    2956:	09 2f       	mov	r16, r25
    2958:	18 2f       	mov	r17, r24
    295a:	00 84       	ldd	r0, Z+8	; 0x08
    295c:	f1 85       	ldd	r31, Z+9	; 0x09
    295e:	e0 2d       	mov	r30, r0
    2960:	19 95       	eicall
    2962:	89 2b       	or	r24, r25
    2964:	e1 f6       	brne	.-72     	; 0x291e <fputc+0x10>
    2966:	8e 81       	ldd	r24, Y+6	; 0x06
    2968:	9f 81       	ldd	r25, Y+7	; 0x07
    296a:	01 96       	adiw	r24, 0x01	; 1
    296c:	8e 83       	std	Y+6, r24	; 0x06
    296e:	9f 83       	std	Y+7, r25	; 0x07
    2970:	81 2f       	mov	r24, r17
    2972:	90 2f       	mov	r25, r16
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	08 95       	ret

0000297e <__ultoa_invert>:
    297e:	fa 01       	movw	r30, r20
    2980:	aa 27       	eor	r26, r26
    2982:	28 30       	cpi	r18, 0x08	; 8
    2984:	51 f1       	breq	.+84     	; 0x29da <__ultoa_invert+0x5c>
    2986:	20 31       	cpi	r18, 0x10	; 16
    2988:	81 f1       	breq	.+96     	; 0x29ea <__ultoa_invert+0x6c>
    298a:	e8 94       	clt
    298c:	6f 93       	push	r22
    298e:	6e 7f       	andi	r22, 0xFE	; 254
    2990:	6e 5f       	subi	r22, 0xFE	; 254
    2992:	7f 4f       	sbci	r23, 0xFF	; 255
    2994:	8f 4f       	sbci	r24, 0xFF	; 255
    2996:	9f 4f       	sbci	r25, 0xFF	; 255
    2998:	af 4f       	sbci	r26, 0xFF	; 255
    299a:	b1 e0       	ldi	r27, 0x01	; 1
    299c:	3e d0       	rcall	.+124    	; 0x2a1a <__ultoa_invert+0x9c>
    299e:	b4 e0       	ldi	r27, 0x04	; 4
    29a0:	3c d0       	rcall	.+120    	; 0x2a1a <__ultoa_invert+0x9c>
    29a2:	67 0f       	add	r22, r23
    29a4:	78 1f       	adc	r23, r24
    29a6:	89 1f       	adc	r24, r25
    29a8:	9a 1f       	adc	r25, r26
    29aa:	a1 1d       	adc	r26, r1
    29ac:	68 0f       	add	r22, r24
    29ae:	79 1f       	adc	r23, r25
    29b0:	8a 1f       	adc	r24, r26
    29b2:	91 1d       	adc	r25, r1
    29b4:	a1 1d       	adc	r26, r1
    29b6:	6a 0f       	add	r22, r26
    29b8:	71 1d       	adc	r23, r1
    29ba:	81 1d       	adc	r24, r1
    29bc:	91 1d       	adc	r25, r1
    29be:	a1 1d       	adc	r26, r1
    29c0:	20 d0       	rcall	.+64     	; 0x2a02 <__ultoa_invert+0x84>
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <__ultoa_invert+0x48>
    29c4:	68 94       	set
    29c6:	3f 91       	pop	r19
    29c8:	2a e0       	ldi	r18, 0x0A	; 10
    29ca:	26 9f       	mul	r18, r22
    29cc:	11 24       	eor	r1, r1
    29ce:	30 19       	sub	r19, r0
    29d0:	30 5d       	subi	r19, 0xD0	; 208
    29d2:	31 93       	st	Z+, r19
    29d4:	de f6       	brtc	.-74     	; 0x298c <__ultoa_invert+0xe>
    29d6:	cf 01       	movw	r24, r30
    29d8:	08 95       	ret
    29da:	46 2f       	mov	r20, r22
    29dc:	47 70       	andi	r20, 0x07	; 7
    29de:	40 5d       	subi	r20, 0xD0	; 208
    29e0:	41 93       	st	Z+, r20
    29e2:	b3 e0       	ldi	r27, 0x03	; 3
    29e4:	0f d0       	rcall	.+30     	; 0x2a04 <__ultoa_invert+0x86>
    29e6:	c9 f7       	brne	.-14     	; 0x29da <__ultoa_invert+0x5c>
    29e8:	f6 cf       	rjmp	.-20     	; 0x29d6 <__ultoa_invert+0x58>
    29ea:	46 2f       	mov	r20, r22
    29ec:	4f 70       	andi	r20, 0x0F	; 15
    29ee:	40 5d       	subi	r20, 0xD0	; 208
    29f0:	4a 33       	cpi	r20, 0x3A	; 58
    29f2:	18 f0       	brcs	.+6      	; 0x29fa <__ultoa_invert+0x7c>
    29f4:	49 5d       	subi	r20, 0xD9	; 217
    29f6:	31 fd       	sbrc	r19, 1
    29f8:	40 52       	subi	r20, 0x20	; 32
    29fa:	41 93       	st	Z+, r20
    29fc:	02 d0       	rcall	.+4      	; 0x2a02 <__ultoa_invert+0x84>
    29fe:	a9 f7       	brne	.-22     	; 0x29ea <__ultoa_invert+0x6c>
    2a00:	ea cf       	rjmp	.-44     	; 0x29d6 <__ultoa_invert+0x58>
    2a02:	b4 e0       	ldi	r27, 0x04	; 4
    2a04:	a6 95       	lsr	r26
    2a06:	97 95       	ror	r25
    2a08:	87 95       	ror	r24
    2a0a:	77 95       	ror	r23
    2a0c:	67 95       	ror	r22
    2a0e:	ba 95       	dec	r27
    2a10:	c9 f7       	brne	.-14     	; 0x2a04 <__ultoa_invert+0x86>
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	61 05       	cpc	r22, r1
    2a16:	71 05       	cpc	r23, r1
    2a18:	08 95       	ret
    2a1a:	9b 01       	movw	r18, r22
    2a1c:	ac 01       	movw	r20, r24
    2a1e:	0a 2e       	mov	r0, r26
    2a20:	06 94       	lsr	r0
    2a22:	57 95       	ror	r21
    2a24:	47 95       	ror	r20
    2a26:	37 95       	ror	r19
    2a28:	27 95       	ror	r18
    2a2a:	ba 95       	dec	r27
    2a2c:	c9 f7       	brne	.-14     	; 0x2a20 <__ultoa_invert+0xa2>
    2a2e:	62 0f       	add	r22, r18
    2a30:	73 1f       	adc	r23, r19
    2a32:	84 1f       	adc	r24, r20
    2a34:	95 1f       	adc	r25, r21
    2a36:	a0 1d       	adc	r26, r0
    2a38:	08 95       	ret

00002a3a <_exit>:
    2a3a:	f8 94       	cli

00002a3c <__stop_program>:
    2a3c:	ff cf       	rjmp	.-2      	; 0x2a3c <__stop_program>
