
TEAM2 ONE MONTH CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003124  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00802000  00003124  000031b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  0080206c  0080206c  00003224  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  000032c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d20a  00000000  00000000  00003758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000278e  00000000  00000000  00010962  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a319  00000000  00000000  000130f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f74  00000000  00000000  0001d40c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002b985  00000000  00000000  0001e380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004bae  00000000  00000000  00049d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  0004e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003ba1  00000000  00000000  0004ec80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a7 c1       	rjmp	.+846    	; 0x350 <__ctors_end>
       2:	00 00       	nop
       4:	cb c1       	rjmp	.+918    	; 0x39c <__bad_interrupt>
       6:	00 00       	nop
       8:	c9 c1       	rjmp	.+914    	; 0x39c <__bad_interrupt>
       a:	00 00       	nop
       c:	c7 c1       	rjmp	.+910    	; 0x39c <__bad_interrupt>
       e:	00 00       	nop
      10:	c5 c1       	rjmp	.+906    	; 0x39c <__bad_interrupt>
      12:	00 00       	nop
      14:	c3 c1       	rjmp	.+902    	; 0x39c <__bad_interrupt>
      16:	00 00       	nop
      18:	c1 c1       	rjmp	.+898    	; 0x39c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	bf c1       	rjmp	.+894    	; 0x39c <__bad_interrupt>
      1e:	00 00       	nop
      20:	bd c1       	rjmp	.+890    	; 0x39c <__bad_interrupt>
      22:	00 00       	nop
      24:	bb c1       	rjmp	.+886    	; 0x39c <__bad_interrupt>
      26:	00 00       	nop
      28:	ba c1       	rjmp	.+884    	; 0x39e <__vector_10>
      2a:	00 00       	nop
      2c:	db c1       	rjmp	.+950    	; 0x3e4 <__vector_11>
      2e:	00 00       	nop
      30:	b5 c1       	rjmp	.+874    	; 0x39c <__bad_interrupt>
      32:	00 00       	nop
      34:	b3 c1       	rjmp	.+870    	; 0x39c <__bad_interrupt>
      36:	00 00       	nop
      38:	b1 c1       	rjmp	.+866    	; 0x39c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	af c1       	rjmp	.+862    	; 0x39c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ad c1       	rjmp	.+858    	; 0x39c <__bad_interrupt>
      42:	00 00       	nop
      44:	ab c1       	rjmp	.+854    	; 0x39c <__bad_interrupt>
      46:	00 00       	nop
      48:	a9 c1       	rjmp	.+850    	; 0x39c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a7 c1       	rjmp	.+846    	; 0x39c <__bad_interrupt>
      4e:	00 00       	nop
      50:	a5 c1       	rjmp	.+842    	; 0x39c <__bad_interrupt>
      52:	00 00       	nop
      54:	a3 c1       	rjmp	.+838    	; 0x39c <__bad_interrupt>
      56:	00 00       	nop
      58:	a1 c1       	rjmp	.+834    	; 0x39c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9f c1       	rjmp	.+830    	; 0x39c <__bad_interrupt>
      5e:	00 00       	nop
      60:	9d c1       	rjmp	.+826    	; 0x39c <__bad_interrupt>
      62:	00 00       	nop
      64:	9b c1       	rjmp	.+822    	; 0x39c <__bad_interrupt>
      66:	00 00       	nop
      68:	99 c1       	rjmp	.+818    	; 0x39c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	97 c1       	rjmp	.+814    	; 0x39c <__bad_interrupt>
      6e:	00 00       	nop
      70:	95 c1       	rjmp	.+810    	; 0x39c <__bad_interrupt>
      72:	00 00       	nop
      74:	93 c1       	rjmp	.+806    	; 0x39c <__bad_interrupt>
      76:	00 00       	nop
      78:	91 c1       	rjmp	.+802    	; 0x39c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8f c1       	rjmp	.+798    	; 0x39c <__bad_interrupt>
      7e:	00 00       	nop
      80:	8d c1       	rjmp	.+794    	; 0x39c <__bad_interrupt>
      82:	00 00       	nop
      84:	8b c1       	rjmp	.+790    	; 0x39c <__bad_interrupt>
      86:	00 00       	nop
      88:	89 c1       	rjmp	.+786    	; 0x39c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	87 c1       	rjmp	.+782    	; 0x39c <__bad_interrupt>
      8e:	00 00       	nop
      90:	85 c1       	rjmp	.+778    	; 0x39c <__bad_interrupt>
      92:	00 00       	nop
      94:	83 c1       	rjmp	.+774    	; 0x39c <__bad_interrupt>
      96:	00 00       	nop
      98:	81 c1       	rjmp	.+770    	; 0x39c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	de c4       	rjmp	.+2492   	; 0xa5a <__vector_39>
      9e:	00 00       	nop
      a0:	19 c5       	rjmp	.+2610   	; 0xad4 <__vector_40>
      a2:	00 00       	nop
      a4:	54 c5       	rjmp	.+2728   	; 0xb4e <__vector_41>
      a6:	00 00       	nop
      a8:	8f c5       	rjmp	.+2846   	; 0xbc8 <__vector_42>
      aa:	00 00       	nop
      ac:	77 c1       	rjmp	.+750    	; 0x39c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	75 c1       	rjmp	.+746    	; 0x39c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	73 c1       	rjmp	.+742    	; 0x39c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	71 c1       	rjmp	.+738    	; 0x39c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	6f c1       	rjmp	.+734    	; 0x39c <__bad_interrupt>
      be:	00 00       	nop
      c0:	6d c1       	rjmp	.+730    	; 0x39c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	6b c1       	rjmp	.+726    	; 0x39c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	69 c1       	rjmp	.+722    	; 0x39c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	67 c1       	rjmp	.+718    	; 0x39c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	65 c1       	rjmp	.+714    	; 0x39c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	63 c1       	rjmp	.+710    	; 0x39c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	61 c1       	rjmp	.+706    	; 0x39c <__bad_interrupt>
      da:	00 00       	nop
      dc:	5f c1       	rjmp	.+702    	; 0x39c <__bad_interrupt>
      de:	00 00       	nop
      e0:	5d c1       	rjmp	.+698    	; 0x39c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5b c1       	rjmp	.+694    	; 0x39c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	59 c1       	rjmp	.+690    	; 0x39c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	57 c1       	rjmp	.+686    	; 0x39c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	55 c1       	rjmp	.+682    	; 0x39c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	53 c1       	rjmp	.+678    	; 0x39c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	51 c1       	rjmp	.+674    	; 0x39c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	4f c1       	rjmp	.+670    	; 0x39c <__bad_interrupt>
      fe:	00 00       	nop
     100:	4d c1       	rjmp	.+666    	; 0x39c <__bad_interrupt>
     102:	00 00       	nop
     104:	4b c1       	rjmp	.+662    	; 0x39c <__bad_interrupt>
     106:	00 00       	nop
     108:	49 c1       	rjmp	.+658    	; 0x39c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	47 c1       	rjmp	.+654    	; 0x39c <__bad_interrupt>
     10e:	00 00       	nop
     110:	45 c1       	rjmp	.+650    	; 0x39c <__bad_interrupt>
     112:	00 00       	nop
     114:	43 c1       	rjmp	.+646    	; 0x39c <__bad_interrupt>
     116:	00 00       	nop
     118:	41 c1       	rjmp	.+642    	; 0x39c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	aa c3       	rjmp	.+1876   	; 0x872 <__vector_71>
     11e:	00 00       	nop
     120:	e5 c3       	rjmp	.+1994   	; 0x8ec <__vector_72>
     122:	00 00       	nop
     124:	20 c4       	rjmp	.+2112   	; 0x966 <__vector_73>
     126:	00 00       	nop
     128:	5b c4       	rjmp	.+2230   	; 0x9e0 <__vector_74>
     12a:	00 00       	nop
     12c:	37 c1       	rjmp	.+622    	; 0x39c <__bad_interrupt>
     12e:	00 00       	nop
     130:	35 c1       	rjmp	.+618    	; 0x39c <__bad_interrupt>
     132:	00 00       	nop
     134:	33 c1       	rjmp	.+614    	; 0x39c <__bad_interrupt>
     136:	00 00       	nop
     138:	31 c1       	rjmp	.+610    	; 0x39c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	2f c1       	rjmp	.+606    	; 0x39c <__bad_interrupt>
     13e:	00 00       	nop
     140:	2d c1       	rjmp	.+602    	; 0x39c <__bad_interrupt>
     142:	00 00       	nop
     144:	2b c1       	rjmp	.+598    	; 0x39c <__bad_interrupt>
     146:	00 00       	nop
     148:	29 c1       	rjmp	.+594    	; 0x39c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	27 c1       	rjmp	.+590    	; 0x39c <__bad_interrupt>
     14e:	00 00       	nop
     150:	25 c1       	rjmp	.+586    	; 0x39c <__bad_interrupt>
     152:	00 00       	nop
     154:	23 c1       	rjmp	.+582    	; 0x39c <__bad_interrupt>
     156:	00 00       	nop
     158:	21 c1       	rjmp	.+578    	; 0x39c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	1f c1       	rjmp	.+574    	; 0x39c <__bad_interrupt>
     15e:	00 00       	nop
     160:	1d c1       	rjmp	.+570    	; 0x39c <__bad_interrupt>
     162:	00 00       	nop
     164:	1b c1       	rjmp	.+566    	; 0x39c <__bad_interrupt>
     166:	00 00       	nop
     168:	19 c1       	rjmp	.+562    	; 0x39c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	17 c1       	rjmp	.+558    	; 0x39c <__bad_interrupt>
     16e:	00 00       	nop
     170:	15 c1       	rjmp	.+554    	; 0x39c <__bad_interrupt>
     172:	00 00       	nop
     174:	13 c1       	rjmp	.+550    	; 0x39c <__bad_interrupt>
     176:	00 00       	nop
     178:	11 c1       	rjmp	.+546    	; 0x39c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	0f c1       	rjmp	.+542    	; 0x39c <__bad_interrupt>
     17e:	00 00       	nop
     180:	0d c1       	rjmp	.+538    	; 0x39c <__bad_interrupt>
     182:	00 00       	nop
     184:	0b c1       	rjmp	.+534    	; 0x39c <__bad_interrupt>
     186:	00 00       	nop
     188:	09 c1       	rjmp	.+530    	; 0x39c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	07 c1       	rjmp	.+526    	; 0x39c <__bad_interrupt>
     18e:	00 00       	nop
     190:	05 c1       	rjmp	.+522    	; 0x39c <__bad_interrupt>
     192:	00 00       	nop
     194:	03 c1       	rjmp	.+518    	; 0x39c <__bad_interrupt>
     196:	00 00       	nop
     198:	01 c1       	rjmp	.+514    	; 0x39c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	ff c0       	rjmp	.+510    	; 0x39c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	fd c0       	rjmp	.+506    	; 0x39c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	fb c0       	rjmp	.+502    	; 0x39c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	f9 c0       	rjmp	.+498    	; 0x39c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	f7 c0       	rjmp	.+494    	; 0x39c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	f5 c0       	rjmp	.+490    	; 0x39c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	f3 c0       	rjmp	.+486    	; 0x39c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	f1 c0       	rjmp	.+482    	; 0x39c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	ef c0       	rjmp	.+478    	; 0x39c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	ed c0       	rjmp	.+474    	; 0x39c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	eb c0       	rjmp	.+470    	; 0x39c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	e9 c0       	rjmp	.+466    	; 0x39c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	e7 c0       	rjmp	.+462    	; 0x39c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	e5 c0       	rjmp	.+458    	; 0x39c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	e3 c0       	rjmp	.+454    	; 0x39c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	e1 c0       	rjmp	.+450    	; 0x39c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	df c0       	rjmp	.+446    	; 0x39c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	dd c0       	rjmp	.+442    	; 0x39c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	db c0       	rjmp	.+438    	; 0x39c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	d9 c0       	rjmp	.+434    	; 0x39c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	d7 c0       	rjmp	.+430    	; 0x39c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	d5 c0       	rjmp	.+426    	; 0x39c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	08 00       	.word	0x0008	; ????
     1f6:	00 00       	nop
     1f8:	be 92       	st	-X, r11
     1fa:	24 49       	sbci	r18, 0x94	; 148
     1fc:	12 3e       	cpi	r17, 0xE2	; 226
     1fe:	ab aa       	std	Y+51, r10	; 0x33
     200:	aa 2a       	or	r10, r26
     202:	be cd       	rjmp	.-1156   	; 0xfffffd80 <__eeprom_end+0xff7efd80>
     204:	cc cc       	rjmp	.-1640   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     206:	4c 3e       	cpi	r20, 0xEC	; 236
     208:	00 00       	nop
     20a:	00 80       	ld	r0, Z
     20c:	be ab       	std	Y+54, r27	; 0x36
     20e:	aa aa       	std	Y+50, r10	; 0x32
     210:	aa 3e       	cpi	r26, 0xEA	; 234
     212:	00 00       	nop
     214:	00 00       	nop
     216:	bf 00       	.word	0x00bf	; ????
     218:	00 00       	nop
     21a:	80 3f       	cpi	r24, 0xF0	; 240
     21c:	00 00       	nop
     21e:	00 00       	nop
     220:	00 08       	sbc	r0, r0
     222:	41 78       	andi	r20, 0x81	; 129
     224:	d3 bb       	out	0x13, r29	; 19
     226:	43 87       	std	Z+11, r20	; 0x0b
     228:	d1 13       	cpse	r29, r17
     22a:	3d 19       	sub	r19, r13
     22c:	0e 3c       	cpi	r16, 0xCE	; 206
     22e:	c3 bd       	out	0x23, r28	; 35
     230:	42 82       	std	Z+2, r4	; 0x02
     232:	ad 2b       	or	r26, r29
     234:	3e 68       	ori	r19, 0x8E	; 142
     236:	ec 82       	std	Y+4, r14	; 0x04
     238:	76 be       	out	0x36, r7	; 54
     23a:	d9 8f       	std	Y+25, r29	; 0x19
     23c:	e1 a9       	ldd	r30, Z+49	; 0x31
     23e:	3e 4c       	sbci	r19, 0xCE	; 206
     240:	80 ef       	ldi	r24, 0xF0	; 240
     242:	ff be       	out	0x3f, r15	; 63
     244:	01 c4       	rjmp	.+2050   	; 0xa48 <__vector_74+0x68>
     246:	ff 7f       	andi	r31, 0xFF	; 255
     248:	3f 00       	.word	0x003f	; ????
     24a:	00 00       	nop
	...

0000024e <__trampolines_end>:
     24e:	6e 61       	ori	r22, 0x1E	; 30
     250:	6e 00       	.word	0x006e	; ????

00000252 <__c.2177>:
     252:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     262:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     272:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     282:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     292:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2a2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2b2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2c2:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2d2:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2e2:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2f2:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     302:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     312:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     322:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     332:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     342:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000350 <__ctors_end>:
     350:	11 24       	eor	r1, r1
     352:	1f be       	out	0x3f, r1	; 63
     354:	cf ef       	ldi	r28, 0xFF	; 255
     356:	cd bf       	out	0x3d, r28	; 61
     358:	df e3       	ldi	r29, 0x3F	; 63
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	00 e0       	ldi	r16, 0x00	; 0
     35e:	0c bf       	out	0x3c, r16	; 60
     360:	18 be       	out	0x38, r1	; 56
     362:	19 be       	out	0x39, r1	; 57
     364:	1a be       	out	0x3a, r1	; 58
     366:	1b be       	out	0x3b, r1	; 59

00000368 <__do_copy_data>:
     368:	10 e2       	ldi	r17, 0x20	; 32
     36a:	a0 e0       	ldi	r26, 0x00	; 0
     36c:	b0 e2       	ldi	r27, 0x20	; 32
     36e:	e4 e2       	ldi	r30, 0x24	; 36
     370:	f1 e3       	ldi	r31, 0x31	; 49
     372:	00 e0       	ldi	r16, 0x00	; 0
     374:	0b bf       	out	0x3b, r16	; 59
     376:	02 c0       	rjmp	.+4      	; 0x37c <__do_copy_data+0x14>
     378:	07 90       	elpm	r0, Z+
     37a:	0d 92       	st	X+, r0
     37c:	ac 36       	cpi	r26, 0x6C	; 108
     37e:	b1 07       	cpc	r27, r17
     380:	d9 f7       	brne	.-10     	; 0x378 <__do_copy_data+0x10>
     382:	1b be       	out	0x3b, r1	; 59

00000384 <__do_clear_bss>:
     384:	20 e2       	ldi	r18, 0x20	; 32
     386:	ac e6       	ldi	r26, 0x6C	; 108
     388:	b0 e2       	ldi	r27, 0x20	; 32
     38a:	01 c0       	rjmp	.+2      	; 0x38e <.do_clear_bss_start>

0000038c <.do_clear_bss_loop>:
     38c:	1d 92       	st	X+, r1

0000038e <.do_clear_bss_start>:
     38e:	aa 3a       	cpi	r26, 0xAA	; 170
     390:	b2 07       	cpc	r27, r18
     392:	e1 f7       	brne	.-8      	; 0x38c <.do_clear_bss_loop>
     394:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <main>
     398:	0c 94 90 18 	jmp	0x3120	; 0x3120 <_exit>

0000039c <__bad_interrupt>:
     39c:	31 ce       	rjmp	.-926    	; 0x0 <__vectors>

0000039e <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	08 b6       	in	r0, 0x38	; 56
     3aa:	0f 92       	push	r0
     3ac:	18 be       	out	0x38, r1	; 56
     3ae:	0b b6       	in	r0, 0x3b	; 59
     3b0:	0f 92       	push	r0
     3b2:	1b be       	out	0x3b, r1	; 59
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
     3b8:	ef 93       	push	r30
     3ba:	ff 93       	push	r31
	rtc_data.counter_high++;
     3bc:	ee e6       	ldi	r30, 0x6E	; 110
     3be:	f0 e2       	ldi	r31, 0x20	; 32
     3c0:	80 81       	ld	r24, Z
     3c2:	91 81       	ldd	r25, Z+1	; 0x01
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	80 83       	st	Z, r24
     3c8:	91 83       	std	Z+1, r25	; 0x01
}
     3ca:	ff 91       	pop	r31
     3cc:	ef 91       	pop	r30
     3ce:	9f 91       	pop	r25
     3d0:	8f 91       	pop	r24
     3d2:	0f 90       	pop	r0
     3d4:	0b be       	out	0x3b, r0	; 59
     3d6:	0f 90       	pop	r0
     3d8:	08 be       	out	0x38, r0	; 56
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	08 b6       	in	r0, 0x38	; 56
     3f0:	0f 92       	push	r0
     3f2:	18 be       	out	0x38, r1	; 56
     3f4:	09 b6       	in	r0, 0x39	; 57
     3f6:	0f 92       	push	r0
     3f8:	19 be       	out	0x39, r1	; 57
     3fa:	0b b6       	in	r0, 0x3b	; 59
     3fc:	0f 92       	push	r0
     3fe:	1b be       	out	0x3b, r1	; 59
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	2f 93       	push	r18
     40e:	3f 93       	push	r19
     410:	4f 93       	push	r20
     412:	5f 93       	push	r21
     414:	6f 93       	push	r22
     416:	7f 93       	push	r23
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	af 93       	push	r26
     41e:	bf 93       	push	r27
     420:	ef 93       	push	r30
     422:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     424:	ee e6       	ldi	r30, 0x6E	; 110
     426:	f0 e2       	ldi	r31, 0x20	; 32
     428:	80 81       	ld	r24, Z
     42a:	91 81       	ldd	r25, Z+1	; 0x01
     42c:	22 81       	ldd	r18, Z+2	; 0x02
     42e:	33 81       	ldd	r19, Z+3	; 0x03
     430:	82 17       	cp	r24, r18
     432:	93 07       	cpc	r25, r19
     434:	f0 f1       	brcs	.+124    	; 0x4b2 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	20 93 02 04 	sts	0x0402, r18
		if (rtc_data.callback) {
     43c:	e0 91 74 20 	lds	r30, 0x2074
     440:	f0 91 75 20 	lds	r31, 0x2075
     444:	30 97       	sbiw	r30, 0x00	; 0
     446:	a9 f1       	breq	.+106    	; 0x4b2 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     448:	60 91 08 04 	lds	r22, 0x0408
     44c:	70 91 09 04 	lds	r23, 0x0409
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     450:	a0 e0       	ldi	r26, 0x00	; 0
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	dc 01       	movw	r26, r24
     456:	99 27       	eor	r25, r25
     458:	88 27       	eor	r24, r24
					| RTC.CNT;
     45a:	ab 01       	movw	r20, r22
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     460:	8c 01       	movw	r16, r24
     462:	9d 01       	movw	r18, r26
     464:	04 2b       	or	r16, r20
     466:	15 2b       	or	r17, r21
     468:	26 2b       	or	r18, r22
     46a:	37 2b       	or	r19, r23
     46c:	c9 01       	movw	r24, r18
     46e:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     470:	ae e6       	ldi	r26, 0x6E	; 110
     472:	b0 e2       	ldi	r27, 0x20	; 32
     474:	12 96       	adiw	r26, 0x02	; 2
     476:	0d 91       	ld	r16, X+
     478:	1c 91       	ld	r17, X
     47a:	13 97       	sbiw	r26, 0x03	; 3
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	98 01       	movw	r18, r16
     482:	11 27       	eor	r17, r17
     484:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     486:	14 96       	adiw	r26, 0x04	; 4
     488:	cd 90       	ld	r12, X+
     48a:	dc 90       	ld	r13, X
     48c:	15 97       	sbiw	r26, 0x05	; 5
     48e:	e1 2c       	mov	r14, r1
     490:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     492:	0c 29       	or	r16, r12
     494:	1d 29       	or	r17, r13
     496:	2e 29       	or	r18, r14
     498:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     49a:	06 17       	cp	r16, r22
     49c:	17 07       	cpc	r17, r23
     49e:	28 07       	cpc	r18, r24
     4a0:	39 07       	cpc	r19, r25
     4a2:	30 f0       	brcs	.+12     	; 0x4b0 <__vector_11+0xcc>
				count = alarm + 1;
     4a4:	c9 01       	movw	r24, r18
     4a6:	b8 01       	movw	r22, r16
     4a8:	6f 5f       	subi	r22, 0xFF	; 255
     4aa:	7f 4f       	sbci	r23, 0xFF	; 255
     4ac:	8f 4f       	sbci	r24, 0xFF	; 255
     4ae:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     4b0:	19 95       	eicall
		}
	}
}
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	bf 91       	pop	r27
     4b8:	af 91       	pop	r26
     4ba:	9f 91       	pop	r25
     4bc:	8f 91       	pop	r24
     4be:	7f 91       	pop	r23
     4c0:	6f 91       	pop	r22
     4c2:	5f 91       	pop	r21
     4c4:	4f 91       	pop	r20
     4c6:	3f 91       	pop	r19
     4c8:	2f 91       	pop	r18
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	df 90       	pop	r13
     4d4:	cf 90       	pop	r12
     4d6:	0f 90       	pop	r0
     4d8:	0b be       	out	0x3b, r0	; 59
     4da:	0f 90       	pop	r0
     4dc:	09 be       	out	0x39, r0	; 57
     4de:	0f 90       	pop	r0
     4e0:	08 be       	out	0x38, r0	; 56
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <getAltitude>:
 /* Global Variable Declarations */

 /*******************************************************************************************/
								 /* getAltitude method */
/* Method that uses temperature and pressure w/ Hypsometric Equation. */
 float getAltitude(float temperature, float pressure){
     4ec:	8f 92       	push	r8
     4ee:	9f 92       	push	r9
     4f0:	af 92       	push	r10
     4f2:	bf 92       	push	r11
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	e6 2e       	mov	r14, r22
     502:	f7 2e       	mov	r15, r23
     504:	08 2f       	mov	r16, r24
     506:	19 2f       	mov	r17, r25
     508:	a2 2e       	mov	r10, r18
     50a:	b3 2e       	mov	r11, r19
     50c:	d4 2f       	mov	r29, r20
     50e:	c5 2f       	mov	r28, r21
	float R = 287;
	float g = 9.80665;
	float pconst = 101325;
	printf("Temperature: %.2f\nPressure: %.2f\n",temperature,pressure);
     510:	5f 93       	push	r21
     512:	4f 93       	push	r20
     514:	3f 93       	push	r19
     516:	2f 93       	push	r18
     518:	9f 93       	push	r25
     51a:	8f 93       	push	r24
     51c:	7f 93       	push	r23
     51e:	6f 93       	push	r22
     520:	8d e0       	ldi	r24, 0x0D	; 13
     522:	90 e2       	ldi	r25, 0x20	; 32
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
     528:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <printf>
	return (((R * temperature)/g)*log(pconst/pressure)) * 3.28084; //return altitude in feet
     52c:	2a 2d       	mov	r18, r10
     52e:	3b 2d       	mov	r19, r11
     530:	4d 2f       	mov	r20, r29
     532:	5c 2f       	mov	r21, r28
     534:	60 e8       	ldi	r22, 0x80	; 128
     536:	76 ee       	ldi	r23, 0xE6	; 230
     538:	85 ec       	ldi	r24, 0xC5	; 197
     53a:	97 e4       	ldi	r25, 0x47	; 71
     53c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__divsf3>
     540:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <log>
     544:	4b 01       	movw	r8, r22
     546:	5c 01       	movw	r10, r24
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e8       	ldi	r19, 0x80	; 128
     54c:	4f e8       	ldi	r20, 0x8F	; 143
     54e:	53 e4       	ldi	r21, 0x43	; 67
     550:	6e 2d       	mov	r22, r14
     552:	7f 2d       	mov	r23, r15
     554:	80 2f       	mov	r24, r16
     556:	91 2f       	mov	r25, r17
     558:	0e 94 2c 10 	call	0x2058	; 0x2058 <__mulsf3>
     55c:	2a e0       	ldi	r18, 0x0A	; 10
     55e:	38 ee       	ldi	r19, 0xE8	; 232
     560:	4c e1       	ldi	r20, 0x1C	; 28
     562:	51 e4       	ldi	r21, 0x41	; 65
     564:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__divsf3>
     568:	a5 01       	movw	r20, r10
     56a:	94 01       	movw	r18, r8
     56c:	0e 94 2c 10 	call	0x2058	; 0x2058 <__mulsf3>
     570:	28 e4       	ldi	r18, 0x48	; 72
     572:	39 ef       	ldi	r19, 0xF9	; 249
     574:	41 e5       	ldi	r20, 0x51	; 81
     576:	50 e4       	ldi	r21, 0x40	; 64
     578:	0e 94 2c 10 	call	0x2058	; 0x2058 <__mulsf3>
     57c:	2d b7       	in	r18, 0x3d	; 61
     57e:	3e b7       	in	r19, 0x3e	; 62
     580:	26 5f       	subi	r18, 0xF6	; 246
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	2d bf       	out	0x3d, r18	; 61
     586:	3e bf       	out	0x3e, r19	; 62
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	bf 90       	pop	r11
     596:	af 90       	pop	r10
     598:	9f 90       	pop	r9
     59a:	8f 90       	pop	r8
     59c:	08 95       	ret

0000059e <readFull_eeprom>:
	if(EP_address >= 2047) //Loops back around if we run out of addresses.
		EP_address = 0;
  }

  void readFull_eeprom(void)
{
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
	printf("Reading EEPROM....\n");
     5aa:	8f e2       	ldi	r24, 0x2F	; 47
     5ac:	90 e2       	ldi	r25, 0x20	; 32
     5ae:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <puts>
     5b2:	85 e5       	ldi	r24, 0x55	; 85
     5b4:	91 e6       	ldi	r25, 0x61	; 97
     5b6:	a1 e5       	ldi	r26, 0x51	; 81
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	a1 09       	sbc	r26, r1
     5be:	b1 09       	sbc	r27, r1
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <readFull_eeprom+0x1c>
	delay_s(1);

	for(EP_address = 0; EP_address <= 2047; EP_address++){
     5c2:	10 92 6c 20 	sts	0x206C, r1
     5c6:	10 92 6d 20 	sts	0x206D, r1
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
		printf("EEPROM at %i reads %i\n",EP_address,nvm_eeprom_read_byte(EP_address));
     5ce:	c2 e4       	ldi	r28, 0x42	; 66
     5d0:	d0 e2       	ldi	r29, 0x20	; 32
     5d2:	0f 2e       	mov	r0, r31
     5d4:	fa ea       	ldi	r31, 0xAA	; 170
     5d6:	ef 2e       	mov	r14, r31
     5d8:	f0 2d       	mov	r31, r0
     5da:	0f 2e       	mov	r0, r31
     5dc:	f1 e1       	ldi	r31, 0x11	; 17
     5de:	ff 2e       	mov	r15, r31
     5e0:	f0 2d       	mov	r31, r0
     5e2:	04 e0       	ldi	r16, 0x04	; 4
     5e4:	10 e0       	ldi	r17, 0x00	; 0
     5e6:	33 d3       	rcall	.+1638   	; 0xc4e <nvm_eeprom_read_byte>
     5e8:	1f 92       	push	r1
     5ea:	8f 93       	push	r24
     5ec:	80 91 6d 20 	lds	r24, 0x206D
     5f0:	8f 93       	push	r24
     5f2:	80 91 6c 20 	lds	r24, 0x206C
     5f6:	8f 93       	push	r24
     5f8:	df 93       	push	r29
     5fa:	cf 93       	push	r28
     5fc:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <printf>
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	8e 2d       	mov	r24, r14
     60e:	9f 2d       	mov	r25, r15
     610:	a0 2f       	mov	r26, r16
     612:	b1 2f       	mov	r27, r17
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	a1 09       	sbc	r26, r1
     618:	b1 09       	sbc	r27, r1
     61a:	e1 f7       	brne	.-8      	; 0x614 <readFull_eeprom+0x76>
  void readFull_eeprom(void)
{
	printf("Reading EEPROM....\n");
	delay_s(1);

	for(EP_address = 0; EP_address <= 2047; EP_address++){
     61c:	80 91 6c 20 	lds	r24, 0x206C
     620:	90 91 6d 20 	lds	r25, 0x206D
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	80 93 6c 20 	sts	0x206C, r24
     62a:	90 93 6d 20 	sts	0x206D, r25
     62e:	81 15       	cp	r24, r1
     630:	28 e0       	ldi	r18, 0x08	; 8
     632:	92 07       	cpc	r25, r18
     634:	c0 f2       	brcs	.-80     	; 0x5e6 <readFull_eeprom+0x48>
		printf("EEPROM at %i reads %i\n",EP_address,nvm_eeprom_read_byte(EP_address));
		delay_ms(50);
	}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	08 95       	ret

00000644 <lightChase>:
									/* Test methods */
/* 
 * A method written to make a rectangular light chase on the MCU board, where the light that is on cycles from 0-3, then to 7 and down to 4.
 * delay input defines the amount of time the function waits between each shift.
 */
 void lightChase(uint8_t delay){
     644:	af 92       	push	r10
     646:	bf 92       	push	r11
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
			lightNumber = 0b00000001; //All pins on except pin 0.
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	90 93 78 20 	sts	0x2078, r25
			for(int i = 0; i < 4; i++){ //Runs 4 times to cycle through pins 0-3.
				PORTE.OUT = ~lightNumber; //Takes inverse of lightChase, meaning all pins are off except pin [i].
				lightNumber <<= 1; //Shifts the pin off for lightChase to the left, meaning that when ~lightChase is next taken, pin [i + 1] is on. 
				delay_ms(delay); //Delay given time.
     65e:	a1 2c       	mov	r10, r1
     660:	0f 2e       	mov	r0, r31
     662:	f8 e4       	ldi	r31, 0x48	; 72
     664:	bf 2e       	mov	r11, r31
     666:	f0 2d       	mov	r31, r0
     668:	0f 2e       	mov	r0, r31
     66a:	f8 ee       	ldi	r31, 0xE8	; 232
     66c:	cf 2e       	mov	r12, r31
     66e:	f0 2d       	mov	r31, r0
     670:	dd 24       	eor	r13, r13
     672:	d3 94       	inc	r13
     674:	e1 2c       	mov	r14, r1
     676:	f1 2c       	mov	r15, r1
     678:	00 e0       	ldi	r16, 0x00	; 0
     67a:	10 e0       	ldi	r17, 0x00	; 0
     67c:	28 2f       	mov	r18, r24
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__muldi3>
     690:	29 51       	subi	r18, 0x19	; 25
     692:	3c 4f       	sbci	r19, 0xFC	; 252
     694:	4f 4f       	sbci	r20, 0xFF	; 255
     696:	5f 4f       	sbci	r21, 0xFF	; 255
     698:	6f 4f       	sbci	r22, 0xFF	; 255
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	8f 4f       	sbci	r24, 0xFF	; 255
     69e:	9f 4f       	sbci	r25, 0xFF	; 255
     6a0:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__floatundisf>
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e8       	ldi	r19, 0x80	; 128
     6a8:	4b eb       	ldi	r20, 0xBB	; 187
     6aa:	55 e4       	ldi	r21, 0x45	; 69
     6ac:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__divsf3>
     6b0:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__fixunssfdi>
     6b4:	72 2f       	mov	r23, r18
     6b6:	63 2f       	mov	r22, r19
     6b8:	94 2f       	mov	r25, r20
     6ba:	85 2f       	mov	r24, r21
     6bc:	54 2f       	mov	r21, r20
     6be:	48 2f       	mov	r20, r24
     6c0:	24 e0       	ldi	r18, 0x04	; 4
     6c2:	30 e0       	ldi	r19, 0x00	; 0
 * delay input defines the amount of time the function waits between each shift.
 */
 void lightChase(uint8_t delay){
			lightNumber = 0b00000001; //All pins on except pin 0.
			for(int i = 0; i < 4; i++){ //Runs 4 times to cycle through pins 0-3.
				PORTE.OUT = ~lightNumber; //Takes inverse of lightChase, meaning all pins are off except pin [i].
     6c4:	c0 e8       	ldi	r28, 0x80	; 128
     6c6:	d6 e0       	ldi	r29, 0x06	; 6
				lightNumber <<= 1; //Shifts the pin off for lightChase to the left, meaning that when ~lightChase is next taken, pin [i + 1] is on. 
				delay_ms(delay); //Delay given time.
     6c8:	07 2f       	mov	r16, r23
     6ca:	16 2f       	mov	r17, r22
     6cc:	f9 2f       	mov	r31, r25
     6ce:	e8 2f       	mov	r30, r24
 * delay input defines the amount of time the function waits between each shift.
 */
 void lightChase(uint8_t delay){
			lightNumber = 0b00000001; //All pins on except pin 0.
			for(int i = 0; i < 4; i++){ //Runs 4 times to cycle through pins 0-3.
				PORTE.OUT = ~lightNumber; //Takes inverse of lightChase, meaning all pins are off except pin [i].
     6d0:	80 91 78 20 	lds	r24, 0x2078
     6d4:	98 2f       	mov	r25, r24
     6d6:	90 95       	com	r25
     6d8:	9c 83       	std	Y+4, r25	; 0x04
				lightNumber <<= 1; //Shifts the pin off for lightChase to the left, meaning that when ~lightChase is next taken, pin [i + 1] is on. 
     6da:	88 0f       	add	r24, r24
     6dc:	80 93 78 20 	sts	0x2078, r24
				delay_ms(delay); //Delay given time.
     6e0:	80 2f       	mov	r24, r16
     6e2:	91 2f       	mov	r25, r17
     6e4:	af 2f       	mov	r26, r31
     6e6:	be 2f       	mov	r27, r30
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	a1 09       	sbc	r26, r1
     6ec:	b1 09       	sbc	r27, r1
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <lightChase+0xa4>
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	31 09       	sbc	r19, r1
 * A method written to make a rectangular light chase on the MCU board, where the light that is on cycles from 0-3, then to 7 and down to 4.
 * delay input defines the amount of time the function waits between each shift.
 */
 void lightChase(uint8_t delay){
			lightNumber = 0b00000001; //All pins on except pin 0.
			for(int i = 0; i < 4; i++){ //Runs 4 times to cycle through pins 0-3.
     6f4:	69 f7       	brne	.-38     	; 0x6d0 <lightChase+0x8c>
				PORTE.OUT = ~lightNumber; //Takes inverse of lightChase, meaning all pins are off except pin [i].
				lightNumber <<= 1; //Shifts the pin off for lightChase to the left, meaning that when ~lightChase is next taken, pin [i + 1] is on. 
				delay_ms(delay); //Delay given time.
			}

			lightNumber = 0b10000000; //All pins on except pin 7.
     6f6:	80 e8       	ldi	r24, 0x80	; 128
     6f8:	80 93 78 20 	sts	0x2078, r24
     6fc:	24 e0       	ldi	r18, 0x04	; 4
     6fe:	30 e0       	ldi	r19, 0x00	; 0
			for(int i = 7; i > 3; i--){ //Cycles through pins 4-7, backwards.
				PORTE.OUT = ~lightNumber;
     700:	e0 e8       	ldi	r30, 0x80	; 128
     702:	f6 e0       	ldi	r31, 0x06	; 6
     704:	80 91 78 20 	lds	r24, 0x2078
     708:	98 2f       	mov	r25, r24
     70a:	90 95       	com	r25
     70c:	94 83       	std	Z+4, r25	; 0x04
				lightNumber >>= 1; //Shifts the pin off for lightChase to the right, meaning that when ~lightChase is next taken, pin [i - 1] is on.
     70e:	86 95       	lsr	r24
     710:	80 93 78 20 	sts	0x2078, r24
 void lightChase(uint8_t delay){
			lightNumber = 0b00000001; //All pins on except pin 0.
			for(int i = 0; i < 4; i++){ //Runs 4 times to cycle through pins 0-3.
				PORTE.OUT = ~lightNumber; //Takes inverse of lightChase, meaning all pins are off except pin [i].
				lightNumber <<= 1; //Shifts the pin off for lightChase to the left, meaning that when ~lightChase is next taken, pin [i + 1] is on. 
				delay_ms(delay); //Delay given time.
     714:	87 2f       	mov	r24, r23
     716:	96 2f       	mov	r25, r22
     718:	a5 2f       	mov	r26, r21
     71a:	b4 2f       	mov	r27, r20
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	a1 09       	sbc	r26, r1
     720:	b1 09       	sbc	r27, r1
     722:	e1 f7       	brne	.-8      	; 0x71c <lightChase+0xd8>
     724:	21 50       	subi	r18, 0x01	; 1
     726:	31 09       	sbc	r19, r1
			}

			lightNumber = 0b10000000; //All pins on except pin 7.
			for(int i = 7; i > 3; i--){ //Cycles through pins 4-7, backwards.
     728:	69 f7       	brne	.-38     	; 0x704 <lightChase+0xc0>
				PORTE.OUT = ~lightNumber;
				lightNumber >>= 1; //Shifts the pin off for lightChase to the right, meaning that when ~lightChase is next taken, pin [i - 1] is on.
				delay_ms(delay);
			}
 }
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	bf 90       	pop	r11
     73c:	af 90       	pop	r10
     73e:	08 95       	ret

00000740 <test>:
		//printf("Test:\n");
		float p = (float)(getPressure()); 
		//printf("Pressure is:%.2f\n",p);
		float temp = getTemperature();
		//printf("Temperature is:%.2f\n",temp);
		printf("Altitude is:%.2f\n",getAltitude(temp,p));
     740:	c9 e5       	ldi	r28, 0x59	; 89
     742:	d0 e2       	ldi	r29, 0x20	; 32
     744:	0f 2e       	mov	r0, r31
     746:	f5 e5       	ldi	r31, 0x55	; 85
     748:	af 2e       	mov	r10, r31
     74a:	f0 2d       	mov	r31, r0
     74c:	0f 2e       	mov	r0, r31
     74e:	f1 e6       	ldi	r31, 0x61	; 97
     750:	bf 2e       	mov	r11, r31
     752:	f0 2d       	mov	r31, r0
     754:	01 e5       	ldi	r16, 0x51	; 81
     756:	10 e0       	ldi	r17, 0x00	; 0

 /* Testing method to print out various sensor inputs and calculations */
void test(void){
	//TCE0_init(12499,100);
	while(1){
		lightChase(100);
     758:	84 e6       	ldi	r24, 0x64	; 100
     75a:	74 df       	rcall	.-280    	; 0x644 <lightChase>
		//printf("Test:\n");
		float p = (float)(getPressure()); 
     75c:	e6 d5       	rcall	.+3020   	; 0x132a <getPressure>
     75e:	6b 01       	movw	r12, r22
     760:	7c 01       	movw	r14, r24
		//printf("Pressure is:%.2f\n",p);
		float temp = getTemperature();
     762:	98 d7       	rcall	.+3888   	; 0x1694 <getTemperature>
     764:	2b 01       	movw	r4, r22
     766:	3c 01       	movw	r6, r24
void test(void){
	//TCE0_init(12499,100);
	while(1){
		lightChase(100);
		//printf("Test:\n");
		float p = (float)(getPressure()); 
     768:	c7 01       	movw	r24, r14
     76a:	b6 01       	movw	r22, r12
     76c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__floatsisf>
     770:	9b 01       	movw	r18, r22
     772:	ac 01       	movw	r20, r24
		//printf("Pressure is:%.2f\n",p);
		float temp = getTemperature();
		//printf("Temperature is:%.2f\n",temp);
		printf("Altitude is:%.2f\n",getAltitude(temp,p));
     774:	c3 01       	movw	r24, r6
     776:	b2 01       	movw	r22, r4
     778:	b9 de       	rcall	.-654    	; 0x4ec <getAltitude>
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	7f 93       	push	r23
     780:	6f 93       	push	r22
     782:	df 93       	push	r29
     784:	cf 93       	push	r28
     786:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <printf>
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	8a 2d       	mov	r24, r10
     798:	9b 2d       	mov	r25, r11
     79a:	a0 2f       	mov	r26, r16
     79c:	b1 2f       	mov	r27, r17
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	a1 09       	sbc	r26, r1
     7a2:	b1 09       	sbc	r27, r1
     7a4:	e1 f7       	brne	.-8      	; 0x79e <test+0x5e>
		//printf("and velocity is:%.2f\n",getVelocity());
		delay_s(1);
		printf("\n\n");
     7a6:	8d e2       	ldi	r24, 0x2D	; 45
     7a8:	90 e2       	ldi	r25, 0x20	; 32
     7aa:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <puts>
	}
     7ae:	d4 cf       	rjmp	.-88     	; 0x758 <test+0x18>

000007b0 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	80 93 70 00 	sts	0x0070, r24
     7b6:	80 93 71 00 	sts	0x0071, r24
     7ba:	80 93 72 00 	sts	0x0072, r24
     7be:	80 93 73 00 	sts	0x0073, r24
     7c2:	80 93 74 00 	sts	0x0074, r24
     7c6:	80 93 75 00 	sts	0x0075, r24
     7ca:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7ce:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     7d0:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     7d2:	e0 e5       	ldi	r30, 0x50	; 80
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	80 81       	ld	r24, Z
     7d8:	82 60       	ori	r24, 0x02	; 2
     7da:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7dc:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     7de:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     7e0:	81 ff       	sbrs	r24, 1
     7e2:	fd cf       	rjmp	.-6      	; 0x7de <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     7e4:	61 e0       	ldi	r22, 0x01	; 1
     7e6:	80 e4       	ldi	r24, 0x40	; 64
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	2b d2       	rcall	.+1110   	; 0xc42 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     7ec:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     7ee:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     7f0:	e0 e5       	ldi	r30, 0x50	; 80
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	8e 7f       	andi	r24, 0xFE	; 254
     7f8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7fa:	9f bf       	out	0x3f, r25	; 63
		osc_enable(OSC_ID_XOSC);
		osc_wait_ready(OSC_ID_XOSC);
		break;
	}

	CLK.RTCCTRL = id | CLK_RTCEN_bm;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	80 93 43 00 	sts	0x0043, r24
     802:	08 95       	ret

00000804 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     804:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     806:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     808:	e8 2f       	mov	r30, r24
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	e0 59       	subi	r30, 0x90	; 144
     80e:	ff 4f       	sbci	r31, 0xFF	; 255
     810:	60 95       	com	r22
     812:	80 81       	ld	r24, Z
     814:	68 23       	and	r22, r24
     816:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     818:	9f bf       	out	0x3f, r25	; 63
     81a:	08 95       	ret

0000081c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	1f 92       	push	r1
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     826:	80 91 81 20 	lds	r24, 0x2081
     82a:	90 91 82 20 	lds	r25, 0x2082
     82e:	e0 91 7d 20 	lds	r30, 0x207D
     832:	f0 91 7e 20 	lds	r31, 0x207E
     836:	be 01       	movw	r22, r28
     838:	6f 5f       	subi	r22, 0xFF	; 255
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	19 95       	eicall
	return c;
     83e:	89 81       	ldd	r24, Y+1	; 0x01
}
     840:	08 2e       	mov	r0, r24
     842:	00 0c       	add	r0, r0
     844:	99 0b       	sbc	r25, r25
     846:	0f 90       	pop	r0
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     84e:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     850:	80 91 81 20 	lds	r24, 0x2081
     854:	90 91 82 20 	lds	r25, 0x2082
     858:	e0 91 7f 20 	lds	r30, 0x207F
     85c:	f0 91 80 20 	lds	r31, 0x2080
     860:	19 95       	eicall
     862:	99 23       	and	r25, r25
     864:	1c f0       	brlt	.+6      	; 0x86c <_write+0x1e>
		return -1;
	}
	return 1;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     86c:	8f ef       	ldi	r24, 0xFF	; 255
     86e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     870:	08 95       	ret

00000872 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     872:	1f 92       	push	r1
     874:	0f 92       	push	r0
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	0f 92       	push	r0
     87a:	11 24       	eor	r1, r1
     87c:	08 b6       	in	r0, 0x38	; 56
     87e:	0f 92       	push	r0
     880:	18 be       	out	0x38, r1	; 56
     882:	09 b6       	in	r0, 0x39	; 57
     884:	0f 92       	push	r0
     886:	19 be       	out	0x39, r1	; 57
     888:	0b b6       	in	r0, 0x3b	; 59
     88a:	0f 92       	push	r0
     88c:	1b be       	out	0x3b, r1	; 59
     88e:	2f 93       	push	r18
     890:	3f 93       	push	r19
     892:	4f 93       	push	r20
     894:	5f 93       	push	r21
     896:	6f 93       	push	r22
     898:	7f 93       	push	r23
     89a:	8f 93       	push	r24
     89c:	9f 93       	push	r25
     89e:	af 93       	push	r26
     8a0:	bf 93       	push	r27
     8a2:	ef 93       	push	r30
     8a4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     8a6:	40 91 24 02 	lds	r20, 0x0224
     8aa:	50 91 25 02 	lds	r21, 0x0225
     8ae:	e0 91 85 20 	lds	r30, 0x2085
     8b2:	f0 91 86 20 	lds	r31, 0x2086
     8b6:	61 e0       	ldi	r22, 0x01	; 1
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	92 e0       	ldi	r25, 0x02	; 2
     8bc:	19 95       	eicall
}
     8be:	ff 91       	pop	r31
     8c0:	ef 91       	pop	r30
     8c2:	bf 91       	pop	r27
     8c4:	af 91       	pop	r26
     8c6:	9f 91       	pop	r25
     8c8:	8f 91       	pop	r24
     8ca:	7f 91       	pop	r23
     8cc:	6f 91       	pop	r22
     8ce:	5f 91       	pop	r21
     8d0:	4f 91       	pop	r20
     8d2:	3f 91       	pop	r19
     8d4:	2f 91       	pop	r18
     8d6:	0f 90       	pop	r0
     8d8:	0b be       	out	0x3b, r0	; 59
     8da:	0f 90       	pop	r0
     8dc:	09 be       	out	0x39, r0	; 57
     8de:	0f 90       	pop	r0
     8e0:	08 be       	out	0x38, r0	; 56
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	0f 90       	pop	r0
     8e8:	1f 90       	pop	r1
     8ea:	18 95       	reti

000008ec <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     8ec:	1f 92       	push	r1
     8ee:	0f 92       	push	r0
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	0f 92       	push	r0
     8f4:	11 24       	eor	r1, r1
     8f6:	08 b6       	in	r0, 0x38	; 56
     8f8:	0f 92       	push	r0
     8fa:	18 be       	out	0x38, r1	; 56
     8fc:	09 b6       	in	r0, 0x39	; 57
     8fe:	0f 92       	push	r0
     900:	19 be       	out	0x39, r1	; 57
     902:	0b b6       	in	r0, 0x3b	; 59
     904:	0f 92       	push	r0
     906:	1b be       	out	0x3b, r1	; 59
     908:	2f 93       	push	r18
     90a:	3f 93       	push	r19
     90c:	4f 93       	push	r20
     90e:	5f 93       	push	r21
     910:	6f 93       	push	r22
     912:	7f 93       	push	r23
     914:	8f 93       	push	r24
     916:	9f 93       	push	r25
     918:	af 93       	push	r26
     91a:	bf 93       	push	r27
     91c:	ef 93       	push	r30
     91e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     920:	40 91 2c 02 	lds	r20, 0x022C
     924:	50 91 2d 02 	lds	r21, 0x022D
     928:	e0 91 85 20 	lds	r30, 0x2085
     92c:	f0 91 86 20 	lds	r31, 0x2086
     930:	62 e0       	ldi	r22, 0x02	; 2
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	92 e0       	ldi	r25, 0x02	; 2
     936:	19 95       	eicall
}
     938:	ff 91       	pop	r31
     93a:	ef 91       	pop	r30
     93c:	bf 91       	pop	r27
     93e:	af 91       	pop	r26
     940:	9f 91       	pop	r25
     942:	8f 91       	pop	r24
     944:	7f 91       	pop	r23
     946:	6f 91       	pop	r22
     948:	5f 91       	pop	r21
     94a:	4f 91       	pop	r20
     94c:	3f 91       	pop	r19
     94e:	2f 91       	pop	r18
     950:	0f 90       	pop	r0
     952:	0b be       	out	0x3b, r0	; 59
     954:	0f 90       	pop	r0
     956:	09 be       	out	0x39, r0	; 57
     958:	0f 90       	pop	r0
     95a:	08 be       	out	0x38, r0	; 56
     95c:	0f 90       	pop	r0
     95e:	0f be       	out	0x3f, r0	; 63
     960:	0f 90       	pop	r0
     962:	1f 90       	pop	r1
     964:	18 95       	reti

00000966 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     966:	1f 92       	push	r1
     968:	0f 92       	push	r0
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	0f 92       	push	r0
     96e:	11 24       	eor	r1, r1
     970:	08 b6       	in	r0, 0x38	; 56
     972:	0f 92       	push	r0
     974:	18 be       	out	0x38, r1	; 56
     976:	09 b6       	in	r0, 0x39	; 57
     978:	0f 92       	push	r0
     97a:	19 be       	out	0x39, r1	; 57
     97c:	0b b6       	in	r0, 0x3b	; 59
     97e:	0f 92       	push	r0
     980:	1b be       	out	0x3b, r1	; 59
     982:	2f 93       	push	r18
     984:	3f 93       	push	r19
     986:	4f 93       	push	r20
     988:	5f 93       	push	r21
     98a:	6f 93       	push	r22
     98c:	7f 93       	push	r23
     98e:	8f 93       	push	r24
     990:	9f 93       	push	r25
     992:	af 93       	push	r26
     994:	bf 93       	push	r27
     996:	ef 93       	push	r30
     998:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     99a:	40 91 34 02 	lds	r20, 0x0234
     99e:	50 91 35 02 	lds	r21, 0x0235
     9a2:	e0 91 85 20 	lds	r30, 0x2085
     9a6:	f0 91 86 20 	lds	r31, 0x2086
     9aa:	64 e0       	ldi	r22, 0x04	; 4
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	19 95       	eicall
}
     9b2:	ff 91       	pop	r31
     9b4:	ef 91       	pop	r30
     9b6:	bf 91       	pop	r27
     9b8:	af 91       	pop	r26
     9ba:	9f 91       	pop	r25
     9bc:	8f 91       	pop	r24
     9be:	7f 91       	pop	r23
     9c0:	6f 91       	pop	r22
     9c2:	5f 91       	pop	r21
     9c4:	4f 91       	pop	r20
     9c6:	3f 91       	pop	r19
     9c8:	2f 91       	pop	r18
     9ca:	0f 90       	pop	r0
     9cc:	0b be       	out	0x3b, r0	; 59
     9ce:	0f 90       	pop	r0
     9d0:	09 be       	out	0x39, r0	; 57
     9d2:	0f 90       	pop	r0
     9d4:	08 be       	out	0x38, r0	; 56
     9d6:	0f 90       	pop	r0
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	0f 90       	pop	r0
     9dc:	1f 90       	pop	r1
     9de:	18 95       	reti

000009e0 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     9e0:	1f 92       	push	r1
     9e2:	0f 92       	push	r0
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	0f 92       	push	r0
     9e8:	11 24       	eor	r1, r1
     9ea:	08 b6       	in	r0, 0x38	; 56
     9ec:	0f 92       	push	r0
     9ee:	18 be       	out	0x38, r1	; 56
     9f0:	09 b6       	in	r0, 0x39	; 57
     9f2:	0f 92       	push	r0
     9f4:	19 be       	out	0x39, r1	; 57
     9f6:	0b b6       	in	r0, 0x3b	; 59
     9f8:	0f 92       	push	r0
     9fa:	1b be       	out	0x3b, r1	; 59
     9fc:	2f 93       	push	r18
     9fe:	3f 93       	push	r19
     a00:	4f 93       	push	r20
     a02:	5f 93       	push	r21
     a04:	6f 93       	push	r22
     a06:	7f 93       	push	r23
     a08:	8f 93       	push	r24
     a0a:	9f 93       	push	r25
     a0c:	af 93       	push	r26
     a0e:	bf 93       	push	r27
     a10:	ef 93       	push	r30
     a12:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     a14:	40 91 3c 02 	lds	r20, 0x023C
     a18:	50 91 3d 02 	lds	r21, 0x023D
     a1c:	e0 91 85 20 	lds	r30, 0x2085
     a20:	f0 91 86 20 	lds	r31, 0x2086
     a24:	68 e0       	ldi	r22, 0x08	; 8
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	19 95       	eicall
}
     a2c:	ff 91       	pop	r31
     a2e:	ef 91       	pop	r30
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	7f 91       	pop	r23
     a3a:	6f 91       	pop	r22
     a3c:	5f 91       	pop	r21
     a3e:	4f 91       	pop	r20
     a40:	3f 91       	pop	r19
     a42:	2f 91       	pop	r18
     a44:	0f 90       	pop	r0
     a46:	0b be       	out	0x3b, r0	; 59
     a48:	0f 90       	pop	r0
     a4a:	09 be       	out	0x39, r0	; 57
     a4c:	0f 90       	pop	r0
     a4e:	08 be       	out	0x38, r0	; 56
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     a5a:	1f 92       	push	r1
     a5c:	0f 92       	push	r0
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	0f 92       	push	r0
     a62:	11 24       	eor	r1, r1
     a64:	08 b6       	in	r0, 0x38	; 56
     a66:	0f 92       	push	r0
     a68:	18 be       	out	0x38, r1	; 56
     a6a:	09 b6       	in	r0, 0x39	; 57
     a6c:	0f 92       	push	r0
     a6e:	19 be       	out	0x39, r1	; 57
     a70:	0b b6       	in	r0, 0x3b	; 59
     a72:	0f 92       	push	r0
     a74:	1b be       	out	0x3b, r1	; 59
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	ef 93       	push	r30
     a8c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     a8e:	40 91 64 02 	lds	r20, 0x0264
     a92:	50 91 65 02 	lds	r21, 0x0265
     a96:	e0 91 83 20 	lds	r30, 0x2083
     a9a:	f0 91 84 20 	lds	r31, 0x2084
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	80 e4       	ldi	r24, 0x40	; 64
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	19 95       	eicall
}
     aa6:	ff 91       	pop	r31
     aa8:	ef 91       	pop	r30
     aaa:	bf 91       	pop	r27
     aac:	af 91       	pop	r26
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	7f 91       	pop	r23
     ab4:	6f 91       	pop	r22
     ab6:	5f 91       	pop	r21
     ab8:	4f 91       	pop	r20
     aba:	3f 91       	pop	r19
     abc:	2f 91       	pop	r18
     abe:	0f 90       	pop	r0
     ac0:	0b be       	out	0x3b, r0	; 59
     ac2:	0f 90       	pop	r0
     ac4:	09 be       	out	0x39, r0	; 57
     ac6:	0f 90       	pop	r0
     ac8:	08 be       	out	0x38, r0	; 56
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	08 b6       	in	r0, 0x38	; 56
     ae0:	0f 92       	push	r0
     ae2:	18 be       	out	0x38, r1	; 56
     ae4:	09 b6       	in	r0, 0x39	; 57
     ae6:	0f 92       	push	r0
     ae8:	19 be       	out	0x39, r1	; 57
     aea:	0b b6       	in	r0, 0x3b	; 59
     aec:	0f 92       	push	r0
     aee:	1b be       	out	0x3b, r1	; 59
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	5f 93       	push	r21
     af8:	6f 93       	push	r22
     afa:	7f 93       	push	r23
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	ef 93       	push	r30
     b06:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     b08:	40 91 6c 02 	lds	r20, 0x026C
     b0c:	50 91 6d 02 	lds	r21, 0x026D
     b10:	e0 91 83 20 	lds	r30, 0x2083
     b14:	f0 91 84 20 	lds	r31, 0x2084
     b18:	62 e0       	ldi	r22, 0x02	; 2
     b1a:	80 e4       	ldi	r24, 0x40	; 64
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	19 95       	eicall
}
     b20:	ff 91       	pop	r31
     b22:	ef 91       	pop	r30
     b24:	bf 91       	pop	r27
     b26:	af 91       	pop	r26
     b28:	9f 91       	pop	r25
     b2a:	8f 91       	pop	r24
     b2c:	7f 91       	pop	r23
     b2e:	6f 91       	pop	r22
     b30:	5f 91       	pop	r21
     b32:	4f 91       	pop	r20
     b34:	3f 91       	pop	r19
     b36:	2f 91       	pop	r18
     b38:	0f 90       	pop	r0
     b3a:	0b be       	out	0x3b, r0	; 59
     b3c:	0f 90       	pop	r0
     b3e:	09 be       	out	0x39, r0	; 57
     b40:	0f 90       	pop	r0
     b42:	08 be       	out	0x38, r0	; 56
     b44:	0f 90       	pop	r0
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	0f 90       	pop	r0
     b4a:	1f 90       	pop	r1
     b4c:	18 95       	reti

00000b4e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
     b58:	08 b6       	in	r0, 0x38	; 56
     b5a:	0f 92       	push	r0
     b5c:	18 be       	out	0x38, r1	; 56
     b5e:	09 b6       	in	r0, 0x39	; 57
     b60:	0f 92       	push	r0
     b62:	19 be       	out	0x39, r1	; 57
     b64:	0b b6       	in	r0, 0x3b	; 59
     b66:	0f 92       	push	r0
     b68:	1b be       	out	0x3b, r1	; 59
     b6a:	2f 93       	push	r18
     b6c:	3f 93       	push	r19
     b6e:	4f 93       	push	r20
     b70:	5f 93       	push	r21
     b72:	6f 93       	push	r22
     b74:	7f 93       	push	r23
     b76:	8f 93       	push	r24
     b78:	9f 93       	push	r25
     b7a:	af 93       	push	r26
     b7c:	bf 93       	push	r27
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     b82:	40 91 74 02 	lds	r20, 0x0274
     b86:	50 91 75 02 	lds	r21, 0x0275
     b8a:	e0 91 83 20 	lds	r30, 0x2083
     b8e:	f0 91 84 20 	lds	r31, 0x2084
     b92:	64 e0       	ldi	r22, 0x04	; 4
     b94:	80 e4       	ldi	r24, 0x40	; 64
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	19 95       	eicall
}
     b9a:	ff 91       	pop	r31
     b9c:	ef 91       	pop	r30
     b9e:	bf 91       	pop	r27
     ba0:	af 91       	pop	r26
     ba2:	9f 91       	pop	r25
     ba4:	8f 91       	pop	r24
     ba6:	7f 91       	pop	r23
     ba8:	6f 91       	pop	r22
     baa:	5f 91       	pop	r21
     bac:	4f 91       	pop	r20
     bae:	3f 91       	pop	r19
     bb0:	2f 91       	pop	r18
     bb2:	0f 90       	pop	r0
     bb4:	0b be       	out	0x3b, r0	; 59
     bb6:	0f 90       	pop	r0
     bb8:	09 be       	out	0x39, r0	; 57
     bba:	0f 90       	pop	r0
     bbc:	08 be       	out	0x38, r0	; 56
     bbe:	0f 90       	pop	r0
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	0f 90       	pop	r0
     bc4:	1f 90       	pop	r1
     bc6:	18 95       	reti

00000bc8 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     bc8:	1f 92       	push	r1
     bca:	0f 92       	push	r0
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	0f 92       	push	r0
     bd0:	11 24       	eor	r1, r1
     bd2:	08 b6       	in	r0, 0x38	; 56
     bd4:	0f 92       	push	r0
     bd6:	18 be       	out	0x38, r1	; 56
     bd8:	09 b6       	in	r0, 0x39	; 57
     bda:	0f 92       	push	r0
     bdc:	19 be       	out	0x39, r1	; 57
     bde:	0b b6       	in	r0, 0x3b	; 59
     be0:	0f 92       	push	r0
     be2:	1b be       	out	0x3b, r1	; 59
     be4:	2f 93       	push	r18
     be6:	3f 93       	push	r19
     be8:	4f 93       	push	r20
     bea:	5f 93       	push	r21
     bec:	6f 93       	push	r22
     bee:	7f 93       	push	r23
     bf0:	8f 93       	push	r24
     bf2:	9f 93       	push	r25
     bf4:	af 93       	push	r26
     bf6:	bf 93       	push	r27
     bf8:	ef 93       	push	r30
     bfa:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     bfc:	40 91 7c 02 	lds	r20, 0x027C
     c00:	50 91 7d 02 	lds	r21, 0x027D
     c04:	e0 91 83 20 	lds	r30, 0x2083
     c08:	f0 91 84 20 	lds	r31, 0x2084
     c0c:	68 e0       	ldi	r22, 0x08	; 8
     c0e:	80 e4       	ldi	r24, 0x40	; 64
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	19 95       	eicall
}
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0b be       	out	0x3b, r0	; 59
     c30:	0f 90       	pop	r0
     c32:	09 be       	out	0x39, r0	; 57
     c34:	0f 90       	pop	r0
     c36:	08 be       	out	0x38, r0	; 56
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	0f 90       	pop	r0
     c3e:	1f 90       	pop	r1
     c40:	18 95       	reti

00000c42 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     c42:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     c44:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     c46:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     c48:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     c4a:	60 83       	st	Z, r22
	ret                             // Return to caller
     c4c:	08 95       	ret

00000c4e <nvm_eeprom_read_byte>:
 * \param  addr       EEPROM address, between 0 and EEPROM_SIZE
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t nvm_eeprom_read_byte(eeprom_addr_t addr)
{
     c4e:	dc 01       	movw	r26, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
     c50:	e0 ec       	ldi	r30, 0xC0	; 192
     c52:	f1 e0       	ldi	r31, 0x01	; 1
     c54:	97 85       	ldd	r25, Z+15	; 0x0f
     c56:	99 23       	and	r25, r25
     c58:	ec f3       	brlt	.-6      	; 0xc54 <nvm_eeprom_read_byte+0x6>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
     c5a:	ec ec       	ldi	r30, 0xCC	; 204
     c5c:	f1 e0       	ldi	r31, 0x01	; 1
     c5e:	80 81       	ld	r24, Z
     c60:	88 60       	ori	r24, 0x08	; 8
     c62:	80 83       	st	Z, r24
	Assert(addr <= EEPROM_SIZE);

	/* Wait until NVM is ready */
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	data = *(uint8_t*)(addr + MAPPED_EEPROM_START),
     c64:	b0 5f       	subi	r27, 0xF0	; 240
     c66:	8c 91       	ld	r24, X
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
     c68:	90 81       	ld	r25, Z
     c6a:	97 7f       	andi	r25, 0xF7	; 247
     c6c:	90 83       	st	Z, r25
	eeprom_disable_mapping();
	return data;
}
     c6e:	08 95       	ret

00000c70 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     c70:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
     c74:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     c76:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     c78:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
     c7c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     c7e:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     c82:	08 95       	ret

00000c84 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     c84:	fc 01       	movw	r30, r24
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	95 ff       	sbrs	r25, 5
     c8a:	fd cf       	rjmp	.-6      	; 0xc86 <usart_putchar+0x2>
     c8c:	60 83       	st	Z, r22
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	08 95       	ret

00000c94 <usart_getchar>:
     c94:	fc 01       	movw	r30, r24
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	99 23       	and	r25, r25
     c9a:	ec f7       	brge	.-6      	; 0xc96 <usart_getchar+0x2>
     c9c:	80 81       	ld	r24, Z
     c9e:	08 95       	ret

00000ca0 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ca0:	2f 92       	push	r2
     ca2:	3f 92       	push	r3
     ca4:	4f 92       	push	r4
     ca6:	5f 92       	push	r5
     ca8:	6f 92       	push	r6
     caa:	7f 92       	push	r7
     cac:	8f 92       	push	r8
     cae:	9f 92       	push	r9
     cb0:	af 92       	push	r10
     cb2:	bf 92       	push	r11
     cb4:	cf 92       	push	r12
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	1c 01       	movw	r2, r24
     cc4:	2a 01       	movw	r4, r20
     cc6:	3b 01       	movw	r6, r22
     cc8:	48 01       	movw	r8, r16
     cca:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     ccc:	d9 01       	movw	r26, r18
     cce:	c8 01       	movw	r24, r16
     cd0:	68 94       	set
     cd2:	12 f8       	bld	r1, 2
     cd4:	b6 95       	lsr	r27
     cd6:	a7 95       	ror	r26
     cd8:	97 95       	ror	r25
     cda:	87 95       	ror	r24
     cdc:	16 94       	lsr	r1
     cde:	d1 f7       	brne	.-12     	; 0xcd4 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     ce0:	b9 01       	movw	r22, r18
     ce2:	a8 01       	movw	r20, r16
     ce4:	03 2e       	mov	r0, r19
     ce6:	36 e1       	ldi	r19, 0x16	; 22
     ce8:	76 95       	lsr	r23
     cea:	67 95       	ror	r22
     cec:	57 95       	ror	r21
     cee:	47 95       	ror	r20
     cf0:	3a 95       	dec	r19
     cf2:	d1 f7       	brne	.-12     	; 0xce8 <usart_set_baudrate+0x48>
     cf4:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     cf6:	f1 01       	movw	r30, r2
     cf8:	24 81       	ldd	r18, Z+4	; 0x04
     cfa:	22 fd       	sbrc	r18, 2
     cfc:	08 c0       	rjmp	.+16     	; 0xd0e <usart_set_baudrate+0x6e>
		max_rate /= 2;
     cfe:	b6 95       	lsr	r27
     d00:	a7 95       	ror	r26
     d02:	97 95       	ror	r25
     d04:	87 95       	ror	r24
		min_rate /= 2;
     d06:	76 95       	lsr	r23
     d08:	67 95       	ror	r22
     d0a:	57 95       	ror	r21
     d0c:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     d0e:	84 15       	cp	r24, r4
     d10:	95 05       	cpc	r25, r5
     d12:	a6 05       	cpc	r26, r6
     d14:	b7 05       	cpc	r27, r7
     d16:	08 f4       	brcc	.+2      	; 0xd1a <usart_set_baudrate+0x7a>
     d18:	ae c0       	rjmp	.+348    	; 0xe76 <usart_set_baudrate+0x1d6>
     d1a:	44 16       	cp	r4, r20
     d1c:	55 06       	cpc	r5, r21
     d1e:	66 06       	cpc	r6, r22
     d20:	77 06       	cpc	r7, r23
     d22:	08 f4       	brcc	.+2      	; 0xd26 <usart_set_baudrate+0x86>
     d24:	aa c0       	rjmp	.+340    	; 0xe7a <usart_set_baudrate+0x1da>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     d26:	f1 01       	movw	r30, r2
     d28:	84 81       	ldd	r24, Z+4	; 0x04
     d2a:	82 fd       	sbrc	r24, 2
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <usart_set_baudrate+0x96>
		baud *= 2;
     d2e:	44 0c       	add	r4, r4
     d30:	55 1c       	adc	r5, r5
     d32:	66 1c       	adc	r6, r6
     d34:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     d36:	c5 01       	movw	r24, r10
     d38:	b4 01       	movw	r22, r8
     d3a:	a3 01       	movw	r20, r6
     d3c:	92 01       	movw	r18, r4
     d3e:	0e 94 44 14 	call	0x2888	; 0x2888 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     d42:	2f 3f       	cpi	r18, 0xFF	; 255
     d44:	31 05       	cpc	r19, r1
     d46:	41 05       	cpc	r20, r1
     d48:	51 05       	cpc	r21, r1
     d4a:	08 f4       	brcc	.+2      	; 0xd4e <usart_set_baudrate+0xae>
     d4c:	98 c0       	rjmp	.+304    	; 0xe7e <usart_set_baudrate+0x1de>
     d4e:	c1 2c       	mov	r12, r1
     d50:	d1 2c       	mov	r13, r1
     d52:	76 01       	movw	r14, r12
     d54:	ca 94       	dec	r12
     d56:	c9 ef       	ldi	r28, 0xF9	; 249
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <usart_set_baudrate+0xc4>
     d5a:	2c 15       	cp	r18, r12
     d5c:	3d 05       	cpc	r19, r13
     d5e:	4e 05       	cpc	r20, r14
     d60:	5f 05       	cpc	r21, r15
     d62:	68 f0       	brcs	.+26     	; 0xd7e <usart_set_baudrate+0xde>
			break;
		}

		limit <<= 1;
     d64:	cc 0c       	add	r12, r12
     d66:	dd 1c       	adc	r13, r13
     d68:	ee 1c       	adc	r14, r14
     d6a:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     d6c:	cd 3f       	cpi	r28, 0xFD	; 253
     d6e:	14 f4       	brge	.+4      	; 0xd74 <usart_set_baudrate+0xd4>
			limit |= 1;
     d70:	68 94       	set
     d72:	c0 f8       	bld	r12, 0
     d74:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     d76:	c7 30       	cpi	r28, 0x07	; 7
     d78:	81 f7       	brne	.-32     	; 0xd5a <usart_set_baudrate+0xba>
     d7a:	8c 2f       	mov	r24, r28
     d7c:	56 c0       	rjmp	.+172    	; 0xe2a <usart_set_baudrate+0x18a>
     d7e:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     d80:	cc 23       	and	r28, r28
     d82:	0c f0       	brlt	.+2      	; 0xd86 <usart_set_baudrate+0xe6>
     d84:	52 c0       	rjmp	.+164    	; 0xe2a <usart_set_baudrate+0x18a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     d86:	d3 01       	movw	r26, r6
     d88:	c2 01       	movw	r24, r4
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	aa 1f       	adc	r26, r26
     d90:	bb 1f       	adc	r27, r27
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	aa 1f       	adc	r26, r26
     d98:	bb 1f       	adc	r27, r27
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	aa 1f       	adc	r26, r26
     da0:	bb 1f       	adc	r27, r27
     da2:	85 01       	movw	r16, r10
     da4:	74 01       	movw	r14, r8
     da6:	e8 1a       	sub	r14, r24
     da8:	f9 0a       	sbc	r15, r25
     daa:	0a 0b       	sbc	r16, r26
     dac:	1b 0b       	sbc	r17, r27
     dae:	d8 01       	movw	r26, r16
     db0:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     db2:	ce 3f       	cpi	r28, 0xFE	; 254
     db4:	f4 f4       	brge	.+60     	; 0xdf2 <usart_set_baudrate+0x152>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     db6:	2d ef       	ldi	r18, 0xFD	; 253
     db8:	3f ef       	ldi	r19, 0xFF	; 255
     dba:	2c 1b       	sub	r18, r28
     dbc:	31 09       	sbc	r19, r1
     dbe:	c7 fd       	sbrc	r28, 7
     dc0:	33 95       	inc	r19
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <usart_set_baudrate+0x12c>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	2a 95       	dec	r18
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <usart_set_baudrate+0x124>
     dd0:	73 01       	movw	r14, r6
     dd2:	62 01       	movw	r12, r4
     dd4:	f6 94       	lsr	r15
     dd6:	e7 94       	ror	r14
     dd8:	d7 94       	ror	r13
     dda:	c7 94       	ror	r12
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6c 0d       	add	r22, r12
     de2:	7d 1d       	adc	r23, r13
     de4:	8e 1d       	adc	r24, r14
     de6:	9f 1d       	adc	r25, r15
     de8:	a3 01       	movw	r20, r6
     dea:	92 01       	movw	r18, r4
     dec:	0e 94 44 14 	call	0x2888	; 0x2888 <__udivmodsi4>
     df0:	38 c0       	rjmp	.+112    	; 0xe62 <usart_set_baudrate+0x1c2>
		} else {
			baud <<= exp + 3;
     df2:	23 e0       	ldi	r18, 0x03	; 3
     df4:	2c 0f       	add	r18, r28
     df6:	83 01       	movw	r16, r6
     df8:	72 01       	movw	r14, r4
     dfa:	04 c0       	rjmp	.+8      	; 0xe04 <usart_set_baudrate+0x164>
     dfc:	ee 0c       	add	r14, r14
     dfe:	ff 1c       	adc	r15, r15
     e00:	00 1f       	adc	r16, r16
     e02:	11 1f       	adc	r17, r17
     e04:	2a 95       	dec	r18
     e06:	d2 f7       	brpl	.-12     	; 0xdfc <usart_set_baudrate+0x15c>
     e08:	a8 01       	movw	r20, r16
     e0a:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
     e0c:	67 01       	movw	r12, r14
     e0e:	78 01       	movw	r14, r16
     e10:	f6 94       	lsr	r15
     e12:	e7 94       	ror	r14
     e14:	d7 94       	ror	r13
     e16:	c7 94       	ror	r12
     e18:	bc 01       	movw	r22, r24
     e1a:	cd 01       	movw	r24, r26
     e1c:	6c 0d       	add	r22, r12
     e1e:	7d 1d       	adc	r23, r13
     e20:	8e 1d       	adc	r24, r14
     e22:	9f 1d       	adc	r25, r15
     e24:	0e 94 44 14 	call	0x2888	; 0x2888 <__udivmodsi4>
     e28:	1c c0       	rjmp	.+56     	; 0xe62 <usart_set_baudrate+0x1c2>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     e2a:	8d 5f       	subi	r24, 0xFD	; 253
     e2c:	a3 01       	movw	r20, r6
     e2e:	92 01       	movw	r18, r4
     e30:	04 c0       	rjmp	.+8      	; 0xe3a <usart_set_baudrate+0x19a>
     e32:	22 0f       	add	r18, r18
     e34:	33 1f       	adc	r19, r19
     e36:	44 1f       	adc	r20, r20
     e38:	55 1f       	adc	r21, r21
     e3a:	8a 95       	dec	r24
     e3c:	d2 f7       	brpl	.-12     	; 0xe32 <usart_set_baudrate+0x192>
		div = (cpu_hz + baud / 2) / baud - 1;
     e3e:	da 01       	movw	r26, r20
     e40:	c9 01       	movw	r24, r18
     e42:	b6 95       	lsr	r27
     e44:	a7 95       	ror	r26
     e46:	97 95       	ror	r25
     e48:	87 95       	ror	r24
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	68 0d       	add	r22, r8
     e50:	79 1d       	adc	r23, r9
     e52:	8a 1d       	adc	r24, r10
     e54:	9b 1d       	adc	r25, r11
     e56:	0e 94 44 14 	call	0x2888	; 0x2888 <__udivmodsi4>
     e5a:	21 50       	subi	r18, 0x01	; 1
     e5c:	31 09       	sbc	r19, r1
     e5e:	41 09       	sbc	r20, r1
     e60:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     e62:	83 2f       	mov	r24, r19
     e64:	8f 70       	andi	r24, 0x0F	; 15
     e66:	c2 95       	swap	r28
     e68:	c0 7f       	andi	r28, 0xF0	; 240
     e6a:	c8 2b       	or	r28, r24
     e6c:	f1 01       	movw	r30, r2
     e6e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     e70:	26 83       	std	Z+6, r18	; 0x06

	return true;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	1c c0       	rjmp	.+56     	; 0xeae <usart_set_baudrate+0x20e>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	1a c0       	rjmp	.+52     	; 0xeae <usart_set_baudrate+0x20e>
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	18 c0       	rjmp	.+48     	; 0xeae <usart_set_baudrate+0x20e>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     e7e:	d3 01       	movw	r26, r6
     e80:	c2 01       	movw	r24, r4
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	aa 1f       	adc	r26, r26
     e88:	bb 1f       	adc	r27, r27
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	aa 1f       	adc	r26, r26
     e90:	bb 1f       	adc	r27, r27
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	aa 1f       	adc	r26, r26
     e98:	bb 1f       	adc	r27, r27
     e9a:	85 01       	movw	r16, r10
     e9c:	74 01       	movw	r14, r8
     e9e:	e8 1a       	sub	r14, r24
     ea0:	f9 0a       	sbc	r15, r25
     ea2:	0a 0b       	sbc	r16, r26
     ea4:	1b 0b       	sbc	r17, r27
     ea6:	d8 01       	movw	r26, r16
     ea8:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     eaa:	c9 ef       	ldi	r28, 0xF9	; 249
     eac:	84 cf       	rjmp	.-248    	; 0xdb6 <usart_set_baudrate+0x116>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	af 90       	pop	r10
     ec0:	9f 90       	pop	r9
     ec2:	8f 90       	pop	r8
     ec4:	7f 90       	pop	r7
     ec6:	6f 90       	pop	r6
     ec8:	5f 90       	pop	r5
     eca:	4f 90       	pop	r4
     ecc:	3f 90       	pop	r3
     ece:	2f 90       	pop	r2
     ed0:	08 95       	ret

00000ed2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	ec 01       	movw	r28, r24
     edc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	09 f4       	brne	.+2      	; 0xee4 <usart_init_rs232+0x12>
     ee2:	36 c1       	rjmp	.+620    	; 0x1150 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     ee4:	80 3c       	cpi	r24, 0xC0	; 192
     ee6:	91 05       	cpc	r25, r1
     ee8:	21 f4       	brne	.+8      	; 0xef2 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     eea:	60 e1       	ldi	r22, 0x10	; 16
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	8a dc       	rcall	.-1772   	; 0x804 <sysclk_enable_module>
     ef0:	2f c1       	rjmp	.+606    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     ef2:	c0 34       	cpi	r28, 0x40	; 64
     ef4:	84 e0       	ldi	r24, 0x04	; 4
     ef6:	d8 07       	cpc	r29, r24
     ef8:	21 f4       	brne	.+8      	; 0xf02 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     efa:	68 e0       	ldi	r22, 0x08	; 8
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	82 dc       	rcall	.-1788   	; 0x804 <sysclk_enable_module>
     f00:	27 c1       	rjmp	.+590    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     f02:	c1 15       	cp	r28, r1
     f04:	e4 e0       	ldi	r30, 0x04	; 4
     f06:	de 07       	cpc	r29, r30
     f08:	21 f4       	brne	.+8      	; 0xf12 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     f0a:	64 e0       	ldi	r22, 0x04	; 4
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	7a dc       	rcall	.-1804   	; 0x804 <sysclk_enable_module>
     f10:	1f c1       	rjmp	.+574    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     f12:	c0 38       	cpi	r28, 0x80	; 128
     f14:	f1 e0       	ldi	r31, 0x01	; 1
     f16:	df 07       	cpc	r29, r31
     f18:	21 f4       	brne	.+8      	; 0xf22 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     f1a:	62 e0       	ldi	r22, 0x02	; 2
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	72 dc       	rcall	.-1820   	; 0x804 <sysclk_enable_module>
     f20:	17 c1       	rjmp	.+558    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     f22:	c1 15       	cp	r28, r1
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	d8 07       	cpc	r29, r24
     f28:	21 f4       	brne	.+8      	; 0xf32 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	6a dc       	rcall	.-1836   	; 0x804 <sysclk_enable_module>
     f30:	0f c1       	rjmp	.+542    	; 0x1150 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     f32:	c0 38       	cpi	r28, 0x80	; 128
     f34:	e3 e0       	ldi	r30, 0x03	; 3
     f36:	de 07       	cpc	r29, r30
     f38:	21 f4       	brne	.+8      	; 0xf42 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	62 dc       	rcall	.-1852   	; 0x804 <sysclk_enable_module>
     f40:	07 c1       	rjmp	.+526    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     f42:	c0 39       	cpi	r28, 0x90	; 144
     f44:	f3 e0       	ldi	r31, 0x03	; 3
     f46:	df 07       	cpc	r29, r31
     f48:	21 f4       	brne	.+8      	; 0xf52 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	5a dc       	rcall	.-1868   	; 0x804 <sysclk_enable_module>
     f50:	ff c0       	rjmp	.+510    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     f52:	c1 15       	cp	r28, r1
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	d8 07       	cpc	r29, r24
     f58:	21 f4       	brne	.+8      	; 0xf62 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     f5a:	62 e0       	ldi	r22, 0x02	; 2
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	52 dc       	rcall	.-1884   	; 0x804 <sysclk_enable_module>
     f60:	f7 c0       	rjmp	.+494    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     f62:	c0 34       	cpi	r28, 0x40	; 64
     f64:	e2 e0       	ldi	r30, 0x02	; 2
     f66:	de 07       	cpc	r29, r30
     f68:	21 f4       	brne	.+8      	; 0xf72 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     f6a:	62 e0       	ldi	r22, 0x02	; 2
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	4a dc       	rcall	.-1900   	; 0x804 <sysclk_enable_module>
     f70:	ef c0       	rjmp	.+478    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     f72:	c1 15       	cp	r28, r1
     f74:	f3 e0       	ldi	r31, 0x03	; 3
     f76:	df 07       	cpc	r29, r31
     f78:	21 f4       	brne	.+8      	; 0xf82 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     f7a:	64 e0       	ldi	r22, 0x04	; 4
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	42 dc       	rcall	.-1916   	; 0x804 <sysclk_enable_module>
     f80:	e7 c0       	rjmp	.+462    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     f82:	c0 32       	cpi	r28, 0x20	; 32
     f84:	83 e0       	ldi	r24, 0x03	; 3
     f86:	d8 07       	cpc	r29, r24
     f88:	21 f4       	brne	.+8      	; 0xf92 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     f8a:	64 e0       	ldi	r22, 0x04	; 4
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	3a dc       	rcall	.-1932   	; 0x804 <sysclk_enable_module>
     f90:	df c0       	rjmp	.+446    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     f92:	c1 15       	cp	r28, r1
     f94:	e8 e0       	ldi	r30, 0x08	; 8
     f96:	de 07       	cpc	r29, r30
     f98:	21 f4       	brne	.+8      	; 0xfa2 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	32 dc       	rcall	.-1948   	; 0x804 <sysclk_enable_module>
     fa0:	d7 c0       	rjmp	.+430    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     fa2:	c1 15       	cp	r28, r1
     fa4:	f9 e0       	ldi	r31, 0x09	; 9
     fa6:	df 07       	cpc	r29, r31
     fa8:	21 f4       	brne	.+8      	; 0xfb2 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	84 e0       	ldi	r24, 0x04	; 4
     fae:	2a dc       	rcall	.-1964   	; 0x804 <sysclk_enable_module>
     fb0:	cf c0       	rjmp	.+414    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     fb2:	c1 15       	cp	r28, r1
     fb4:	8a e0       	ldi	r24, 0x0A	; 10
     fb6:	d8 07       	cpc	r29, r24
     fb8:	21 f4       	brne	.+8      	; 0xfc2 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	85 e0       	ldi	r24, 0x05	; 5
     fbe:	22 dc       	rcall	.-1980   	; 0x804 <sysclk_enable_module>
     fc0:	c7 c0       	rjmp	.+398    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     fc2:	c1 15       	cp	r28, r1
     fc4:	eb e0       	ldi	r30, 0x0B	; 11
     fc6:	de 07       	cpc	r29, r30
     fc8:	21 f4       	brne	.+8      	; 0xfd2 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	86 e0       	ldi	r24, 0x06	; 6
     fce:	1a dc       	rcall	.-1996   	; 0x804 <sysclk_enable_module>
     fd0:	bf c0       	rjmp	.+382    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     fd2:	c0 34       	cpi	r28, 0x40	; 64
     fd4:	f8 e0       	ldi	r31, 0x08	; 8
     fd6:	df 07       	cpc	r29, r31
     fd8:	21 f4       	brne	.+8      	; 0xfe2 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     fda:	62 e0       	ldi	r22, 0x02	; 2
     fdc:	83 e0       	ldi	r24, 0x03	; 3
     fde:	12 dc       	rcall	.-2012   	; 0x804 <sysclk_enable_module>
     fe0:	b7 c0       	rjmp	.+366    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     fe2:	c0 34       	cpi	r28, 0x40	; 64
     fe4:	89 e0       	ldi	r24, 0x09	; 9
     fe6:	d8 07       	cpc	r29, r24
     fe8:	21 f4       	brne	.+8      	; 0xff2 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     fea:	62 e0       	ldi	r22, 0x02	; 2
     fec:	84 e0       	ldi	r24, 0x04	; 4
     fee:	0a dc       	rcall	.-2028   	; 0x804 <sysclk_enable_module>
     ff0:	af c0       	rjmp	.+350    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     ff2:	c0 34       	cpi	r28, 0x40	; 64
     ff4:	ea e0       	ldi	r30, 0x0A	; 10
     ff6:	de 07       	cpc	r29, r30
     ff8:	21 f4       	brne	.+8      	; 0x1002 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     ffa:	62 e0       	ldi	r22, 0x02	; 2
     ffc:	85 e0       	ldi	r24, 0x05	; 5
     ffe:	02 dc       	rcall	.-2044   	; 0x804 <sysclk_enable_module>
    1000:	a7 c0       	rjmp	.+334    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1002:	c0 34       	cpi	r28, 0x40	; 64
    1004:	fb e0       	ldi	r31, 0x0B	; 11
    1006:	df 07       	cpc	r29, r31
    1008:	21 f4       	brne	.+8      	; 0x1012 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    100a:	62 e0       	ldi	r22, 0x02	; 2
    100c:	86 e0       	ldi	r24, 0x06	; 6
    100e:	fa db       	rcall	.-2060   	; 0x804 <sysclk_enable_module>
    1010:	9f c0       	rjmp	.+318    	; 0x1150 <usart_init_rs232+0x27e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1012:	c0 39       	cpi	r28, 0x90	; 144
    1014:	88 e0       	ldi	r24, 0x08	; 8
    1016:	d8 07       	cpc	r29, r24
    1018:	21 f4       	brne	.+8      	; 0x1022 <usart_init_rs232+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    101a:	64 e0       	ldi	r22, 0x04	; 4
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	f2 db       	rcall	.-2076   	; 0x804 <sysclk_enable_module>
    1020:	97 c0       	rjmp	.+302    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1022:	c0 39       	cpi	r28, 0x90	; 144
    1024:	e9 e0       	ldi	r30, 0x09	; 9
    1026:	de 07       	cpc	r29, r30
    1028:	21 f4       	brne	.+8      	; 0x1032 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    102a:	64 e0       	ldi	r22, 0x04	; 4
    102c:	84 e0       	ldi	r24, 0x04	; 4
    102e:	ea db       	rcall	.-2092   	; 0x804 <sysclk_enable_module>
    1030:	8f c0       	rjmp	.+286    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1032:	c0 39       	cpi	r28, 0x90	; 144
    1034:	fa e0       	ldi	r31, 0x0A	; 10
    1036:	df 07       	cpc	r29, r31
    1038:	21 f4       	brne	.+8      	; 0x1042 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    103a:	64 e0       	ldi	r22, 0x04	; 4
    103c:	85 e0       	ldi	r24, 0x05	; 5
    103e:	e2 db       	rcall	.-2108   	; 0x804 <sysclk_enable_module>
    1040:	87 c0       	rjmp	.+270    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1042:	c0 39       	cpi	r28, 0x90	; 144
    1044:	8b e0       	ldi	r24, 0x0B	; 11
    1046:	d8 07       	cpc	r29, r24
    1048:	21 f4       	brne	.+8      	; 0x1052 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    104a:	64 e0       	ldi	r22, 0x04	; 4
    104c:	86 e0       	ldi	r24, 0x06	; 6
    104e:	da db       	rcall	.-2124   	; 0x804 <sysclk_enable_module>
    1050:	7f c0       	rjmp	.+254    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1052:	c0 3c       	cpi	r28, 0xC0	; 192
    1054:	e8 e0       	ldi	r30, 0x08	; 8
    1056:	de 07       	cpc	r29, r30
    1058:	21 f4       	brne	.+8      	; 0x1062 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    105a:	68 e0       	ldi	r22, 0x08	; 8
    105c:	83 e0       	ldi	r24, 0x03	; 3
    105e:	d2 db       	rcall	.-2140   	; 0x804 <sysclk_enable_module>
    1060:	77 c0       	rjmp	.+238    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1062:	c0 3c       	cpi	r28, 0xC0	; 192
    1064:	f9 e0       	ldi	r31, 0x09	; 9
    1066:	df 07       	cpc	r29, r31
    1068:	21 f4       	brne	.+8      	; 0x1072 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    106a:	68 e0       	ldi	r22, 0x08	; 8
    106c:	84 e0       	ldi	r24, 0x04	; 4
    106e:	ca db       	rcall	.-2156   	; 0x804 <sysclk_enable_module>
    1070:	6f c0       	rjmp	.+222    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1072:	c0 3c       	cpi	r28, 0xC0	; 192
    1074:	8a e0       	ldi	r24, 0x0A	; 10
    1076:	d8 07       	cpc	r29, r24
    1078:	21 f4       	brne	.+8      	; 0x1082 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    107a:	68 e0       	ldi	r22, 0x08	; 8
    107c:	85 e0       	ldi	r24, 0x05	; 5
    107e:	c2 db       	rcall	.-2172   	; 0x804 <sysclk_enable_module>
    1080:	67 c0       	rjmp	.+206    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1082:	c0 3c       	cpi	r28, 0xC0	; 192
    1084:	eb e0       	ldi	r30, 0x0B	; 11
    1086:	de 07       	cpc	r29, r30
    1088:	21 f4       	brne	.+8      	; 0x1092 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    108a:	68 e0       	ldi	r22, 0x08	; 8
    108c:	86 e0       	ldi	r24, 0x06	; 6
    108e:	ba db       	rcall	.-2188   	; 0x804 <sysclk_enable_module>
    1090:	5f c0       	rjmp	.+190    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1092:	c0 3a       	cpi	r28, 0xA0	; 160
    1094:	f8 e0       	ldi	r31, 0x08	; 8
    1096:	df 07       	cpc	r29, r31
    1098:	21 f4       	brne	.+8      	; 0x10a2 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    109a:	60 e1       	ldi	r22, 0x10	; 16
    109c:	83 e0       	ldi	r24, 0x03	; 3
    109e:	b2 db       	rcall	.-2204   	; 0x804 <sysclk_enable_module>
    10a0:	57 c0       	rjmp	.+174    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    10a2:	c0 3a       	cpi	r28, 0xA0	; 160
    10a4:	89 e0       	ldi	r24, 0x09	; 9
    10a6:	d8 07       	cpc	r29, r24
    10a8:	21 f4       	brne	.+8      	; 0x10b2 <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    10aa:	60 e1       	ldi	r22, 0x10	; 16
    10ac:	84 e0       	ldi	r24, 0x04	; 4
    10ae:	aa db       	rcall	.-2220   	; 0x804 <sysclk_enable_module>
    10b0:	4f c0       	rjmp	.+158    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    10b2:	c0 3a       	cpi	r28, 0xA0	; 160
    10b4:	ea e0       	ldi	r30, 0x0A	; 10
    10b6:	de 07       	cpc	r29, r30
    10b8:	21 f4       	brne	.+8      	; 0x10c2 <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    10ba:	60 e1       	ldi	r22, 0x10	; 16
    10bc:	85 e0       	ldi	r24, 0x05	; 5
    10be:	a2 db       	rcall	.-2236   	; 0x804 <sysclk_enable_module>
    10c0:	47 c0       	rjmp	.+142    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    10c2:	c0 3a       	cpi	r28, 0xA0	; 160
    10c4:	fb e0       	ldi	r31, 0x0B	; 11
    10c6:	df 07       	cpc	r29, r31
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    10ca:	60 e1       	ldi	r22, 0x10	; 16
    10cc:	86 e0       	ldi	r24, 0x06	; 6
    10ce:	9a db       	rcall	.-2252   	; 0x804 <sysclk_enable_module>
    10d0:	3f c0       	rjmp	.+126    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    10d2:	c0 3b       	cpi	r28, 0xB0	; 176
    10d4:	88 e0       	ldi	r24, 0x08	; 8
    10d6:	d8 07       	cpc	r29, r24
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    10da:	60 e2       	ldi	r22, 0x20	; 32
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	92 db       	rcall	.-2268   	; 0x804 <sysclk_enable_module>
    10e0:	37 c0       	rjmp	.+110    	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    10e2:	c0 3b       	cpi	r28, 0xB0	; 176
    10e4:	e9 e0       	ldi	r30, 0x09	; 9
    10e6:	de 07       	cpc	r29, r30
    10e8:	21 f4       	brne	.+8      	; 0x10f2 <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    10ea:	60 e2       	ldi	r22, 0x20	; 32
    10ec:	84 e0       	ldi	r24, 0x04	; 4
    10ee:	8a db       	rcall	.-2284   	; 0x804 <sysclk_enable_module>
    10f0:	2f c0       	rjmp	.+94     	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    10f2:	c0 3b       	cpi	r28, 0xB0	; 176
    10f4:	fa e0       	ldi	r31, 0x0A	; 10
    10f6:	df 07       	cpc	r29, r31
    10f8:	21 f4       	brne	.+8      	; 0x1102 <usart_init_rs232+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    10fa:	60 e2       	ldi	r22, 0x20	; 32
    10fc:	85 e0       	ldi	r24, 0x05	; 5
    10fe:	82 db       	rcall	.-2300   	; 0x804 <sysclk_enable_module>
    1100:	27 c0       	rjmp	.+78     	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1102:	c0 3b       	cpi	r28, 0xB0	; 176
    1104:	8b e0       	ldi	r24, 0x0B	; 11
    1106:	d8 07       	cpc	r29, r24
    1108:	21 f4       	brne	.+8      	; 0x1112 <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    110a:	60 e2       	ldi	r22, 0x20	; 32
    110c:	86 e0       	ldi	r24, 0x06	; 6
    110e:	7a db       	rcall	.-2316   	; 0x804 <sysclk_enable_module>
    1110:	1f c0       	rjmp	.+62     	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1112:	c0 38       	cpi	r28, 0x80	; 128
    1114:	e4 e0       	ldi	r30, 0x04	; 4
    1116:	de 07       	cpc	r29, r30
    1118:	21 f4       	brne	.+8      	; 0x1122 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    111a:	60 e4       	ldi	r22, 0x40	; 64
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	72 db       	rcall	.-2332   	; 0x804 <sysclk_enable_module>
    1120:	17 c0       	rjmp	.+46     	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1122:	c0 39       	cpi	r28, 0x90	; 144
    1124:	f4 e0       	ldi	r31, 0x04	; 4
    1126:	df 07       	cpc	r29, r31
    1128:	21 f4       	brne	.+8      	; 0x1132 <usart_init_rs232+0x260>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    112a:	60 e4       	ldi	r22, 0x40	; 64
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	6a db       	rcall	.-2348   	; 0x804 <sysclk_enable_module>
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1132:	c0 3a       	cpi	r28, 0xA0	; 160
    1134:	84 e0       	ldi	r24, 0x04	; 4
    1136:	d8 07       	cpc	r29, r24
    1138:	21 f4       	brne	.+8      	; 0x1142 <usart_init_rs232+0x270>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    113a:	60 e4       	ldi	r22, 0x40	; 64
    113c:	85 e0       	ldi	r24, 0x05	; 5
    113e:	62 db       	rcall	.-2364   	; 0x804 <sysclk_enable_module>
    1140:	07 c0       	rjmp	.+14     	; 0x1150 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1142:	c0 3b       	cpi	r28, 0xB0	; 176
    1144:	e4 e0       	ldi	r30, 0x04	; 4
    1146:	de 07       	cpc	r29, r30
    1148:	19 f4       	brne	.+6      	; 0x1150 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    114a:	60 e4       	ldi	r22, 0x40	; 64
    114c:	86 e0       	ldi	r24, 0x06	; 6
    114e:	5a db       	rcall	.-2380   	; 0x804 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	8f 73       	andi	r24, 0x3F	; 63
    1154:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1156:	f8 01       	movw	r30, r16
    1158:	94 81       	ldd	r25, Z+4	; 0x04
    115a:	85 81       	ldd	r24, Z+5	; 0x05
    115c:	89 2b       	or	r24, r25
    115e:	96 81       	ldd	r25, Z+6	; 0x06
    1160:	91 11       	cpse	r25, r1
    1162:	98 e0       	ldi	r25, 0x08	; 8
    1164:	89 2b       	or	r24, r25
    1166:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1168:	f8 01       	movw	r30, r16
    116a:	40 81       	ld	r20, Z
    116c:	51 81       	ldd	r21, Z+1	; 0x01
    116e:	62 81       	ldd	r22, Z+2	; 0x02
    1170:	73 81       	ldd	r23, Z+3	; 0x03
    1172:	00 e0       	ldi	r16, 0x00	; 0
    1174:	18 e4       	ldi	r17, 0x48	; 72
    1176:	28 ee       	ldi	r18, 0xE8	; 232
    1178:	31 e0       	ldi	r19, 0x01	; 1
    117a:	ce 01       	movw	r24, r28
    117c:	91 dd       	rcall	.-1246   	; 0xca0 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	98 60       	ori	r25, 0x08	; 8
    1182:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	90 61       	ori	r25, 0x10	; 16
    1188:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	08 95       	ret

00001194 <ADC_init>:
/* Global Variable Declarations */

/*******************************************************************************************/
								/* Initialization methods */
/* Initialize ADC for port A, thermistor*/
void ADC_init(void){
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
	ADCA.CTRLA = 0b00000001; //Enables the ADC.
    119e:	c0 e0       	ldi	r28, 0x00	; 0
    11a0:	d2 e0       	ldi	r29, 0x02	; 2
    11a2:	ff 24       	eor	r15, r15
    11a4:	f3 94       	inc	r15
    11a6:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000; //Unsigned 12 bit mode.
    11a8:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000; //Voltage reference of Vcc/1.6V
    11aa:	80 e1       	ldi	r24, 0x10	; 16
    11ac:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101; //This is automatic prescalar of 128 on the clock.
    11ae:	85 e0       	ldi	r24, 0x05	; 5
    11b0:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    11b2:	61 e2       	ldi	r22, 0x21	; 33
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	5b dd       	rcall	.-1354   	; 0xc70 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    11ba:	08 2f       	mov	r16, r24
    11bc:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    11be:	10 2f       	mov	r17, r16
    11c0:	00 27       	eor	r16, r16
    11c2:	60 e2       	ldi	r22, 0x20	; 32
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	53 dd       	rcall	.-1370   	; 0xc70 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    11ca:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA); //Retrieve stored calibration data about the ADC.
    11cc:	0c 87       	std	Y+12, r16	; 0x0c
    11ce:	1d 87       	std	Y+13, r17	; 0x0d

	ADCA.CH0.CTRL = 0b00000001; //Single ended input
    11d0:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000000; //Reading ADCA pin 0.
    11d2:	19 a2       	std	Y+33, r1	; 0x21
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	ff 90       	pop	r15
    11de:	08 95       	ret

000011e0 <spi_select>:
 }

  /*******************************************************************************************/
								/* SPI Usability Methods */
 void spi_select(void){
	PORTC.OUT &= 0b11101111;
    11e0:	e0 e4       	ldi	r30, 0x40	; 64
    11e2:	f6 e0       	ldi	r31, 0x06	; 6
    11e4:	84 81       	ldd	r24, Z+4	; 0x04
    11e6:	8f 7e       	andi	r24, 0xEF	; 239
    11e8:	84 83       	std	Z+4, r24	; 0x04
    11ea:	08 95       	ret

000011ec <spi_deselect>:
 }
 void spi_deselect(void){
	PORTC.OUT |= 0b00010000;
    11ec:	e0 e4       	ldi	r30, 0x40	; 64
    11ee:	f6 e0       	ldi	r31, 0x06	; 6
    11f0:	84 81       	ldd	r24, Z+4	; 0x04
    11f2:	80 61       	ori	r24, 0x10	; 16
    11f4:	84 83       	std	Z+4, r24	; 0x04
    11f6:	08 95       	ret

000011f8 <spi_read>:
 }
 uint8_t spi_read(void){
	 SPIC.DATA = 0xFF; //Set the data to something we know.
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	80 93 c3 08 	sts	0x08C3, r24
	 while(!(SPIC.STATUS>>7)); //Wait until new data comes in by monitoring the interrupt flag.
    11fe:	e0 ec       	ldi	r30, 0xC0	; 192
    1200:	f8 e0       	ldi	r31, 0x08	; 8
    1202:	82 81       	ldd	r24, Z+2	; 0x02
    1204:	88 23       	and	r24, r24
    1206:	ec f7       	brge	.-6      	; 0x1202 <spi_read+0xa>
	 return SPIC.DATA; //Return the data.
    1208:	80 91 c3 08 	lds	r24, 0x08C3
 }
    120c:	08 95       	ret

0000120e <spi_write>:

 void spi_write(uint8_t data){
	 SPIC.DATA = data;
    120e:	80 93 c3 08 	sts	0x08C3, r24
	 while(!(SPIC.STATUS>>7));
    1212:	e0 ec       	ldi	r30, 0xC0	; 192
    1214:	f8 e0       	ldi	r31, 0x08	; 8
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	88 23       	and	r24, r24
    121a:	ec f7       	brge	.-6      	; 0x1216 <spi_write+0x8>
 }
    121c:	08 95       	ret

0000121e <calibratePressure>:
	 calibratePressure();
 }
 /* Calibrate pressure from factory settings on the MS5611 */
 void calibratePressure(void){
	/* Calibrate value c1 */
	 spi_select();
    121e:	e0 df       	rcall	.-64     	; 0x11e0 <spi_select>
	 spi_write(0b10100010); //prom read ad1
    1220:	82 ea       	ldi	r24, 0xA2	; 162
    1222:	f5 df       	rcall	.-22     	; 0x120e <spi_write>
	 cal_pres_c1 = ((uint16_t)spi_read())<<8; //bitshift
    1224:	e9 df       	rcall	.-46     	; 0x11f8 <spi_read>
    1226:	10 92 8b 20 	sts	0x208B, r1
    122a:	80 93 8c 20 	sts	0x208C, r24
	 cal_pres_c1 += ((uint16_t)spi_read());
    122e:	e4 df       	rcall	.-56     	; 0x11f8 <spi_read>
    1230:	20 91 8b 20 	lds	r18, 0x208B
    1234:	30 91 8c 20 	lds	r19, 0x208C
    1238:	28 0f       	add	r18, r24
    123a:	31 1d       	adc	r19, r1
    123c:	20 93 8b 20 	sts	0x208B, r18
    1240:	30 93 8c 20 	sts	0x208C, r19
	 spi_deselect();
    1244:	d3 df       	rcall	.-90     	; 0x11ec <spi_deselect>

	/* Calibrate value c2 */
	 spi_select();
    1246:	cc df       	rcall	.-104    	; 0x11e0 <spi_select>
	 spi_write(0b10100100); //prom read ad2
    1248:	84 ea       	ldi	r24, 0xA4	; 164
    124a:	e1 df       	rcall	.-62     	; 0x120e <spi_write>
	 cal_pres_c2 = ((uint16_t)spi_read())<<8;
    124c:	d5 df       	rcall	.-86     	; 0x11f8 <spi_read>
    124e:	10 92 8f 20 	sts	0x208F, r1
    1252:	80 93 90 20 	sts	0x2090, r24
	 cal_pres_c2 += ((uint16_t)spi_read());
    1256:	d0 df       	rcall	.-96     	; 0x11f8 <spi_read>
    1258:	20 91 8f 20 	lds	r18, 0x208F
    125c:	30 91 90 20 	lds	r19, 0x2090
    1260:	28 0f       	add	r18, r24
    1262:	31 1d       	adc	r19, r1
    1264:	20 93 8f 20 	sts	0x208F, r18
    1268:	30 93 90 20 	sts	0x2090, r19
	 spi_deselect();
    126c:	bf df       	rcall	.-130    	; 0x11ec <spi_deselect>

	/* Calibrate value c3 */
	 spi_select();
    126e:	b8 df       	rcall	.-144    	; 0x11e0 <spi_select>
	 spi_write(0b10100110); //prom read ad3
    1270:	86 ea       	ldi	r24, 0xA6	; 166
    1272:	cd df       	rcall	.-102    	; 0x120e <spi_write>
	 cal_pres_c3 = ((uint16_t)spi_read())<<8;
    1274:	c1 df       	rcall	.-126    	; 0x11f8 <spi_read>
    1276:	10 92 89 20 	sts	0x2089, r1
    127a:	80 93 8a 20 	sts	0x208A, r24
	 cal_pres_c3 += ((uint16_t)spi_read());
    127e:	bc df       	rcall	.-136    	; 0x11f8 <spi_read>
    1280:	20 91 89 20 	lds	r18, 0x2089
    1284:	30 91 8a 20 	lds	r19, 0x208A
    1288:	28 0f       	add	r18, r24
    128a:	31 1d       	adc	r19, r1
    128c:	20 93 89 20 	sts	0x2089, r18
    1290:	30 93 8a 20 	sts	0x208A, r19
	 spi_deselect();
    1294:	ab df       	rcall	.-170    	; 0x11ec <spi_deselect>

	/* Calibrate value c4 */
	 spi_select();
    1296:	a4 df       	rcall	.-184    	; 0x11e0 <spi_select>
	 spi_write(0b10101000); //prom read ad4
    1298:	88 ea       	ldi	r24, 0xA8	; 168
    129a:	b9 df       	rcall	.-142    	; 0x120e <spi_write>
	 cal_pres_c4 = ((uint16_t)spi_read())<<8;
    129c:	ad df       	rcall	.-166    	; 0x11f8 <spi_read>
    129e:	10 92 8d 20 	sts	0x208D, r1
    12a2:	80 93 8e 20 	sts	0x208E, r24
	 cal_pres_c4 += ((uint16_t)spi_read());
    12a6:	a8 df       	rcall	.-176    	; 0x11f8 <spi_read>
    12a8:	20 91 8d 20 	lds	r18, 0x208D
    12ac:	30 91 8e 20 	lds	r19, 0x208E
    12b0:	28 0f       	add	r18, r24
    12b2:	31 1d       	adc	r19, r1
    12b4:	20 93 8d 20 	sts	0x208D, r18
    12b8:	30 93 8e 20 	sts	0x208E, r19
	 spi_deselect();
    12bc:	97 df       	rcall	.-210    	; 0x11ec <spi_deselect>

	/* Calibrate value c5 */
	 spi_select();
    12be:	90 df       	rcall	.-224    	; 0x11e0 <spi_select>
	 spi_write(0b10101010); //prom read ad5
    12c0:	8a ea       	ldi	r24, 0xAA	; 170
    12c2:	a5 df       	rcall	.-182    	; 0x120e <spi_write>
	 cal_pres_c5 = ((uint16_t)spi_read())<<8;
    12c4:	99 df       	rcall	.-206    	; 0x11f8 <spi_read>
    12c6:	10 92 87 20 	sts	0x2087, r1
    12ca:	80 93 88 20 	sts	0x2088, r24
	 cal_pres_c5 += ((uint16_t)spi_read());
    12ce:	94 df       	rcall	.-216    	; 0x11f8 <spi_read>
    12d0:	20 91 87 20 	lds	r18, 0x2087
    12d4:	30 91 88 20 	lds	r19, 0x2088
    12d8:	28 0f       	add	r18, r24
    12da:	31 1d       	adc	r19, r1
    12dc:	20 93 87 20 	sts	0x2087, r18
    12e0:	30 93 88 20 	sts	0x2088, r19
	 spi_deselect();
    12e4:	83 df       	rcall	.-250    	; 0x11ec <spi_deselect>

	/* Calibrate value c6 */
	 spi_select();
    12e6:	7c df       	rcall	.-264    	; 0x11e0 <spi_select>
	 spi_write(0b10101100); //prom read ad6
    12e8:	8c ea       	ldi	r24, 0xAC	; 172
    12ea:	91 df       	rcall	.-222    	; 0x120e <spi_write>
	 cal_pres_c6 = ((uint16_t)spi_read())<<8;
    12ec:	85 df       	rcall	.-246    	; 0x11f8 <spi_read>
    12ee:	10 92 91 20 	sts	0x2091, r1
    12f2:	80 93 92 20 	sts	0x2092, r24
	 cal_pres_c6 += ((uint16_t)spi_read());
    12f6:	80 df       	rcall	.-256    	; 0x11f8 <spi_read>
    12f8:	20 91 91 20 	lds	r18, 0x2091
    12fc:	30 91 92 20 	lds	r19, 0x2092
    1300:	28 0f       	add	r18, r24
    1302:	31 1d       	adc	r19, r1
    1304:	20 93 91 20 	sts	0x2091, r18
    1308:	30 93 92 20 	sts	0x2092, r19
	 spi_deselect();
    130c:	6f cf       	rjmp	.-290    	; 0x11ec <spi_deselect>
    130e:	08 95       	ret

00001310 <SPI_init>:
              /* Initialization and Calibration for SPI and Pressure Sensor */

 /* Configuring SPI module.*/
 void SPI_init(void){
	 //printf("spi_init\n");
	 PORTC.DIR |= 0b10110000; //Set port to input.
    1310:	e0 e4       	ldi	r30, 0x40	; 64
    1312:	f6 e0       	ldi	r31, 0x06	; 6
    1314:	80 81       	ld	r24, Z
    1316:	80 6b       	ori	r24, 0xB0	; 176
    1318:	80 83       	st	Z, r24
	 PORTC.DIR &= 0b10111111;
    131a:	80 81       	ld	r24, Z
    131c:	8f 7b       	andi	r24, 0xBF	; 191
    131e:	80 83       	st	Z, r24
	 SPIC.CTRL = 0b01010000; //Clock Double off, enable SPI, MSB DORD, master mode, SPI transfer mode set to 0, prescalar set to clkper/4 (has no effect in slave mode).
    1320:	80 e5       	ldi	r24, 0x50	; 80
    1322:	80 93 c0 08 	sts	0x08C0, r24
	 calibratePressure();
    1326:	7b cf       	rjmp	.-266    	; 0x121e <calibratePressure>
    1328:	08 95       	ret

0000132a <getPressure>:
 }
 
  /*******************************************************************************************/
						/* Get Current Pressure value method */

 int32_t getPressure(void){
    132a:	2f 92       	push	r2
    132c:	3f 92       	push	r3
    132e:	4f 92       	push	r4
    1330:	5f 92       	push	r5
    1332:	6f 92       	push	r6
    1334:	7f 92       	push	r7
    1336:	8f 92       	push	r8
    1338:	9f 92       	push	r9
    133a:	af 92       	push	r10
    133c:	bf 92       	push	r11
    133e:	cf 92       	push	r12
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	6f 97       	sbiw	r28, 0x1f	; 31
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	de bf       	out	0x3e, r29	; 62
	/* Request current pressure value */
	spi_select();
    1358:	43 df       	rcall	.-378    	; 0x11e0 <spi_select>
	spi_write(0x48);
    135a:	88 e4       	ldi	r24, 0x48	; 72
    135c:	58 df       	rcall	.-336    	; 0x120e <spi_write>
	spi_deselect();
    135e:	46 df       	rcall	.-372    	; 0x11ec <spi_deselect>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	85 35       	cpi	r24, 0x55	; 85
    1368:	00 ed       	ldi	r16, 0xD0	; 208
    136a:	90 07       	cpc	r25, r16
    136c:	d9 f7       	brne	.-10     	; 0x1364 <getPressure+0x3a>
	delay_ms(10);

	/* Read current pressure value */
	spi_select();
    136e:	38 df       	rcall	.-400    	; 0x11e0 <spi_select>
	spi_write(0x00);
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	4d df       	rcall	.-358    	; 0x120e <spi_write>
	uint32_t uncal_pressure = ((uint32_t)spi_read())<<16; //Typecast the 8 bit data to 32 bit, then move it 16 places to the left. Stores in temp variable.
    1374:	41 df       	rcall	.-382    	; 0x11f8 <spi_read>
    1376:	c8 2e       	mov	r12, r24
    1378:	d1 2c       	mov	r13, r1
    137a:	e1 2c       	mov	r14, r1
    137c:	f1 2c       	mov	r15, r1
    137e:	76 01       	movw	r14, r12
    1380:	dd 24       	eor	r13, r13
    1382:	cc 24       	eor	r12, r12
	uncal_pressure += ((uint32_t)spi_read())<<8; //Assign data to data + the new data but in the lower 8 bits.
    1384:	39 df       	rcall	.-398    	; 0x11f8 <spi_read>
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a0 e0       	ldi	r26, 0x00	; 0
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ba 2f       	mov	r27, r26
    138e:	a9 2f       	mov	r26, r25
    1390:	98 2f       	mov	r25, r24
    1392:	88 27       	eor	r24, r24
    1394:	c8 0e       	add	r12, r24
    1396:	d9 1e       	adc	r13, r25
    1398:	ea 1e       	adc	r14, r26
    139a:	fb 1e       	adc	r15, r27
	uncal_pressure += ((uint32_t)spi_read());
    139c:	2d df       	rcall	.-422    	; 0x11f8 <spi_read>
    139e:	a7 01       	movw	r20, r14
    13a0:	96 01       	movw	r18, r12
    13a2:	28 0f       	add	r18, r24
    13a4:	31 1d       	adc	r19, r1
    13a6:	41 1d       	adc	r20, r1
    13a8:	51 1d       	adc	r21, r1
    13aa:	2d 83       	std	Y+5, r18	; 0x05
    13ac:	3e 83       	std	Y+6, r19	; 0x06
    13ae:	4f 83       	std	Y+7, r20	; 0x07
    13b0:	58 87       	std	Y+8, r21	; 0x08
	spi_deselect();
    13b2:	1c df       	rcall	.-456    	; 0x11ec <spi_deselect>
	

	/* Request current temperature value */
	spi_select();
    13b4:	15 df       	rcall	.-470    	; 0x11e0 <spi_select>
	spi_write(0x58); //Ask for temp value.
    13b6:	88 e5       	ldi	r24, 0x58	; 88
    13b8:	2a df       	rcall	.-428    	; 0x120e <spi_write>
	spi_deselect();
    13ba:	18 df       	rcall	.-464    	; 0x11ec <spi_deselect>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	85 35       	cpi	r24, 0x55	; 85
    13c4:	30 ed       	ldi	r19, 0xD0	; 208
    13c6:	93 07       	cpc	r25, r19
    13c8:	d9 f7       	brne	.-10     	; 0x13c0 <getPressure+0x96>
	delay_ms(10);
	
	/* Read current temperature value */
	spi_select();
    13ca:	0a df       	rcall	.-492    	; 0x11e0 <spi_select>
	spi_write(0x00);
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	1f df       	rcall	.-450    	; 0x120e <spi_write>
	uint32_t d2 = ((uint32_t)spi_read())<<16;
    13d0:	13 df       	rcall	.-474    	; 0x11f8 <spi_read>
    13d2:	08 2f       	mov	r16, r24
	d2 += ((uint32_t)spi_read())<<8;
    13d4:	11 df       	rcall	.-478    	; 0x11f8 <spi_read>
    13d6:	f8 2e       	mov	r15, r24
	d2 += ((uint32_t)spi_read());
    13d8:	0f df       	rcall	.-482    	; 0x11f8 <spi_read>
    13da:	18 2f       	mov	r17, r24
	spi_deselect();
    13dc:	07 df       	rcall	.-498    	; 0x11ec <spi_deselect>
	
	/* Calculate temperature-adjusted pressure */
	int32_t dT = (int64_t)d2 - (((int64_t)cal_pres_c5)*(256));
    13de:	a0 91 87 20 	lds	r26, 0x2087
    13e2:	b0 91 88 20 	lds	r27, 0x2088
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	3f ef       	ldi	r19, 0xFF	; 255
    13ea:	4f ef       	ldi	r20, 0xFF	; 255
    13ec:	5f ef       	ldi	r21, 0xFF	; 255
    13ee:	0e 94 66 14 	call	0x28cc	; 0x28cc <__muluhisi3>
    13f2:	2b 01       	movw	r4, r22
    13f4:	3c 01       	movw	r6, r24
    13f6:	41 0e       	add	r4, r17
    13f8:	51 1c       	adc	r5, r1
    13fa:	61 1c       	adc	r6, r1
    13fc:	71 1c       	adc	r7, r1
	delay_ms(10);
	
	/* Read current temperature value */
	spi_select();
	spi_write(0x00);
	uint32_t d2 = ((uint32_t)spi_read())<<16;
    13fe:	40 2f       	mov	r20, r16
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	ba 01       	movw	r22, r20
    1408:	55 27       	eor	r21, r21
    140a:	44 27       	eor	r20, r20
    140c:	d3 01       	movw	r26, r6
    140e:	c2 01       	movw	r24, r4
    1410:	84 0f       	add	r24, r20
    1412:	95 1f       	adc	r25, r21
    1414:	a6 1f       	adc	r26, r22
    1416:	b7 1f       	adc	r27, r23
	d2 += ((uint32_t)spi_read())<<8;
    1418:	4f 2c       	mov	r4, r15
    141a:	51 2c       	mov	r5, r1
    141c:	61 2c       	mov	r6, r1
    141e:	71 2c       	mov	r7, r1
    1420:	76 2c       	mov	r7, r6
    1422:	65 2c       	mov	r6, r5
    1424:	54 2c       	mov	r5, r4
    1426:	44 24       	eor	r4, r4
	d2 += ((uint32_t)spi_read());
	spi_deselect();
	
	/* Calculate temperature-adjusted pressure */
	int32_t dT = (int64_t)d2 - (((int64_t)cal_pres_c5)*(256));
    1428:	48 0e       	add	r4, r24
    142a:	59 1e       	adc	r5, r25
    142c:	6a 1e       	adc	r6, r26
    142e:	7b 1e       	adc	r7, r27
	int64_t offset = ((int64_t)cal_pres_c2)*(65536) + ((((int64_t)cal_pres_c4)*((int64_t)dT))/(128));
    1430:	d3 01       	movw	r26, r6
    1432:	c2 01       	movw	r24, r4
    1434:	bb 0f       	add	r27, r27
    1436:	88 0b       	sbc	r24, r24
    1438:	98 2f       	mov	r25, r24
    143a:	dc 01       	movw	r26, r24
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	9a 83       	std	Y+2, r25	; 0x02
    1440:	ab 83       	std	Y+3, r26	; 0x03
    1442:	bc 83       	std	Y+4, r27	; 0x04
	int64_t sens = (((int64_t)cal_pres_c1)*(32768)) + ((((int64_t)cal_pres_c3)*((int64_t)dT))/256);
    1444:	80 91 8b 20 	lds	r24, 0x208B
    1448:	90 91 8c 20 	lds	r25, 0x208C
    144c:	4c 01       	movw	r8, r24
    144e:	28 2f       	mov	r18, r24
    1450:	39 2d       	mov	r19, r9
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0f e0       	ldi	r16, 0x0F	; 15
    1460:	0e 94 c1 14 	call	0x2982	; 0x2982 <__ashldi3>
    1464:	22 2e       	mov	r2, r18
    1466:	3d 87       	std	Y+13, r19	; 0x0d
    1468:	4e 87       	std	Y+14, r20	; 0x0e
    146a:	5f 87       	std	Y+15, r21	; 0x0f
    146c:	68 8b       	std	Y+16, r22	; 0x10
    146e:	79 8b       	std	Y+17, r23	; 0x11
    1470:	8a 8b       	std	Y+18, r24	; 0x12
    1472:	9b 8b       	std	Y+19, r25	; 0x13
    1474:	00 91 89 20 	lds	r16, 0x2089
    1478:	10 91 8a 20 	lds	r17, 0x208A
    147c:	a0 2e       	mov	r10, r16
    147e:	b1 2e       	mov	r11, r17
    1480:	c1 2c       	mov	r12, r1
    1482:	d1 2c       	mov	r13, r1
    1484:	e1 2c       	mov	r14, r1
    1486:	f1 2c       	mov	r15, r1
    1488:	00 e0       	ldi	r16, 0x00	; 0
    148a:	10 e0       	ldi	r17, 0x00	; 0
    148c:	24 2d       	mov	r18, r4
    148e:	35 2d       	mov	r19, r5
    1490:	46 2d       	mov	r20, r6
    1492:	57 2d       	mov	r21, r7
    1494:	69 81       	ldd	r22, Y+1	; 0x01
    1496:	76 2f       	mov	r23, r22
    1498:	86 2f       	mov	r24, r22
    149a:	96 2f       	mov	r25, r22
    149c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__muldi3>
    14a0:	32 2e       	mov	r3, r18
    14a2:	83 2e       	mov	r8, r19
    14a4:	94 2e       	mov	r9, r20
    14a6:	e5 2f       	mov	r30, r21
    14a8:	6d 8b       	std	Y+21, r22	; 0x15
    14aa:	7c 8b       	std	Y+20, r23	; 0x14
    14ac:	a8 2e       	mov	r10, r24
    14ae:	b9 2e       	mov	r11, r25
    14b0:	a0 e0       	ldi	r26, 0x00	; 0
    14b2:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <__cmpdi2_s8>
    14b6:	84 f4       	brge	.+32     	; 0x14d8 <getPressure+0x1ae>
    14b8:	21 50       	subi	r18, 0x01	; 1
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	4f 4f       	sbci	r20, 0xFF	; 255
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
    14c0:	6f 4f       	sbci	r22, 0xFF	; 255
    14c2:	7f 4f       	sbci	r23, 0xFF	; 255
    14c4:	8f 4f       	sbci	r24, 0xFF	; 255
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	32 2e       	mov	r3, r18
    14ca:	83 2e       	mov	r8, r19
    14cc:	94 2e       	mov	r9, r20
    14ce:	e5 2f       	mov	r30, r21
    14d0:	6d 8b       	std	Y+21, r22	; 0x15
    14d2:	7c 8b       	std	Y+20, r23	; 0x14
    14d4:	a8 2e       	mov	r10, r24
    14d6:	b9 2e       	mov	r11, r25
    14d8:	23 2d       	mov	r18, r3
    14da:	38 2d       	mov	r19, r8
    14dc:	49 2d       	mov	r20, r9
    14de:	5e 2f       	mov	r21, r30
    14e0:	6d 89       	ldd	r22, Y+21	; 0x15
    14e2:	7c 89       	ldd	r23, Y+20	; 0x14
    14e4:	8a 2d       	mov	r24, r10
    14e6:	9b 2d       	mov	r25, r11
    14e8:	08 e0       	ldi	r16, 0x08	; 8
    14ea:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__ashrdi3>
    14ee:	a2 2e       	mov	r10, r18
    14f0:	b3 2e       	mov	r11, r19
    14f2:	c4 2e       	mov	r12, r20
    14f4:	d5 2e       	mov	r13, r21
    14f6:	e6 2e       	mov	r14, r22
    14f8:	f7 2e       	mov	r15, r23
    14fa:	08 2f       	mov	r16, r24
    14fc:	19 2f       	mov	r17, r25
    14fe:	22 2d       	mov	r18, r2
    1500:	3d 85       	ldd	r19, Y+13	; 0x0d
    1502:	4e 85       	ldd	r20, Y+14	; 0x0e
    1504:	5f 85       	ldd	r21, Y+15	; 0x0f
    1506:	68 89       	ldd	r22, Y+16	; 0x10
    1508:	79 89       	ldd	r23, Y+17	; 0x11
    150a:	8a 89       	ldd	r24, Y+18	; 0x12
    150c:	9b 89       	ldd	r25, Y+19	; 0x13
    150e:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__adddi3>
	int32_t pressure = ((((int64_t)uncal_pressure) * (((uint64_t)sens)/2097152)) - (int64_t)offset)/32768;
    1512:	05 e1       	ldi	r16, 0x15	; 21
    1514:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__lshrdi3>
    1518:	cd 80       	ldd	r12, Y+5	; 0x05
    151a:	de 80       	ldd	r13, Y+6	; 0x06
    151c:	ef 80       	ldd	r14, Y+7	; 0x07
    151e:	f8 84       	ldd	r15, Y+8	; 0x08
    1520:	56 01       	movw	r10, r12
    1522:	67 01       	movw	r12, r14
    1524:	e1 2c       	mov	r14, r1
    1526:	f1 2c       	mov	r15, r1
    1528:	87 01       	movw	r16, r14
    152a:	ad 82       	std	Y+5, r10	; 0x05
    152c:	be 82       	std	Y+6, r11	; 0x06
    152e:	cf 82       	std	Y+7, r12	; 0x07
    1530:	d8 86       	std	Y+8, r13	; 0x08
    1532:	e9 86       	std	Y+9, r14	; 0x09
    1534:	fa 86       	std	Y+10, r15	; 0x0a
    1536:	0b 87       	std	Y+11, r16	; 0x0b
    1538:	1c 87       	std	Y+12, r17	; 0x0c
    153a:	e1 2c       	mov	r14, r1
    153c:	f1 2c       	mov	r15, r1
    153e:	00 e0       	ldi	r16, 0x00	; 0
    1540:	10 e0       	ldi	r17, 0x00	; 0
    1542:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__muldi3>
    1546:	2d 83       	std	Y+5, r18	; 0x05
    1548:	3d 87       	std	Y+13, r19	; 0x0d
    154a:	4e 87       	std	Y+14, r20	; 0x0e
    154c:	5f 87       	std	Y+15, r21	; 0x0f
    154e:	68 8b       	std	Y+16, r22	; 0x10
    1550:	79 8b       	std	Y+17, r23	; 0x11
    1552:	8a 8b       	std	Y+18, r24	; 0x12
    1554:	9b 8b       	std	Y+19, r25	; 0x13
	d2 += ((uint32_t)spi_read());
	spi_deselect();
	
	/* Calculate temperature-adjusted pressure */
	int32_t dT = (int64_t)d2 - (((int64_t)cal_pres_c5)*(256));
	int64_t offset = ((int64_t)cal_pres_c2)*(65536) + ((((int64_t)cal_pres_c4)*((int64_t)dT))/(128));
    1556:	80 91 8f 20 	lds	r24, 0x208F
    155a:	90 91 90 20 	lds	r25, 0x2090
    155e:	4c 01       	movw	r8, r24
    1560:	28 2f       	mov	r18, r24
    1562:	39 2d       	mov	r19, r9
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	00 e1       	ldi	r16, 0x10	; 16
    1572:	0e 94 c1 14 	call	0x2982	; 0x2982 <__ashldi3>
    1576:	22 2e       	mov	r2, r18
    1578:	33 2e       	mov	r3, r19
    157a:	84 2e       	mov	r8, r20
    157c:	95 2e       	mov	r9, r21
    157e:	6c 8b       	std	Y+20, r22	; 0x14
    1580:	7d 8b       	std	Y+21, r23	; 0x15
    1582:	8e 8b       	std	Y+22, r24	; 0x16
    1584:	9f 8b       	std	Y+23, r25	; 0x17
    1586:	40 91 8d 20 	lds	r20, 0x208D
    158a:	50 91 8e 20 	lds	r21, 0x208E
    158e:	5a 01       	movw	r10, r20
    1590:	c1 2c       	mov	r12, r1
    1592:	d1 2c       	mov	r13, r1
    1594:	e1 2c       	mov	r14, r1
    1596:	f1 2c       	mov	r15, r1
    1598:	87 01       	movw	r16, r14
    159a:	48 8f       	std	Y+24, r20	; 0x18
    159c:	b9 8e       	std	Y+25, r11	; 0x19
    159e:	ca 8e       	std	Y+26, r12	; 0x1a
    15a0:	db 8e       	std	Y+27, r13	; 0x1b
    15a2:	ec 8e       	std	Y+28, r14	; 0x1c
    15a4:	fd 8e       	std	Y+29, r15	; 0x1d
    15a6:	0e 8f       	std	Y+30, r16	; 0x1e
    15a8:	1f 8f       	std	Y+31, r17	; 0x1f
    15aa:	a4 2c       	mov	r10, r4
    15ac:	b5 2c       	mov	r11, r5
    15ae:	c6 2c       	mov	r12, r6
    15b0:	d7 2c       	mov	r13, r7
    15b2:	e9 80       	ldd	r14, Y+1	; 0x01
    15b4:	fe 2c       	mov	r15, r14
    15b6:	0e 2d       	mov	r16, r14
    15b8:	1e 2d       	mov	r17, r14
    15ba:	28 8d       	ldd	r18, Y+24	; 0x18
    15bc:	39 8d       	ldd	r19, Y+25	; 0x19
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 70 14 	call	0x28e0	; 0x28e0 <__muldi3>
    15ce:	e2 2f       	mov	r30, r18
    15d0:	73 2e       	mov	r7, r19
    15d2:	64 2e       	mov	r6, r20
    15d4:	55 2e       	mov	r5, r21
    15d6:	46 2e       	mov	r4, r22
    15d8:	79 83       	std	Y+1, r23	; 0x01
    15da:	a8 2e       	mov	r10, r24
    15dc:	b9 2e       	mov	r11, r25
    15de:	a0 e0       	ldi	r26, 0x00	; 0
    15e0:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <__cmpdi2_s8>
    15e4:	5c f4       	brge	.+22     	; 0x15fc <getPressure+0x2d2>
    15e6:	af e7       	ldi	r26, 0x7F	; 127
    15e8:	0e 94 01 15 	call	0x2a02	; 0x2a02 <__adddi3_s8>
    15ec:	e2 2f       	mov	r30, r18
    15ee:	73 2e       	mov	r7, r19
    15f0:	64 2e       	mov	r6, r20
    15f2:	55 2e       	mov	r5, r21
    15f4:	46 2e       	mov	r4, r22
    15f6:	79 83       	std	Y+1, r23	; 0x01
    15f8:	a8 2e       	mov	r10, r24
    15fa:	b9 2e       	mov	r11, r25
    15fc:	2e 2f       	mov	r18, r30
    15fe:	37 2d       	mov	r19, r7
    1600:	46 2d       	mov	r20, r6
    1602:	55 2d       	mov	r21, r5
    1604:	64 2d       	mov	r22, r4
    1606:	79 81       	ldd	r23, Y+1	; 0x01
    1608:	8a 2d       	mov	r24, r10
    160a:	9b 2d       	mov	r25, r11
    160c:	07 e0       	ldi	r16, 0x07	; 7
    160e:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__ashrdi3>
    1612:	a2 2e       	mov	r10, r18
    1614:	b3 2e       	mov	r11, r19
    1616:	c4 2e       	mov	r12, r20
    1618:	d5 2e       	mov	r13, r21
    161a:	e6 2e       	mov	r14, r22
    161c:	f7 2e       	mov	r15, r23
    161e:	08 2f       	mov	r16, r24
    1620:	19 2f       	mov	r17, r25
    1622:	22 2d       	mov	r18, r2
    1624:	33 2d       	mov	r19, r3
    1626:	48 2d       	mov	r20, r8
    1628:	59 2d       	mov	r21, r9
    162a:	6c 89       	ldd	r22, Y+20	; 0x14
    162c:	7d 89       	ldd	r23, Y+21	; 0x15
    162e:	8e 89       	ldd	r24, Y+22	; 0x16
    1630:	9f 89       	ldd	r25, Y+23	; 0x17
    1632:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__adddi3>
    1636:	a2 2e       	mov	r10, r18
    1638:	b3 2e       	mov	r11, r19
    163a:	c4 2e       	mov	r12, r20
    163c:	d5 2e       	mov	r13, r21
    163e:	e6 2e       	mov	r14, r22
    1640:	f7 2e       	mov	r15, r23
    1642:	08 2f       	mov	r16, r24
    1644:	19 2f       	mov	r17, r25
	int64_t sens = (((int64_t)cal_pres_c1)*(32768)) + ((((int64_t)cal_pres_c3)*((int64_t)dT))/256);
	int32_t pressure = ((((int64_t)uncal_pressure) * (((uint64_t)sens)/2097152)) - (int64_t)offset)/32768;
    1646:	2d 81       	ldd	r18, Y+5	; 0x05
    1648:	3d 85       	ldd	r19, Y+13	; 0x0d
    164a:	4e 85       	ldd	r20, Y+14	; 0x0e
    164c:	5f 85       	ldd	r21, Y+15	; 0x0f
    164e:	68 89       	ldd	r22, Y+16	; 0x10
    1650:	79 89       	ldd	r23, Y+17	; 0x11
    1652:	8a 89       	ldd	r24, Y+18	; 0x12
    1654:	9b 89       	ldd	r25, Y+19	; 0x13
    1656:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__subdi3>
    165a:	0f e0       	ldi	r16, 0x0F	; 15
    165c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <__lshrdi3>
    1660:	62 2f       	mov	r22, r18
    1662:	73 2f       	mov	r23, r19
    1664:	84 2f       	mov	r24, r20
    1666:	95 2f       	mov	r25, r21
	
	
	return pressure; //pressure given in pascals.
    1668:	6f 96       	adiw	r28, 0x1f	; 31
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	1f 91       	pop	r17
    1674:	0f 91       	pop	r16
    1676:	ff 90       	pop	r15
    1678:	ef 90       	pop	r14
    167a:	df 90       	pop	r13
    167c:	cf 90       	pop	r12
    167e:	bf 90       	pop	r11
    1680:	af 90       	pop	r10
    1682:	9f 90       	pop	r9
    1684:	8f 90       	pop	r8
    1686:	7f 90       	pop	r7
    1688:	6f 90       	pop	r6
    168a:	5f 90       	pop	r5
    168c:	4f 90       	pop	r4
    168e:	3f 90       	pop	r3
    1690:	2f 90       	pop	r2
    1692:	08 95       	ret

00001694 <getTemperature>:

  /*******************************************************************************************/
							/* getTemperature method */

/* Method that uses change in voltage to find resistance across thermistor and thus temperature w/ Steinhart-Hart equation. */
 float getTemperature(void){
    1694:	8f 92       	push	r8
    1696:	9f 92       	push	r9
    1698:	af 92       	push	r10
    169a:	bf 92       	push	r11
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
	ADCA.CH0.CTRL |= 0b10000000; //Start the conversion..
    16a4:	e0 e0       	ldi	r30, 0x00	; 0
    16a6:	f2 e0       	ldi	r31, 0x02	; 2
    16a8:	80 a1       	ldd	r24, Z+32	; 0x20
    16aa:	80 68       	ori	r24, 0x80	; 128
    16ac:	80 a3       	std	Z+32, r24	; 0x20
	while(ADCA.CH0.INTFLAGS == 0); //Wait until conversion is done.
    16ae:	83 a1       	ldd	r24, Z+35	; 0x23
    16b0:	88 23       	and	r24, r24
    16b2:	e9 f3       	breq	.-6      	; 0x16ae <getTemperature+0x1a>
	uint16_t read_adc = ADCA.CH0.RES; // save reading
    16b4:	60 91 24 02 	lds	r22, 0x0224
    16b8:	70 91 25 02 	lds	r23, 0x0225

	float voltage = (0.000502512562*read_adc - 0.095979899); //converts the adc reading into an actual voltage based off of slope.
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	aa d3       	rcall	.+1876   	; 0x1e16 <__floatunsisf>
    16c2:	2c e0       	ldi	r18, 0x0C	; 12
    16c4:	3b eb       	ldi	r19, 0xBB	; 187
    16c6:	43 e0       	ldi	r20, 0x03	; 3
    16c8:	5a e3       	ldi	r21, 0x3A	; 58
    16ca:	c6 d4       	rcall	.+2444   	; 0x2058 <__mulsf3>
    16cc:	2c e1       	ldi	r18, 0x1C	; 28
    16ce:	31 e9       	ldi	r19, 0x91	; 145
    16d0:	44 ec       	ldi	r20, 0xC4	; 196
    16d2:	5d e3       	ldi	r21, 0x3D	; 61
    16d4:	99 d2       	rcall	.+1330   	; 0x1c08 <__subsf3>
    16d6:	9b 01       	movw	r18, r22
    16d8:	ac 01       	movw	r20, r24
	//printf("%.2f\n", voltage);
	float resistance = (3.3*10000)/(3.3 - voltage) - 10000; //Need to convert our voltage reading into the resistance across the thermistor. To find this we use 3.3(R1)/(3.3-vadc) - R1
    16da:	63 e3       	ldi	r22, 0x33	; 51
    16dc:	73 e3       	ldi	r23, 0x33	; 51
    16de:	83 e5       	ldi	r24, 0x53	; 83
    16e0:	90 e4       	ldi	r25, 0x40	; 64
    16e2:	92 d2       	rcall	.+1316   	; 0x1c08 <__subsf3>
    16e4:	9b 01       	movw	r18, r22
    16e6:	ac 01       	movw	r20, r24
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	78 ee       	ldi	r23, 0xE8	; 232
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	97 e4       	ldi	r25, 0x47	; 71
    16f0:	f0 d2       	rcall	.+1504   	; 0x1cd2 <__divsf3>
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e4       	ldi	r19, 0x40	; 64
    16f6:	4c e1       	ldi	r20, 0x1C	; 28
    16f8:	56 e4       	ldi	r21, 0x46	; 70
    16fa:	86 d2       	rcall	.+1292   	; 0x1c08 <__subsf3>
	//printf("%.2f\n",resistance);
	float a_const = 0.003354016; //A value for the NTCLE100E3103HT1 in the Steinhart-Hart equation (T = 1/(A + Bln(resistance) + Dln^3(resistance))
	float b_const = 0.000256985; //B value
	float d_const = 0.00000006383091; //D value.
	return 1/(a_const+ b_const*log(resistance/10000) + d_const*log(resistance/10000)*log(resistance/10000)*log(resistance/10000)); //Steinhart-Hart to find temperature then return it.
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e4       	ldi	r19, 0x40	; 64
    1700:	4c e1       	ldi	r20, 0x1C	; 28
    1702:	56 e4       	ldi	r21, 0x46	; 70
    1704:	e6 d2       	rcall	.+1484   	; 0x1cd2 <__divsf3>
    1706:	68 d4       	rcall	.+2256   	; 0x1fd8 <log>
    1708:	6b 01       	movw	r12, r22
    170a:	7c 01       	movw	r14, r24
    170c:	21 ef       	ldi	r18, 0xF1	; 241
    170e:	3b eb       	ldi	r19, 0xBB	; 187
    1710:	46 e8       	ldi	r20, 0x86	; 134
    1712:	59 e3       	ldi	r21, 0x39	; 57
    1714:	a1 d4       	rcall	.+2370   	; 0x2058 <__mulsf3>
    1716:	2d e0       	ldi	r18, 0x0D	; 13
    1718:	3f ec       	ldi	r19, 0xCF	; 207
    171a:	4b e5       	ldi	r20, 0x5B	; 91
    171c:	5b e3       	ldi	r21, 0x3B	; 59
    171e:	75 d2       	rcall	.+1258   	; 0x1c0a <__addsf3>
    1720:	4b 01       	movw	r8, r22
    1722:	5c 01       	movw	r10, r24
    1724:	2a e6       	ldi	r18, 0x6A	; 106
    1726:	33 e1       	ldi	r19, 0x13	; 19
    1728:	49 e8       	ldi	r20, 0x89	; 137
    172a:	53 e3       	ldi	r21, 0x33	; 51
    172c:	c7 01       	movw	r24, r14
    172e:	b6 01       	movw	r22, r12
    1730:	93 d4       	rcall	.+2342   	; 0x2058 <__mulsf3>
    1732:	9b 01       	movw	r18, r22
    1734:	ac 01       	movw	r20, r24
    1736:	c7 01       	movw	r24, r14
    1738:	b6 01       	movw	r22, r12
    173a:	8e d4       	rcall	.+2332   	; 0x2058 <__mulsf3>
    173c:	9b 01       	movw	r18, r22
    173e:	ac 01       	movw	r20, r24
    1740:	c7 01       	movw	r24, r14
    1742:	b6 01       	movw	r22, r12
    1744:	89 d4       	rcall	.+2322   	; 0x2058 <__mulsf3>
    1746:	9b 01       	movw	r18, r22
    1748:	ac 01       	movw	r20, r24
    174a:	c5 01       	movw	r24, r10
    174c:	b4 01       	movw	r22, r8
    174e:	5d d2       	rcall	.+1210   	; 0x1c0a <__addsf3>
    1750:	9b 01       	movw	r18, r22
    1752:	ac 01       	movw	r20, r24
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	80 e8       	ldi	r24, 0x80	; 128
    175a:	9f e3       	ldi	r25, 0x3F	; 63
    175c:	ba d2       	rcall	.+1396   	; 0x1cd2 <__divsf3>
    175e:	ff 90       	pop	r15
    1760:	ef 90       	pop	r14
    1762:	df 90       	pop	r13
    1764:	cf 90       	pop	r12
    1766:	bf 90       	pop	r11
    1768:	af 90       	pop	r10
    176a:	9f 90       	pop	r9
    176c:	8f 90       	pop	r8
    176e:	08 95       	ret

00001770 <TCD0_init>:
	TCE0.CCD = TCE0.PER - (TCE0.PER/duty_cycle);
}

/* Initialize Timer Counter for port D, GPIOs (LEDs, Buzzer, Motor) */
void TCD0_init(void){
	PORTD.DIR = 0b11111111;
    1770:	e0 e6       	ldi	r30, 0x60	; 96
    1772:	f6 e0       	ldi	r31, 0x06	; 6
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	80 83       	st	Z, r24
	PORTD.DIR = 0b11111111; //sets to output.
    1778:	80 83       	st	Z, r24
	TCD0.CTRLA = 0b00000110; //0110 is prescalar 256.
    177a:	e0 e0       	ldi	r30, 0x00	; 0
    177c:	f9 e0       	ldi	r31, 0x09	; 9
    177e:	86 e0       	ldi	r24, 0x06	; 6
    1780:	80 83       	st	Z, r24
	TCD0.CTRLB = 0b10110011; //OCn output pin (currently set at 0) and single slope PWM.
    1782:	83 eb       	ldi	r24, 0xB3	; 179
    1784:	81 83       	std	Z+1, r24	; 0x01
    1786:	08 95       	ret

00001788 <TCF0_init>:
}

/* Initialize Timer Counter for port F, keeps time for velocity calculations. */
void TCF0_init(void){
	PORTF.DIR = 0b00000011;
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	80 93 a0 06 	sts	0x06A0, r24
	TCF0.CTRLA = 0b00000111; //presc 1024
    178e:	e0 e0       	ldi	r30, 0x00	; 0
    1790:	fb e0       	ldi	r31, 0x0B	; 11
    1792:	87 e0       	ldi	r24, 0x07	; 7
    1794:	80 83       	st	Z, r24
	TCF0.CTRLB = 0b00000000;
    1796:	11 82       	std	Z+1, r1	; 0x01
	TCF0.CNT = 0;
    1798:	10 a2       	std	Z+32, r1	; 0x20
    179a:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.PER = 312; //period of 312 = ~100Hz = ~10ms before overflow
    179c:	88 e3       	ldi	r24, 0x38	; 56
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	86 a3       	std	Z+38, r24	; 0x26
    17a2:	97 a3       	std	Z+39, r25	; 0x27
    17a4:	08 95       	ret

000017a6 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    17ac:	73 da       	rcall	.-2842   	; 0xc94 <usart_getchar>
    17ae:	88 83       	st	Y, r24
}
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	08 95       	ret

000017b6 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    17b6:	66 ca       	rjmp	.-2868   	; 0xc84 <usart_putchar>
}
    17b8:	08 95       	ret

000017ba <UART_Comms_Init>:
/* Global Variables */

 /*******************************************************************************************/
								/* Initialization methods */
/* Method to initialize UART communications */
void UART_Comms_Init(void){
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	27 97       	sbiw	r28, 0x07	; 7
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	de bf       	out	0x3e, r29	; 62
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	//Must set TX pin as output
	PORTC.DIRSET=0b00001000;
    17c8:	e0 e4       	ldi	r30, 0x40	; 64
    17ca:	f6 e0       	ldi	r31, 0x06	; 6
    17cc:	88 e0       	ldi	r24, 0x08	; 8
    17ce:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET=0b00001000;
    17d0:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUT=0xFF;
    17d2:	8f ef       	ldi	r24, 0xFF	; 255
    17d4:	84 83       	std	Z+4, r24	; 0x04
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    17d6:	80 ea       	ldi	r24, 0xA0	; 160
    17d8:	98 e0       	ldi	r25, 0x08	; 8
    17da:	80 93 81 20 	sts	0x2081, r24
    17de:	90 93 82 20 	sts	0x2082, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    17e2:	8b ed       	ldi	r24, 0xDB	; 219
    17e4:	9b e0       	ldi	r25, 0x0B	; 11
    17e6:	80 93 7f 20 	sts	0x207F, r24
    17ea:	90 93 80 20 	sts	0x2080, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    17ee:	83 ed       	ldi	r24, 0xD3	; 211
    17f0:	9b e0       	ldi	r25, 0x0B	; 11
    17f2:	80 93 7d 20 	sts	0x207D, r24
    17f6:	90 93 7e 20 	sts	0x207E, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    17fa:	e6 e0       	ldi	r30, 0x06	; 6
    17fc:	f0 e2       	ldi	r31, 0x20	; 32
    17fe:	84 81       	ldd	r24, Z+4	; 0x04
    1800:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1802:	85 81       	ldd	r24, Z+5	; 0x05
    1804:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1806:	86 81       	ldd	r24, Z+6	; 0x06
    1808:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	a2 81       	ldd	r26, Z+2	; 0x02
    1810:	b3 81       	ldd	r27, Z+3	; 0x03
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	ab 83       	std	Y+3, r26	; 0x03
    1818:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    181a:	60 e1       	ldi	r22, 0x10	; 16
    181c:	83 e0       	ldi	r24, 0x03	; 3
    181e:	0e 94 02 04 	call	0x804	; 0x804 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1822:	be 01       	movw	r22, r28
    1824:	6f 5f       	subi	r22, 0xFF	; 255
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	80 ea       	ldi	r24, 0xA0	; 160
    182a:	98 e0       	ldi	r25, 0x08	; 8
    182c:	52 db       	rcall	.-2396   	; 0xed2 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    182e:	6e e0       	ldi	r22, 0x0E	; 14
    1830:	74 e0       	ldi	r23, 0x04	; 4
    1832:	87 e2       	ldi	r24, 0x27	; 39
    1834:	94 e0       	ldi	r25, 0x04	; 4
    1836:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <fdevopen>

	stdio_serial_init(&USARTC0, &usart_options); //ASF function that initializes the UART peripheral
}
    183a:	27 96       	adiw	r28, 0x07	; 7
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	09 f4       	brne	.+2      	; 0x184c <sysclk_enable_peripheral_clock+0x6>
    184a:	5c c1       	rjmp	.+696    	; 0x1b04 <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    184c:	80 3c       	cpi	r24, 0xC0	; 192
    184e:	91 05       	cpc	r25, r1
    1850:	29 f4       	brne	.+10     	; 0x185c <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1852:	60 e1       	ldi	r22, 0x10	; 16
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    185a:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    185c:	80 34       	cpi	r24, 0x40	; 64
    185e:	24 e0       	ldi	r18, 0x04	; 4
    1860:	92 07       	cpc	r25, r18
    1862:	29 f4       	brne	.+10     	; 0x186e <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1864:	68 e0       	ldi	r22, 0x08	; 8
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    186c:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    186e:	81 15       	cp	r24, r1
    1870:	24 e0       	ldi	r18, 0x04	; 4
    1872:	92 07       	cpc	r25, r18
    1874:	29 f4       	brne	.+10     	; 0x1880 <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1876:	64 e0       	ldi	r22, 0x04	; 4
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    187e:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1880:	80 38       	cpi	r24, 0x80	; 128
    1882:	21 e0       	ldi	r18, 0x01	; 1
    1884:	92 07       	cpc	r25, r18
    1886:	29 f4       	brne	.+10     	; 0x1892 <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1888:	62 e0       	ldi	r22, 0x02	; 2
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1890:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1892:	81 15       	cp	r24, r1
    1894:	21 e0       	ldi	r18, 0x01	; 1
    1896:	92 07       	cpc	r25, r18
    1898:	29 f4       	brne	.+10     	; 0x18a4 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    18a2:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    18a4:	80 38       	cpi	r24, 0x80	; 128
    18a6:	23 e0       	ldi	r18, 0x03	; 3
    18a8:	92 07       	cpc	r25, r18
    18aa:	29 f4       	brne	.+10     	; 0x18b6 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    18ac:	61 e0       	ldi	r22, 0x01	; 1
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    18b4:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    18b6:	80 39       	cpi	r24, 0x90	; 144
    18b8:	23 e0       	ldi	r18, 0x03	; 3
    18ba:	92 07       	cpc	r25, r18
    18bc:	29 f4       	brne	.+10     	; 0x18c8 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    18be:	61 e0       	ldi	r22, 0x01	; 1
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    18c6:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    18c8:	81 15       	cp	r24, r1
    18ca:	22 e0       	ldi	r18, 0x02	; 2
    18cc:	92 07       	cpc	r25, r18
    18ce:	29 f4       	brne	.+10     	; 0x18da <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    18d0:	62 e0       	ldi	r22, 0x02	; 2
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    18d8:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    18da:	80 34       	cpi	r24, 0x40	; 64
    18dc:	22 e0       	ldi	r18, 0x02	; 2
    18de:	92 07       	cpc	r25, r18
    18e0:	29 f4       	brne	.+10     	; 0x18ec <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    18e2:	62 e0       	ldi	r22, 0x02	; 2
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    18ea:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    18ec:	81 15       	cp	r24, r1
    18ee:	23 e0       	ldi	r18, 0x03	; 3
    18f0:	92 07       	cpc	r25, r18
    18f2:	29 f4       	brne	.+10     	; 0x18fe <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    18f4:	64 e0       	ldi	r22, 0x04	; 4
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    18fc:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    18fe:	80 32       	cpi	r24, 0x20	; 32
    1900:	23 e0       	ldi	r18, 0x03	; 3
    1902:	92 07       	cpc	r25, r18
    1904:	29 f4       	brne	.+10     	; 0x1910 <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1906:	64 e0       	ldi	r22, 0x04	; 4
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    190e:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1910:	81 15       	cp	r24, r1
    1912:	28 e0       	ldi	r18, 0x08	; 8
    1914:	92 07       	cpc	r25, r18
    1916:	29 f4       	brne	.+10     	; 0x1922 <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	83 e0       	ldi	r24, 0x03	; 3
    191c:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1920:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1922:	81 15       	cp	r24, r1
    1924:	29 e0       	ldi	r18, 0x09	; 9
    1926:	92 07       	cpc	r25, r18
    1928:	29 f4       	brne	.+10     	; 0x1934 <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	84 e0       	ldi	r24, 0x04	; 4
    192e:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1932:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1934:	81 15       	cp	r24, r1
    1936:	2a e0       	ldi	r18, 0x0A	; 10
    1938:	92 07       	cpc	r25, r18
    193a:	29 f4       	brne	.+10     	; 0x1946 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    193c:	61 e0       	ldi	r22, 0x01	; 1
    193e:	85 e0       	ldi	r24, 0x05	; 5
    1940:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1944:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1946:	81 15       	cp	r24, r1
    1948:	2b e0       	ldi	r18, 0x0B	; 11
    194a:	92 07       	cpc	r25, r18
    194c:	29 f4       	brne	.+10     	; 0x1958 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    194e:	61 e0       	ldi	r22, 0x01	; 1
    1950:	86 e0       	ldi	r24, 0x06	; 6
    1952:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1956:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1958:	80 34       	cpi	r24, 0x40	; 64
    195a:	28 e0       	ldi	r18, 0x08	; 8
    195c:	92 07       	cpc	r25, r18
    195e:	29 f4       	brne	.+10     	; 0x196a <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1960:	62 e0       	ldi	r22, 0x02	; 2
    1962:	83 e0       	ldi	r24, 0x03	; 3
    1964:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1968:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    196a:	80 34       	cpi	r24, 0x40	; 64
    196c:	29 e0       	ldi	r18, 0x09	; 9
    196e:	92 07       	cpc	r25, r18
    1970:	29 f4       	brne	.+10     	; 0x197c <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1972:	62 e0       	ldi	r22, 0x02	; 2
    1974:	84 e0       	ldi	r24, 0x04	; 4
    1976:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    197a:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    197c:	80 34       	cpi	r24, 0x40	; 64
    197e:	2a e0       	ldi	r18, 0x0A	; 10
    1980:	92 07       	cpc	r25, r18
    1982:	29 f4       	brne	.+10     	; 0x198e <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1984:	62 e0       	ldi	r22, 0x02	; 2
    1986:	85 e0       	ldi	r24, 0x05	; 5
    1988:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    198c:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    198e:	80 34       	cpi	r24, 0x40	; 64
    1990:	2b e0       	ldi	r18, 0x0B	; 11
    1992:	92 07       	cpc	r25, r18
    1994:	29 f4       	brne	.+10     	; 0x19a0 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1996:	62 e0       	ldi	r22, 0x02	; 2
    1998:	86 e0       	ldi	r24, 0x06	; 6
    199a:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    199e:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    19a0:	80 39       	cpi	r24, 0x90	; 144
    19a2:	28 e0       	ldi	r18, 0x08	; 8
    19a4:	92 07       	cpc	r25, r18
    19a6:	29 f4       	brne	.+10     	; 0x19b2 <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    19a8:	64 e0       	ldi	r22, 0x04	; 4
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    19b0:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    19b2:	80 39       	cpi	r24, 0x90	; 144
    19b4:	29 e0       	ldi	r18, 0x09	; 9
    19b6:	92 07       	cpc	r25, r18
    19b8:	29 f4       	brne	.+10     	; 0x19c4 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    19ba:	64 e0       	ldi	r22, 0x04	; 4
    19bc:	84 e0       	ldi	r24, 0x04	; 4
    19be:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    19c2:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    19c4:	80 39       	cpi	r24, 0x90	; 144
    19c6:	2a e0       	ldi	r18, 0x0A	; 10
    19c8:	92 07       	cpc	r25, r18
    19ca:	29 f4       	brne	.+10     	; 0x19d6 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    19cc:	64 e0       	ldi	r22, 0x04	; 4
    19ce:	85 e0       	ldi	r24, 0x05	; 5
    19d0:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    19d4:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    19d6:	80 39       	cpi	r24, 0x90	; 144
    19d8:	2b e0       	ldi	r18, 0x0B	; 11
    19da:	92 07       	cpc	r25, r18
    19dc:	29 f4       	brne	.+10     	; 0x19e8 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    19de:	64 e0       	ldi	r22, 0x04	; 4
    19e0:	86 e0       	ldi	r24, 0x06	; 6
    19e2:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    19e6:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    19e8:	80 3c       	cpi	r24, 0xC0	; 192
    19ea:	28 e0       	ldi	r18, 0x08	; 8
    19ec:	92 07       	cpc	r25, r18
    19ee:	29 f4       	brne	.+10     	; 0x19fa <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    19f0:	68 e0       	ldi	r22, 0x08	; 8
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    19f8:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    19fa:	80 3c       	cpi	r24, 0xC0	; 192
    19fc:	29 e0       	ldi	r18, 0x09	; 9
    19fe:	92 07       	cpc	r25, r18
    1a00:	29 f4       	brne	.+10     	; 0x1a0c <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1a02:	68 e0       	ldi	r22, 0x08	; 8
    1a04:	84 e0       	ldi	r24, 0x04	; 4
    1a06:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1a0a:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1a0c:	80 3c       	cpi	r24, 0xC0	; 192
    1a0e:	2a e0       	ldi	r18, 0x0A	; 10
    1a10:	92 07       	cpc	r25, r18
    1a12:	29 f4       	brne	.+10     	; 0x1a1e <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1a14:	68 e0       	ldi	r22, 0x08	; 8
    1a16:	85 e0       	ldi	r24, 0x05	; 5
    1a18:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1a1c:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1a1e:	80 3c       	cpi	r24, 0xC0	; 192
    1a20:	2b e0       	ldi	r18, 0x0B	; 11
    1a22:	92 07       	cpc	r25, r18
    1a24:	29 f4       	brne	.+10     	; 0x1a30 <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1a26:	68 e0       	ldi	r22, 0x08	; 8
    1a28:	86 e0       	ldi	r24, 0x06	; 6
    1a2a:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1a2e:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1a30:	80 3a       	cpi	r24, 0xA0	; 160
    1a32:	28 e0       	ldi	r18, 0x08	; 8
    1a34:	92 07       	cpc	r25, r18
    1a36:	29 f4       	brne	.+10     	; 0x1a42 <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1a38:	60 e1       	ldi	r22, 0x10	; 16
    1a3a:	83 e0       	ldi	r24, 0x03	; 3
    1a3c:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1a40:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1a42:	80 3a       	cpi	r24, 0xA0	; 160
    1a44:	29 e0       	ldi	r18, 0x09	; 9
    1a46:	92 07       	cpc	r25, r18
    1a48:	29 f4       	brne	.+10     	; 0x1a54 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1a4a:	60 e1       	ldi	r22, 0x10	; 16
    1a4c:	84 e0       	ldi	r24, 0x04	; 4
    1a4e:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1a52:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1a54:	80 3a       	cpi	r24, 0xA0	; 160
    1a56:	2a e0       	ldi	r18, 0x0A	; 10
    1a58:	92 07       	cpc	r25, r18
    1a5a:	29 f4       	brne	.+10     	; 0x1a66 <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1a5c:	60 e1       	ldi	r22, 0x10	; 16
    1a5e:	85 e0       	ldi	r24, 0x05	; 5
    1a60:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1a64:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1a66:	80 3a       	cpi	r24, 0xA0	; 160
    1a68:	2b e0       	ldi	r18, 0x0B	; 11
    1a6a:	92 07       	cpc	r25, r18
    1a6c:	29 f4       	brne	.+10     	; 0x1a78 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1a6e:	60 e1       	ldi	r22, 0x10	; 16
    1a70:	86 e0       	ldi	r24, 0x06	; 6
    1a72:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1a76:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1a78:	80 3b       	cpi	r24, 0xB0	; 176
    1a7a:	28 e0       	ldi	r18, 0x08	; 8
    1a7c:	92 07       	cpc	r25, r18
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1a80:	60 e2       	ldi	r22, 0x20	; 32
    1a82:	83 e0       	ldi	r24, 0x03	; 3
    1a84:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1a88:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1a8a:	80 3b       	cpi	r24, 0xB0	; 176
    1a8c:	29 e0       	ldi	r18, 0x09	; 9
    1a8e:	92 07       	cpc	r25, r18
    1a90:	29 f4       	brne	.+10     	; 0x1a9c <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1a92:	60 e2       	ldi	r22, 0x20	; 32
    1a94:	84 e0       	ldi	r24, 0x04	; 4
    1a96:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1a9a:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1a9c:	80 3b       	cpi	r24, 0xB0	; 176
    1a9e:	2a e0       	ldi	r18, 0x0A	; 10
    1aa0:	92 07       	cpc	r25, r18
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1aa4:	60 e2       	ldi	r22, 0x20	; 32
    1aa6:	85 e0       	ldi	r24, 0x05	; 5
    1aa8:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1aac:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1aae:	80 3b       	cpi	r24, 0xB0	; 176
    1ab0:	2b e0       	ldi	r18, 0x0B	; 11
    1ab2:	92 07       	cpc	r25, r18
    1ab4:	29 f4       	brne	.+10     	; 0x1ac0 <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1ab6:	60 e2       	ldi	r22, 0x20	; 32
    1ab8:	86 e0       	ldi	r24, 0x06	; 6
    1aba:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1abe:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1ac0:	80 38       	cpi	r24, 0x80	; 128
    1ac2:	24 e0       	ldi	r18, 0x04	; 4
    1ac4:	92 07       	cpc	r25, r18
    1ac6:	29 f4       	brne	.+10     	; 0x1ad2 <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1ac8:	60 e4       	ldi	r22, 0x40	; 64
    1aca:	83 e0       	ldi	r24, 0x03	; 3
    1acc:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1ad0:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1ad2:	80 39       	cpi	r24, 0x90	; 144
    1ad4:	24 e0       	ldi	r18, 0x04	; 4
    1ad6:	92 07       	cpc	r25, r18
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1ada:	60 e4       	ldi	r22, 0x40	; 64
    1adc:	84 e0       	ldi	r24, 0x04	; 4
    1ade:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1ae2:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1ae4:	80 3a       	cpi	r24, 0xA0	; 160
    1ae6:	24 e0       	ldi	r18, 0x04	; 4
    1ae8:	92 07       	cpc	r25, r18
    1aea:	29 f4       	brne	.+10     	; 0x1af6 <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1aec:	60 e4       	ldi	r22, 0x40	; 64
    1aee:	85 e0       	ldi	r24, 0x05	; 5
    1af0:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1af4:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1af6:	80 3b       	cpi	r24, 0xB0	; 176
    1af8:	94 40       	sbci	r25, 0x04	; 4
    1afa:	21 f4       	brne	.+8      	; 0x1b04 <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1afc:	60 e4       	ldi	r22, 0x40	; 64
    1afe:	86 e0       	ldi	r24, 0x06	; 6
    1b00:	0c 94 02 04 	jmp	0x804	; 0x804 <sysclk_enable_module>
    1b04:	08 95       	ret

00001b06 <main>:
void flightStateZero(void);
void deployParachute(void);

/*******************************************************************************************/
									/* Main method */
int main (void){
    1b06:	8f 92       	push	r8
    1b08:	9f 92       	push	r9
    1b0a:	af 92       	push	r10
    1b0c:	bf 92       	push	r11
    1b0e:	cf 92       	push	r12
    1b10:	df 92       	push	r13
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
	sysclk_init(); //Initialize the system clock, 32MHz, this also turns off all peripheral clocks.
    1b16:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <sysclk_init>

	/* Peripheral clock initializations*/
	sysclk_enable_peripheral_clock(&USARTC0); //UART communications
    1b1a:	80 ea       	ldi	r24, 0xA0	; 160
    1b1c:	98 e0       	ldi	r25, 0x08	; 8
    1b1e:	93 de       	rcall	.-730    	; 0x1846 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&ADCA); //Analog to Digital Converter
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	92 e0       	ldi	r25, 0x02	; 2
    1b24:	90 de       	rcall	.-736    	; 0x1846 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCE0); //Timer Counter E
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	9a e0       	ldi	r25, 0x0A	; 10
    1b2a:	8d de       	rcall	.-742    	; 0x1846 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCD0); //Timer Counter D
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	99 e0       	ldi	r25, 0x09	; 9
    1b30:	8a de       	rcall	.-748    	; 0x1846 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCC0); //Timer Counter C
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	98 e0       	ldi	r25, 0x08	; 8
    1b36:	87 de       	rcall	.-754    	; 0x1846 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCF0); //Timer Counter F
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	9b e0       	ldi	r25, 0x0B	; 11
    1b3c:	84 de       	rcall	.-760    	; 0x1846 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&SPIC); //Serial Port Interface initialization.
    1b3e:	80 ec       	ldi	r24, 0xC0	; 192
    1b40:	98 e0       	ldi	r25, 0x08	; 8
    1b42:	81 de       	rcall	.-766    	; 0x1846 <sysclk_enable_peripheral_clock>

	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES); //Must have this line for every timer counter due to a flaw in the design of the chip.
    1b44:	64 e0       	ldi	r22, 0x04	; 4
    1b46:	85 e0       	ldi	r24, 0x05	; 5
    1b48:	0e 94 02 04 	call	0x804	; 0x804 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b4c:	64 e0       	ldi	r22, 0x04	; 4
    1b4e:	84 e0       	ldi	r24, 0x04	; 4
    1b50:	0e 94 02 04 	call	0x804	; 0x804 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1b54:	64 e0       	ldi	r22, 0x04	; 4
    1b56:	86 e0       	ldi	r24, 0x06	; 6
    1b58:	0e 94 02 04 	call	0x804	; 0x804 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C,PR_SPI_bm);
    1b5c:	68 e0       	ldi	r22, 0x08	; 8
    1b5e:	83 e0       	ldi	r24, 0x03	; 3
    1b60:	0e 94 02 04 	call	0x804	; 0x804 <sysclk_enable_module>
	
	/* Input/Output Initializations */
	UART_Comms_Init();
    1b64:	2a de       	rcall	.-940    	; 0x17ba <UART_Comms_Init>
	SPI_init();
    1b66:	d4 db       	rcall	.-2136   	; 0x1310 <SPI_init>
	TCD0_init();
    1b68:	03 de       	rcall	.-1018   	; 0x1770 <TCD0_init>
	TCF0_init();
    1b6a:	0e de       	rcall	.-996    	; 0x1788 <TCF0_init>
	ADC_init();
    1b6c:	13 db       	rcall	.-2522   	; 0x1194 <ADC_init>

	/* Variable Initializations */
	alt = 0;
    1b6e:	10 92 97 20 	sts	0x2097, r1
    1b72:	10 92 98 20 	sts	0x2098, r1
    1b76:	10 92 99 20 	sts	0x2099, r1
    1b7a:	10 92 9a 20 	sts	0x209A, r1
	t = 0;
    1b7e:	10 92 93 20 	sts	0x2093, r1
    1b82:	10 92 94 20 	sts	0x2094, r1
    1b86:	10 92 95 20 	sts	0x2095, r1
    1b8a:	10 92 96 20 	sts	0x2096, r1
	initAlt = 0;
    1b8e:	10 92 9b 20 	sts	0x209B, r1
    1b92:	10 92 9c 20 	sts	0x209C, r1
    1b96:	10 92 9d 20 	sts	0x209D, r1
    1b9a:	10 92 9e 20 	sts	0x209E, r1
	deployedParachute = 0;
    1b9e:	10 92 9f 20 	sts	0x209F, r1

	/* Turn on Board lights */
	PORTE.DIR = 0b11111111;
    1ba2:	e0 e8       	ldi	r30, 0x80	; 128
    1ba4:	f6 e0       	ldi	r31, 0x06	; 6
    1ba6:	8f ef       	ldi	r24, 0xFF	; 255
    1ba8:	80 83       	st	Z, r24
	PORTE.OUT = 0b00000000;
    1baa:	14 82       	std	Z+4, r1	; 0x04
    1bac:	8a ea       	ldi	r24, 0xAA	; 170
    1bae:	96 ee       	ldi	r25, 0xE6	; 230
    1bb0:	a6 e9       	ldi	r26, 0x96	; 150
    1bb2:	b1 e0       	ldi	r27, 0x01	; 1
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	a1 09       	sbc	r26, r1
    1bb8:	b1 09       	sbc	r27, r1
    1bba:	e1 f7       	brne	.-8      	; 0x1bb4 <main+0xae>
	
	/* Delay for 5 seconds, then get our initial altitude */
	delay_s(5);
	initAlt = getAltitude(getTemperature(),getPressure());
    1bbc:	b6 db       	rcall	.-2196   	; 0x132a <getPressure>
    1bbe:	4b 01       	movw	r8, r22
    1bc0:	5c 01       	movw	r10, r24
    1bc2:	68 dd       	rcall	.-1328   	; 0x1694 <getTemperature>
    1bc4:	6b 01       	movw	r12, r22
    1bc6:	7c 01       	movw	r14, r24
    1bc8:	c5 01       	movw	r24, r10
    1bca:	b4 01       	movw	r22, r8
    1bcc:	26 d1       	rcall	.+588    	; 0x1e1a <__floatsisf>
    1bce:	9b 01       	movw	r18, r22
    1bd0:	ac 01       	movw	r20, r24
    1bd2:	c7 01       	movw	r24, r14
    1bd4:	b6 01       	movw	r22, r12
    1bd6:	0e 94 76 02 	call	0x4ec	; 0x4ec <getAltitude>
    1bda:	60 93 9b 20 	sts	0x209B, r22
    1bde:	70 93 9c 20 	sts	0x209C, r23
    1be2:	80 93 9d 20 	sts	0x209D, r24
    1be6:	90 93 9e 20 	sts	0x209E, r25

	//If you want to read EEPROM, uncomment this!//
	readFull_eeprom();
    1bea:	0e 94 cf 02 	call	0x59e	; 0x59e <readFull_eeprom>
	flightStateZero(); //Main will cycle through flight states, each flight state completes when target altitude is reached.
	flightStateOne();
	flightStateTwo();
	flightStateThree(); //Flight State 3 has an infinite loop.
	*/
	test();
    1bee:	0e 94 a0 03 	call	0x740	; 0x740 <test>
}
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	df 90       	pop	r13
    1bfc:	cf 90       	pop	r12
    1bfe:	bf 90       	pop	r11
    1c00:	af 90       	pop	r10
    1c02:	9f 90       	pop	r9
    1c04:	8f 90       	pop	r8
    1c06:	08 95       	ret

00001c08 <__subsf3>:
    1c08:	50 58       	subi	r21, 0x80	; 128

00001c0a <__addsf3>:
    1c0a:	bb 27       	eor	r27, r27
    1c0c:	aa 27       	eor	r26, r26
    1c0e:	0e d0       	rcall	.+28     	; 0x1c2c <__addsf3x>
    1c10:	a4 c1       	rjmp	.+840    	; 0x1f5a <__fp_round>
    1c12:	95 d1       	rcall	.+810    	; 0x1f3e <__fp_pscA>
    1c14:	30 f0       	brcs	.+12     	; 0x1c22 <__addsf3+0x18>
    1c16:	9a d1       	rcall	.+820    	; 0x1f4c <__fp_pscB>
    1c18:	20 f0       	brcs	.+8      	; 0x1c22 <__addsf3+0x18>
    1c1a:	31 f4       	brne	.+12     	; 0x1c28 <__addsf3+0x1e>
    1c1c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c1e:	11 f4       	brne	.+4      	; 0x1c24 <__addsf3+0x1a>
    1c20:	1e f4       	brtc	.+6      	; 0x1c28 <__addsf3+0x1e>
    1c22:	7a c1       	rjmp	.+756    	; 0x1f18 <__fp_nan>
    1c24:	0e f4       	brtc	.+2      	; 0x1c28 <__addsf3+0x1e>
    1c26:	e0 95       	com	r30
    1c28:	e7 fb       	bst	r30, 7
    1c2a:	70 c1       	rjmp	.+736    	; 0x1f0c <__fp_inf>

00001c2c <__addsf3x>:
    1c2c:	e9 2f       	mov	r30, r25
    1c2e:	a6 d1       	rcall	.+844    	; 0x1f7c <__fp_split3>
    1c30:	80 f3       	brcs	.-32     	; 0x1c12 <__addsf3+0x8>
    1c32:	ba 17       	cp	r27, r26
    1c34:	62 07       	cpc	r22, r18
    1c36:	73 07       	cpc	r23, r19
    1c38:	84 07       	cpc	r24, r20
    1c3a:	95 07       	cpc	r25, r21
    1c3c:	18 f0       	brcs	.+6      	; 0x1c44 <__addsf3x+0x18>
    1c3e:	71 f4       	brne	.+28     	; 0x1c5c <__addsf3x+0x30>
    1c40:	9e f5       	brtc	.+102    	; 0x1ca8 <__addsf3x+0x7c>
    1c42:	be c1       	rjmp	.+892    	; 0x1fc0 <__fp_zero>
    1c44:	0e f4       	brtc	.+2      	; 0x1c48 <__addsf3x+0x1c>
    1c46:	e0 95       	com	r30
    1c48:	0b 2e       	mov	r0, r27
    1c4a:	ba 2f       	mov	r27, r26
    1c4c:	a0 2d       	mov	r26, r0
    1c4e:	0b 01       	movw	r0, r22
    1c50:	b9 01       	movw	r22, r18
    1c52:	90 01       	movw	r18, r0
    1c54:	0c 01       	movw	r0, r24
    1c56:	ca 01       	movw	r24, r20
    1c58:	a0 01       	movw	r20, r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	ff 27       	eor	r31, r31
    1c5e:	59 1b       	sub	r21, r25
    1c60:	99 f0       	breq	.+38     	; 0x1c88 <__addsf3x+0x5c>
    1c62:	59 3f       	cpi	r21, 0xF9	; 249
    1c64:	50 f4       	brcc	.+20     	; 0x1c7a <__addsf3x+0x4e>
    1c66:	50 3e       	cpi	r21, 0xE0	; 224
    1c68:	68 f1       	brcs	.+90     	; 0x1cc4 <__addsf3x+0x98>
    1c6a:	1a 16       	cp	r1, r26
    1c6c:	f0 40       	sbci	r31, 0x00	; 0
    1c6e:	a2 2f       	mov	r26, r18
    1c70:	23 2f       	mov	r18, r19
    1c72:	34 2f       	mov	r19, r20
    1c74:	44 27       	eor	r20, r20
    1c76:	58 5f       	subi	r21, 0xF8	; 248
    1c78:	f3 cf       	rjmp	.-26     	; 0x1c60 <__addsf3x+0x34>
    1c7a:	46 95       	lsr	r20
    1c7c:	37 95       	ror	r19
    1c7e:	27 95       	ror	r18
    1c80:	a7 95       	ror	r26
    1c82:	f0 40       	sbci	r31, 0x00	; 0
    1c84:	53 95       	inc	r21
    1c86:	c9 f7       	brne	.-14     	; 0x1c7a <__addsf3x+0x4e>
    1c88:	7e f4       	brtc	.+30     	; 0x1ca8 <__addsf3x+0x7c>
    1c8a:	1f 16       	cp	r1, r31
    1c8c:	ba 0b       	sbc	r27, r26
    1c8e:	62 0b       	sbc	r22, r18
    1c90:	73 0b       	sbc	r23, r19
    1c92:	84 0b       	sbc	r24, r20
    1c94:	ba f0       	brmi	.+46     	; 0x1cc4 <__addsf3x+0x98>
    1c96:	91 50       	subi	r25, 0x01	; 1
    1c98:	a1 f0       	breq	.+40     	; 0x1cc2 <__addsf3x+0x96>
    1c9a:	ff 0f       	add	r31, r31
    1c9c:	bb 1f       	adc	r27, r27
    1c9e:	66 1f       	adc	r22, r22
    1ca0:	77 1f       	adc	r23, r23
    1ca2:	88 1f       	adc	r24, r24
    1ca4:	c2 f7       	brpl	.-16     	; 0x1c96 <__addsf3x+0x6a>
    1ca6:	0e c0       	rjmp	.+28     	; 0x1cc4 <__addsf3x+0x98>
    1ca8:	ba 0f       	add	r27, r26
    1caa:	62 1f       	adc	r22, r18
    1cac:	73 1f       	adc	r23, r19
    1cae:	84 1f       	adc	r24, r20
    1cb0:	48 f4       	brcc	.+18     	; 0x1cc4 <__addsf3x+0x98>
    1cb2:	87 95       	ror	r24
    1cb4:	77 95       	ror	r23
    1cb6:	67 95       	ror	r22
    1cb8:	b7 95       	ror	r27
    1cba:	f7 95       	ror	r31
    1cbc:	9e 3f       	cpi	r25, 0xFE	; 254
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <__addsf3x+0x96>
    1cc0:	b3 cf       	rjmp	.-154    	; 0x1c28 <__addsf3+0x1e>
    1cc2:	93 95       	inc	r25
    1cc4:	88 0f       	add	r24, r24
    1cc6:	08 f0       	brcs	.+2      	; 0x1cca <__addsf3x+0x9e>
    1cc8:	99 27       	eor	r25, r25
    1cca:	ee 0f       	add	r30, r30
    1ccc:	97 95       	ror	r25
    1cce:	87 95       	ror	r24
    1cd0:	08 95       	ret

00001cd2 <__divsf3>:
    1cd2:	0c d0       	rcall	.+24     	; 0x1cec <__divsf3x>
    1cd4:	42 c1       	rjmp	.+644    	; 0x1f5a <__fp_round>
    1cd6:	3a d1       	rcall	.+628    	; 0x1f4c <__fp_pscB>
    1cd8:	40 f0       	brcs	.+16     	; 0x1cea <__divsf3+0x18>
    1cda:	31 d1       	rcall	.+610    	; 0x1f3e <__fp_pscA>
    1cdc:	30 f0       	brcs	.+12     	; 0x1cea <__divsf3+0x18>
    1cde:	21 f4       	brne	.+8      	; 0x1ce8 <__divsf3+0x16>
    1ce0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce2:	19 f0       	breq	.+6      	; 0x1cea <__divsf3+0x18>
    1ce4:	13 c1       	rjmp	.+550    	; 0x1f0c <__fp_inf>
    1ce6:	51 11       	cpse	r21, r1
    1ce8:	6c c1       	rjmp	.+728    	; 0x1fc2 <__fp_szero>
    1cea:	16 c1       	rjmp	.+556    	; 0x1f18 <__fp_nan>

00001cec <__divsf3x>:
    1cec:	47 d1       	rcall	.+654    	; 0x1f7c <__fp_split3>
    1cee:	98 f3       	brcs	.-26     	; 0x1cd6 <__divsf3+0x4>

00001cf0 <__divsf3_pse>:
    1cf0:	99 23       	and	r25, r25
    1cf2:	c9 f3       	breq	.-14     	; 0x1ce6 <__divsf3+0x14>
    1cf4:	55 23       	and	r21, r21
    1cf6:	b1 f3       	breq	.-20     	; 0x1ce4 <__divsf3+0x12>
    1cf8:	95 1b       	sub	r25, r21
    1cfa:	55 0b       	sbc	r21, r21
    1cfc:	bb 27       	eor	r27, r27
    1cfe:	aa 27       	eor	r26, r26
    1d00:	62 17       	cp	r22, r18
    1d02:	73 07       	cpc	r23, r19
    1d04:	84 07       	cpc	r24, r20
    1d06:	38 f0       	brcs	.+14     	; 0x1d16 <__divsf3_pse+0x26>
    1d08:	9f 5f       	subi	r25, 0xFF	; 255
    1d0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d0c:	22 0f       	add	r18, r18
    1d0e:	33 1f       	adc	r19, r19
    1d10:	44 1f       	adc	r20, r20
    1d12:	aa 1f       	adc	r26, r26
    1d14:	a9 f3       	breq	.-22     	; 0x1d00 <__divsf3_pse+0x10>
    1d16:	33 d0       	rcall	.+102    	; 0x1d7e <__divsf3_pse+0x8e>
    1d18:	0e 2e       	mov	r0, r30
    1d1a:	3a f0       	brmi	.+14     	; 0x1d2a <__divsf3_pse+0x3a>
    1d1c:	e0 e8       	ldi	r30, 0x80	; 128
    1d1e:	30 d0       	rcall	.+96     	; 0x1d80 <__divsf3_pse+0x90>
    1d20:	91 50       	subi	r25, 0x01	; 1
    1d22:	50 40       	sbci	r21, 0x00	; 0
    1d24:	e6 95       	lsr	r30
    1d26:	00 1c       	adc	r0, r0
    1d28:	ca f7       	brpl	.-14     	; 0x1d1c <__divsf3_pse+0x2c>
    1d2a:	29 d0       	rcall	.+82     	; 0x1d7e <__divsf3_pse+0x8e>
    1d2c:	fe 2f       	mov	r31, r30
    1d2e:	27 d0       	rcall	.+78     	; 0x1d7e <__divsf3_pse+0x8e>
    1d30:	66 0f       	add	r22, r22
    1d32:	77 1f       	adc	r23, r23
    1d34:	88 1f       	adc	r24, r24
    1d36:	bb 1f       	adc	r27, r27
    1d38:	26 17       	cp	r18, r22
    1d3a:	37 07       	cpc	r19, r23
    1d3c:	48 07       	cpc	r20, r24
    1d3e:	ab 07       	cpc	r26, r27
    1d40:	b0 e8       	ldi	r27, 0x80	; 128
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <__divsf3_pse+0x56>
    1d44:	bb 0b       	sbc	r27, r27
    1d46:	80 2d       	mov	r24, r0
    1d48:	bf 01       	movw	r22, r30
    1d4a:	ff 27       	eor	r31, r31
    1d4c:	93 58       	subi	r25, 0x83	; 131
    1d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d50:	2a f0       	brmi	.+10     	; 0x1d5c <__divsf3_pse+0x6c>
    1d52:	9e 3f       	cpi	r25, 0xFE	; 254
    1d54:	51 05       	cpc	r21, r1
    1d56:	68 f0       	brcs	.+26     	; 0x1d72 <__divsf3_pse+0x82>
    1d58:	d9 c0       	rjmp	.+434    	; 0x1f0c <__fp_inf>
    1d5a:	33 c1       	rjmp	.+614    	; 0x1fc2 <__fp_szero>
    1d5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d5e:	ec f3       	brlt	.-6      	; 0x1d5a <__divsf3_pse+0x6a>
    1d60:	98 3e       	cpi	r25, 0xE8	; 232
    1d62:	dc f3       	brlt	.-10     	; 0x1d5a <__divsf3_pse+0x6a>
    1d64:	86 95       	lsr	r24
    1d66:	77 95       	ror	r23
    1d68:	67 95       	ror	r22
    1d6a:	b7 95       	ror	r27
    1d6c:	f7 95       	ror	r31
    1d6e:	9f 5f       	subi	r25, 0xFF	; 255
    1d70:	c9 f7       	brne	.-14     	; 0x1d64 <__divsf3_pse+0x74>
    1d72:	88 0f       	add	r24, r24
    1d74:	91 1d       	adc	r25, r1
    1d76:	96 95       	lsr	r25
    1d78:	87 95       	ror	r24
    1d7a:	97 f9       	bld	r25, 7
    1d7c:	08 95       	ret
    1d7e:	e1 e0       	ldi	r30, 0x01	; 1
    1d80:	66 0f       	add	r22, r22
    1d82:	77 1f       	adc	r23, r23
    1d84:	88 1f       	adc	r24, r24
    1d86:	bb 1f       	adc	r27, r27
    1d88:	62 17       	cp	r22, r18
    1d8a:	73 07       	cpc	r23, r19
    1d8c:	84 07       	cpc	r24, r20
    1d8e:	ba 07       	cpc	r27, r26
    1d90:	20 f0       	brcs	.+8      	; 0x1d9a <__divsf3_pse+0xaa>
    1d92:	62 1b       	sub	r22, r18
    1d94:	73 0b       	sbc	r23, r19
    1d96:	84 0b       	sbc	r24, r20
    1d98:	ba 0b       	sbc	r27, r26
    1d9a:	ee 1f       	adc	r30, r30
    1d9c:	88 f7       	brcc	.-30     	; 0x1d80 <__divsf3_pse+0x90>
    1d9e:	e0 95       	com	r30
    1da0:	08 95       	ret

00001da2 <__fixsfdi>:
    1da2:	be e3       	ldi	r27, 0x3E	; 62
    1da4:	04 d0       	rcall	.+8      	; 0x1dae <__fixunssfdi+0x2>
    1da6:	08 f4       	brcc	.+2      	; 0x1daa <__fixsfdi+0x8>
    1da8:	90 e8       	ldi	r25, 0x80	; 128
    1daa:	08 95       	ret

00001dac <__fixunssfdi>:
    1dac:	bf e3       	ldi	r27, 0x3F	; 63
    1dae:	22 27       	eor	r18, r18
    1db0:	33 27       	eor	r19, r19
    1db2:	a9 01       	movw	r20, r18
    1db4:	eb d0       	rcall	.+470    	; 0x1f8c <__fp_splitA>
    1db6:	58 f1       	brcs	.+86     	; 0x1e0e <__fixunssfdi+0x62>
    1db8:	9f 57       	subi	r25, 0x7F	; 127
    1dba:	40 f1       	brcs	.+80     	; 0x1e0c <__fixunssfdi+0x60>
    1dbc:	b9 17       	cp	r27, r25
    1dbe:	38 f1       	brcs	.+78     	; 0x1e0e <__fixunssfdi+0x62>
    1dc0:	bf e3       	ldi	r27, 0x3F	; 63
    1dc2:	b9 1b       	sub	r27, r25
    1dc4:	99 27       	eor	r25, r25
    1dc6:	b8 50       	subi	r27, 0x08	; 8
    1dc8:	3a f4       	brpl	.+14     	; 0x1dd8 <__fixunssfdi+0x2c>
    1dca:	66 0f       	add	r22, r22
    1dcc:	77 1f       	adc	r23, r23
    1dce:	88 1f       	adc	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	b3 95       	inc	r27
    1dd4:	d2 f3       	brmi	.-12     	; 0x1dca <__fixunssfdi+0x1e>
    1dd6:	16 c0       	rjmp	.+44     	; 0x1e04 <__fixunssfdi+0x58>
    1dd8:	b8 50       	subi	r27, 0x08	; 8
    1dda:	4a f0       	brmi	.+18     	; 0x1dee <__fixunssfdi+0x42>
    1ddc:	23 2f       	mov	r18, r19
    1dde:	34 2f       	mov	r19, r20
    1de0:	45 2f       	mov	r20, r21
    1de2:	56 2f       	mov	r21, r22
    1de4:	67 2f       	mov	r22, r23
    1de6:	78 2f       	mov	r23, r24
    1de8:	88 27       	eor	r24, r24
    1dea:	b8 50       	subi	r27, 0x08	; 8
    1dec:	ba f7       	brpl	.-18     	; 0x1ddc <__fixunssfdi+0x30>
    1dee:	b8 5f       	subi	r27, 0xF8	; 248
    1df0:	49 f0       	breq	.+18     	; 0x1e04 <__fixunssfdi+0x58>
    1df2:	86 95       	lsr	r24
    1df4:	77 95       	ror	r23
    1df6:	67 95       	ror	r22
    1df8:	57 95       	ror	r21
    1dfa:	47 95       	ror	r20
    1dfc:	37 95       	ror	r19
    1dfe:	27 95       	ror	r18
    1e00:	ba 95       	dec	r27
    1e02:	b9 f7       	brne	.-18     	; 0x1df2 <__fixunssfdi+0x46>
    1e04:	0e f4       	brtc	.+2      	; 0x1e08 <__fixunssfdi+0x5c>
    1e06:	8b d0       	rcall	.+278    	; 0x1f1e <__fp_negdi>
    1e08:	88 94       	clc
    1e0a:	08 95       	ret
    1e0c:	88 94       	clc
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	cb 01       	movw	r24, r22
    1e14:	08 95       	ret

00001e16 <__floatunsisf>:
    1e16:	e8 94       	clt
    1e18:	09 c0       	rjmp	.+18     	; 0x1e2c <__floatsisf+0x12>

00001e1a <__floatsisf>:
    1e1a:	97 fb       	bst	r25, 7
    1e1c:	3e f4       	brtc	.+14     	; 0x1e2c <__floatsisf+0x12>
    1e1e:	90 95       	com	r25
    1e20:	80 95       	com	r24
    1e22:	70 95       	com	r23
    1e24:	61 95       	neg	r22
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2c:	99 23       	and	r25, r25
    1e2e:	a9 f0       	breq	.+42     	; 0x1e5a <__floatsisf+0x40>
    1e30:	f9 2f       	mov	r31, r25
    1e32:	96 e9       	ldi	r25, 0x96	; 150
    1e34:	bb 27       	eor	r27, r27
    1e36:	93 95       	inc	r25
    1e38:	f6 95       	lsr	r31
    1e3a:	87 95       	ror	r24
    1e3c:	77 95       	ror	r23
    1e3e:	67 95       	ror	r22
    1e40:	b7 95       	ror	r27
    1e42:	f1 11       	cpse	r31, r1
    1e44:	f8 cf       	rjmp	.-16     	; 0x1e36 <__floatsisf+0x1c>
    1e46:	fa f4       	brpl	.+62     	; 0x1e86 <__floatsisf+0x6c>
    1e48:	bb 0f       	add	r27, r27
    1e4a:	11 f4       	brne	.+4      	; 0x1e50 <__floatsisf+0x36>
    1e4c:	60 ff       	sbrs	r22, 0
    1e4e:	1b c0       	rjmp	.+54     	; 0x1e86 <__floatsisf+0x6c>
    1e50:	6f 5f       	subi	r22, 0xFF	; 255
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255
    1e54:	8f 4f       	sbci	r24, 0xFF	; 255
    1e56:	9f 4f       	sbci	r25, 0xFF	; 255
    1e58:	16 c0       	rjmp	.+44     	; 0x1e86 <__floatsisf+0x6c>
    1e5a:	88 23       	and	r24, r24
    1e5c:	11 f0       	breq	.+4      	; 0x1e62 <__floatsisf+0x48>
    1e5e:	96 e9       	ldi	r25, 0x96	; 150
    1e60:	11 c0       	rjmp	.+34     	; 0x1e84 <__floatsisf+0x6a>
    1e62:	77 23       	and	r23, r23
    1e64:	21 f0       	breq	.+8      	; 0x1e6e <__floatsisf+0x54>
    1e66:	9e e8       	ldi	r25, 0x8E	; 142
    1e68:	87 2f       	mov	r24, r23
    1e6a:	76 2f       	mov	r23, r22
    1e6c:	05 c0       	rjmp	.+10     	; 0x1e78 <__floatsisf+0x5e>
    1e6e:	66 23       	and	r22, r22
    1e70:	71 f0       	breq	.+28     	; 0x1e8e <__floatsisf+0x74>
    1e72:	96 e8       	ldi	r25, 0x86	; 134
    1e74:	86 2f       	mov	r24, r22
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	60 e0       	ldi	r22, 0x00	; 0
    1e7a:	2a f0       	brmi	.+10     	; 0x1e86 <__floatsisf+0x6c>
    1e7c:	9a 95       	dec	r25
    1e7e:	66 0f       	add	r22, r22
    1e80:	77 1f       	adc	r23, r23
    1e82:	88 1f       	adc	r24, r24
    1e84:	da f7       	brpl	.-10     	; 0x1e7c <__floatsisf+0x62>
    1e86:	88 0f       	add	r24, r24
    1e88:	96 95       	lsr	r25
    1e8a:	87 95       	ror	r24
    1e8c:	97 f9       	bld	r25, 7
    1e8e:	08 95       	ret

00001e90 <__floatundisf>:
    1e90:	e8 94       	clt

00001e92 <__fp_di2sf>:
    1e92:	f9 2f       	mov	r31, r25
    1e94:	96 eb       	ldi	r25, 0xB6	; 182
    1e96:	ff 23       	and	r31, r31
    1e98:	81 f0       	breq	.+32     	; 0x1eba <__fp_di2sf+0x28>
    1e9a:	12 16       	cp	r1, r18
    1e9c:	13 06       	cpc	r1, r19
    1e9e:	14 06       	cpc	r1, r20
    1ea0:	44 0b       	sbc	r20, r20
    1ea2:	93 95       	inc	r25
    1ea4:	f6 95       	lsr	r31
    1ea6:	87 95       	ror	r24
    1ea8:	77 95       	ror	r23
    1eaa:	67 95       	ror	r22
    1eac:	57 95       	ror	r21
    1eae:	40 40       	sbci	r20, 0x00	; 0
    1eb0:	ff 23       	and	r31, r31
    1eb2:	b9 f7       	brne	.-18     	; 0x1ea2 <__fp_di2sf+0x10>
    1eb4:	1b c0       	rjmp	.+54     	; 0x1eec <__fp_di2sf+0x5a>
    1eb6:	99 27       	eor	r25, r25
    1eb8:	08 95       	ret
    1eba:	88 23       	and	r24, r24
    1ebc:	51 f4       	brne	.+20     	; 0x1ed2 <__fp_di2sf+0x40>
    1ebe:	98 50       	subi	r25, 0x08	; 8
    1ec0:	d2 f7       	brpl	.-12     	; 0x1eb6 <__fp_di2sf+0x24>
    1ec2:	87 2b       	or	r24, r23
    1ec4:	76 2f       	mov	r23, r22
    1ec6:	65 2f       	mov	r22, r21
    1ec8:	54 2f       	mov	r21, r20
    1eca:	43 2f       	mov	r20, r19
    1ecc:	32 2f       	mov	r19, r18
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	b1 f3       	breq	.-20     	; 0x1ebe <__fp_di2sf+0x2c>
    1ed2:	12 16       	cp	r1, r18
    1ed4:	13 06       	cpc	r1, r19
    1ed6:	14 06       	cpc	r1, r20
    1ed8:	44 0b       	sbc	r20, r20
    1eda:	88 23       	and	r24, r24
    1edc:	3a f0       	brmi	.+14     	; 0x1eec <__fp_di2sf+0x5a>
    1ede:	9a 95       	dec	r25
    1ee0:	44 0f       	add	r20, r20
    1ee2:	55 1f       	adc	r21, r21
    1ee4:	66 1f       	adc	r22, r22
    1ee6:	77 1f       	adc	r23, r23
    1ee8:	88 1f       	adc	r24, r24
    1eea:	ca f7       	brpl	.-14     	; 0x1ede <__fp_di2sf+0x4c>
    1eec:	55 23       	and	r21, r21
    1eee:	4a f4       	brpl	.+18     	; 0x1f02 <__fp_di2sf+0x70>
    1ef0:	44 0f       	add	r20, r20
    1ef2:	55 1f       	adc	r21, r21
    1ef4:	11 f4       	brne	.+4      	; 0x1efa <__fp_di2sf+0x68>
    1ef6:	60 ff       	sbrs	r22, 0
    1ef8:	04 c0       	rjmp	.+8      	; 0x1f02 <__fp_di2sf+0x70>
    1efa:	6f 5f       	subi	r22, 0xFF	; 255
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	8f 4f       	sbci	r24, 0xFF	; 255
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	88 0f       	add	r24, r24
    1f04:	96 95       	lsr	r25
    1f06:	87 95       	ror	r24
    1f08:	97 f9       	bld	r25, 7
    1f0a:	08 95       	ret

00001f0c <__fp_inf>:
    1f0c:	97 f9       	bld	r25, 7
    1f0e:	9f 67       	ori	r25, 0x7F	; 127
    1f10:	80 e8       	ldi	r24, 0x80	; 128
    1f12:	70 e0       	ldi	r23, 0x00	; 0
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	08 95       	ret

00001f18 <__fp_nan>:
    1f18:	9f ef       	ldi	r25, 0xFF	; 255
    1f1a:	80 ec       	ldi	r24, 0xC0	; 192
    1f1c:	08 95       	ret

00001f1e <__fp_negdi>:
    1f1e:	90 95       	com	r25
    1f20:	80 95       	com	r24
    1f22:	70 95       	com	r23
    1f24:	60 95       	com	r22
    1f26:	50 95       	com	r21
    1f28:	40 95       	com	r20
    1f2a:	30 95       	com	r19
    1f2c:	21 95       	neg	r18
    1f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f30:	4f 4f       	sbci	r20, 0xFF	; 255
    1f32:	5f 4f       	sbci	r21, 0xFF	; 255
    1f34:	6f 4f       	sbci	r22, 0xFF	; 255
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3c:	08 95       	ret

00001f3e <__fp_pscA>:
    1f3e:	00 24       	eor	r0, r0
    1f40:	0a 94       	dec	r0
    1f42:	16 16       	cp	r1, r22
    1f44:	17 06       	cpc	r1, r23
    1f46:	18 06       	cpc	r1, r24
    1f48:	09 06       	cpc	r0, r25
    1f4a:	08 95       	ret

00001f4c <__fp_pscB>:
    1f4c:	00 24       	eor	r0, r0
    1f4e:	0a 94       	dec	r0
    1f50:	12 16       	cp	r1, r18
    1f52:	13 06       	cpc	r1, r19
    1f54:	14 06       	cpc	r1, r20
    1f56:	05 06       	cpc	r0, r21
    1f58:	08 95       	ret

00001f5a <__fp_round>:
    1f5a:	09 2e       	mov	r0, r25
    1f5c:	03 94       	inc	r0
    1f5e:	00 0c       	add	r0, r0
    1f60:	11 f4       	brne	.+4      	; 0x1f66 <__fp_round+0xc>
    1f62:	88 23       	and	r24, r24
    1f64:	52 f0       	brmi	.+20     	; 0x1f7a <__fp_round+0x20>
    1f66:	bb 0f       	add	r27, r27
    1f68:	40 f4       	brcc	.+16     	; 0x1f7a <__fp_round+0x20>
    1f6a:	bf 2b       	or	r27, r31
    1f6c:	11 f4       	brne	.+4      	; 0x1f72 <__fp_round+0x18>
    1f6e:	60 ff       	sbrs	r22, 0
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <__fp_round+0x20>
    1f72:	6f 5f       	subi	r22, 0xFF	; 255
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255
    1f76:	8f 4f       	sbci	r24, 0xFF	; 255
    1f78:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7a:	08 95       	ret

00001f7c <__fp_split3>:
    1f7c:	57 fd       	sbrc	r21, 7
    1f7e:	90 58       	subi	r25, 0x80	; 128
    1f80:	44 0f       	add	r20, r20
    1f82:	55 1f       	adc	r21, r21
    1f84:	59 f0       	breq	.+22     	; 0x1f9c <__fp_splitA+0x10>
    1f86:	5f 3f       	cpi	r21, 0xFF	; 255
    1f88:	71 f0       	breq	.+28     	; 0x1fa6 <__fp_splitA+0x1a>
    1f8a:	47 95       	ror	r20

00001f8c <__fp_splitA>:
    1f8c:	88 0f       	add	r24, r24
    1f8e:	97 fb       	bst	r25, 7
    1f90:	99 1f       	adc	r25, r25
    1f92:	61 f0       	breq	.+24     	; 0x1fac <__fp_splitA+0x20>
    1f94:	9f 3f       	cpi	r25, 0xFF	; 255
    1f96:	79 f0       	breq	.+30     	; 0x1fb6 <__fp_splitA+0x2a>
    1f98:	87 95       	ror	r24
    1f9a:	08 95       	ret
    1f9c:	12 16       	cp	r1, r18
    1f9e:	13 06       	cpc	r1, r19
    1fa0:	14 06       	cpc	r1, r20
    1fa2:	55 1f       	adc	r21, r21
    1fa4:	f2 cf       	rjmp	.-28     	; 0x1f8a <__fp_split3+0xe>
    1fa6:	46 95       	lsr	r20
    1fa8:	f1 df       	rcall	.-30     	; 0x1f8c <__fp_splitA>
    1faa:	08 c0       	rjmp	.+16     	; 0x1fbc <__fp_splitA+0x30>
    1fac:	16 16       	cp	r1, r22
    1fae:	17 06       	cpc	r1, r23
    1fb0:	18 06       	cpc	r1, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	f1 cf       	rjmp	.-30     	; 0x1f98 <__fp_splitA+0xc>
    1fb6:	86 95       	lsr	r24
    1fb8:	71 05       	cpc	r23, r1
    1fba:	61 05       	cpc	r22, r1
    1fbc:	08 94       	sec
    1fbe:	08 95       	ret

00001fc0 <__fp_zero>:
    1fc0:	e8 94       	clt

00001fc2 <__fp_szero>:
    1fc2:	bb 27       	eor	r27, r27
    1fc4:	66 27       	eor	r22, r22
    1fc6:	77 27       	eor	r23, r23
    1fc8:	cb 01       	movw	r24, r22
    1fca:	97 f9       	bld	r25, 7
    1fcc:	08 95       	ret
    1fce:	0e f0       	brts	.+2      	; 0x1fd2 <__fp_szero+0x10>
    1fd0:	a6 c0       	rjmp	.+332    	; 0x211e <__fp_mpack>
    1fd2:	a2 cf       	rjmp	.-188    	; 0x1f18 <__fp_nan>
    1fd4:	68 94       	set
    1fd6:	9a cf       	rjmp	.-204    	; 0x1f0c <__fp_inf>

00001fd8 <log>:
    1fd8:	d9 df       	rcall	.-78     	; 0x1f8c <__fp_splitA>
    1fda:	c8 f3       	brcs	.-14     	; 0x1fce <__fp_szero+0xc>
    1fdc:	99 23       	and	r25, r25
    1fde:	d1 f3       	breq	.-12     	; 0x1fd4 <__fp_szero+0x12>
    1fe0:	c6 f3       	brts	.-16     	; 0x1fd2 <__fp_szero+0x10>
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	1f 93       	push	r17
    1fe8:	0f 93       	push	r16
    1fea:	ff 92       	push	r15
    1fec:	c9 2f       	mov	r28, r25
    1fee:	dd 27       	eor	r29, r29
    1ff0:	88 23       	and	r24, r24
    1ff2:	2a f0       	brmi	.+10     	; 0x1ffe <log+0x26>
    1ff4:	21 97       	sbiw	r28, 0x01	; 1
    1ff6:	66 0f       	add	r22, r22
    1ff8:	77 1f       	adc	r23, r23
    1ffa:	88 1f       	adc	r24, r24
    1ffc:	da f7       	brpl	.-10     	; 0x1ff4 <log+0x1c>
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e8       	ldi	r20, 0x80	; 128
    2004:	5f eb       	ldi	r21, 0xBF	; 191
    2006:	9f e3       	ldi	r25, 0x3F	; 63
    2008:	88 39       	cpi	r24, 0x98	; 152
    200a:	20 f0       	brcs	.+8      	; 0x2014 <log+0x3c>
    200c:	80 3e       	cpi	r24, 0xE0	; 224
    200e:	30 f0       	brcs	.+12     	; 0x201c <log+0x44>
    2010:	21 96       	adiw	r28, 0x01	; 1
    2012:	8f 77       	andi	r24, 0x7F	; 127
    2014:	fa dd       	rcall	.-1036   	; 0x1c0a <__addsf3>
    2016:	e4 ef       	ldi	r30, 0xF4	; 244
    2018:	f1 e0       	ldi	r31, 0x01	; 1
    201a:	03 c0       	rjmp	.+6      	; 0x2022 <log+0x4a>
    201c:	f6 dd       	rcall	.-1044   	; 0x1c0a <__addsf3>
    201e:	e1 e2       	ldi	r30, 0x21	; 33
    2020:	f2 e0       	ldi	r31, 0x02	; 2
    2022:	8b d0       	rcall	.+278    	; 0x213a <__fp_powser>
    2024:	8b 01       	movw	r16, r22
    2026:	be 01       	movw	r22, r28
    2028:	ec 01       	movw	r28, r24
    202a:	fb 2e       	mov	r15, r27
    202c:	6f 57       	subi	r22, 0x7F	; 127
    202e:	71 09       	sbc	r23, r1
    2030:	75 95       	asr	r23
    2032:	77 1f       	adc	r23, r23
    2034:	88 0b       	sbc	r24, r24
    2036:	99 0b       	sbc	r25, r25
    2038:	f0 de       	rcall	.-544    	; 0x1e1a <__floatsisf>
    203a:	28 e1       	ldi	r18, 0x18	; 24
    203c:	32 e7       	ldi	r19, 0x72	; 114
    203e:	41 e3       	ldi	r20, 0x31	; 49
    2040:	5f e3       	ldi	r21, 0x3F	; 63
    2042:	16 d0       	rcall	.+44     	; 0x2070 <__mulsf3x>
    2044:	af 2d       	mov	r26, r15
    2046:	98 01       	movw	r18, r16
    2048:	ae 01       	movw	r20, r28
    204a:	ff 90       	pop	r15
    204c:	0f 91       	pop	r16
    204e:	1f 91       	pop	r17
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	eb dd       	rcall	.-1066   	; 0x1c2c <__addsf3x>
    2056:	81 cf       	rjmp	.-254    	; 0x1f5a <__fp_round>

00002058 <__mulsf3>:
    2058:	0b d0       	rcall	.+22     	; 0x2070 <__mulsf3x>
    205a:	7f cf       	rjmp	.-258    	; 0x1f5a <__fp_round>
    205c:	70 df       	rcall	.-288    	; 0x1f3e <__fp_pscA>
    205e:	28 f0       	brcs	.+10     	; 0x206a <__mulsf3+0x12>
    2060:	75 df       	rcall	.-278    	; 0x1f4c <__fp_pscB>
    2062:	18 f0       	brcs	.+6      	; 0x206a <__mulsf3+0x12>
    2064:	95 23       	and	r25, r21
    2066:	09 f0       	breq	.+2      	; 0x206a <__mulsf3+0x12>
    2068:	51 cf       	rjmp	.-350    	; 0x1f0c <__fp_inf>
    206a:	56 cf       	rjmp	.-340    	; 0x1f18 <__fp_nan>
    206c:	11 24       	eor	r1, r1
    206e:	a9 cf       	rjmp	.-174    	; 0x1fc2 <__fp_szero>

00002070 <__mulsf3x>:
    2070:	85 df       	rcall	.-246    	; 0x1f7c <__fp_split3>
    2072:	a0 f3       	brcs	.-24     	; 0x205c <__mulsf3+0x4>

00002074 <__mulsf3_pse>:
    2074:	95 9f       	mul	r25, r21
    2076:	d1 f3       	breq	.-12     	; 0x206c <__mulsf3+0x14>
    2078:	95 0f       	add	r25, r21
    207a:	50 e0       	ldi	r21, 0x00	; 0
    207c:	55 1f       	adc	r21, r21
    207e:	62 9f       	mul	r22, r18
    2080:	f0 01       	movw	r30, r0
    2082:	72 9f       	mul	r23, r18
    2084:	bb 27       	eor	r27, r27
    2086:	f0 0d       	add	r31, r0
    2088:	b1 1d       	adc	r27, r1
    208a:	63 9f       	mul	r22, r19
    208c:	aa 27       	eor	r26, r26
    208e:	f0 0d       	add	r31, r0
    2090:	b1 1d       	adc	r27, r1
    2092:	aa 1f       	adc	r26, r26
    2094:	64 9f       	mul	r22, r20
    2096:	66 27       	eor	r22, r22
    2098:	b0 0d       	add	r27, r0
    209a:	a1 1d       	adc	r26, r1
    209c:	66 1f       	adc	r22, r22
    209e:	82 9f       	mul	r24, r18
    20a0:	22 27       	eor	r18, r18
    20a2:	b0 0d       	add	r27, r0
    20a4:	a1 1d       	adc	r26, r1
    20a6:	62 1f       	adc	r22, r18
    20a8:	73 9f       	mul	r23, r19
    20aa:	b0 0d       	add	r27, r0
    20ac:	a1 1d       	adc	r26, r1
    20ae:	62 1f       	adc	r22, r18
    20b0:	83 9f       	mul	r24, r19
    20b2:	a0 0d       	add	r26, r0
    20b4:	61 1d       	adc	r22, r1
    20b6:	22 1f       	adc	r18, r18
    20b8:	74 9f       	mul	r23, r20
    20ba:	33 27       	eor	r19, r19
    20bc:	a0 0d       	add	r26, r0
    20be:	61 1d       	adc	r22, r1
    20c0:	23 1f       	adc	r18, r19
    20c2:	84 9f       	mul	r24, r20
    20c4:	60 0d       	add	r22, r0
    20c6:	21 1d       	adc	r18, r1
    20c8:	82 2f       	mov	r24, r18
    20ca:	76 2f       	mov	r23, r22
    20cc:	6a 2f       	mov	r22, r26
    20ce:	11 24       	eor	r1, r1
    20d0:	9f 57       	subi	r25, 0x7F	; 127
    20d2:	50 40       	sbci	r21, 0x00	; 0
    20d4:	8a f0       	brmi	.+34     	; 0x20f8 <__mulsf3_pse+0x84>
    20d6:	e1 f0       	breq	.+56     	; 0x2110 <__mulsf3_pse+0x9c>
    20d8:	88 23       	and	r24, r24
    20da:	4a f0       	brmi	.+18     	; 0x20ee <__mulsf3_pse+0x7a>
    20dc:	ee 0f       	add	r30, r30
    20de:	ff 1f       	adc	r31, r31
    20e0:	bb 1f       	adc	r27, r27
    20e2:	66 1f       	adc	r22, r22
    20e4:	77 1f       	adc	r23, r23
    20e6:	88 1f       	adc	r24, r24
    20e8:	91 50       	subi	r25, 0x01	; 1
    20ea:	50 40       	sbci	r21, 0x00	; 0
    20ec:	a9 f7       	brne	.-22     	; 0x20d8 <__mulsf3_pse+0x64>
    20ee:	9e 3f       	cpi	r25, 0xFE	; 254
    20f0:	51 05       	cpc	r21, r1
    20f2:	70 f0       	brcs	.+28     	; 0x2110 <__mulsf3_pse+0x9c>
    20f4:	0b cf       	rjmp	.-490    	; 0x1f0c <__fp_inf>
    20f6:	65 cf       	rjmp	.-310    	; 0x1fc2 <__fp_szero>
    20f8:	5f 3f       	cpi	r21, 0xFF	; 255
    20fa:	ec f3       	brlt	.-6      	; 0x20f6 <__mulsf3_pse+0x82>
    20fc:	98 3e       	cpi	r25, 0xE8	; 232
    20fe:	dc f3       	brlt	.-10     	; 0x20f6 <__mulsf3_pse+0x82>
    2100:	86 95       	lsr	r24
    2102:	77 95       	ror	r23
    2104:	67 95       	ror	r22
    2106:	b7 95       	ror	r27
    2108:	f7 95       	ror	r31
    210a:	e7 95       	ror	r30
    210c:	9f 5f       	subi	r25, 0xFF	; 255
    210e:	c1 f7       	brne	.-16     	; 0x2100 <__mulsf3_pse+0x8c>
    2110:	fe 2b       	or	r31, r30
    2112:	88 0f       	add	r24, r24
    2114:	91 1d       	adc	r25, r1
    2116:	96 95       	lsr	r25
    2118:	87 95       	ror	r24
    211a:	97 f9       	bld	r25, 7
    211c:	08 95       	ret

0000211e <__fp_mpack>:
    211e:	9f 3f       	cpi	r25, 0xFF	; 255
    2120:	31 f0       	breq	.+12     	; 0x212e <__fp_mpack_finite+0xc>

00002122 <__fp_mpack_finite>:
    2122:	91 50       	subi	r25, 0x01	; 1
    2124:	20 f4       	brcc	.+8      	; 0x212e <__fp_mpack_finite+0xc>
    2126:	87 95       	ror	r24
    2128:	77 95       	ror	r23
    212a:	67 95       	ror	r22
    212c:	b7 95       	ror	r27
    212e:	88 0f       	add	r24, r24
    2130:	91 1d       	adc	r25, r1
    2132:	96 95       	lsr	r25
    2134:	87 95       	ror	r24
    2136:	97 f9       	bld	r25, 7
    2138:	08 95       	ret

0000213a <__fp_powser>:
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	1f 93       	push	r17
    2140:	0f 93       	push	r16
    2142:	ff 92       	push	r15
    2144:	ef 92       	push	r14
    2146:	df 92       	push	r13
    2148:	7b 01       	movw	r14, r22
    214a:	8c 01       	movw	r16, r24
    214c:	68 94       	set
    214e:	05 c0       	rjmp	.+10     	; 0x215a <__fp_powser+0x20>
    2150:	da 2e       	mov	r13, r26
    2152:	ef 01       	movw	r28, r30
    2154:	8d df       	rcall	.-230    	; 0x2070 <__mulsf3x>
    2156:	fe 01       	movw	r30, r28
    2158:	e8 94       	clt
    215a:	a5 91       	lpm	r26, Z+
    215c:	25 91       	lpm	r18, Z+
    215e:	35 91       	lpm	r19, Z+
    2160:	45 91       	lpm	r20, Z+
    2162:	55 91       	lpm	r21, Z+
    2164:	ae f3       	brts	.-22     	; 0x2150 <__fp_powser+0x16>
    2166:	ef 01       	movw	r28, r30
    2168:	61 dd       	rcall	.-1342   	; 0x1c2c <__addsf3x>
    216a:	fe 01       	movw	r30, r28
    216c:	97 01       	movw	r18, r14
    216e:	a8 01       	movw	r20, r16
    2170:	da 94       	dec	r13
    2172:	79 f7       	brne	.-34     	; 0x2152 <__fp_powser+0x18>
    2174:	df 90       	pop	r13
    2176:	ef 90       	pop	r14
    2178:	ff 90       	pop	r15
    217a:	0f 91       	pop	r16
    217c:	1f 91       	pop	r17
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <vfprintf>:
    2184:	2f 92       	push	r2
    2186:	3f 92       	push	r3
    2188:	4f 92       	push	r4
    218a:	5f 92       	push	r5
    218c:	6f 92       	push	r6
    218e:	7f 92       	push	r7
    2190:	8f 92       	push	r8
    2192:	9f 92       	push	r9
    2194:	af 92       	push	r10
    2196:	bf 92       	push	r11
    2198:	cf 92       	push	r12
    219a:	df 92       	push	r13
    219c:	ef 92       	push	r14
    219e:	ff 92       	push	r15
    21a0:	0f 93       	push	r16
    21a2:	1f 93       	push	r17
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	63 97       	sbiw	r28, 0x13	; 19
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	6c 01       	movw	r12, r24
    21b4:	4b 01       	movw	r8, r22
    21b6:	2a 01       	movw	r4, r20
    21b8:	fc 01       	movw	r30, r24
    21ba:	16 82       	std	Z+6, r1	; 0x06
    21bc:	17 82       	std	Z+7, r1	; 0x07
    21be:	83 81       	ldd	r24, Z+3	; 0x03
    21c0:	81 ff       	sbrs	r24, 1
    21c2:	29 c3       	rjmp	.+1618   	; 0x2816 <vfprintf+0x692>
    21c4:	ae 01       	movw	r20, r28
    21c6:	4f 5f       	subi	r20, 0xFF	; 255
    21c8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ca:	3a 01       	movw	r6, r20
    21cc:	f6 01       	movw	r30, r12
    21ce:	93 81       	ldd	r25, Z+3	; 0x03
    21d0:	f4 01       	movw	r30, r8
    21d2:	93 fd       	sbrc	r25, 3
    21d4:	85 91       	lpm	r24, Z+
    21d6:	93 ff       	sbrs	r25, 3
    21d8:	81 91       	ld	r24, Z+
    21da:	4f 01       	movw	r8, r30
    21dc:	88 23       	and	r24, r24
    21de:	09 f4       	brne	.+2      	; 0x21e2 <vfprintf+0x5e>
    21e0:	16 c3       	rjmp	.+1580   	; 0x280e <vfprintf+0x68a>
    21e2:	85 32       	cpi	r24, 0x25	; 37
    21e4:	39 f4       	brne	.+14     	; 0x21f4 <vfprintf+0x70>
    21e6:	93 fd       	sbrc	r25, 3
    21e8:	85 91       	lpm	r24, Z+
    21ea:	93 ff       	sbrs	r25, 3
    21ec:	81 91       	ld	r24, Z+
    21ee:	4f 01       	movw	r8, r30
    21f0:	85 32       	cpi	r24, 0x25	; 37
    21f2:	31 f4       	brne	.+12     	; 0x2200 <vfprintf+0x7c>
    21f4:	b6 01       	movw	r22, r12
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	6c d5       	rcall	.+2776   	; 0x2cd2 <fputc>
    21fa:	52 01       	movw	r10, r4
    21fc:	25 01       	movw	r4, r10
    21fe:	e6 cf       	rjmp	.-52     	; 0x21cc <vfprintf+0x48>
    2200:	10 e0       	ldi	r17, 0x00	; 0
    2202:	f1 2c       	mov	r15, r1
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	20 32       	cpi	r18, 0x20	; 32
    2208:	a0 f4       	brcc	.+40     	; 0x2232 <vfprintf+0xae>
    220a:	8b 32       	cpi	r24, 0x2B	; 43
    220c:	69 f0       	breq	.+26     	; 0x2228 <vfprintf+0xa4>
    220e:	30 f4       	brcc	.+12     	; 0x221c <vfprintf+0x98>
    2210:	80 32       	cpi	r24, 0x20	; 32
    2212:	59 f0       	breq	.+22     	; 0x222a <vfprintf+0xa6>
    2214:	83 32       	cpi	r24, 0x23	; 35
    2216:	69 f4       	brne	.+26     	; 0x2232 <vfprintf+0xae>
    2218:	20 61       	ori	r18, 0x10	; 16
    221a:	2c c0       	rjmp	.+88     	; 0x2274 <vfprintf+0xf0>
    221c:	8d 32       	cpi	r24, 0x2D	; 45
    221e:	39 f0       	breq	.+14     	; 0x222e <vfprintf+0xaa>
    2220:	80 33       	cpi	r24, 0x30	; 48
    2222:	39 f4       	brne	.+14     	; 0x2232 <vfprintf+0xae>
    2224:	21 60       	ori	r18, 0x01	; 1
    2226:	26 c0       	rjmp	.+76     	; 0x2274 <vfprintf+0xf0>
    2228:	22 60       	ori	r18, 0x02	; 2
    222a:	24 60       	ori	r18, 0x04	; 4
    222c:	23 c0       	rjmp	.+70     	; 0x2274 <vfprintf+0xf0>
    222e:	28 60       	ori	r18, 0x08	; 8
    2230:	21 c0       	rjmp	.+66     	; 0x2274 <vfprintf+0xf0>
    2232:	27 fd       	sbrc	r18, 7
    2234:	27 c0       	rjmp	.+78     	; 0x2284 <vfprintf+0x100>
    2236:	30 ed       	ldi	r19, 0xD0	; 208
    2238:	38 0f       	add	r19, r24
    223a:	3a 30       	cpi	r19, 0x0A	; 10
    223c:	78 f4       	brcc	.+30     	; 0x225c <vfprintf+0xd8>
    223e:	26 ff       	sbrs	r18, 6
    2240:	06 c0       	rjmp	.+12     	; 0x224e <vfprintf+0xca>
    2242:	fa e0       	ldi	r31, 0x0A	; 10
    2244:	1f 9f       	mul	r17, r31
    2246:	30 0d       	add	r19, r0
    2248:	11 24       	eor	r1, r1
    224a:	13 2f       	mov	r17, r19
    224c:	13 c0       	rjmp	.+38     	; 0x2274 <vfprintf+0xf0>
    224e:	4a e0       	ldi	r20, 0x0A	; 10
    2250:	f4 9e       	mul	r15, r20
    2252:	30 0d       	add	r19, r0
    2254:	11 24       	eor	r1, r1
    2256:	f3 2e       	mov	r15, r19
    2258:	20 62       	ori	r18, 0x20	; 32
    225a:	0c c0       	rjmp	.+24     	; 0x2274 <vfprintf+0xf0>
    225c:	8e 32       	cpi	r24, 0x2E	; 46
    225e:	21 f4       	brne	.+8      	; 0x2268 <vfprintf+0xe4>
    2260:	26 fd       	sbrc	r18, 6
    2262:	d5 c2       	rjmp	.+1450   	; 0x280e <vfprintf+0x68a>
    2264:	20 64       	ori	r18, 0x40	; 64
    2266:	06 c0       	rjmp	.+12     	; 0x2274 <vfprintf+0xf0>
    2268:	8c 36       	cpi	r24, 0x6C	; 108
    226a:	11 f4       	brne	.+4      	; 0x2270 <vfprintf+0xec>
    226c:	20 68       	ori	r18, 0x80	; 128
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <vfprintf+0xf0>
    2270:	88 36       	cpi	r24, 0x68	; 104
    2272:	41 f4       	brne	.+16     	; 0x2284 <vfprintf+0x100>
    2274:	f4 01       	movw	r30, r8
    2276:	93 fd       	sbrc	r25, 3
    2278:	85 91       	lpm	r24, Z+
    227a:	93 ff       	sbrs	r25, 3
    227c:	81 91       	ld	r24, Z+
    227e:	4f 01       	movw	r8, r30
    2280:	81 11       	cpse	r24, r1
    2282:	c1 cf       	rjmp	.-126    	; 0x2206 <vfprintf+0x82>
    2284:	9b eb       	ldi	r25, 0xBB	; 187
    2286:	98 0f       	add	r25, r24
    2288:	93 30       	cpi	r25, 0x03	; 3
    228a:	18 f4       	brcc	.+6      	; 0x2292 <vfprintf+0x10e>
    228c:	20 61       	ori	r18, 0x10	; 16
    228e:	80 5e       	subi	r24, 0xE0	; 224
    2290:	06 c0       	rjmp	.+12     	; 0x229e <vfprintf+0x11a>
    2292:	9b e9       	ldi	r25, 0x9B	; 155
    2294:	98 0f       	add	r25, r24
    2296:	93 30       	cpi	r25, 0x03	; 3
    2298:	08 f0       	brcs	.+2      	; 0x229c <vfprintf+0x118>
    229a:	64 c1       	rjmp	.+712    	; 0x2564 <vfprintf+0x3e0>
    229c:	2f 7e       	andi	r18, 0xEF	; 239
    229e:	26 ff       	sbrs	r18, 6
    22a0:	16 e0       	ldi	r17, 0x06	; 6
    22a2:	2f 73       	andi	r18, 0x3F	; 63
    22a4:	32 2e       	mov	r3, r18
    22a6:	85 36       	cpi	r24, 0x65	; 101
    22a8:	19 f4       	brne	.+6      	; 0x22b0 <vfprintf+0x12c>
    22aa:	20 64       	ori	r18, 0x40	; 64
    22ac:	32 2e       	mov	r3, r18
    22ae:	08 c0       	rjmp	.+16     	; 0x22c0 <vfprintf+0x13c>
    22b0:	86 36       	cpi	r24, 0x66	; 102
    22b2:	21 f4       	brne	.+8      	; 0x22bc <vfprintf+0x138>
    22b4:	f2 2f       	mov	r31, r18
    22b6:	f0 68       	ori	r31, 0x80	; 128
    22b8:	3f 2e       	mov	r3, r31
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <vfprintf+0x13c>
    22bc:	11 11       	cpse	r17, r1
    22be:	11 50       	subi	r17, 0x01	; 1
    22c0:	37 fe       	sbrs	r3, 7
    22c2:	07 c0       	rjmp	.+14     	; 0x22d2 <vfprintf+0x14e>
    22c4:	1c 33       	cpi	r17, 0x3C	; 60
    22c6:	50 f4       	brcc	.+20     	; 0x22dc <vfprintf+0x158>
    22c8:	ee 24       	eor	r14, r14
    22ca:	e3 94       	inc	r14
    22cc:	e1 0e       	add	r14, r17
    22ce:	27 e0       	ldi	r18, 0x07	; 7
    22d0:	0b c0       	rjmp	.+22     	; 0x22e8 <vfprintf+0x164>
    22d2:	18 30       	cpi	r17, 0x08	; 8
    22d4:	38 f0       	brcs	.+14     	; 0x22e4 <vfprintf+0x160>
    22d6:	27 e0       	ldi	r18, 0x07	; 7
    22d8:	17 e0       	ldi	r17, 0x07	; 7
    22da:	05 c0       	rjmp	.+10     	; 0x22e6 <vfprintf+0x162>
    22dc:	27 e0       	ldi	r18, 0x07	; 7
    22de:	4c e3       	ldi	r20, 0x3C	; 60
    22e0:	e4 2e       	mov	r14, r20
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <vfprintf+0x164>
    22e4:	21 2f       	mov	r18, r17
    22e6:	e1 2c       	mov	r14, r1
    22e8:	52 01       	movw	r10, r4
    22ea:	44 e0       	ldi	r20, 0x04	; 4
    22ec:	a4 0e       	add	r10, r20
    22ee:	b1 1c       	adc	r11, r1
    22f0:	f2 01       	movw	r30, r4
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	0e 2d       	mov	r16, r14
    22fc:	a3 01       	movw	r20, r6
    22fe:	b1 d3       	rcall	.+1890   	; 0x2a62 <__ftoa_engine>
    2300:	2c 01       	movw	r4, r24
    2302:	09 81       	ldd	r16, Y+1	; 0x01
    2304:	00 ff       	sbrs	r16, 0
    2306:	02 c0       	rjmp	.+4      	; 0x230c <vfprintf+0x188>
    2308:	03 ff       	sbrs	r16, 3
    230a:	07 c0       	rjmp	.+14     	; 0x231a <vfprintf+0x196>
    230c:	31 fc       	sbrc	r3, 1
    230e:	08 c0       	rjmp	.+16     	; 0x2320 <vfprintf+0x19c>
    2310:	32 fe       	sbrs	r3, 2
    2312:	09 c0       	rjmp	.+18     	; 0x2326 <vfprintf+0x1a2>
    2314:	30 e2       	ldi	r19, 0x20	; 32
    2316:	23 2e       	mov	r2, r19
    2318:	07 c0       	rjmp	.+14     	; 0x2328 <vfprintf+0x1a4>
    231a:	2d e2       	ldi	r18, 0x2D	; 45
    231c:	22 2e       	mov	r2, r18
    231e:	04 c0       	rjmp	.+8      	; 0x2328 <vfprintf+0x1a4>
    2320:	9b e2       	ldi	r25, 0x2B	; 43
    2322:	29 2e       	mov	r2, r25
    2324:	01 c0       	rjmp	.+2      	; 0x2328 <vfprintf+0x1a4>
    2326:	21 2c       	mov	r2, r1
    2328:	80 2f       	mov	r24, r16
    232a:	8c 70       	andi	r24, 0x0C	; 12
    232c:	19 f0       	breq	.+6      	; 0x2334 <vfprintf+0x1b0>
    232e:	21 10       	cpse	r2, r1
    2330:	51 c2       	rjmp	.+1186   	; 0x27d4 <vfprintf+0x650>
    2332:	8d c2       	rjmp	.+1306   	; 0x284e <vfprintf+0x6ca>
    2334:	37 fe       	sbrs	r3, 7
    2336:	0f c0       	rjmp	.+30     	; 0x2356 <vfprintf+0x1d2>
    2338:	e4 0c       	add	r14, r4
    233a:	04 ff       	sbrs	r16, 4
    233c:	04 c0       	rjmp	.+8      	; 0x2346 <vfprintf+0x1c2>
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	81 33       	cpi	r24, 0x31	; 49
    2342:	09 f4       	brne	.+2      	; 0x2346 <vfprintf+0x1c2>
    2344:	ea 94       	dec	r14
    2346:	1e 14       	cp	r1, r14
    2348:	74 f5       	brge	.+92     	; 0x23a6 <vfprintf+0x222>
    234a:	f8 e0       	ldi	r31, 0x08	; 8
    234c:	fe 15       	cp	r31, r14
    234e:	78 f5       	brcc	.+94     	; 0x23ae <vfprintf+0x22a>
    2350:	88 e0       	ldi	r24, 0x08	; 8
    2352:	e8 2e       	mov	r14, r24
    2354:	2c c0       	rjmp	.+88     	; 0x23ae <vfprintf+0x22a>
    2356:	36 fc       	sbrc	r3, 6
    2358:	2a c0       	rjmp	.+84     	; 0x23ae <vfprintf+0x22a>
    235a:	81 2f       	mov	r24, r17
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	84 15       	cp	r24, r4
    2360:	95 05       	cpc	r25, r5
    2362:	9c f0       	brlt	.+38     	; 0x238a <vfprintf+0x206>
    2364:	2c ef       	ldi	r18, 0xFC	; 252
    2366:	42 16       	cp	r4, r18
    2368:	2f ef       	ldi	r18, 0xFF	; 255
    236a:	52 06       	cpc	r5, r18
    236c:	74 f0       	brlt	.+28     	; 0x238a <vfprintf+0x206>
    236e:	43 2d       	mov	r20, r3
    2370:	40 68       	ori	r20, 0x80	; 128
    2372:	34 2e       	mov	r3, r20
    2374:	0a c0       	rjmp	.+20     	; 0x238a <vfprintf+0x206>
    2376:	e2 e0       	ldi	r30, 0x02	; 2
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	ec 0f       	add	r30, r28
    237c:	fd 1f       	adc	r31, r29
    237e:	e1 0f       	add	r30, r17
    2380:	f1 1d       	adc	r31, r1
    2382:	80 81       	ld	r24, Z
    2384:	80 33       	cpi	r24, 0x30	; 48
    2386:	19 f4       	brne	.+6      	; 0x238e <vfprintf+0x20a>
    2388:	11 50       	subi	r17, 0x01	; 1
    238a:	11 11       	cpse	r17, r1
    238c:	f4 cf       	rjmp	.-24     	; 0x2376 <vfprintf+0x1f2>
    238e:	37 fe       	sbrs	r3, 7
    2390:	0e c0       	rjmp	.+28     	; 0x23ae <vfprintf+0x22a>
    2392:	ee 24       	eor	r14, r14
    2394:	e3 94       	inc	r14
    2396:	e1 0e       	add	r14, r17
    2398:	81 2f       	mov	r24, r17
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	48 16       	cp	r4, r24
    239e:	59 06       	cpc	r5, r25
    23a0:	2c f4       	brge	.+10     	; 0x23ac <vfprintf+0x228>
    23a2:	14 19       	sub	r17, r4
    23a4:	04 c0       	rjmp	.+8      	; 0x23ae <vfprintf+0x22a>
    23a6:	ee 24       	eor	r14, r14
    23a8:	e3 94       	inc	r14
    23aa:	01 c0       	rjmp	.+2      	; 0x23ae <vfprintf+0x22a>
    23ac:	10 e0       	ldi	r17, 0x00	; 0
    23ae:	37 fe       	sbrs	r3, 7
    23b0:	06 c0       	rjmp	.+12     	; 0x23be <vfprintf+0x23a>
    23b2:	14 14       	cp	r1, r4
    23b4:	15 04       	cpc	r1, r5
    23b6:	34 f4       	brge	.+12     	; 0x23c4 <vfprintf+0x240>
    23b8:	c2 01       	movw	r24, r4
    23ba:	01 96       	adiw	r24, 0x01	; 1
    23bc:	05 c0       	rjmp	.+10     	; 0x23c8 <vfprintf+0x244>
    23be:	85 e0       	ldi	r24, 0x05	; 5
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <vfprintf+0x244>
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	21 10       	cpse	r2, r1
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	11 23       	and	r17, r17
    23ce:	31 f0       	breq	.+12     	; 0x23dc <vfprintf+0x258>
    23d0:	21 2f       	mov	r18, r17
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	2f 5f       	subi	r18, 0xFF	; 255
    23d6:	3f 4f       	sbci	r19, 0xFF	; 255
    23d8:	82 0f       	add	r24, r18
    23da:	93 1f       	adc	r25, r19
    23dc:	2f 2d       	mov	r18, r15
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	82 17       	cp	r24, r18
    23e2:	93 07       	cpc	r25, r19
    23e4:	14 f4       	brge	.+4      	; 0x23ea <vfprintf+0x266>
    23e6:	f8 1a       	sub	r15, r24
    23e8:	01 c0       	rjmp	.+2      	; 0x23ec <vfprintf+0x268>
    23ea:	f1 2c       	mov	r15, r1
    23ec:	83 2d       	mov	r24, r3
    23ee:	89 70       	andi	r24, 0x09	; 9
    23f0:	41 f4       	brne	.+16     	; 0x2402 <vfprintf+0x27e>
    23f2:	ff 20       	and	r15, r15
    23f4:	31 f0       	breq	.+12     	; 0x2402 <vfprintf+0x27e>
    23f6:	b6 01       	movw	r22, r12
    23f8:	80 e2       	ldi	r24, 0x20	; 32
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	6a d4       	rcall	.+2260   	; 0x2cd2 <fputc>
    23fe:	fa 94       	dec	r15
    2400:	f8 cf       	rjmp	.-16     	; 0x23f2 <vfprintf+0x26e>
    2402:	22 20       	and	r2, r2
    2404:	21 f0       	breq	.+8      	; 0x240e <vfprintf+0x28a>
    2406:	b6 01       	movw	r22, r12
    2408:	82 2d       	mov	r24, r2
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	62 d4       	rcall	.+2244   	; 0x2cd2 <fputc>
    240e:	33 fc       	sbrc	r3, 3
    2410:	08 c0       	rjmp	.+16     	; 0x2422 <vfprintf+0x29e>
    2412:	ff 20       	and	r15, r15
    2414:	31 f0       	breq	.+12     	; 0x2422 <vfprintf+0x29e>
    2416:	b6 01       	movw	r22, r12
    2418:	80 e3       	ldi	r24, 0x30	; 48
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	5a d4       	rcall	.+2228   	; 0x2cd2 <fputc>
    241e:	fa 94       	dec	r15
    2420:	f8 cf       	rjmp	.-16     	; 0x2412 <vfprintf+0x28e>
    2422:	37 fe       	sbrs	r3, 7
    2424:	58 c0       	rjmp	.+176    	; 0x24d6 <vfprintf+0x352>
    2426:	94 2d       	mov	r25, r4
    2428:	85 2d       	mov	r24, r5
    242a:	57 fe       	sbrs	r5, 7
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <vfprintf+0x2ae>
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	29 2e       	mov	r2, r25
    2434:	38 2e       	mov	r3, r24
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	a2 01       	movw	r20, r4
    243c:	4e 19       	sub	r20, r14
    243e:	51 09       	sbc	r21, r1
    2440:	4c 87       	std	Y+12, r20	; 0x0c
    2442:	5d 87       	std	Y+13, r21	; 0x0d
    2444:	a2 01       	movw	r20, r4
    2446:	42 19       	sub	r20, r2
    2448:	53 09       	sbc	r21, r3
    244a:	4e 87       	std	Y+14, r20	; 0x0e
    244c:	5f 87       	std	Y+15, r21	; 0x0f
    244e:	61 2f       	mov	r22, r17
    2450:	70 e0       	ldi	r23, 0x00	; 0
    2452:	44 27       	eor	r20, r20
    2454:	55 27       	eor	r21, r21
    2456:	46 1b       	sub	r20, r22
    2458:	57 0b       	sbc	r21, r23
    245a:	48 8b       	std	Y+16, r20	; 0x10
    245c:	59 8b       	std	Y+17, r21	; 0x11
    245e:	5f ef       	ldi	r21, 0xFF	; 255
    2460:	25 16       	cp	r2, r21
    2462:	35 06       	cpc	r3, r21
    2464:	41 f4       	brne	.+16     	; 0x2476 <vfprintf+0x2f2>
    2466:	b6 01       	movw	r22, r12
    2468:	8e e2       	ldi	r24, 0x2E	; 46
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	2a 8b       	std	Y+18, r18	; 0x12
    246e:	3b 8b       	std	Y+19, r19	; 0x13
    2470:	30 d4       	rcall	.+2144   	; 0x2cd2 <fputc>
    2472:	3b 89       	ldd	r19, Y+19	; 0x13
    2474:	2a 89       	ldd	r18, Y+18	; 0x12
    2476:	42 14       	cp	r4, r2
    2478:	53 04       	cpc	r5, r3
    247a:	6c f0       	brlt	.+26     	; 0x2496 <vfprintf+0x312>
    247c:	4c 85       	ldd	r20, Y+12	; 0x0c
    247e:	5d 85       	ldd	r21, Y+13	; 0x0d
    2480:	42 15       	cp	r20, r2
    2482:	53 05       	cpc	r21, r3
    2484:	44 f4       	brge	.+16     	; 0x2496 <vfprintf+0x312>
    2486:	ee 85       	ldd	r30, Y+14	; 0x0e
    2488:	ff 85       	ldd	r31, Y+15	; 0x0f
    248a:	e2 0f       	add	r30, r18
    248c:	f3 1f       	adc	r31, r19
    248e:	e6 0d       	add	r30, r6
    2490:	f7 1d       	adc	r31, r7
    2492:	81 81       	ldd	r24, Z+1	; 0x01
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <vfprintf+0x314>
    2496:	80 e3       	ldi	r24, 0x30	; 48
    2498:	51 e0       	ldi	r21, 0x01	; 1
    249a:	25 1a       	sub	r2, r21
    249c:	31 08       	sbc	r3, r1
    249e:	2f 5f       	subi	r18, 0xFF	; 255
    24a0:	3f 4f       	sbci	r19, 0xFF	; 255
    24a2:	48 89       	ldd	r20, Y+16	; 0x10
    24a4:	59 89       	ldd	r21, Y+17	; 0x11
    24a6:	24 16       	cp	r2, r20
    24a8:	35 06       	cpc	r3, r21
    24aa:	44 f0       	brlt	.+16     	; 0x24bc <vfprintf+0x338>
    24ac:	b6 01       	movw	r22, r12
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	2a 8b       	std	Y+18, r18	; 0x12
    24b2:	3b 8b       	std	Y+19, r19	; 0x13
    24b4:	0e d4       	rcall	.+2076   	; 0x2cd2 <fputc>
    24b6:	2a 89       	ldd	r18, Y+18	; 0x12
    24b8:	3b 89       	ldd	r19, Y+19	; 0x13
    24ba:	d1 cf       	rjmp	.-94     	; 0x245e <vfprintf+0x2da>
    24bc:	24 14       	cp	r2, r4
    24be:	35 04       	cpc	r3, r5
    24c0:	39 f4       	brne	.+14     	; 0x24d0 <vfprintf+0x34c>
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	96 33       	cpi	r25, 0x36	; 54
    24c6:	18 f4       	brcc	.+6      	; 0x24ce <vfprintf+0x34a>
    24c8:	95 33       	cpi	r25, 0x35	; 53
    24ca:	11 f4       	brne	.+4      	; 0x24d0 <vfprintf+0x34c>
    24cc:	04 ff       	sbrs	r16, 4
    24ce:	81 e3       	ldi	r24, 0x31	; 49
    24d0:	b6 01       	movw	r22, r12
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	45 c0       	rjmp	.+138    	; 0x2560 <vfprintf+0x3dc>
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	81 33       	cpi	r24, 0x31	; 49
    24da:	09 f0       	breq	.+2      	; 0x24de <vfprintf+0x35a>
    24dc:	0f 7e       	andi	r16, 0xEF	; 239
    24de:	b6 01       	movw	r22, r12
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	f7 d3       	rcall	.+2030   	; 0x2cd2 <fputc>
    24e4:	11 11       	cpse	r17, r1
    24e6:	05 c0       	rjmp	.+10     	; 0x24f2 <vfprintf+0x36e>
    24e8:	34 fc       	sbrc	r3, 4
    24ea:	16 c0       	rjmp	.+44     	; 0x2518 <vfprintf+0x394>
    24ec:	85 e6       	ldi	r24, 0x65	; 101
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	15 c0       	rjmp	.+42     	; 0x251c <vfprintf+0x398>
    24f2:	b6 01       	movw	r22, r12
    24f4:	8e e2       	ldi	r24, 0x2E	; 46
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	ec d3       	rcall	.+2008   	; 0x2cd2 <fputc>
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	ee 24       	eor	r14, r14
    24fe:	e3 94       	inc	r14
    2500:	e8 0e       	add	r14, r24
    2502:	f3 01       	movw	r30, r6
    2504:	e8 0f       	add	r30, r24
    2506:	f1 1d       	adc	r31, r1
    2508:	80 81       	ld	r24, Z
    250a:	b6 01       	movw	r22, r12
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	e1 d3       	rcall	.+1986   	; 0x2cd2 <fputc>
    2510:	11 50       	subi	r17, 0x01	; 1
    2512:	8e 2d       	mov	r24, r14
    2514:	99 f7       	brne	.-26     	; 0x24fc <vfprintf+0x378>
    2516:	e8 cf       	rjmp	.-48     	; 0x24e8 <vfprintf+0x364>
    2518:	85 e4       	ldi	r24, 0x45	; 69
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	b6 01       	movw	r22, r12
    251e:	d9 d3       	rcall	.+1970   	; 0x2cd2 <fputc>
    2520:	57 fc       	sbrc	r5, 7
    2522:	05 c0       	rjmp	.+10     	; 0x252e <vfprintf+0x3aa>
    2524:	41 14       	cp	r4, r1
    2526:	51 04       	cpc	r5, r1
    2528:	39 f4       	brne	.+14     	; 0x2538 <vfprintf+0x3b4>
    252a:	04 ff       	sbrs	r16, 4
    252c:	05 c0       	rjmp	.+10     	; 0x2538 <vfprintf+0x3b4>
    252e:	51 94       	neg	r5
    2530:	41 94       	neg	r4
    2532:	51 08       	sbc	r5, r1
    2534:	8d e2       	ldi	r24, 0x2D	; 45
    2536:	01 c0       	rjmp	.+2      	; 0x253a <vfprintf+0x3b6>
    2538:	8b e2       	ldi	r24, 0x2B	; 43
    253a:	b6 01       	movw	r22, r12
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	c9 d3       	rcall	.+1938   	; 0x2cd2 <fputc>
    2540:	80 e3       	ldi	r24, 0x30	; 48
    2542:	9a e0       	ldi	r25, 0x0A	; 10
    2544:	49 16       	cp	r4, r25
    2546:	51 04       	cpc	r5, r1
    2548:	2c f0       	brlt	.+10     	; 0x2554 <vfprintf+0x3d0>
    254a:	8f 5f       	subi	r24, 0xFF	; 255
    254c:	5a e0       	ldi	r21, 0x0A	; 10
    254e:	45 1a       	sub	r4, r21
    2550:	51 08       	sbc	r5, r1
    2552:	f7 cf       	rjmp	.-18     	; 0x2542 <vfprintf+0x3be>
    2554:	b6 01       	movw	r22, r12
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	bc d3       	rcall	.+1912   	; 0x2cd2 <fputc>
    255a:	b6 01       	movw	r22, r12
    255c:	c2 01       	movw	r24, r4
    255e:	c0 96       	adiw	r24, 0x30	; 48
    2560:	b8 d3       	rcall	.+1904   	; 0x2cd2 <fputc>
    2562:	4c c1       	rjmp	.+664    	; 0x27fc <vfprintf+0x678>
    2564:	83 36       	cpi	r24, 0x63	; 99
    2566:	31 f0       	breq	.+12     	; 0x2574 <vfprintf+0x3f0>
    2568:	83 37       	cpi	r24, 0x73	; 115
    256a:	79 f0       	breq	.+30     	; 0x258a <vfprintf+0x406>
    256c:	83 35       	cpi	r24, 0x53	; 83
    256e:	09 f0       	breq	.+2      	; 0x2572 <vfprintf+0x3ee>
    2570:	54 c0       	rjmp	.+168    	; 0x261a <vfprintf+0x496>
    2572:	20 c0       	rjmp	.+64     	; 0x25b4 <vfprintf+0x430>
    2574:	52 01       	movw	r10, r4
    2576:	e2 e0       	ldi	r30, 0x02	; 2
    2578:	ae 0e       	add	r10, r30
    257a:	b1 1c       	adc	r11, r1
    257c:	f2 01       	movw	r30, r4
    257e:	80 81       	ld	r24, Z
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	01 e0       	ldi	r16, 0x01	; 1
    2584:	10 e0       	ldi	r17, 0x00	; 0
    2586:	23 01       	movw	r4, r6
    2588:	13 c0       	rjmp	.+38     	; 0x25b0 <vfprintf+0x42c>
    258a:	52 01       	movw	r10, r4
    258c:	f2 e0       	ldi	r31, 0x02	; 2
    258e:	af 0e       	add	r10, r31
    2590:	b1 1c       	adc	r11, r1
    2592:	f2 01       	movw	r30, r4
    2594:	40 80       	ld	r4, Z
    2596:	51 80       	ldd	r5, Z+1	; 0x01
    2598:	26 ff       	sbrs	r18, 6
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <vfprintf+0x41e>
    259c:	61 2f       	mov	r22, r17
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <vfprintf+0x422>
    25a2:	6f ef       	ldi	r22, 0xFF	; 255
    25a4:	7f ef       	ldi	r23, 0xFF	; 255
    25a6:	c2 01       	movw	r24, r4
    25a8:	2a 8b       	std	Y+18, r18	; 0x12
    25aa:	3e d3       	rcall	.+1660   	; 0x2c28 <strnlen>
    25ac:	8c 01       	movw	r16, r24
    25ae:	2a 89       	ldd	r18, Y+18	; 0x12
    25b0:	2f 77       	andi	r18, 0x7F	; 127
    25b2:	14 c0       	rjmp	.+40     	; 0x25dc <vfprintf+0x458>
    25b4:	52 01       	movw	r10, r4
    25b6:	f2 e0       	ldi	r31, 0x02	; 2
    25b8:	af 0e       	add	r10, r31
    25ba:	b1 1c       	adc	r11, r1
    25bc:	f2 01       	movw	r30, r4
    25be:	40 80       	ld	r4, Z
    25c0:	51 80       	ldd	r5, Z+1	; 0x01
    25c2:	26 ff       	sbrs	r18, 6
    25c4:	03 c0       	rjmp	.+6      	; 0x25cc <vfprintf+0x448>
    25c6:	61 2f       	mov	r22, r17
    25c8:	70 e0       	ldi	r23, 0x00	; 0
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <vfprintf+0x44c>
    25cc:	6f ef       	ldi	r22, 0xFF	; 255
    25ce:	7f ef       	ldi	r23, 0xFF	; 255
    25d0:	c2 01       	movw	r24, r4
    25d2:	2a 8b       	std	Y+18, r18	; 0x12
    25d4:	1e d3       	rcall	.+1596   	; 0x2c12 <strnlen_P>
    25d6:	8c 01       	movw	r16, r24
    25d8:	2a 89       	ldd	r18, Y+18	; 0x12
    25da:	20 68       	ori	r18, 0x80	; 128
    25dc:	32 2e       	mov	r3, r18
    25de:	23 fd       	sbrc	r18, 3
    25e0:	18 c0       	rjmp	.+48     	; 0x2612 <vfprintf+0x48e>
    25e2:	8f 2d       	mov	r24, r15
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	08 17       	cp	r16, r24
    25e8:	19 07       	cpc	r17, r25
    25ea:	98 f4       	brcc	.+38     	; 0x2612 <vfprintf+0x48e>
    25ec:	b6 01       	movw	r22, r12
    25ee:	80 e2       	ldi	r24, 0x20	; 32
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	6f d3       	rcall	.+1758   	; 0x2cd2 <fputc>
    25f4:	fa 94       	dec	r15
    25f6:	f5 cf       	rjmp	.-22     	; 0x25e2 <vfprintf+0x45e>
    25f8:	f2 01       	movw	r30, r4
    25fa:	37 fc       	sbrc	r3, 7
    25fc:	85 91       	lpm	r24, Z+
    25fe:	37 fe       	sbrs	r3, 7
    2600:	81 91       	ld	r24, Z+
    2602:	2f 01       	movw	r4, r30
    2604:	b6 01       	movw	r22, r12
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	64 d3       	rcall	.+1736   	; 0x2cd2 <fputc>
    260a:	f1 10       	cpse	r15, r1
    260c:	fa 94       	dec	r15
    260e:	01 50       	subi	r16, 0x01	; 1
    2610:	11 09       	sbc	r17, r1
    2612:	01 15       	cp	r16, r1
    2614:	11 05       	cpc	r17, r1
    2616:	81 f7       	brne	.-32     	; 0x25f8 <vfprintf+0x474>
    2618:	f1 c0       	rjmp	.+482    	; 0x27fc <vfprintf+0x678>
    261a:	84 36       	cpi	r24, 0x64	; 100
    261c:	11 f0       	breq	.+4      	; 0x2622 <vfprintf+0x49e>
    261e:	89 36       	cpi	r24, 0x69	; 105
    2620:	51 f5       	brne	.+84     	; 0x2676 <vfprintf+0x4f2>
    2622:	52 01       	movw	r10, r4
    2624:	27 ff       	sbrs	r18, 7
    2626:	09 c0       	rjmp	.+18     	; 0x263a <vfprintf+0x4b6>
    2628:	f4 e0       	ldi	r31, 0x04	; 4
    262a:	af 0e       	add	r10, r31
    262c:	b1 1c       	adc	r11, r1
    262e:	f2 01       	movw	r30, r4
    2630:	60 81       	ld	r22, Z
    2632:	71 81       	ldd	r23, Z+1	; 0x01
    2634:	82 81       	ldd	r24, Z+2	; 0x02
    2636:	93 81       	ldd	r25, Z+3	; 0x03
    2638:	0a c0       	rjmp	.+20     	; 0x264e <vfprintf+0x4ca>
    263a:	f2 e0       	ldi	r31, 0x02	; 2
    263c:	af 0e       	add	r10, r31
    263e:	b1 1c       	adc	r11, r1
    2640:	f2 01       	movw	r30, r4
    2642:	60 81       	ld	r22, Z
    2644:	71 81       	ldd	r23, Z+1	; 0x01
    2646:	07 2e       	mov	r0, r23
    2648:	00 0c       	add	r0, r0
    264a:	88 0b       	sbc	r24, r24
    264c:	99 0b       	sbc	r25, r25
    264e:	2f 76       	andi	r18, 0x6F	; 111
    2650:	32 2e       	mov	r3, r18
    2652:	97 ff       	sbrs	r25, 7
    2654:	09 c0       	rjmp	.+18     	; 0x2668 <vfprintf+0x4e4>
    2656:	90 95       	com	r25
    2658:	80 95       	com	r24
    265a:	70 95       	com	r23
    265c:	61 95       	neg	r22
    265e:	7f 4f       	sbci	r23, 0xFF	; 255
    2660:	8f 4f       	sbci	r24, 0xFF	; 255
    2662:	9f 4f       	sbci	r25, 0xFF	; 255
    2664:	20 68       	ori	r18, 0x80	; 128
    2666:	32 2e       	mov	r3, r18
    2668:	2a e0       	ldi	r18, 0x0A	; 10
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	a3 01       	movw	r20, r6
    266e:	ac d3       	rcall	.+1880   	; 0x2dc8 <__ultoa_invert>
    2670:	e8 2e       	mov	r14, r24
    2672:	e6 18       	sub	r14, r6
    2674:	3e c0       	rjmp	.+124    	; 0x26f2 <vfprintf+0x56e>
    2676:	02 2f       	mov	r16, r18
    2678:	85 37       	cpi	r24, 0x75	; 117
    267a:	21 f4       	brne	.+8      	; 0x2684 <vfprintf+0x500>
    267c:	0f 7e       	andi	r16, 0xEF	; 239
    267e:	2a e0       	ldi	r18, 0x0A	; 10
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	1d c0       	rjmp	.+58     	; 0x26be <vfprintf+0x53a>
    2684:	09 7f       	andi	r16, 0xF9	; 249
    2686:	8f 36       	cpi	r24, 0x6F	; 111
    2688:	91 f0       	breq	.+36     	; 0x26ae <vfprintf+0x52a>
    268a:	18 f4       	brcc	.+6      	; 0x2692 <vfprintf+0x50e>
    268c:	88 35       	cpi	r24, 0x58	; 88
    268e:	59 f0       	breq	.+22     	; 0x26a6 <vfprintf+0x522>
    2690:	be c0       	rjmp	.+380    	; 0x280e <vfprintf+0x68a>
    2692:	80 37       	cpi	r24, 0x70	; 112
    2694:	19 f0       	breq	.+6      	; 0x269c <vfprintf+0x518>
    2696:	88 37       	cpi	r24, 0x78	; 120
    2698:	11 f0       	breq	.+4      	; 0x269e <vfprintf+0x51a>
    269a:	b9 c0       	rjmp	.+370    	; 0x280e <vfprintf+0x68a>
    269c:	00 61       	ori	r16, 0x10	; 16
    269e:	04 ff       	sbrs	r16, 4
    26a0:	09 c0       	rjmp	.+18     	; 0x26b4 <vfprintf+0x530>
    26a2:	04 60       	ori	r16, 0x04	; 4
    26a4:	07 c0       	rjmp	.+14     	; 0x26b4 <vfprintf+0x530>
    26a6:	24 ff       	sbrs	r18, 4
    26a8:	08 c0       	rjmp	.+16     	; 0x26ba <vfprintf+0x536>
    26aa:	06 60       	ori	r16, 0x06	; 6
    26ac:	06 c0       	rjmp	.+12     	; 0x26ba <vfprintf+0x536>
    26ae:	28 e0       	ldi	r18, 0x08	; 8
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	05 c0       	rjmp	.+10     	; 0x26be <vfprintf+0x53a>
    26b4:	20 e1       	ldi	r18, 0x10	; 16
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <vfprintf+0x53a>
    26ba:	20 e1       	ldi	r18, 0x10	; 16
    26bc:	32 e0       	ldi	r19, 0x02	; 2
    26be:	52 01       	movw	r10, r4
    26c0:	07 ff       	sbrs	r16, 7
    26c2:	09 c0       	rjmp	.+18     	; 0x26d6 <vfprintf+0x552>
    26c4:	f4 e0       	ldi	r31, 0x04	; 4
    26c6:	af 0e       	add	r10, r31
    26c8:	b1 1c       	adc	r11, r1
    26ca:	f2 01       	movw	r30, r4
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	08 c0       	rjmp	.+16     	; 0x26e6 <vfprintf+0x562>
    26d6:	f2 e0       	ldi	r31, 0x02	; 2
    26d8:	af 0e       	add	r10, r31
    26da:	b1 1c       	adc	r11, r1
    26dc:	f2 01       	movw	r30, r4
    26de:	60 81       	ld	r22, Z
    26e0:	71 81       	ldd	r23, Z+1	; 0x01
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a3 01       	movw	r20, r6
    26e8:	6f d3       	rcall	.+1758   	; 0x2dc8 <__ultoa_invert>
    26ea:	e8 2e       	mov	r14, r24
    26ec:	e6 18       	sub	r14, r6
    26ee:	0f 77       	andi	r16, 0x7F	; 127
    26f0:	30 2e       	mov	r3, r16
    26f2:	36 fe       	sbrs	r3, 6
    26f4:	0b c0       	rjmp	.+22     	; 0x270c <vfprintf+0x588>
    26f6:	33 2d       	mov	r19, r3
    26f8:	3e 7f       	andi	r19, 0xFE	; 254
    26fa:	e1 16       	cp	r14, r17
    26fc:	50 f4       	brcc	.+20     	; 0x2712 <vfprintf+0x58e>
    26fe:	34 fe       	sbrs	r3, 4
    2700:	0a c0       	rjmp	.+20     	; 0x2716 <vfprintf+0x592>
    2702:	32 fc       	sbrc	r3, 2
    2704:	08 c0       	rjmp	.+16     	; 0x2716 <vfprintf+0x592>
    2706:	33 2d       	mov	r19, r3
    2708:	3e 7e       	andi	r19, 0xEE	; 238
    270a:	05 c0       	rjmp	.+10     	; 0x2716 <vfprintf+0x592>
    270c:	0e 2d       	mov	r16, r14
    270e:	33 2d       	mov	r19, r3
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <vfprintf+0x594>
    2712:	0e 2d       	mov	r16, r14
    2714:	01 c0       	rjmp	.+2      	; 0x2718 <vfprintf+0x594>
    2716:	01 2f       	mov	r16, r17
    2718:	34 ff       	sbrs	r19, 4
    271a:	0c c0       	rjmp	.+24     	; 0x2734 <vfprintf+0x5b0>
    271c:	fe 01       	movw	r30, r28
    271e:	ee 0d       	add	r30, r14
    2720:	f1 1d       	adc	r31, r1
    2722:	80 81       	ld	r24, Z
    2724:	80 33       	cpi	r24, 0x30	; 48
    2726:	11 f4       	brne	.+4      	; 0x272c <vfprintf+0x5a8>
    2728:	39 7e       	andi	r19, 0xE9	; 233
    272a:	08 c0       	rjmp	.+16     	; 0x273c <vfprintf+0x5b8>
    272c:	32 ff       	sbrs	r19, 2
    272e:	05 c0       	rjmp	.+10     	; 0x273a <vfprintf+0x5b6>
    2730:	0e 5f       	subi	r16, 0xFE	; 254
    2732:	04 c0       	rjmp	.+8      	; 0x273c <vfprintf+0x5b8>
    2734:	83 2f       	mov	r24, r19
    2736:	86 78       	andi	r24, 0x86	; 134
    2738:	09 f0       	breq	.+2      	; 0x273c <vfprintf+0x5b8>
    273a:	0f 5f       	subi	r16, 0xFF	; 255
    273c:	33 fd       	sbrc	r19, 3
    273e:	12 c0       	rjmp	.+36     	; 0x2764 <vfprintf+0x5e0>
    2740:	30 ff       	sbrs	r19, 0
    2742:	06 c0       	rjmp	.+12     	; 0x2750 <vfprintf+0x5cc>
    2744:	1e 2d       	mov	r17, r14
    2746:	0f 15       	cp	r16, r15
    2748:	18 f4       	brcc	.+6      	; 0x2750 <vfprintf+0x5cc>
    274a:	1f 0d       	add	r17, r15
    274c:	10 1b       	sub	r17, r16
    274e:	0f 2d       	mov	r16, r15
    2750:	0f 15       	cp	r16, r15
    2752:	60 f4       	brcc	.+24     	; 0x276c <vfprintf+0x5e8>
    2754:	b6 01       	movw	r22, r12
    2756:	80 e2       	ldi	r24, 0x20	; 32
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	3b 8b       	std	Y+19, r19	; 0x13
    275c:	ba d2       	rcall	.+1396   	; 0x2cd2 <fputc>
    275e:	0f 5f       	subi	r16, 0xFF	; 255
    2760:	3b 89       	ldd	r19, Y+19	; 0x13
    2762:	f6 cf       	rjmp	.-20     	; 0x2750 <vfprintf+0x5cc>
    2764:	0f 15       	cp	r16, r15
    2766:	10 f4       	brcc	.+4      	; 0x276c <vfprintf+0x5e8>
    2768:	f0 1a       	sub	r15, r16
    276a:	01 c0       	rjmp	.+2      	; 0x276e <vfprintf+0x5ea>
    276c:	f1 2c       	mov	r15, r1
    276e:	34 ff       	sbrs	r19, 4
    2770:	11 c0       	rjmp	.+34     	; 0x2794 <vfprintf+0x610>
    2772:	b6 01       	movw	r22, r12
    2774:	80 e3       	ldi	r24, 0x30	; 48
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	3b 8b       	std	Y+19, r19	; 0x13
    277a:	ab d2       	rcall	.+1366   	; 0x2cd2 <fputc>
    277c:	3b 89       	ldd	r19, Y+19	; 0x13
    277e:	32 ff       	sbrs	r19, 2
    2780:	16 c0       	rjmp	.+44     	; 0x27ae <vfprintf+0x62a>
    2782:	31 fd       	sbrc	r19, 1
    2784:	03 c0       	rjmp	.+6      	; 0x278c <vfprintf+0x608>
    2786:	88 e7       	ldi	r24, 0x78	; 120
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	02 c0       	rjmp	.+4      	; 0x2790 <vfprintf+0x60c>
    278c:	88 e5       	ldi	r24, 0x58	; 88
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	b6 01       	movw	r22, r12
    2792:	0c c0       	rjmp	.+24     	; 0x27ac <vfprintf+0x628>
    2794:	83 2f       	mov	r24, r19
    2796:	86 78       	andi	r24, 0x86	; 134
    2798:	51 f0       	breq	.+20     	; 0x27ae <vfprintf+0x62a>
    279a:	31 ff       	sbrs	r19, 1
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <vfprintf+0x61e>
    279e:	8b e2       	ldi	r24, 0x2B	; 43
    27a0:	01 c0       	rjmp	.+2      	; 0x27a4 <vfprintf+0x620>
    27a2:	80 e2       	ldi	r24, 0x20	; 32
    27a4:	37 fd       	sbrc	r19, 7
    27a6:	8d e2       	ldi	r24, 0x2D	; 45
    27a8:	b6 01       	movw	r22, r12
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	92 d2       	rcall	.+1316   	; 0x2cd2 <fputc>
    27ae:	e1 16       	cp	r14, r17
    27b0:	30 f4       	brcc	.+12     	; 0x27be <vfprintf+0x63a>
    27b2:	b6 01       	movw	r22, r12
    27b4:	80 e3       	ldi	r24, 0x30	; 48
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	8c d2       	rcall	.+1304   	; 0x2cd2 <fputc>
    27ba:	11 50       	subi	r17, 0x01	; 1
    27bc:	f8 cf       	rjmp	.-16     	; 0x27ae <vfprintf+0x62a>
    27be:	ea 94       	dec	r14
    27c0:	f3 01       	movw	r30, r6
    27c2:	ee 0d       	add	r30, r14
    27c4:	f1 1d       	adc	r31, r1
    27c6:	80 81       	ld	r24, Z
    27c8:	b6 01       	movw	r22, r12
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	82 d2       	rcall	.+1284   	; 0x2cd2 <fputc>
    27ce:	e1 10       	cpse	r14, r1
    27d0:	f6 cf       	rjmp	.-20     	; 0x27be <vfprintf+0x63a>
    27d2:	14 c0       	rjmp	.+40     	; 0x27fc <vfprintf+0x678>
    27d4:	f4 e0       	ldi	r31, 0x04	; 4
    27d6:	ff 15       	cp	r31, r15
    27d8:	48 f5       	brcc	.+82     	; 0x282c <vfprintf+0x6a8>
    27da:	84 e0       	ldi	r24, 0x04	; 4
    27dc:	f8 1a       	sub	r15, r24
    27de:	33 fe       	sbrs	r3, 3
    27e0:	1d c0       	rjmp	.+58     	; 0x281c <vfprintf+0x698>
    27e2:	21 10       	cpse	r2, r1
    27e4:	24 c0       	rjmp	.+72     	; 0x282e <vfprintf+0x6aa>
    27e6:	03 ff       	sbrs	r16, 3
    27e8:	27 c0       	rjmp	.+78     	; 0x2838 <vfprintf+0x6b4>
    27ea:	0e e4       	ldi	r16, 0x4E	; 78
    27ec:	12 e0       	ldi	r17, 0x02	; 2
    27ee:	f3 2d       	mov	r31, r3
    27f0:	f0 71       	andi	r31, 0x10	; 16
    27f2:	3f 2e       	mov	r3, r31
    27f4:	f8 01       	movw	r30, r16
    27f6:	84 91       	lpm	r24, Z
    27f8:	81 11       	cpse	r24, r1
    27fa:	21 c0       	rjmp	.+66     	; 0x283e <vfprintf+0x6ba>
    27fc:	ff 20       	and	r15, r15
    27fe:	09 f4       	brne	.+2      	; 0x2802 <vfprintf+0x67e>
    2800:	fd cc       	rjmp	.-1542   	; 0x21fc <vfprintf+0x78>
    2802:	b6 01       	movw	r22, r12
    2804:	80 e2       	ldi	r24, 0x20	; 32
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	64 d2       	rcall	.+1224   	; 0x2cd2 <fputc>
    280a:	fa 94       	dec	r15
    280c:	f7 cf       	rjmp	.-18     	; 0x27fc <vfprintf+0x678>
    280e:	f6 01       	movw	r30, r12
    2810:	86 81       	ldd	r24, Z+6	; 0x06
    2812:	97 81       	ldd	r25, Z+7	; 0x07
    2814:	23 c0       	rjmp	.+70     	; 0x285c <vfprintf+0x6d8>
    2816:	8f ef       	ldi	r24, 0xFF	; 255
    2818:	9f ef       	ldi	r25, 0xFF	; 255
    281a:	20 c0       	rjmp	.+64     	; 0x285c <vfprintf+0x6d8>
    281c:	b6 01       	movw	r22, r12
    281e:	80 e2       	ldi	r24, 0x20	; 32
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	57 d2       	rcall	.+1198   	; 0x2cd2 <fputc>
    2824:	fa 94       	dec	r15
    2826:	f1 10       	cpse	r15, r1
    2828:	f9 cf       	rjmp	.-14     	; 0x281c <vfprintf+0x698>
    282a:	db cf       	rjmp	.-74     	; 0x27e2 <vfprintf+0x65e>
    282c:	f1 2c       	mov	r15, r1
    282e:	b6 01       	movw	r22, r12
    2830:	82 2d       	mov	r24, r2
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	4e d2       	rcall	.+1180   	; 0x2cd2 <fputc>
    2836:	d7 cf       	rjmp	.-82     	; 0x27e6 <vfprintf+0x662>
    2838:	02 e5       	ldi	r16, 0x52	; 82
    283a:	12 e0       	ldi	r17, 0x02	; 2
    283c:	d8 cf       	rjmp	.-80     	; 0x27ee <vfprintf+0x66a>
    283e:	31 10       	cpse	r3, r1
    2840:	80 52       	subi	r24, 0x20	; 32
    2842:	b6 01       	movw	r22, r12
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	45 d2       	rcall	.+1162   	; 0x2cd2 <fputc>
    2848:	0f 5f       	subi	r16, 0xFF	; 255
    284a:	1f 4f       	sbci	r17, 0xFF	; 255
    284c:	d3 cf       	rjmp	.-90     	; 0x27f4 <vfprintf+0x670>
    284e:	23 e0       	ldi	r18, 0x03	; 3
    2850:	2f 15       	cp	r18, r15
    2852:	10 f4       	brcc	.+4      	; 0x2858 <vfprintf+0x6d4>
    2854:	83 e0       	ldi	r24, 0x03	; 3
    2856:	c2 cf       	rjmp	.-124    	; 0x27dc <vfprintf+0x658>
    2858:	f1 2c       	mov	r15, r1
    285a:	c5 cf       	rjmp	.-118    	; 0x27e6 <vfprintf+0x662>
    285c:	63 96       	adiw	r28, 0x13	; 19
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	de bf       	out	0x3e, r29	; 62
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	ff 90       	pop	r15
    286c:	ef 90       	pop	r14
    286e:	df 90       	pop	r13
    2870:	cf 90       	pop	r12
    2872:	bf 90       	pop	r11
    2874:	af 90       	pop	r10
    2876:	9f 90       	pop	r9
    2878:	8f 90       	pop	r8
    287a:	7f 90       	pop	r7
    287c:	6f 90       	pop	r6
    287e:	5f 90       	pop	r5
    2880:	4f 90       	pop	r4
    2882:	3f 90       	pop	r3
    2884:	2f 90       	pop	r2
    2886:	08 95       	ret

00002888 <__udivmodsi4>:
    2888:	a1 e2       	ldi	r26, 0x21	; 33
    288a:	1a 2e       	mov	r1, r26
    288c:	aa 1b       	sub	r26, r26
    288e:	bb 1b       	sub	r27, r27
    2890:	fd 01       	movw	r30, r26
    2892:	0d c0       	rjmp	.+26     	; 0x28ae <__udivmodsi4_ep>

00002894 <__udivmodsi4_loop>:
    2894:	aa 1f       	adc	r26, r26
    2896:	bb 1f       	adc	r27, r27
    2898:	ee 1f       	adc	r30, r30
    289a:	ff 1f       	adc	r31, r31
    289c:	a2 17       	cp	r26, r18
    289e:	b3 07       	cpc	r27, r19
    28a0:	e4 07       	cpc	r30, r20
    28a2:	f5 07       	cpc	r31, r21
    28a4:	20 f0       	brcs	.+8      	; 0x28ae <__udivmodsi4_ep>
    28a6:	a2 1b       	sub	r26, r18
    28a8:	b3 0b       	sbc	r27, r19
    28aa:	e4 0b       	sbc	r30, r20
    28ac:	f5 0b       	sbc	r31, r21

000028ae <__udivmodsi4_ep>:
    28ae:	66 1f       	adc	r22, r22
    28b0:	77 1f       	adc	r23, r23
    28b2:	88 1f       	adc	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	1a 94       	dec	r1
    28b8:	69 f7       	brne	.-38     	; 0x2894 <__udivmodsi4_loop>
    28ba:	60 95       	com	r22
    28bc:	70 95       	com	r23
    28be:	80 95       	com	r24
    28c0:	90 95       	com	r25
    28c2:	9b 01       	movw	r18, r22
    28c4:	ac 01       	movw	r20, r24
    28c6:	bd 01       	movw	r22, r26
    28c8:	cf 01       	movw	r24, r30
    28ca:	08 95       	ret

000028cc <__muluhisi3>:
    28cc:	bb d0       	rcall	.+374    	; 0x2a44 <__umulhisi3>
    28ce:	a5 9f       	mul	r26, r21
    28d0:	90 0d       	add	r25, r0
    28d2:	b4 9f       	mul	r27, r20
    28d4:	90 0d       	add	r25, r0
    28d6:	a4 9f       	mul	r26, r20
    28d8:	80 0d       	add	r24, r0
    28da:	91 1d       	adc	r25, r1
    28dc:	11 24       	eor	r1, r1
    28de:	08 95       	ret

000028e0 <__muldi3>:
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	1f 93       	push	r17
    28e6:	0f 93       	push	r16
    28e8:	9a 9d       	mul	r25, r10
    28ea:	f0 2d       	mov	r31, r0
    28ec:	21 9f       	mul	r18, r17
    28ee:	f0 0d       	add	r31, r0
    28f0:	8b 9d       	mul	r24, r11
    28f2:	f0 0d       	add	r31, r0
    28f4:	8a 9d       	mul	r24, r10
    28f6:	e0 2d       	mov	r30, r0
    28f8:	f1 0d       	add	r31, r1
    28fa:	03 9f       	mul	r16, r19
    28fc:	f0 0d       	add	r31, r0
    28fe:	02 9f       	mul	r16, r18
    2900:	e0 0d       	add	r30, r0
    2902:	f1 1d       	adc	r31, r1
    2904:	4e 9d       	mul	r20, r14
    2906:	e0 0d       	add	r30, r0
    2908:	f1 1d       	adc	r31, r1
    290a:	5e 9d       	mul	r21, r14
    290c:	f0 0d       	add	r31, r0
    290e:	4f 9d       	mul	r20, r15
    2910:	f0 0d       	add	r31, r0
    2912:	7f 93       	push	r23
    2914:	6f 93       	push	r22
    2916:	bf 92       	push	r11
    2918:	af 92       	push	r10
    291a:	5f 93       	push	r21
    291c:	4f 93       	push	r20
    291e:	d5 01       	movw	r26, r10
    2920:	91 d0       	rcall	.+290    	; 0x2a44 <__umulhisi3>
    2922:	8b 01       	movw	r16, r22
    2924:	ac 01       	movw	r20, r24
    2926:	d7 01       	movw	r26, r14
    2928:	8d d0       	rcall	.+282    	; 0x2a44 <__umulhisi3>
    292a:	eb 01       	movw	r28, r22
    292c:	e8 0f       	add	r30, r24
    292e:	f9 1f       	adc	r31, r25
    2930:	d6 01       	movw	r26, r12
    2932:	1f d0       	rcall	.+62     	; 0x2972 <__muldi3_6>
    2934:	2f 91       	pop	r18
    2936:	3f 91       	pop	r19
    2938:	d6 01       	movw	r26, r12
    293a:	84 d0       	rcall	.+264    	; 0x2a44 <__umulhisi3>
    293c:	c6 0f       	add	r28, r22
    293e:	d7 1f       	adc	r29, r23
    2940:	e8 1f       	adc	r30, r24
    2942:	f9 1f       	adc	r31, r25
    2944:	af 91       	pop	r26
    2946:	bf 91       	pop	r27
    2948:	14 d0       	rcall	.+40     	; 0x2972 <__muldi3_6>
    294a:	2f 91       	pop	r18
    294c:	3f 91       	pop	r19
    294e:	7a d0       	rcall	.+244    	; 0x2a44 <__umulhisi3>
    2950:	c6 0f       	add	r28, r22
    2952:	d7 1f       	adc	r29, r23
    2954:	e8 1f       	adc	r30, r24
    2956:	f9 1f       	adc	r31, r25
    2958:	d6 01       	movw	r26, r12
    295a:	74 d0       	rcall	.+232    	; 0x2a44 <__umulhisi3>
    295c:	e6 0f       	add	r30, r22
    295e:	f7 1f       	adc	r31, r23
    2960:	98 01       	movw	r18, r16
    2962:	be 01       	movw	r22, r28
    2964:	cf 01       	movw	r24, r30
    2966:	11 24       	eor	r1, r1
    2968:	0f 91       	pop	r16
    296a:	1f 91       	pop	r17
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <__muldi3_6>:
    2972:	68 d0       	rcall	.+208    	; 0x2a44 <__umulhisi3>
    2974:	46 0f       	add	r20, r22
    2976:	57 1f       	adc	r21, r23
    2978:	c8 1f       	adc	r28, r24
    297a:	d9 1f       	adc	r29, r25
    297c:	08 f4       	brcc	.+2      	; 0x2980 <__muldi3_6+0xe>
    297e:	31 96       	adiw	r30, 0x01	; 1
    2980:	08 95       	ret

00002982 <__ashldi3>:
    2982:	0f 93       	push	r16
    2984:	08 30       	cpi	r16, 0x08	; 8
    2986:	90 f0       	brcs	.+36     	; 0x29ac <__ashldi3+0x2a>
    2988:	98 2f       	mov	r25, r24
    298a:	87 2f       	mov	r24, r23
    298c:	76 2f       	mov	r23, r22
    298e:	65 2f       	mov	r22, r21
    2990:	54 2f       	mov	r21, r20
    2992:	43 2f       	mov	r20, r19
    2994:	32 2f       	mov	r19, r18
    2996:	22 27       	eor	r18, r18
    2998:	08 50       	subi	r16, 0x08	; 8
    299a:	f4 cf       	rjmp	.-24     	; 0x2984 <__ashldi3+0x2>
    299c:	22 0f       	add	r18, r18
    299e:	33 1f       	adc	r19, r19
    29a0:	44 1f       	adc	r20, r20
    29a2:	55 1f       	adc	r21, r21
    29a4:	66 1f       	adc	r22, r22
    29a6:	77 1f       	adc	r23, r23
    29a8:	88 1f       	adc	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	0a 95       	dec	r16
    29ae:	b2 f7       	brpl	.-20     	; 0x299c <__ashldi3+0x1a>
    29b0:	0f 91       	pop	r16
    29b2:	08 95       	ret

000029b4 <__ashrdi3>:
    29b4:	97 fb       	bst	r25, 7
    29b6:	10 f8       	bld	r1, 0

000029b8 <__lshrdi3>:
    29b8:	16 94       	lsr	r1
    29ba:	00 08       	sbc	r0, r0
    29bc:	0f 93       	push	r16
    29be:	08 30       	cpi	r16, 0x08	; 8
    29c0:	98 f0       	brcs	.+38     	; 0x29e8 <__lshrdi3+0x30>
    29c2:	08 50       	subi	r16, 0x08	; 8
    29c4:	23 2f       	mov	r18, r19
    29c6:	34 2f       	mov	r19, r20
    29c8:	45 2f       	mov	r20, r21
    29ca:	56 2f       	mov	r21, r22
    29cc:	67 2f       	mov	r22, r23
    29ce:	78 2f       	mov	r23, r24
    29d0:	89 2f       	mov	r24, r25
    29d2:	90 2d       	mov	r25, r0
    29d4:	f4 cf       	rjmp	.-24     	; 0x29be <__lshrdi3+0x6>
    29d6:	05 94       	asr	r0
    29d8:	97 95       	ror	r25
    29da:	87 95       	ror	r24
    29dc:	77 95       	ror	r23
    29de:	67 95       	ror	r22
    29e0:	57 95       	ror	r21
    29e2:	47 95       	ror	r20
    29e4:	37 95       	ror	r19
    29e6:	27 95       	ror	r18
    29e8:	0a 95       	dec	r16
    29ea:	aa f7       	brpl	.-22     	; 0x29d6 <__lshrdi3+0x1e>
    29ec:	0f 91       	pop	r16
    29ee:	08 95       	ret

000029f0 <__adddi3>:
    29f0:	2a 0d       	add	r18, r10
    29f2:	3b 1d       	adc	r19, r11
    29f4:	4c 1d       	adc	r20, r12
    29f6:	5d 1d       	adc	r21, r13
    29f8:	6e 1d       	adc	r22, r14
    29fa:	7f 1d       	adc	r23, r15
    29fc:	80 1f       	adc	r24, r16
    29fe:	91 1f       	adc	r25, r17
    2a00:	08 95       	ret

00002a02 <__adddi3_s8>:
    2a02:	00 24       	eor	r0, r0
    2a04:	a7 fd       	sbrc	r26, 7
    2a06:	00 94       	com	r0
    2a08:	2a 0f       	add	r18, r26
    2a0a:	30 1d       	adc	r19, r0
    2a0c:	40 1d       	adc	r20, r0
    2a0e:	50 1d       	adc	r21, r0
    2a10:	60 1d       	adc	r22, r0
    2a12:	70 1d       	adc	r23, r0
    2a14:	80 1d       	adc	r24, r0
    2a16:	90 1d       	adc	r25, r0
    2a18:	08 95       	ret

00002a1a <__subdi3>:
    2a1a:	2a 19       	sub	r18, r10
    2a1c:	3b 09       	sbc	r19, r11
    2a1e:	4c 09       	sbc	r20, r12
    2a20:	5d 09       	sbc	r21, r13
    2a22:	6e 09       	sbc	r22, r14
    2a24:	7f 09       	sbc	r23, r15
    2a26:	80 0b       	sbc	r24, r16
    2a28:	91 0b       	sbc	r25, r17
    2a2a:	08 95       	ret

00002a2c <__cmpdi2_s8>:
    2a2c:	00 24       	eor	r0, r0
    2a2e:	a7 fd       	sbrc	r26, 7
    2a30:	00 94       	com	r0
    2a32:	2a 17       	cp	r18, r26
    2a34:	30 05       	cpc	r19, r0
    2a36:	40 05       	cpc	r20, r0
    2a38:	50 05       	cpc	r21, r0
    2a3a:	60 05       	cpc	r22, r0
    2a3c:	70 05       	cpc	r23, r0
    2a3e:	80 05       	cpc	r24, r0
    2a40:	90 05       	cpc	r25, r0
    2a42:	08 95       	ret

00002a44 <__umulhisi3>:
    2a44:	a2 9f       	mul	r26, r18
    2a46:	b0 01       	movw	r22, r0
    2a48:	b3 9f       	mul	r27, r19
    2a4a:	c0 01       	movw	r24, r0
    2a4c:	a3 9f       	mul	r26, r19
    2a4e:	70 0d       	add	r23, r0
    2a50:	81 1d       	adc	r24, r1
    2a52:	11 24       	eor	r1, r1
    2a54:	91 1d       	adc	r25, r1
    2a56:	b2 9f       	mul	r27, r18
    2a58:	70 0d       	add	r23, r0
    2a5a:	81 1d       	adc	r24, r1
    2a5c:	11 24       	eor	r1, r1
    2a5e:	91 1d       	adc	r25, r1
    2a60:	08 95       	ret

00002a62 <__ftoa_engine>:
    2a62:	28 30       	cpi	r18, 0x08	; 8
    2a64:	08 f0       	brcs	.+2      	; 0x2a68 <__ftoa_engine+0x6>
    2a66:	27 e0       	ldi	r18, 0x07	; 7
    2a68:	33 27       	eor	r19, r19
    2a6a:	da 01       	movw	r26, r20
    2a6c:	99 0f       	add	r25, r25
    2a6e:	31 1d       	adc	r19, r1
    2a70:	87 fd       	sbrc	r24, 7
    2a72:	91 60       	ori	r25, 0x01	; 1
    2a74:	00 96       	adiw	r24, 0x00	; 0
    2a76:	61 05       	cpc	r22, r1
    2a78:	71 05       	cpc	r23, r1
    2a7a:	39 f4       	brne	.+14     	; 0x2a8a <__ftoa_engine+0x28>
    2a7c:	32 60       	ori	r19, 0x02	; 2
    2a7e:	2e 5f       	subi	r18, 0xFE	; 254
    2a80:	3d 93       	st	X+, r19
    2a82:	30 e3       	ldi	r19, 0x30	; 48
    2a84:	2a 95       	dec	r18
    2a86:	e1 f7       	brne	.-8      	; 0x2a80 <__ftoa_engine+0x1e>
    2a88:	08 95       	ret
    2a8a:	9f 3f       	cpi	r25, 0xFF	; 255
    2a8c:	30 f0       	brcs	.+12     	; 0x2a9a <__ftoa_engine+0x38>
    2a8e:	80 38       	cpi	r24, 0x80	; 128
    2a90:	71 05       	cpc	r23, r1
    2a92:	61 05       	cpc	r22, r1
    2a94:	09 f0       	breq	.+2      	; 0x2a98 <__ftoa_engine+0x36>
    2a96:	3c 5f       	subi	r19, 0xFC	; 252
    2a98:	3c 5f       	subi	r19, 0xFC	; 252
    2a9a:	3d 93       	st	X+, r19
    2a9c:	91 30       	cpi	r25, 0x01	; 1
    2a9e:	08 f0       	brcs	.+2      	; 0x2aa2 <__ftoa_engine+0x40>
    2aa0:	80 68       	ori	r24, 0x80	; 128
    2aa2:	91 1d       	adc	r25, r1
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	1f 93       	push	r17
    2aaa:	0f 93       	push	r16
    2aac:	ff 92       	push	r15
    2aae:	ef 92       	push	r14
    2ab0:	19 2f       	mov	r17, r25
    2ab2:	98 7f       	andi	r25, 0xF8	; 248
    2ab4:	96 95       	lsr	r25
    2ab6:	e9 2f       	mov	r30, r25
    2ab8:	96 95       	lsr	r25
    2aba:	96 95       	lsr	r25
    2abc:	e9 0f       	add	r30, r25
    2abe:	ff 27       	eor	r31, r31
    2ac0:	e0 55       	subi	r30, 0x50	; 80
    2ac2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ac4:	99 27       	eor	r25, r25
    2ac6:	33 27       	eor	r19, r19
    2ac8:	ee 24       	eor	r14, r14
    2aca:	ff 24       	eor	r15, r15
    2acc:	a7 01       	movw	r20, r14
    2ace:	e7 01       	movw	r28, r14
    2ad0:	05 90       	lpm	r0, Z+
    2ad2:	08 94       	sec
    2ad4:	07 94       	ror	r0
    2ad6:	28 f4       	brcc	.+10     	; 0x2ae2 <__ftoa_engine+0x80>
    2ad8:	36 0f       	add	r19, r22
    2ada:	e7 1e       	adc	r14, r23
    2adc:	f8 1e       	adc	r15, r24
    2ade:	49 1f       	adc	r20, r25
    2ae0:	51 1d       	adc	r21, r1
    2ae2:	66 0f       	add	r22, r22
    2ae4:	77 1f       	adc	r23, r23
    2ae6:	88 1f       	adc	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	06 94       	lsr	r0
    2aec:	a1 f7       	brne	.-24     	; 0x2ad6 <__ftoa_engine+0x74>
    2aee:	05 90       	lpm	r0, Z+
    2af0:	07 94       	ror	r0
    2af2:	28 f4       	brcc	.+10     	; 0x2afe <__ftoa_engine+0x9c>
    2af4:	e7 0e       	add	r14, r23
    2af6:	f8 1e       	adc	r15, r24
    2af8:	49 1f       	adc	r20, r25
    2afa:	56 1f       	adc	r21, r22
    2afc:	c1 1d       	adc	r28, r1
    2afe:	77 0f       	add	r23, r23
    2b00:	88 1f       	adc	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	66 1f       	adc	r22, r22
    2b06:	06 94       	lsr	r0
    2b08:	a1 f7       	brne	.-24     	; 0x2af2 <__ftoa_engine+0x90>
    2b0a:	05 90       	lpm	r0, Z+
    2b0c:	07 94       	ror	r0
    2b0e:	28 f4       	brcc	.+10     	; 0x2b1a <__ftoa_engine+0xb8>
    2b10:	f8 0e       	add	r15, r24
    2b12:	49 1f       	adc	r20, r25
    2b14:	56 1f       	adc	r21, r22
    2b16:	c7 1f       	adc	r28, r23
    2b18:	d1 1d       	adc	r29, r1
    2b1a:	88 0f       	add	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	66 1f       	adc	r22, r22
    2b20:	77 1f       	adc	r23, r23
    2b22:	06 94       	lsr	r0
    2b24:	a1 f7       	brne	.-24     	; 0x2b0e <__ftoa_engine+0xac>
    2b26:	05 90       	lpm	r0, Z+
    2b28:	07 94       	ror	r0
    2b2a:	20 f4       	brcc	.+8      	; 0x2b34 <__ftoa_engine+0xd2>
    2b2c:	49 0f       	add	r20, r25
    2b2e:	56 1f       	adc	r21, r22
    2b30:	c7 1f       	adc	r28, r23
    2b32:	d8 1f       	adc	r29, r24
    2b34:	99 0f       	add	r25, r25
    2b36:	66 1f       	adc	r22, r22
    2b38:	77 1f       	adc	r23, r23
    2b3a:	88 1f       	adc	r24, r24
    2b3c:	06 94       	lsr	r0
    2b3e:	a9 f7       	brne	.-22     	; 0x2b2a <__ftoa_engine+0xc8>
    2b40:	84 91       	lpm	r24, Z
    2b42:	10 95       	com	r17
    2b44:	17 70       	andi	r17, 0x07	; 7
    2b46:	41 f0       	breq	.+16     	; 0x2b58 <__ftoa_engine+0xf6>
    2b48:	d6 95       	lsr	r29
    2b4a:	c7 95       	ror	r28
    2b4c:	57 95       	ror	r21
    2b4e:	47 95       	ror	r20
    2b50:	f7 94       	ror	r15
    2b52:	e7 94       	ror	r14
    2b54:	1a 95       	dec	r17
    2b56:	c1 f7       	brne	.-16     	; 0x2b48 <__ftoa_engine+0xe6>
    2b58:	e6 e5       	ldi	r30, 0x56	; 86
    2b5a:	f2 e0       	ldi	r31, 0x02	; 2
    2b5c:	68 94       	set
    2b5e:	15 90       	lpm	r1, Z+
    2b60:	15 91       	lpm	r17, Z+
    2b62:	35 91       	lpm	r19, Z+
    2b64:	65 91       	lpm	r22, Z+
    2b66:	95 91       	lpm	r25, Z+
    2b68:	05 90       	lpm	r0, Z+
    2b6a:	7f e2       	ldi	r23, 0x2F	; 47
    2b6c:	73 95       	inc	r23
    2b6e:	e1 18       	sub	r14, r1
    2b70:	f1 0a       	sbc	r15, r17
    2b72:	43 0b       	sbc	r20, r19
    2b74:	56 0b       	sbc	r21, r22
    2b76:	c9 0b       	sbc	r28, r25
    2b78:	d0 09       	sbc	r29, r0
    2b7a:	c0 f7       	brcc	.-16     	; 0x2b6c <__ftoa_engine+0x10a>
    2b7c:	e1 0c       	add	r14, r1
    2b7e:	f1 1e       	adc	r15, r17
    2b80:	43 1f       	adc	r20, r19
    2b82:	56 1f       	adc	r21, r22
    2b84:	c9 1f       	adc	r28, r25
    2b86:	d0 1d       	adc	r29, r0
    2b88:	7e f4       	brtc	.+30     	; 0x2ba8 <__ftoa_engine+0x146>
    2b8a:	70 33       	cpi	r23, 0x30	; 48
    2b8c:	11 f4       	brne	.+4      	; 0x2b92 <__ftoa_engine+0x130>
    2b8e:	8a 95       	dec	r24
    2b90:	e6 cf       	rjmp	.-52     	; 0x2b5e <__ftoa_engine+0xfc>
    2b92:	e8 94       	clt
    2b94:	01 50       	subi	r16, 0x01	; 1
    2b96:	30 f0       	brcs	.+12     	; 0x2ba4 <__ftoa_engine+0x142>
    2b98:	08 0f       	add	r16, r24
    2b9a:	0a f4       	brpl	.+2      	; 0x2b9e <__ftoa_engine+0x13c>
    2b9c:	00 27       	eor	r16, r16
    2b9e:	02 17       	cp	r16, r18
    2ba0:	08 f4       	brcc	.+2      	; 0x2ba4 <__ftoa_engine+0x142>
    2ba2:	20 2f       	mov	r18, r16
    2ba4:	23 95       	inc	r18
    2ba6:	02 2f       	mov	r16, r18
    2ba8:	7a 33       	cpi	r23, 0x3A	; 58
    2baa:	28 f0       	brcs	.+10     	; 0x2bb6 <__ftoa_engine+0x154>
    2bac:	79 e3       	ldi	r23, 0x39	; 57
    2bae:	7d 93       	st	X+, r23
    2bb0:	2a 95       	dec	r18
    2bb2:	e9 f7       	brne	.-6      	; 0x2bae <__ftoa_engine+0x14c>
    2bb4:	10 c0       	rjmp	.+32     	; 0x2bd6 <__ftoa_engine+0x174>
    2bb6:	7d 93       	st	X+, r23
    2bb8:	2a 95       	dec	r18
    2bba:	89 f6       	brne	.-94     	; 0x2b5e <__ftoa_engine+0xfc>
    2bbc:	06 94       	lsr	r0
    2bbe:	97 95       	ror	r25
    2bc0:	67 95       	ror	r22
    2bc2:	37 95       	ror	r19
    2bc4:	17 95       	ror	r17
    2bc6:	17 94       	ror	r1
    2bc8:	e1 18       	sub	r14, r1
    2bca:	f1 0a       	sbc	r15, r17
    2bcc:	43 0b       	sbc	r20, r19
    2bce:	56 0b       	sbc	r21, r22
    2bd0:	c9 0b       	sbc	r28, r25
    2bd2:	d0 09       	sbc	r29, r0
    2bd4:	98 f0       	brcs	.+38     	; 0x2bfc <__ftoa_engine+0x19a>
    2bd6:	23 95       	inc	r18
    2bd8:	7e 91       	ld	r23, -X
    2bda:	73 95       	inc	r23
    2bdc:	7a 33       	cpi	r23, 0x3A	; 58
    2bde:	08 f0       	brcs	.+2      	; 0x2be2 <__ftoa_engine+0x180>
    2be0:	70 e3       	ldi	r23, 0x30	; 48
    2be2:	7c 93       	st	X, r23
    2be4:	20 13       	cpse	r18, r16
    2be6:	b8 f7       	brcc	.-18     	; 0x2bd6 <__ftoa_engine+0x174>
    2be8:	7e 91       	ld	r23, -X
    2bea:	70 61       	ori	r23, 0x10	; 16
    2bec:	7d 93       	st	X+, r23
    2bee:	30 f0       	brcs	.+12     	; 0x2bfc <__ftoa_engine+0x19a>
    2bf0:	83 95       	inc	r24
    2bf2:	71 e3       	ldi	r23, 0x31	; 49
    2bf4:	7d 93       	st	X+, r23
    2bf6:	70 e3       	ldi	r23, 0x30	; 48
    2bf8:	2a 95       	dec	r18
    2bfa:	e1 f7       	brne	.-8      	; 0x2bf4 <__ftoa_engine+0x192>
    2bfc:	11 24       	eor	r1, r1
    2bfe:	ef 90       	pop	r14
    2c00:	ff 90       	pop	r15
    2c02:	0f 91       	pop	r16
    2c04:	1f 91       	pop	r17
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	99 27       	eor	r25, r25
    2c0c:	87 fd       	sbrc	r24, 7
    2c0e:	90 95       	com	r25
    2c10:	08 95       	ret

00002c12 <strnlen_P>:
    2c12:	fc 01       	movw	r30, r24
    2c14:	05 90       	lpm	r0, Z+
    2c16:	61 50       	subi	r22, 0x01	; 1
    2c18:	70 40       	sbci	r23, 0x00	; 0
    2c1a:	01 10       	cpse	r0, r1
    2c1c:	d8 f7       	brcc	.-10     	; 0x2c14 <strnlen_P+0x2>
    2c1e:	80 95       	com	r24
    2c20:	90 95       	com	r25
    2c22:	8e 0f       	add	r24, r30
    2c24:	9f 1f       	adc	r25, r31
    2c26:	08 95       	ret

00002c28 <strnlen>:
    2c28:	fc 01       	movw	r30, r24
    2c2a:	61 50       	subi	r22, 0x01	; 1
    2c2c:	70 40       	sbci	r23, 0x00	; 0
    2c2e:	01 90       	ld	r0, Z+
    2c30:	01 10       	cpse	r0, r1
    2c32:	d8 f7       	brcc	.-10     	; 0x2c2a <strnlen+0x2>
    2c34:	80 95       	com	r24
    2c36:	90 95       	com	r25
    2c38:	8e 0f       	add	r24, r30
    2c3a:	9f 1f       	adc	r25, r31
    2c3c:	08 95       	ret

00002c3e <fdevopen>:
    2c3e:	0f 93       	push	r16
    2c40:	1f 93       	push	r17
    2c42:	cf 93       	push	r28
    2c44:	df 93       	push	r29
    2c46:	00 97       	sbiw	r24, 0x00	; 0
    2c48:	31 f4       	brne	.+12     	; 0x2c56 <fdevopen+0x18>
    2c4a:	61 15       	cp	r22, r1
    2c4c:	71 05       	cpc	r23, r1
    2c4e:	19 f4       	brne	.+6      	; 0x2c56 <fdevopen+0x18>
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	39 c0       	rjmp	.+114    	; 0x2cc8 <fdevopen+0x8a>
    2c56:	8b 01       	movw	r16, r22
    2c58:	ec 01       	movw	r28, r24
    2c5a:	6e e0       	ldi	r22, 0x0E	; 14
    2c5c:	70 e0       	ldi	r23, 0x00	; 0
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	10 d1       	rcall	.+544    	; 0x2e84 <calloc>
    2c64:	fc 01       	movw	r30, r24
    2c66:	89 2b       	or	r24, r25
    2c68:	99 f3       	breq	.-26     	; 0x2c50 <fdevopen+0x12>
    2c6a:	80 e8       	ldi	r24, 0x80	; 128
    2c6c:	83 83       	std	Z+3, r24	; 0x03
    2c6e:	01 15       	cp	r16, r1
    2c70:	11 05       	cpc	r17, r1
    2c72:	71 f0       	breq	.+28     	; 0x2c90 <fdevopen+0x52>
    2c74:	02 87       	std	Z+10, r16	; 0x0a
    2c76:	13 87       	std	Z+11, r17	; 0x0b
    2c78:	81 e8       	ldi	r24, 0x81	; 129
    2c7a:	83 83       	std	Z+3, r24	; 0x03
    2c7c:	80 91 a0 20 	lds	r24, 0x20A0
    2c80:	90 91 a1 20 	lds	r25, 0x20A1
    2c84:	89 2b       	or	r24, r25
    2c86:	21 f4       	brne	.+8      	; 0x2c90 <fdevopen+0x52>
    2c88:	e0 93 a0 20 	sts	0x20A0, r30
    2c8c:	f0 93 a1 20 	sts	0x20A1, r31
    2c90:	20 97       	sbiw	r28, 0x00	; 0
    2c92:	c9 f0       	breq	.+50     	; 0x2cc6 <fdevopen+0x88>
    2c94:	c0 87       	std	Z+8, r28	; 0x08
    2c96:	d1 87       	std	Z+9, r29	; 0x09
    2c98:	83 81       	ldd	r24, Z+3	; 0x03
    2c9a:	82 60       	ori	r24, 0x02	; 2
    2c9c:	83 83       	std	Z+3, r24	; 0x03
    2c9e:	80 91 a2 20 	lds	r24, 0x20A2
    2ca2:	90 91 a3 20 	lds	r25, 0x20A3
    2ca6:	89 2b       	or	r24, r25
    2ca8:	71 f4       	brne	.+28     	; 0x2cc6 <fdevopen+0x88>
    2caa:	e0 93 a2 20 	sts	0x20A2, r30
    2cae:	f0 93 a3 20 	sts	0x20A3, r31
    2cb2:	80 91 a4 20 	lds	r24, 0x20A4
    2cb6:	90 91 a5 20 	lds	r25, 0x20A5
    2cba:	89 2b       	or	r24, r25
    2cbc:	21 f4       	brne	.+8      	; 0x2cc6 <fdevopen+0x88>
    2cbe:	e0 93 a4 20 	sts	0x20A4, r30
    2cc2:	f0 93 a5 20 	sts	0x20A5, r31
    2cc6:	cf 01       	movw	r24, r30
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	08 95       	ret

00002cd2 <fputc>:
    2cd2:	0f 93       	push	r16
    2cd4:	1f 93       	push	r17
    2cd6:	cf 93       	push	r28
    2cd8:	df 93       	push	r29
    2cda:	fb 01       	movw	r30, r22
    2cdc:	23 81       	ldd	r18, Z+3	; 0x03
    2cde:	21 fd       	sbrc	r18, 1
    2ce0:	03 c0       	rjmp	.+6      	; 0x2ce8 <fputc+0x16>
    2ce2:	8f ef       	ldi	r24, 0xFF	; 255
    2ce4:	9f ef       	ldi	r25, 0xFF	; 255
    2ce6:	28 c0       	rjmp	.+80     	; 0x2d38 <fputc+0x66>
    2ce8:	22 ff       	sbrs	r18, 2
    2cea:	16 c0       	rjmp	.+44     	; 0x2d18 <fputc+0x46>
    2cec:	46 81       	ldd	r20, Z+6	; 0x06
    2cee:	57 81       	ldd	r21, Z+7	; 0x07
    2cf0:	24 81       	ldd	r18, Z+4	; 0x04
    2cf2:	35 81       	ldd	r19, Z+5	; 0x05
    2cf4:	42 17       	cp	r20, r18
    2cf6:	53 07       	cpc	r21, r19
    2cf8:	44 f4       	brge	.+16     	; 0x2d0a <fputc+0x38>
    2cfa:	a0 81       	ld	r26, Z
    2cfc:	b1 81       	ldd	r27, Z+1	; 0x01
    2cfe:	9d 01       	movw	r18, r26
    2d00:	2f 5f       	subi	r18, 0xFF	; 255
    2d02:	3f 4f       	sbci	r19, 0xFF	; 255
    2d04:	20 83       	st	Z, r18
    2d06:	31 83       	std	Z+1, r19	; 0x01
    2d08:	8c 93       	st	X, r24
    2d0a:	26 81       	ldd	r18, Z+6	; 0x06
    2d0c:	37 81       	ldd	r19, Z+7	; 0x07
    2d0e:	2f 5f       	subi	r18, 0xFF	; 255
    2d10:	3f 4f       	sbci	r19, 0xFF	; 255
    2d12:	26 83       	std	Z+6, r18	; 0x06
    2d14:	37 83       	std	Z+7, r19	; 0x07
    2d16:	10 c0       	rjmp	.+32     	; 0x2d38 <fputc+0x66>
    2d18:	eb 01       	movw	r28, r22
    2d1a:	09 2f       	mov	r16, r25
    2d1c:	18 2f       	mov	r17, r24
    2d1e:	00 84       	ldd	r0, Z+8	; 0x08
    2d20:	f1 85       	ldd	r31, Z+9	; 0x09
    2d22:	e0 2d       	mov	r30, r0
    2d24:	19 95       	eicall
    2d26:	89 2b       	or	r24, r25
    2d28:	e1 f6       	brne	.-72     	; 0x2ce2 <fputc+0x10>
    2d2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d2c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d2e:	01 96       	adiw	r24, 0x01	; 1
    2d30:	8e 83       	std	Y+6, r24	; 0x06
    2d32:	9f 83       	std	Y+7, r25	; 0x07
    2d34:	81 2f       	mov	r24, r17
    2d36:	90 2f       	mov	r25, r16
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	1f 91       	pop	r17
    2d3e:	0f 91       	pop	r16
    2d40:	08 95       	ret

00002d42 <printf>:
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	ae 01       	movw	r20, r28
    2d4c:	4a 5f       	subi	r20, 0xFA	; 250
    2d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d50:	fa 01       	movw	r30, r20
    2d52:	61 91       	ld	r22, Z+
    2d54:	71 91       	ld	r23, Z+
    2d56:	af 01       	movw	r20, r30
    2d58:	80 91 a2 20 	lds	r24, 0x20A2
    2d5c:	90 91 a3 20 	lds	r25, 0x20A3
    2d60:	11 da       	rcall	.-3038   	; 0x2184 <vfprintf>
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	08 95       	ret

00002d68 <puts>:
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	e0 91 a2 20 	lds	r30, 0x20A2
    2d74:	f0 91 a3 20 	lds	r31, 0x20A3
    2d78:	23 81       	ldd	r18, Z+3	; 0x03
    2d7a:	21 ff       	sbrs	r18, 1
    2d7c:	1b c0       	rjmp	.+54     	; 0x2db4 <puts+0x4c>
    2d7e:	8c 01       	movw	r16, r24
    2d80:	d0 e0       	ldi	r29, 0x00	; 0
    2d82:	c0 e0       	ldi	r28, 0x00	; 0
    2d84:	f8 01       	movw	r30, r16
    2d86:	81 91       	ld	r24, Z+
    2d88:	8f 01       	movw	r16, r30
    2d8a:	60 91 a2 20 	lds	r22, 0x20A2
    2d8e:	70 91 a3 20 	lds	r23, 0x20A3
    2d92:	db 01       	movw	r26, r22
    2d94:	18 96       	adiw	r26, 0x08	; 8
    2d96:	ed 91       	ld	r30, X+
    2d98:	fc 91       	ld	r31, X
    2d9a:	19 97       	sbiw	r26, 0x09	; 9
    2d9c:	88 23       	and	r24, r24
    2d9e:	31 f0       	breq	.+12     	; 0x2dac <puts+0x44>
    2da0:	19 95       	eicall
    2da2:	89 2b       	or	r24, r25
    2da4:	79 f3       	breq	.-34     	; 0x2d84 <puts+0x1c>
    2da6:	df ef       	ldi	r29, 0xFF	; 255
    2da8:	cf ef       	ldi	r28, 0xFF	; 255
    2daa:	ec cf       	rjmp	.-40     	; 0x2d84 <puts+0x1c>
    2dac:	8a e0       	ldi	r24, 0x0A	; 10
    2dae:	19 95       	eicall
    2db0:	89 2b       	or	r24, r25
    2db2:	19 f0       	breq	.+6      	; 0x2dba <puts+0x52>
    2db4:	8f ef       	ldi	r24, 0xFF	; 255
    2db6:	9f ef       	ldi	r25, 0xFF	; 255
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <puts+0x56>
    2dba:	8d 2f       	mov	r24, r29
    2dbc:	9c 2f       	mov	r25, r28
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	08 95       	ret

00002dc8 <__ultoa_invert>:
    2dc8:	fa 01       	movw	r30, r20
    2dca:	aa 27       	eor	r26, r26
    2dcc:	28 30       	cpi	r18, 0x08	; 8
    2dce:	51 f1       	breq	.+84     	; 0x2e24 <__ultoa_invert+0x5c>
    2dd0:	20 31       	cpi	r18, 0x10	; 16
    2dd2:	81 f1       	breq	.+96     	; 0x2e34 <__ultoa_invert+0x6c>
    2dd4:	e8 94       	clt
    2dd6:	6f 93       	push	r22
    2dd8:	6e 7f       	andi	r22, 0xFE	; 254
    2dda:	6e 5f       	subi	r22, 0xFE	; 254
    2ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dde:	8f 4f       	sbci	r24, 0xFF	; 255
    2de0:	9f 4f       	sbci	r25, 0xFF	; 255
    2de2:	af 4f       	sbci	r26, 0xFF	; 255
    2de4:	b1 e0       	ldi	r27, 0x01	; 1
    2de6:	3e d0       	rcall	.+124    	; 0x2e64 <__ultoa_invert+0x9c>
    2de8:	b4 e0       	ldi	r27, 0x04	; 4
    2dea:	3c d0       	rcall	.+120    	; 0x2e64 <__ultoa_invert+0x9c>
    2dec:	67 0f       	add	r22, r23
    2dee:	78 1f       	adc	r23, r24
    2df0:	89 1f       	adc	r24, r25
    2df2:	9a 1f       	adc	r25, r26
    2df4:	a1 1d       	adc	r26, r1
    2df6:	68 0f       	add	r22, r24
    2df8:	79 1f       	adc	r23, r25
    2dfa:	8a 1f       	adc	r24, r26
    2dfc:	91 1d       	adc	r25, r1
    2dfe:	a1 1d       	adc	r26, r1
    2e00:	6a 0f       	add	r22, r26
    2e02:	71 1d       	adc	r23, r1
    2e04:	81 1d       	adc	r24, r1
    2e06:	91 1d       	adc	r25, r1
    2e08:	a1 1d       	adc	r26, r1
    2e0a:	20 d0       	rcall	.+64     	; 0x2e4c <__ultoa_invert+0x84>
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <__ultoa_invert+0x48>
    2e0e:	68 94       	set
    2e10:	3f 91       	pop	r19
    2e12:	2a e0       	ldi	r18, 0x0A	; 10
    2e14:	26 9f       	mul	r18, r22
    2e16:	11 24       	eor	r1, r1
    2e18:	30 19       	sub	r19, r0
    2e1a:	30 5d       	subi	r19, 0xD0	; 208
    2e1c:	31 93       	st	Z+, r19
    2e1e:	de f6       	brtc	.-74     	; 0x2dd6 <__ultoa_invert+0xe>
    2e20:	cf 01       	movw	r24, r30
    2e22:	08 95       	ret
    2e24:	46 2f       	mov	r20, r22
    2e26:	47 70       	andi	r20, 0x07	; 7
    2e28:	40 5d       	subi	r20, 0xD0	; 208
    2e2a:	41 93       	st	Z+, r20
    2e2c:	b3 e0       	ldi	r27, 0x03	; 3
    2e2e:	0f d0       	rcall	.+30     	; 0x2e4e <__ultoa_invert+0x86>
    2e30:	c9 f7       	brne	.-14     	; 0x2e24 <__ultoa_invert+0x5c>
    2e32:	f6 cf       	rjmp	.-20     	; 0x2e20 <__ultoa_invert+0x58>
    2e34:	46 2f       	mov	r20, r22
    2e36:	4f 70       	andi	r20, 0x0F	; 15
    2e38:	40 5d       	subi	r20, 0xD0	; 208
    2e3a:	4a 33       	cpi	r20, 0x3A	; 58
    2e3c:	18 f0       	brcs	.+6      	; 0x2e44 <__ultoa_invert+0x7c>
    2e3e:	49 5d       	subi	r20, 0xD9	; 217
    2e40:	31 fd       	sbrc	r19, 1
    2e42:	40 52       	subi	r20, 0x20	; 32
    2e44:	41 93       	st	Z+, r20
    2e46:	02 d0       	rcall	.+4      	; 0x2e4c <__ultoa_invert+0x84>
    2e48:	a9 f7       	brne	.-22     	; 0x2e34 <__ultoa_invert+0x6c>
    2e4a:	ea cf       	rjmp	.-44     	; 0x2e20 <__ultoa_invert+0x58>
    2e4c:	b4 e0       	ldi	r27, 0x04	; 4
    2e4e:	a6 95       	lsr	r26
    2e50:	97 95       	ror	r25
    2e52:	87 95       	ror	r24
    2e54:	77 95       	ror	r23
    2e56:	67 95       	ror	r22
    2e58:	ba 95       	dec	r27
    2e5a:	c9 f7       	brne	.-14     	; 0x2e4e <__ultoa_invert+0x86>
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	61 05       	cpc	r22, r1
    2e60:	71 05       	cpc	r23, r1
    2e62:	08 95       	ret
    2e64:	9b 01       	movw	r18, r22
    2e66:	ac 01       	movw	r20, r24
    2e68:	0a 2e       	mov	r0, r26
    2e6a:	06 94       	lsr	r0
    2e6c:	57 95       	ror	r21
    2e6e:	47 95       	ror	r20
    2e70:	37 95       	ror	r19
    2e72:	27 95       	ror	r18
    2e74:	ba 95       	dec	r27
    2e76:	c9 f7       	brne	.-14     	; 0x2e6a <__ultoa_invert+0xa2>
    2e78:	62 0f       	add	r22, r18
    2e7a:	73 1f       	adc	r23, r19
    2e7c:	84 1f       	adc	r24, r20
    2e7e:	95 1f       	adc	r25, r21
    2e80:	a0 1d       	adc	r26, r0
    2e82:	08 95       	ret

00002e84 <calloc>:
    2e84:	0f 93       	push	r16
    2e86:	1f 93       	push	r17
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	86 9f       	mul	r24, r22
    2e8e:	80 01       	movw	r16, r0
    2e90:	87 9f       	mul	r24, r23
    2e92:	10 0d       	add	r17, r0
    2e94:	96 9f       	mul	r25, r22
    2e96:	10 0d       	add	r17, r0
    2e98:	11 24       	eor	r1, r1
    2e9a:	c8 01       	movw	r24, r16
    2e9c:	0d d0       	rcall	.+26     	; 0x2eb8 <malloc>
    2e9e:	ec 01       	movw	r28, r24
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	21 f0       	breq	.+8      	; 0x2eac <calloc+0x28>
    2ea4:	a8 01       	movw	r20, r16
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	70 e0       	ldi	r23, 0x00	; 0
    2eaa:	33 d1       	rcall	.+614    	; 0x3112 <memset>
    2eac:	ce 01       	movw	r24, r28
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	08 95       	ret

00002eb8 <malloc>:
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	82 30       	cpi	r24, 0x02	; 2
    2ebe:	91 05       	cpc	r25, r1
    2ec0:	10 f4       	brcc	.+4      	; 0x2ec6 <malloc+0xe>
    2ec2:	82 e0       	ldi	r24, 0x02	; 2
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	e0 91 a8 20 	lds	r30, 0x20A8
    2eca:	f0 91 a9 20 	lds	r31, 0x20A9
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	c0 e0       	ldi	r28, 0x00	; 0
    2ed4:	d0 e0       	ldi	r29, 0x00	; 0
    2ed6:	30 97       	sbiw	r30, 0x00	; 0
    2ed8:	11 f1       	breq	.+68     	; 0x2f1e <malloc+0x66>
    2eda:	40 81       	ld	r20, Z
    2edc:	51 81       	ldd	r21, Z+1	; 0x01
    2ede:	48 17       	cp	r20, r24
    2ee0:	59 07       	cpc	r21, r25
    2ee2:	c0 f0       	brcs	.+48     	; 0x2f14 <malloc+0x5c>
    2ee4:	48 17       	cp	r20, r24
    2ee6:	59 07       	cpc	r21, r25
    2ee8:	61 f4       	brne	.+24     	; 0x2f02 <malloc+0x4a>
    2eea:	82 81       	ldd	r24, Z+2	; 0x02
    2eec:	93 81       	ldd	r25, Z+3	; 0x03
    2eee:	20 97       	sbiw	r28, 0x00	; 0
    2ef0:	19 f0       	breq	.+6      	; 0x2ef8 <malloc+0x40>
    2ef2:	8a 83       	std	Y+2, r24	; 0x02
    2ef4:	9b 83       	std	Y+3, r25	; 0x03
    2ef6:	2b c0       	rjmp	.+86     	; 0x2f4e <malloc+0x96>
    2ef8:	80 93 a8 20 	sts	0x20A8, r24
    2efc:	90 93 a9 20 	sts	0x20A9, r25
    2f00:	26 c0       	rjmp	.+76     	; 0x2f4e <malloc+0x96>
    2f02:	21 15       	cp	r18, r1
    2f04:	31 05       	cpc	r19, r1
    2f06:	19 f0       	breq	.+6      	; 0x2f0e <malloc+0x56>
    2f08:	42 17       	cp	r20, r18
    2f0a:	53 07       	cpc	r21, r19
    2f0c:	18 f4       	brcc	.+6      	; 0x2f14 <malloc+0x5c>
    2f0e:	9a 01       	movw	r18, r20
    2f10:	be 01       	movw	r22, r28
    2f12:	df 01       	movw	r26, r30
    2f14:	ef 01       	movw	r28, r30
    2f16:	02 80       	ldd	r0, Z+2	; 0x02
    2f18:	f3 81       	ldd	r31, Z+3	; 0x03
    2f1a:	e0 2d       	mov	r30, r0
    2f1c:	dc cf       	rjmp	.-72     	; 0x2ed6 <malloc+0x1e>
    2f1e:	21 15       	cp	r18, r1
    2f20:	31 05       	cpc	r19, r1
    2f22:	09 f1       	breq	.+66     	; 0x2f66 <malloc+0xae>
    2f24:	28 1b       	sub	r18, r24
    2f26:	39 0b       	sbc	r19, r25
    2f28:	24 30       	cpi	r18, 0x04	; 4
    2f2a:	31 05       	cpc	r19, r1
    2f2c:	90 f4       	brcc	.+36     	; 0x2f52 <malloc+0x9a>
    2f2e:	12 96       	adiw	r26, 0x02	; 2
    2f30:	8d 91       	ld	r24, X+
    2f32:	9c 91       	ld	r25, X
    2f34:	13 97       	sbiw	r26, 0x03	; 3
    2f36:	61 15       	cp	r22, r1
    2f38:	71 05       	cpc	r23, r1
    2f3a:	21 f0       	breq	.+8      	; 0x2f44 <malloc+0x8c>
    2f3c:	fb 01       	movw	r30, r22
    2f3e:	82 83       	std	Z+2, r24	; 0x02
    2f40:	93 83       	std	Z+3, r25	; 0x03
    2f42:	04 c0       	rjmp	.+8      	; 0x2f4c <malloc+0x94>
    2f44:	80 93 a8 20 	sts	0x20A8, r24
    2f48:	90 93 a9 20 	sts	0x20A9, r25
    2f4c:	fd 01       	movw	r30, r26
    2f4e:	32 96       	adiw	r30, 0x02	; 2
    2f50:	44 c0       	rjmp	.+136    	; 0x2fda <malloc+0x122>
    2f52:	fd 01       	movw	r30, r26
    2f54:	e2 0f       	add	r30, r18
    2f56:	f3 1f       	adc	r31, r19
    2f58:	81 93       	st	Z+, r24
    2f5a:	91 93       	st	Z+, r25
    2f5c:	22 50       	subi	r18, 0x02	; 2
    2f5e:	31 09       	sbc	r19, r1
    2f60:	2d 93       	st	X+, r18
    2f62:	3c 93       	st	X, r19
    2f64:	3a c0       	rjmp	.+116    	; 0x2fda <malloc+0x122>
    2f66:	20 91 a6 20 	lds	r18, 0x20A6
    2f6a:	30 91 a7 20 	lds	r19, 0x20A7
    2f6e:	23 2b       	or	r18, r19
    2f70:	41 f4       	brne	.+16     	; 0x2f82 <malloc+0xca>
    2f72:	20 91 02 20 	lds	r18, 0x2002
    2f76:	30 91 03 20 	lds	r19, 0x2003
    2f7a:	20 93 a6 20 	sts	0x20A6, r18
    2f7e:	30 93 a7 20 	sts	0x20A7, r19
    2f82:	20 91 00 20 	lds	r18, 0x2000
    2f86:	30 91 01 20 	lds	r19, 0x2001
    2f8a:	21 15       	cp	r18, r1
    2f8c:	31 05       	cpc	r19, r1
    2f8e:	41 f4       	brne	.+16     	; 0x2fa0 <malloc+0xe8>
    2f90:	2d b7       	in	r18, 0x3d	; 61
    2f92:	3e b7       	in	r19, 0x3e	; 62
    2f94:	40 91 04 20 	lds	r20, 0x2004
    2f98:	50 91 05 20 	lds	r21, 0x2005
    2f9c:	24 1b       	sub	r18, r20
    2f9e:	35 0b       	sbc	r19, r21
    2fa0:	e0 91 a6 20 	lds	r30, 0x20A6
    2fa4:	f0 91 a7 20 	lds	r31, 0x20A7
    2fa8:	e2 17       	cp	r30, r18
    2faa:	f3 07       	cpc	r31, r19
    2fac:	a0 f4       	brcc	.+40     	; 0x2fd6 <malloc+0x11e>
    2fae:	2e 1b       	sub	r18, r30
    2fb0:	3f 0b       	sbc	r19, r31
    2fb2:	28 17       	cp	r18, r24
    2fb4:	39 07       	cpc	r19, r25
    2fb6:	78 f0       	brcs	.+30     	; 0x2fd6 <malloc+0x11e>
    2fb8:	ac 01       	movw	r20, r24
    2fba:	4e 5f       	subi	r20, 0xFE	; 254
    2fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2fbe:	24 17       	cp	r18, r20
    2fc0:	35 07       	cpc	r19, r21
    2fc2:	48 f0       	brcs	.+18     	; 0x2fd6 <malloc+0x11e>
    2fc4:	4e 0f       	add	r20, r30
    2fc6:	5f 1f       	adc	r21, r31
    2fc8:	40 93 a6 20 	sts	0x20A6, r20
    2fcc:	50 93 a7 20 	sts	0x20A7, r21
    2fd0:	81 93       	st	Z+, r24
    2fd2:	91 93       	st	Z+, r25
    2fd4:	02 c0       	rjmp	.+4      	; 0x2fda <malloc+0x122>
    2fd6:	e0 e0       	ldi	r30, 0x00	; 0
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	cf 01       	movw	r24, r30
    2fdc:	df 91       	pop	r29
    2fde:	cf 91       	pop	r28
    2fe0:	08 95       	ret

00002fe2 <free>:
    2fe2:	0f 93       	push	r16
    2fe4:	1f 93       	push	r17
    2fe6:	cf 93       	push	r28
    2fe8:	df 93       	push	r29
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	09 f4       	brne	.+2      	; 0x2ff0 <free+0xe>
    2fee:	8c c0       	rjmp	.+280    	; 0x3108 <free+0x126>
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	32 97       	sbiw	r30, 0x02	; 2
    2ff4:	12 82       	std	Z+2, r1	; 0x02
    2ff6:	13 82       	std	Z+3, r1	; 0x03
    2ff8:	00 91 a8 20 	lds	r16, 0x20A8
    2ffc:	10 91 a9 20 	lds	r17, 0x20A9
    3000:	01 15       	cp	r16, r1
    3002:	11 05       	cpc	r17, r1
    3004:	81 f4       	brne	.+32     	; 0x3026 <free+0x44>
    3006:	20 81       	ld	r18, Z
    3008:	31 81       	ldd	r19, Z+1	; 0x01
    300a:	82 0f       	add	r24, r18
    300c:	93 1f       	adc	r25, r19
    300e:	20 91 a6 20 	lds	r18, 0x20A6
    3012:	30 91 a7 20 	lds	r19, 0x20A7
    3016:	28 17       	cp	r18, r24
    3018:	39 07       	cpc	r19, r25
    301a:	79 f5       	brne	.+94     	; 0x307a <free+0x98>
    301c:	e0 93 a6 20 	sts	0x20A6, r30
    3020:	f0 93 a7 20 	sts	0x20A7, r31
    3024:	71 c0       	rjmp	.+226    	; 0x3108 <free+0x126>
    3026:	d8 01       	movw	r26, r16
    3028:	40 e0       	ldi	r20, 0x00	; 0
    302a:	50 e0       	ldi	r21, 0x00	; 0
    302c:	ae 17       	cp	r26, r30
    302e:	bf 07       	cpc	r27, r31
    3030:	50 f4       	brcc	.+20     	; 0x3046 <free+0x64>
    3032:	12 96       	adiw	r26, 0x02	; 2
    3034:	2d 91       	ld	r18, X+
    3036:	3c 91       	ld	r19, X
    3038:	13 97       	sbiw	r26, 0x03	; 3
    303a:	ad 01       	movw	r20, r26
    303c:	21 15       	cp	r18, r1
    303e:	31 05       	cpc	r19, r1
    3040:	09 f1       	breq	.+66     	; 0x3084 <free+0xa2>
    3042:	d9 01       	movw	r26, r18
    3044:	f3 cf       	rjmp	.-26     	; 0x302c <free+0x4a>
    3046:	9d 01       	movw	r18, r26
    3048:	da 01       	movw	r26, r20
    304a:	22 83       	std	Z+2, r18	; 0x02
    304c:	33 83       	std	Z+3, r19	; 0x03
    304e:	60 81       	ld	r22, Z
    3050:	71 81       	ldd	r23, Z+1	; 0x01
    3052:	86 0f       	add	r24, r22
    3054:	97 1f       	adc	r25, r23
    3056:	82 17       	cp	r24, r18
    3058:	93 07       	cpc	r25, r19
    305a:	69 f4       	brne	.+26     	; 0x3076 <free+0x94>
    305c:	ec 01       	movw	r28, r24
    305e:	28 81       	ld	r18, Y
    3060:	39 81       	ldd	r19, Y+1	; 0x01
    3062:	26 0f       	add	r18, r22
    3064:	37 1f       	adc	r19, r23
    3066:	2e 5f       	subi	r18, 0xFE	; 254
    3068:	3f 4f       	sbci	r19, 0xFF	; 255
    306a:	20 83       	st	Z, r18
    306c:	31 83       	std	Z+1, r19	; 0x01
    306e:	8a 81       	ldd	r24, Y+2	; 0x02
    3070:	9b 81       	ldd	r25, Y+3	; 0x03
    3072:	82 83       	std	Z+2, r24	; 0x02
    3074:	93 83       	std	Z+3, r25	; 0x03
    3076:	45 2b       	or	r20, r21
    3078:	29 f4       	brne	.+10     	; 0x3084 <free+0xa2>
    307a:	e0 93 a8 20 	sts	0x20A8, r30
    307e:	f0 93 a9 20 	sts	0x20A9, r31
    3082:	42 c0       	rjmp	.+132    	; 0x3108 <free+0x126>
    3084:	12 96       	adiw	r26, 0x02	; 2
    3086:	ed 93       	st	X+, r30
    3088:	fc 93       	st	X, r31
    308a:	13 97       	sbiw	r26, 0x03	; 3
    308c:	ed 01       	movw	r28, r26
    308e:	49 91       	ld	r20, Y+
    3090:	59 91       	ld	r21, Y+
    3092:	9e 01       	movw	r18, r28
    3094:	24 0f       	add	r18, r20
    3096:	35 1f       	adc	r19, r21
    3098:	e2 17       	cp	r30, r18
    309a:	f3 07       	cpc	r31, r19
    309c:	71 f4       	brne	.+28     	; 0x30ba <free+0xd8>
    309e:	80 81       	ld	r24, Z
    30a0:	91 81       	ldd	r25, Z+1	; 0x01
    30a2:	84 0f       	add	r24, r20
    30a4:	95 1f       	adc	r25, r21
    30a6:	02 96       	adiw	r24, 0x02	; 2
    30a8:	8d 93       	st	X+, r24
    30aa:	9c 93       	st	X, r25
    30ac:	11 97       	sbiw	r26, 0x01	; 1
    30ae:	82 81       	ldd	r24, Z+2	; 0x02
    30b0:	93 81       	ldd	r25, Z+3	; 0x03
    30b2:	12 96       	adiw	r26, 0x02	; 2
    30b4:	8d 93       	st	X+, r24
    30b6:	9c 93       	st	X, r25
    30b8:	13 97       	sbiw	r26, 0x03	; 3
    30ba:	e0 e0       	ldi	r30, 0x00	; 0
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	d8 01       	movw	r26, r16
    30c0:	12 96       	adiw	r26, 0x02	; 2
    30c2:	8d 91       	ld	r24, X+
    30c4:	9c 91       	ld	r25, X
    30c6:	13 97       	sbiw	r26, 0x03	; 3
    30c8:	00 97       	sbiw	r24, 0x00	; 0
    30ca:	19 f0       	breq	.+6      	; 0x30d2 <free+0xf0>
    30cc:	f8 01       	movw	r30, r16
    30ce:	8c 01       	movw	r16, r24
    30d0:	f6 cf       	rjmp	.-20     	; 0x30be <free+0xdc>
    30d2:	8d 91       	ld	r24, X+
    30d4:	9c 91       	ld	r25, X
    30d6:	98 01       	movw	r18, r16
    30d8:	2e 5f       	subi	r18, 0xFE	; 254
    30da:	3f 4f       	sbci	r19, 0xFF	; 255
    30dc:	82 0f       	add	r24, r18
    30de:	93 1f       	adc	r25, r19
    30e0:	20 91 a6 20 	lds	r18, 0x20A6
    30e4:	30 91 a7 20 	lds	r19, 0x20A7
    30e8:	28 17       	cp	r18, r24
    30ea:	39 07       	cpc	r19, r25
    30ec:	69 f4       	brne	.+26     	; 0x3108 <free+0x126>
    30ee:	30 97       	sbiw	r30, 0x00	; 0
    30f0:	29 f4       	brne	.+10     	; 0x30fc <free+0x11a>
    30f2:	10 92 a8 20 	sts	0x20A8, r1
    30f6:	10 92 a9 20 	sts	0x20A9, r1
    30fa:	02 c0       	rjmp	.+4      	; 0x3100 <free+0x11e>
    30fc:	12 82       	std	Z+2, r1	; 0x02
    30fe:	13 82       	std	Z+3, r1	; 0x03
    3100:	00 93 a6 20 	sts	0x20A6, r16
    3104:	10 93 a7 20 	sts	0x20A7, r17
    3108:	df 91       	pop	r29
    310a:	cf 91       	pop	r28
    310c:	1f 91       	pop	r17
    310e:	0f 91       	pop	r16
    3110:	08 95       	ret

00003112 <memset>:
    3112:	dc 01       	movw	r26, r24
    3114:	01 c0       	rjmp	.+2      	; 0x3118 <memset+0x6>
    3116:	6d 93       	st	X+, r22
    3118:	41 50       	subi	r20, 0x01	; 1
    311a:	50 40       	sbci	r21, 0x00	; 0
    311c:	e0 f7       	brcc	.-8      	; 0x3116 <memset+0x4>
    311e:	08 95       	ret

00003120 <_exit>:
    3120:	f8 94       	cli

00003122 <__stop_program>:
    3122:	ff cf       	rjmp	.-2      	; 0x3122 <__stop_program>
