
TEAM2 ONE MONTH CODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  00001346  000013da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080200e  0080200e  000013e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001458  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000081e0  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001277  00000000  00000000  00009840  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000040d6  00000000  00000000  0000aab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b8  00000000  00000000  0000eb90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00029ea3  00000000  00000000  0000f248  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002874  00000000  00000000  000390eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0003b95f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000979d  00000000  00000000  0003baff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	1a c1       	rjmp	.+564    	; 0x23e <__bad_interrupt>
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	08 c1       	rjmp	.+528    	; 0x23e <__bad_interrupt>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	04 c1       	rjmp	.+520    	; 0x23e <__bad_interrupt>
      36:	00 00       	nop
      38:	02 c1       	rjmp	.+516    	; 0x23e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	00 c1       	rjmp	.+512    	; 0x23e <__bad_interrupt>
      3e:	00 00       	nop
      40:	fe c0       	rjmp	.+508    	; 0x23e <__bad_interrupt>
      42:	00 00       	nop
      44:	fc c0       	rjmp	.+504    	; 0x23e <__bad_interrupt>
      46:	00 00       	nop
      48:	fa c0       	rjmp	.+500    	; 0x23e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f8 c0       	rjmp	.+496    	; 0x23e <__bad_interrupt>
      4e:	00 00       	nop
      50:	f6 c0       	rjmp	.+492    	; 0x23e <__bad_interrupt>
      52:	00 00       	nop
      54:	f4 c0       	rjmp	.+488    	; 0x23e <__bad_interrupt>
      56:	00 00       	nop
      58:	f2 c0       	rjmp	.+484    	; 0x23e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f0 c0       	rjmp	.+480    	; 0x23e <__bad_interrupt>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	23 c2       	rjmp	.+1094   	; 0x4e4 <__vector_39>
      9e:	00 00       	nop
      a0:	5e c2       	rjmp	.+1212   	; 0x55e <__vector_40>
      a2:	00 00       	nop
      a4:	99 c2       	rjmp	.+1330   	; 0x5d8 <__vector_41>
      a6:	00 00       	nop
      a8:	d4 c2       	rjmp	.+1448   	; 0x652 <__vector_42>
      aa:	00 00       	nop
      ac:	c8 c0       	rjmp	.+400    	; 0x23e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c2 c0       	rjmp	.+388    	; 0x23e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c0 c0       	rjmp	.+384    	; 0x23e <__bad_interrupt>
      be:	00 00       	nop
      c0:	be c0       	rjmp	.+380    	; 0x23e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bc c0       	rjmp	.+376    	; 0x23e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ba c0       	rjmp	.+372    	; 0x23e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b8 c0       	rjmp	.+368    	; 0x23e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b6 c0       	rjmp	.+364    	; 0x23e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b4 c0       	rjmp	.+360    	; 0x23e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b2 c0       	rjmp	.+356    	; 0x23e <__bad_interrupt>
      da:	00 00       	nop
      dc:	b0 c0       	rjmp	.+352    	; 0x23e <__bad_interrupt>
      de:	00 00       	nop
      e0:	ae c0       	rjmp	.+348    	; 0x23e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	9e c0       	rjmp	.+316    	; 0x23e <__bad_interrupt>
     102:	00 00       	nop
     104:	9c c0       	rjmp	.+312    	; 0x23e <__bad_interrupt>
     106:	00 00       	nop
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ef c0       	rjmp	.+478    	; 0x2fc <__vector_71>
     11e:	00 00       	nop
     120:	2a c1       	rjmp	.+596    	; 0x376 <__vector_72>
     122:	00 00       	nop
     124:	65 c1       	rjmp	.+714    	; 0x3f0 <__vector_73>
     126:	00 00       	nop
     128:	a0 c1       	rjmp	.+832    	; 0x46a <__vector_74>
     12a:	00 00       	nop
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	84 c0       	rjmp	.+264    	; 0x23e <__bad_interrupt>
     136:	00 00       	nop
     138:	82 c0       	rjmp	.+260    	; 0x23e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	80 c0       	rjmp	.+256    	; 0x23e <__bad_interrupt>
     13e:	00 00       	nop
     140:	7e c0       	rjmp	.+252    	; 0x23e <__bad_interrupt>
     142:	00 00       	nop
     144:	7c c0       	rjmp	.+248    	; 0x23e <__bad_interrupt>
     146:	00 00       	nop
     148:	7a c0       	rjmp	.+244    	; 0x23e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	78 c0       	rjmp	.+240    	; 0x23e <__bad_interrupt>
     14e:	00 00       	nop
     150:	76 c0       	rjmp	.+236    	; 0x23e <__bad_interrupt>
     152:	00 00       	nop
     154:	74 c0       	rjmp	.+232    	; 0x23e <__bad_interrupt>
     156:	00 00       	nop
     158:	72 c0       	rjmp	.+228    	; 0x23e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	46 c0       	rjmp	.+140    	; 0x23e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	44 c0       	rjmp	.+136    	; 0x23e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	42 c0       	rjmp	.+132    	; 0x23e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	40 c0       	rjmp	.+128    	; 0x23e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3e c0       	rjmp	.+124    	; 0x23e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3c c0       	rjmp	.+120    	; 0x23e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
	...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df e3       	ldi	r29, 0x3F	; 63
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e6 e4       	ldi	r30, 0x46	; 70
     214:	f3 e1       	ldi	r31, 0x13	; 19
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	ae 30       	cpi	r26, 0x0E	; 14
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
     228:	20 e2       	ldi	r18, 0x20	; 32
     22a:	ae e0       	ldi	r26, 0x0E	; 14
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
     230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
     232:	a2 32       	cpi	r26, 0x22	; 34
     234:	b2 07       	cpc	r27, r18
     236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
     238:	a4 d6       	rcall	.+3400   	; 0xf82 <main>
     23a:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     240:	8f ef       	ldi	r24, 0xFF	; 255
     242:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     246:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     24a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     24e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     252:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     256:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     25a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     25e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     260:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     262:	e0 e5       	ldi	r30, 0x50	; 80
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	82 60       	ori	r24, 0x02	; 2
     26a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     26c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     26e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     270:	81 ff       	sbrs	r24, 1
     272:	fd cf       	rjmp	.-6      	; 0x26e <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	80 e4       	ldi	r24, 0x40	; 64
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	28 d2       	rcall	.+1104   	; 0x6cc <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     27c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     27e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     280:	e0 e5       	ldi	r30, 0x50	; 80
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	8e 7f       	andi	r24, 0xFE	; 254
     288:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     28a:	9f bf       	out	0x3f, r25	; 63
     28c:	08 95       	ret

0000028e <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     28e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     290:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     292:	e8 2f       	mov	r30, r24
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	e0 59       	subi	r30, 0x90	; 144
     298:	ff 4f       	sbci	r31, 0xFF	; 255
     29a:	60 95       	com	r22
     29c:	80 81       	ld	r24, Z
     29e:	68 23       	and	r22, r24
     2a0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     2a2:	9f bf       	out	0x3f, r25	; 63
     2a4:	08 95       	ret

000002a6 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	1f 92       	push	r1
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2b0:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <stdio_base>
     2b4:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <stdio_base+0x1>
     2b8:	e0 91 0e 20 	lds	r30, 0x200E	; 0x80200e <__data_end>
     2bc:	f0 91 0f 20 	lds	r31, 0x200F	; 0x80200f <__data_end+0x1>
     2c0:	be 01       	movw	r22, r28
     2c2:	6f 5f       	subi	r22, 0xFF	; 255
     2c4:	7f 4f       	sbci	r23, 0xFF	; 255
     2c6:	19 95       	eicall
	return c;
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
}
     2ca:	08 2e       	mov	r0, r24
     2cc:	00 0c       	add	r0, r0
     2ce:	99 0b       	sbc	r25, r25
     2d0:	0f 90       	pop	r0
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     2d8:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     2da:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <stdio_base>
     2de:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <stdio_base+0x1>
     2e2:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <ptr_put>
     2e6:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <ptr_put+0x1>
     2ea:	19 95       	eicall
     2ec:	99 23       	and	r25, r25
     2ee:	1c f0       	brlt	.+6      	; 0x2f6 <_write+0x1e>
		return -1;
	}
	return 1;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     2fa:	08 95       	ret

000002fc <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	08 b6       	in	r0, 0x38	; 56
     308:	0f 92       	push	r0
     30a:	18 be       	out	0x38, r1	; 56
     30c:	09 b6       	in	r0, 0x39	; 57
     30e:	0f 92       	push	r0
     310:	19 be       	out	0x39, r1	; 57
     312:	0b b6       	in	r0, 0x3b	; 59
     314:	0f 92       	push	r0
     316:	1b be       	out	0x3b, r1	; 59
     318:	2f 93       	push	r18
     31a:	3f 93       	push	r19
     31c:	4f 93       	push	r20
     31e:	5f 93       	push	r21
     320:	6f 93       	push	r22
     322:	7f 93       	push	r23
     324:	8f 93       	push	r24
     326:	9f 93       	push	r25
     328:	af 93       	push	r26
     32a:	bf 93       	push	r27
     32c:	ef 93       	push	r30
     32e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     330:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     334:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     338:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <adca_callback>
     33c:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <adca_callback+0x1>
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	19 95       	eicall
}
     348:	ff 91       	pop	r31
     34a:	ef 91       	pop	r30
     34c:	bf 91       	pop	r27
     34e:	af 91       	pop	r26
     350:	9f 91       	pop	r25
     352:	8f 91       	pop	r24
     354:	7f 91       	pop	r23
     356:	6f 91       	pop	r22
     358:	5f 91       	pop	r21
     35a:	4f 91       	pop	r20
     35c:	3f 91       	pop	r19
     35e:	2f 91       	pop	r18
     360:	0f 90       	pop	r0
     362:	0b be       	out	0x3b, r0	; 59
     364:	0f 90       	pop	r0
     366:	09 be       	out	0x39, r0	; 57
     368:	0f 90       	pop	r0
     36a:	08 be       	out	0x38, r0	; 56
     36c:	0f 90       	pop	r0
     36e:	0f be       	out	0x3f, r0	; 63
     370:	0f 90       	pop	r0
     372:	1f 90       	pop	r1
     374:	18 95       	reti

00000376 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	0f 92       	push	r0
     37e:	11 24       	eor	r1, r1
     380:	08 b6       	in	r0, 0x38	; 56
     382:	0f 92       	push	r0
     384:	18 be       	out	0x38, r1	; 56
     386:	09 b6       	in	r0, 0x39	; 57
     388:	0f 92       	push	r0
     38a:	19 be       	out	0x39, r1	; 57
     38c:	0b b6       	in	r0, 0x3b	; 59
     38e:	0f 92       	push	r0
     390:	1b be       	out	0x3b, r1	; 59
     392:	2f 93       	push	r18
     394:	3f 93       	push	r19
     396:	4f 93       	push	r20
     398:	5f 93       	push	r21
     39a:	6f 93       	push	r22
     39c:	7f 93       	push	r23
     39e:	8f 93       	push	r24
     3a0:	9f 93       	push	r25
     3a2:	af 93       	push	r26
     3a4:	bf 93       	push	r27
     3a6:	ef 93       	push	r30
     3a8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3aa:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     3ae:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     3b2:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <adca_callback>
     3b6:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <adca_callback+0x1>
     3ba:	62 e0       	ldi	r22, 0x02	; 2
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	19 95       	eicall
}
     3c2:	ff 91       	pop	r31
     3c4:	ef 91       	pop	r30
     3c6:	bf 91       	pop	r27
     3c8:	af 91       	pop	r26
     3ca:	9f 91       	pop	r25
     3cc:	8f 91       	pop	r24
     3ce:	7f 91       	pop	r23
     3d0:	6f 91       	pop	r22
     3d2:	5f 91       	pop	r21
     3d4:	4f 91       	pop	r20
     3d6:	3f 91       	pop	r19
     3d8:	2f 91       	pop	r18
     3da:	0f 90       	pop	r0
     3dc:	0b be       	out	0x3b, r0	; 59
     3de:	0f 90       	pop	r0
     3e0:	09 be       	out	0x39, r0	; 57
     3e2:	0f 90       	pop	r0
     3e4:	08 be       	out	0x38, r0	; 56
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	08 b6       	in	r0, 0x38	; 56
     3fc:	0f 92       	push	r0
     3fe:	18 be       	out	0x38, r1	; 56
     400:	09 b6       	in	r0, 0x39	; 57
     402:	0f 92       	push	r0
     404:	19 be       	out	0x39, r1	; 57
     406:	0b b6       	in	r0, 0x3b	; 59
     408:	0f 92       	push	r0
     40a:	1b be       	out	0x3b, r1	; 59
     40c:	2f 93       	push	r18
     40e:	3f 93       	push	r19
     410:	4f 93       	push	r20
     412:	5f 93       	push	r21
     414:	6f 93       	push	r22
     416:	7f 93       	push	r23
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	af 93       	push	r26
     41e:	bf 93       	push	r27
     420:	ef 93       	push	r30
     422:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     424:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     428:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     42c:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <adca_callback>
     430:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <adca_callback+0x1>
     434:	64 e0       	ldi	r22, 0x04	; 4
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	19 95       	eicall
}
     43c:	ff 91       	pop	r31
     43e:	ef 91       	pop	r30
     440:	bf 91       	pop	r27
     442:	af 91       	pop	r26
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	7f 91       	pop	r23
     44a:	6f 91       	pop	r22
     44c:	5f 91       	pop	r21
     44e:	4f 91       	pop	r20
     450:	3f 91       	pop	r19
     452:	2f 91       	pop	r18
     454:	0f 90       	pop	r0
     456:	0b be       	out	0x3b, r0	; 59
     458:	0f 90       	pop	r0
     45a:	09 be       	out	0x39, r0	; 57
     45c:	0f 90       	pop	r0
     45e:	08 be       	out	0x38, r0	; 56
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     46a:	1f 92       	push	r1
     46c:	0f 92       	push	r0
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	0f 92       	push	r0
     472:	11 24       	eor	r1, r1
     474:	08 b6       	in	r0, 0x38	; 56
     476:	0f 92       	push	r0
     478:	18 be       	out	0x38, r1	; 56
     47a:	09 b6       	in	r0, 0x39	; 57
     47c:	0f 92       	push	r0
     47e:	19 be       	out	0x39, r1	; 57
     480:	0b b6       	in	r0, 0x3b	; 59
     482:	0f 92       	push	r0
     484:	1b be       	out	0x3b, r1	; 59
     486:	2f 93       	push	r18
     488:	3f 93       	push	r19
     48a:	4f 93       	push	r20
     48c:	5f 93       	push	r21
     48e:	6f 93       	push	r22
     490:	7f 93       	push	r23
     492:	8f 93       	push	r24
     494:	9f 93       	push	r25
     496:	af 93       	push	r26
     498:	bf 93       	push	r27
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     49e:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     4a2:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     4a6:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <adca_callback>
     4aa:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <adca_callback+0x1>
     4ae:	68 e0       	ldi	r22, 0x08	; 8
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	19 95       	eicall
}
     4b6:	ff 91       	pop	r31
     4b8:	ef 91       	pop	r30
     4ba:	bf 91       	pop	r27
     4bc:	af 91       	pop	r26
     4be:	9f 91       	pop	r25
     4c0:	8f 91       	pop	r24
     4c2:	7f 91       	pop	r23
     4c4:	6f 91       	pop	r22
     4c6:	5f 91       	pop	r21
     4c8:	4f 91       	pop	r20
     4ca:	3f 91       	pop	r19
     4cc:	2f 91       	pop	r18
     4ce:	0f 90       	pop	r0
     4d0:	0b be       	out	0x3b, r0	; 59
     4d2:	0f 90       	pop	r0
     4d4:	09 be       	out	0x39, r0	; 57
     4d6:	0f 90       	pop	r0
     4d8:	08 be       	out	0x38, r0	; 56
     4da:	0f 90       	pop	r0
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	0f 90       	pop	r0
     4e0:	1f 90       	pop	r1
     4e2:	18 95       	reti

000004e4 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     4e4:	1f 92       	push	r1
     4e6:	0f 92       	push	r0
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	0f 92       	push	r0
     4ec:	11 24       	eor	r1, r1
     4ee:	08 b6       	in	r0, 0x38	; 56
     4f0:	0f 92       	push	r0
     4f2:	18 be       	out	0x38, r1	; 56
     4f4:	09 b6       	in	r0, 0x39	; 57
     4f6:	0f 92       	push	r0
     4f8:	19 be       	out	0x39, r1	; 57
     4fa:	0b b6       	in	r0, 0x3b	; 59
     4fc:	0f 92       	push	r0
     4fe:	1b be       	out	0x3b, r1	; 59
     500:	2f 93       	push	r18
     502:	3f 93       	push	r19
     504:	4f 93       	push	r20
     506:	5f 93       	push	r21
     508:	6f 93       	push	r22
     50a:	7f 93       	push	r23
     50c:	8f 93       	push	r24
     50e:	9f 93       	push	r25
     510:	af 93       	push	r26
     512:	bf 93       	push	r27
     514:	ef 93       	push	r30
     516:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     518:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     51c:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     520:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <adcb_callback>
     524:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <adcb_callback+0x1>
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	80 e4       	ldi	r24, 0x40	; 64
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	19 95       	eicall
}
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	bf 91       	pop	r27
     536:	af 91       	pop	r26
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	7f 91       	pop	r23
     53e:	6f 91       	pop	r22
     540:	5f 91       	pop	r21
     542:	4f 91       	pop	r20
     544:	3f 91       	pop	r19
     546:	2f 91       	pop	r18
     548:	0f 90       	pop	r0
     54a:	0b be       	out	0x3b, r0	; 59
     54c:	0f 90       	pop	r0
     54e:	09 be       	out	0x39, r0	; 57
     550:	0f 90       	pop	r0
     552:	08 be       	out	0x38, r0	; 56
     554:	0f 90       	pop	r0
     556:	0f be       	out	0x3f, r0	; 63
     558:	0f 90       	pop	r0
     55a:	1f 90       	pop	r1
     55c:	18 95       	reti

0000055e <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	0f 92       	push	r0
     566:	11 24       	eor	r1, r1
     568:	08 b6       	in	r0, 0x38	; 56
     56a:	0f 92       	push	r0
     56c:	18 be       	out	0x38, r1	; 56
     56e:	09 b6       	in	r0, 0x39	; 57
     570:	0f 92       	push	r0
     572:	19 be       	out	0x39, r1	; 57
     574:	0b b6       	in	r0, 0x3b	; 59
     576:	0f 92       	push	r0
     578:	1b be       	out	0x3b, r1	; 59
     57a:	2f 93       	push	r18
     57c:	3f 93       	push	r19
     57e:	4f 93       	push	r20
     580:	5f 93       	push	r21
     582:	6f 93       	push	r22
     584:	7f 93       	push	r23
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
     58a:	af 93       	push	r26
     58c:	bf 93       	push	r27
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     592:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     596:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     59a:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <adcb_callback>
     59e:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <adcb_callback+0x1>
     5a2:	62 e0       	ldi	r22, 0x02	; 2
     5a4:	80 e4       	ldi	r24, 0x40	; 64
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	19 95       	eicall
}
     5aa:	ff 91       	pop	r31
     5ac:	ef 91       	pop	r30
     5ae:	bf 91       	pop	r27
     5b0:	af 91       	pop	r26
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	7f 91       	pop	r23
     5b8:	6f 91       	pop	r22
     5ba:	5f 91       	pop	r21
     5bc:	4f 91       	pop	r20
     5be:	3f 91       	pop	r19
     5c0:	2f 91       	pop	r18
     5c2:	0f 90       	pop	r0
     5c4:	0b be       	out	0x3b, r0	; 59
     5c6:	0f 90       	pop	r0
     5c8:	09 be       	out	0x39, r0	; 57
     5ca:	0f 90       	pop	r0
     5cc:	08 be       	out	0x38, r0	; 56
     5ce:	0f 90       	pop	r0
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	0f 90       	pop	r0
     5d4:	1f 90       	pop	r1
     5d6:	18 95       	reti

000005d8 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     5d8:	1f 92       	push	r1
     5da:	0f 92       	push	r0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	0f 92       	push	r0
     5e0:	11 24       	eor	r1, r1
     5e2:	08 b6       	in	r0, 0x38	; 56
     5e4:	0f 92       	push	r0
     5e6:	18 be       	out	0x38, r1	; 56
     5e8:	09 b6       	in	r0, 0x39	; 57
     5ea:	0f 92       	push	r0
     5ec:	19 be       	out	0x39, r1	; 57
     5ee:	0b b6       	in	r0, 0x3b	; 59
     5f0:	0f 92       	push	r0
     5f2:	1b be       	out	0x3b, r1	; 59
     5f4:	2f 93       	push	r18
     5f6:	3f 93       	push	r19
     5f8:	4f 93       	push	r20
     5fa:	5f 93       	push	r21
     5fc:	6f 93       	push	r22
     5fe:	7f 93       	push	r23
     600:	8f 93       	push	r24
     602:	9f 93       	push	r25
     604:	af 93       	push	r26
     606:	bf 93       	push	r27
     608:	ef 93       	push	r30
     60a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     60c:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     610:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     614:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <adcb_callback>
     618:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <adcb_callback+0x1>
     61c:	64 e0       	ldi	r22, 0x04	; 4
     61e:	80 e4       	ldi	r24, 0x40	; 64
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	19 95       	eicall
}
     624:	ff 91       	pop	r31
     626:	ef 91       	pop	r30
     628:	bf 91       	pop	r27
     62a:	af 91       	pop	r26
     62c:	9f 91       	pop	r25
     62e:	8f 91       	pop	r24
     630:	7f 91       	pop	r23
     632:	6f 91       	pop	r22
     634:	5f 91       	pop	r21
     636:	4f 91       	pop	r20
     638:	3f 91       	pop	r19
     63a:	2f 91       	pop	r18
     63c:	0f 90       	pop	r0
     63e:	0b be       	out	0x3b, r0	; 59
     640:	0f 90       	pop	r0
     642:	09 be       	out	0x39, r0	; 57
     644:	0f 90       	pop	r0
     646:	08 be       	out	0x38, r0	; 56
     648:	0f 90       	pop	r0
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	0f 90       	pop	r0
     64e:	1f 90       	pop	r1
     650:	18 95       	reti

00000652 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     652:	1f 92       	push	r1
     654:	0f 92       	push	r0
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	0f 92       	push	r0
     65a:	11 24       	eor	r1, r1
     65c:	08 b6       	in	r0, 0x38	; 56
     65e:	0f 92       	push	r0
     660:	18 be       	out	0x38, r1	; 56
     662:	09 b6       	in	r0, 0x39	; 57
     664:	0f 92       	push	r0
     666:	19 be       	out	0x39, r1	; 57
     668:	0b b6       	in	r0, 0x3b	; 59
     66a:	0f 92       	push	r0
     66c:	1b be       	out	0x3b, r1	; 59
     66e:	2f 93       	push	r18
     670:	3f 93       	push	r19
     672:	4f 93       	push	r20
     674:	5f 93       	push	r21
     676:	6f 93       	push	r22
     678:	7f 93       	push	r23
     67a:	8f 93       	push	r24
     67c:	9f 93       	push	r25
     67e:	af 93       	push	r26
     680:	bf 93       	push	r27
     682:	ef 93       	push	r30
     684:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     686:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     68a:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     68e:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <adcb_callback>
     692:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <adcb_callback+0x1>
     696:	68 e0       	ldi	r22, 0x08	; 8
     698:	80 e4       	ldi	r24, 0x40	; 64
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	19 95       	eicall
}
     69e:	ff 91       	pop	r31
     6a0:	ef 91       	pop	r30
     6a2:	bf 91       	pop	r27
     6a4:	af 91       	pop	r26
     6a6:	9f 91       	pop	r25
     6a8:	8f 91       	pop	r24
     6aa:	7f 91       	pop	r23
     6ac:	6f 91       	pop	r22
     6ae:	5f 91       	pop	r21
     6b0:	4f 91       	pop	r20
     6b2:	3f 91       	pop	r19
     6b4:	2f 91       	pop	r18
     6b6:	0f 90       	pop	r0
     6b8:	0b be       	out	0x3b, r0	; 59
     6ba:	0f 90       	pop	r0
     6bc:	09 be       	out	0x39, r0	; 57
     6be:	0f 90       	pop	r0
     6c0:	08 be       	out	0x38, r0	; 56
     6c2:	0f 90       	pop	r0
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	0f 90       	pop	r0
     6c8:	1f 90       	pop	r1
     6ca:	18 95       	reti

000006cc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     6cc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     6ce:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     6d0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     6d2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     6d4:	60 83       	st	Z, r22
	ret                             // Return to caller
     6d6:	08 95       	ret

000006d8 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     6d8:	fc 01       	movw	r30, r24
     6da:	91 81       	ldd	r25, Z+1	; 0x01
     6dc:	95 ff       	sbrs	r25, 5
     6de:	fd cf       	rjmp	.-6      	; 0x6da <usart_putchar+0x2>
     6e0:	60 83       	st	Z, r22
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	08 95       	ret

000006e8 <usart_getchar>:
     6e8:	fc 01       	movw	r30, r24
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	99 23       	and	r25, r25
     6ee:	ec f7       	brge	.-6      	; 0x6ea <usart_getchar+0x2>
     6f0:	80 81       	ld	r24, Z
     6f2:	08 95       	ret

000006f4 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     6f4:	2f 92       	push	r2
     6f6:	3f 92       	push	r3
     6f8:	4f 92       	push	r4
     6fa:	5f 92       	push	r5
     6fc:	6f 92       	push	r6
     6fe:	7f 92       	push	r7
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	1c 01       	movw	r2, r24
     718:	2a 01       	movw	r4, r20
     71a:	3b 01       	movw	r6, r22
     71c:	48 01       	movw	r8, r16
     71e:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     720:	d9 01       	movw	r26, r18
     722:	c8 01       	movw	r24, r16
     724:	68 94       	set
     726:	12 f8       	bld	r1, 2
     728:	b6 95       	lsr	r27
     72a:	a7 95       	ror	r26
     72c:	97 95       	ror	r25
     72e:	87 95       	ror	r24
     730:	16 94       	lsr	r1
     732:	d1 f7       	brne	.-12     	; 0x728 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     734:	b9 01       	movw	r22, r18
     736:	a8 01       	movw	r20, r16
     738:	03 2e       	mov	r0, r19
     73a:	36 e1       	ldi	r19, 0x16	; 22
     73c:	76 95       	lsr	r23
     73e:	67 95       	ror	r22
     740:	57 95       	ror	r21
     742:	47 95       	ror	r20
     744:	3a 95       	dec	r19
     746:	d1 f7       	brne	.-12     	; 0x73c <usart_set_baudrate+0x48>
     748:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     74a:	f1 01       	movw	r30, r2
     74c:	24 81       	ldd	r18, Z+4	; 0x04
     74e:	22 fd       	sbrc	r18, 2
     750:	08 c0       	rjmp	.+16     	; 0x762 <usart_set_baudrate+0x6e>
		max_rate /= 2;
     752:	b6 95       	lsr	r27
     754:	a7 95       	ror	r26
     756:	97 95       	ror	r25
     758:	87 95       	ror	r24
		min_rate /= 2;
     75a:	76 95       	lsr	r23
     75c:	67 95       	ror	r22
     75e:	57 95       	ror	r21
     760:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     762:	84 15       	cp	r24, r4
     764:	95 05       	cpc	r25, r5
     766:	a6 05       	cpc	r26, r6
     768:	b7 05       	cpc	r27, r7
     76a:	08 f4       	brcc	.+2      	; 0x76e <usart_set_baudrate+0x7a>
     76c:	aa c0       	rjmp	.+340    	; 0x8c2 <usart_set_baudrate+0x1ce>
     76e:	44 16       	cp	r4, r20
     770:	55 06       	cpc	r5, r21
     772:	66 06       	cpc	r6, r22
     774:	77 06       	cpc	r7, r23
     776:	08 f4       	brcc	.+2      	; 0x77a <usart_set_baudrate+0x86>
     778:	a6 c0       	rjmp	.+332    	; 0x8c6 <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     77a:	f1 01       	movw	r30, r2
     77c:	84 81       	ldd	r24, Z+4	; 0x04
     77e:	82 fd       	sbrc	r24, 2
     780:	04 c0       	rjmp	.+8      	; 0x78a <usart_set_baudrate+0x96>
		baud *= 2;
     782:	44 0c       	add	r4, r4
     784:	55 1c       	adc	r5, r5
     786:	66 1c       	adc	r6, r6
     788:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     78a:	c5 01       	movw	r24, r10
     78c:	b4 01       	movw	r22, r8
     78e:	a3 01       	movw	r20, r6
     790:	92 01       	movw	r18, r4
     792:	0e d4       	rcall	.+2076   	; 0xfb0 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     794:	2f 3f       	cpi	r18, 0xFF	; 255
     796:	31 05       	cpc	r19, r1
     798:	41 05       	cpc	r20, r1
     79a:	51 05       	cpc	r21, r1
     79c:	08 f4       	brcc	.+2      	; 0x7a0 <usart_set_baudrate+0xac>
     79e:	95 c0       	rjmp	.+298    	; 0x8ca <usart_set_baudrate+0x1d6>
     7a0:	c1 2c       	mov	r12, r1
     7a2:	d1 2c       	mov	r13, r1
     7a4:	76 01       	movw	r14, r12
     7a6:	ca 94       	dec	r12
     7a8:	c9 ef       	ldi	r28, 0xF9	; 249
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <usart_set_baudrate+0xc2>
     7ac:	2c 15       	cp	r18, r12
     7ae:	3d 05       	cpc	r19, r13
     7b0:	4e 05       	cpc	r20, r14
     7b2:	5f 05       	cpc	r21, r15
     7b4:	68 f0       	brcs	.+26     	; 0x7d0 <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
     7b6:	cc 0c       	add	r12, r12
     7b8:	dd 1c       	adc	r13, r13
     7ba:	ee 1c       	adc	r14, r14
     7bc:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     7be:	cd 3f       	cpi	r28, 0xFD	; 253
     7c0:	14 f4       	brge	.+4      	; 0x7c6 <usart_set_baudrate+0xd2>
			limit |= 1;
     7c2:	68 94       	set
     7c4:	c0 f8       	bld	r12, 0
     7c6:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     7c8:	c7 30       	cpi	r28, 0x07	; 7
     7ca:	81 f7       	brne	.-32     	; 0x7ac <usart_set_baudrate+0xb8>
     7cc:	8c 2f       	mov	r24, r28
     7ce:	54 c0       	rjmp	.+168    	; 0x878 <usart_set_baudrate+0x184>
     7d0:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     7d2:	cc 23       	and	r28, r28
     7d4:	0c f0       	brlt	.+2      	; 0x7d8 <usart_set_baudrate+0xe4>
     7d6:	50 c0       	rjmp	.+160    	; 0x878 <usart_set_baudrate+0x184>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     7d8:	d3 01       	movw	r26, r6
     7da:	c2 01       	movw	r24, r4
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	aa 1f       	adc	r26, r26
     7e2:	bb 1f       	adc	r27, r27
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	aa 1f       	adc	r26, r26
     7ea:	bb 1f       	adc	r27, r27
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	aa 1f       	adc	r26, r26
     7f2:	bb 1f       	adc	r27, r27
     7f4:	85 01       	movw	r16, r10
     7f6:	74 01       	movw	r14, r8
     7f8:	e8 1a       	sub	r14, r24
     7fa:	f9 0a       	sbc	r15, r25
     7fc:	0a 0b       	sbc	r16, r26
     7fe:	1b 0b       	sbc	r17, r27
     800:	d8 01       	movw	r26, r16
     802:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     804:	ce 3f       	cpi	r28, 0xFE	; 254
     806:	ec f4       	brge	.+58     	; 0x842 <usart_set_baudrate+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     808:	2d ef       	ldi	r18, 0xFD	; 253
     80a:	3f ef       	ldi	r19, 0xFF	; 255
     80c:	2c 1b       	sub	r18, r28
     80e:	31 09       	sbc	r19, r1
     810:	c7 fd       	sbrc	r28, 7
     812:	33 95       	inc	r19
     814:	04 c0       	rjmp	.+8      	; 0x81e <usart_set_baudrate+0x12a>
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	aa 1f       	adc	r26, r26
     81c:	bb 1f       	adc	r27, r27
     81e:	2a 95       	dec	r18
     820:	d2 f7       	brpl	.-12     	; 0x816 <usart_set_baudrate+0x122>
     822:	73 01       	movw	r14, r6
     824:	62 01       	movw	r12, r4
     826:	f6 94       	lsr	r15
     828:	e7 94       	ror	r14
     82a:	d7 94       	ror	r13
     82c:	c7 94       	ror	r12
     82e:	bc 01       	movw	r22, r24
     830:	cd 01       	movw	r24, r26
     832:	6c 0d       	add	r22, r12
     834:	7d 1d       	adc	r23, r13
     836:	8e 1d       	adc	r24, r14
     838:	9f 1d       	adc	r25, r15
     83a:	a3 01       	movw	r20, r6
     83c:	92 01       	movw	r18, r4
     83e:	b8 d3       	rcall	.+1904   	; 0xfb0 <__udivmodsi4>
     840:	36 c0       	rjmp	.+108    	; 0x8ae <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
     842:	23 e0       	ldi	r18, 0x03	; 3
     844:	2c 0f       	add	r18, r28
     846:	83 01       	movw	r16, r6
     848:	72 01       	movw	r14, r4
     84a:	04 c0       	rjmp	.+8      	; 0x854 <usart_set_baudrate+0x160>
     84c:	ee 0c       	add	r14, r14
     84e:	ff 1c       	adc	r15, r15
     850:	00 1f       	adc	r16, r16
     852:	11 1f       	adc	r17, r17
     854:	2a 95       	dec	r18
     856:	d2 f7       	brpl	.-12     	; 0x84c <usart_set_baudrate+0x158>
     858:	a8 01       	movw	r20, r16
     85a:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
     85c:	67 01       	movw	r12, r14
     85e:	78 01       	movw	r14, r16
     860:	f6 94       	lsr	r15
     862:	e7 94       	ror	r14
     864:	d7 94       	ror	r13
     866:	c7 94       	ror	r12
     868:	bc 01       	movw	r22, r24
     86a:	cd 01       	movw	r24, r26
     86c:	6c 0d       	add	r22, r12
     86e:	7d 1d       	adc	r23, r13
     870:	8e 1d       	adc	r24, r14
     872:	9f 1d       	adc	r25, r15
     874:	9d d3       	rcall	.+1850   	; 0xfb0 <__udivmodsi4>
     876:	1b c0       	rjmp	.+54     	; 0x8ae <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     878:	8d 5f       	subi	r24, 0xFD	; 253
     87a:	a3 01       	movw	r20, r6
     87c:	92 01       	movw	r18, r4
     87e:	04 c0       	rjmp	.+8      	; 0x888 <usart_set_baudrate+0x194>
     880:	22 0f       	add	r18, r18
     882:	33 1f       	adc	r19, r19
     884:	44 1f       	adc	r20, r20
     886:	55 1f       	adc	r21, r21
     888:	8a 95       	dec	r24
     88a:	d2 f7       	brpl	.-12     	; 0x880 <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
     88c:	da 01       	movw	r26, r20
     88e:	c9 01       	movw	r24, r18
     890:	b6 95       	lsr	r27
     892:	a7 95       	ror	r26
     894:	97 95       	ror	r25
     896:	87 95       	ror	r24
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	68 0d       	add	r22, r8
     89e:	79 1d       	adc	r23, r9
     8a0:	8a 1d       	adc	r24, r10
     8a2:	9b 1d       	adc	r25, r11
     8a4:	85 d3       	rcall	.+1802   	; 0xfb0 <__udivmodsi4>
     8a6:	21 50       	subi	r18, 0x01	; 1
     8a8:	31 09       	sbc	r19, r1
     8aa:	41 09       	sbc	r20, r1
     8ac:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     8ae:	83 2f       	mov	r24, r19
     8b0:	8f 70       	andi	r24, 0x0F	; 15
     8b2:	c2 95       	swap	r28
     8b4:	c0 7f       	andi	r28, 0xF0	; 240
     8b6:	c8 2b       	or	r28, r24
     8b8:	f1 01       	movw	r30, r2
     8ba:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     8bc:	26 83       	std	Z+6, r18	; 0x06

	return true;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	1c c0       	rjmp	.+56     	; 0x8fa <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	1a c0       	rjmp	.+52     	; 0x8fa <usart_set_baudrate+0x206>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	18 c0       	rjmp	.+48     	; 0x8fa <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     8ca:	d3 01       	movw	r26, r6
     8cc:	c2 01       	movw	r24, r4
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	aa 1f       	adc	r26, r26
     8dc:	bb 1f       	adc	r27, r27
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	aa 1f       	adc	r26, r26
     8e4:	bb 1f       	adc	r27, r27
     8e6:	85 01       	movw	r16, r10
     8e8:	74 01       	movw	r14, r8
     8ea:	e8 1a       	sub	r14, r24
     8ec:	f9 0a       	sbc	r15, r25
     8ee:	0a 0b       	sbc	r16, r26
     8f0:	1b 0b       	sbc	r17, r27
     8f2:	d8 01       	movw	r26, r16
     8f4:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     8f6:	c9 ef       	ldi	r28, 0xF9	; 249
     8f8:	87 cf       	rjmp	.-242    	; 0x808 <usart_set_baudrate+0x114>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	df 90       	pop	r13
     906:	cf 90       	pop	r12
     908:	bf 90       	pop	r11
     90a:	af 90       	pop	r10
     90c:	9f 90       	pop	r9
     90e:	8f 90       	pop	r8
     910:	7f 90       	pop	r7
     912:	6f 90       	pop	r6
     914:	5f 90       	pop	r5
     916:	4f 90       	pop	r4
     918:	3f 90       	pop	r3
     91a:	2f 90       	pop	r2
     91c:	08 95       	ret

0000091e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	ec 01       	movw	r28, r24
     928:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     92a:	00 97       	sbiw	r24, 0x00	; 0
     92c:	09 f4       	brne	.+2      	; 0x930 <usart_init_rs232+0x12>
     92e:	36 c1       	rjmp	.+620    	; 0xb9c <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     930:	80 3c       	cpi	r24, 0xC0	; 192
     932:	91 05       	cpc	r25, r1
     934:	21 f4       	brne	.+8      	; 0x93e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     936:	60 e1       	ldi	r22, 0x10	; 16
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	a9 dc       	rcall	.-1710   	; 0x28e <sysclk_enable_module>
     93c:	2f c1       	rjmp	.+606    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     93e:	c0 34       	cpi	r28, 0x40	; 64
     940:	84 e0       	ldi	r24, 0x04	; 4
     942:	d8 07       	cpc	r29, r24
     944:	21 f4       	brne	.+8      	; 0x94e <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     946:	68 e0       	ldi	r22, 0x08	; 8
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	a1 dc       	rcall	.-1726   	; 0x28e <sysclk_enable_module>
     94c:	27 c1       	rjmp	.+590    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     94e:	c1 15       	cp	r28, r1
     950:	e4 e0       	ldi	r30, 0x04	; 4
     952:	de 07       	cpc	r29, r30
     954:	21 f4       	brne	.+8      	; 0x95e <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     956:	64 e0       	ldi	r22, 0x04	; 4
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	99 dc       	rcall	.-1742   	; 0x28e <sysclk_enable_module>
     95c:	1f c1       	rjmp	.+574    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     95e:	c0 38       	cpi	r28, 0x80	; 128
     960:	f1 e0       	ldi	r31, 0x01	; 1
     962:	df 07       	cpc	r29, r31
     964:	21 f4       	brne	.+8      	; 0x96e <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     966:	62 e0       	ldi	r22, 0x02	; 2
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	91 dc       	rcall	.-1758   	; 0x28e <sysclk_enable_module>
     96c:	17 c1       	rjmp	.+558    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     96e:	c1 15       	cp	r28, r1
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	d8 07       	cpc	r29, r24
     974:	21 f4       	brne	.+8      	; 0x97e <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	89 dc       	rcall	.-1774   	; 0x28e <sysclk_enable_module>
     97c:	0f c1       	rjmp	.+542    	; 0xb9c <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     97e:	c0 38       	cpi	r28, 0x80	; 128
     980:	e3 e0       	ldi	r30, 0x03	; 3
     982:	de 07       	cpc	r29, r30
     984:	21 f4       	brne	.+8      	; 0x98e <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	81 dc       	rcall	.-1790   	; 0x28e <sysclk_enable_module>
     98c:	07 c1       	rjmp	.+526    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     98e:	c0 39       	cpi	r28, 0x90	; 144
     990:	f3 e0       	ldi	r31, 0x03	; 3
     992:	df 07       	cpc	r29, r31
     994:	21 f4       	brne	.+8      	; 0x99e <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	79 dc       	rcall	.-1806   	; 0x28e <sysclk_enable_module>
     99c:	ff c0       	rjmp	.+510    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     99e:	c1 15       	cp	r28, r1
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	d8 07       	cpc	r29, r24
     9a4:	21 f4       	brne	.+8      	; 0x9ae <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     9a6:	62 e0       	ldi	r22, 0x02	; 2
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	71 dc       	rcall	.-1822   	; 0x28e <sysclk_enable_module>
     9ac:	f7 c0       	rjmp	.+494    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     9ae:	c0 34       	cpi	r28, 0x40	; 64
     9b0:	e2 e0       	ldi	r30, 0x02	; 2
     9b2:	de 07       	cpc	r29, r30
     9b4:	21 f4       	brne	.+8      	; 0x9be <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     9b6:	62 e0       	ldi	r22, 0x02	; 2
     9b8:	82 e0       	ldi	r24, 0x02	; 2
     9ba:	69 dc       	rcall	.-1838   	; 0x28e <sysclk_enable_module>
     9bc:	ef c0       	rjmp	.+478    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     9be:	c1 15       	cp	r28, r1
     9c0:	f3 e0       	ldi	r31, 0x03	; 3
     9c2:	df 07       	cpc	r29, r31
     9c4:	21 f4       	brne	.+8      	; 0x9ce <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     9c6:	64 e0       	ldi	r22, 0x04	; 4
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	61 dc       	rcall	.-1854   	; 0x28e <sysclk_enable_module>
     9cc:	e7 c0       	rjmp	.+462    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     9ce:	c0 32       	cpi	r28, 0x20	; 32
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	d8 07       	cpc	r29, r24
     9d4:	21 f4       	brne	.+8      	; 0x9de <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     9d6:	64 e0       	ldi	r22, 0x04	; 4
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	59 dc       	rcall	.-1870   	; 0x28e <sysclk_enable_module>
     9dc:	df c0       	rjmp	.+446    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     9de:	c1 15       	cp	r28, r1
     9e0:	e8 e0       	ldi	r30, 0x08	; 8
     9e2:	de 07       	cpc	r29, r30
     9e4:	21 f4       	brne	.+8      	; 0x9ee <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	83 e0       	ldi	r24, 0x03	; 3
     9ea:	51 dc       	rcall	.-1886   	; 0x28e <sysclk_enable_module>
     9ec:	d7 c0       	rjmp	.+430    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     9ee:	c1 15       	cp	r28, r1
     9f0:	f9 e0       	ldi	r31, 0x09	; 9
     9f2:	df 07       	cpc	r29, r31
     9f4:	21 f4       	brne	.+8      	; 0x9fe <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	49 dc       	rcall	.-1902   	; 0x28e <sysclk_enable_module>
     9fc:	cf c0       	rjmp	.+414    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     9fe:	c1 15       	cp	r28, r1
     a00:	8a e0       	ldi	r24, 0x0A	; 10
     a02:	d8 07       	cpc	r29, r24
     a04:	21 f4       	brne	.+8      	; 0xa0e <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	85 e0       	ldi	r24, 0x05	; 5
     a0a:	41 dc       	rcall	.-1918   	; 0x28e <sysclk_enable_module>
     a0c:	c7 c0       	rjmp	.+398    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     a0e:	c1 15       	cp	r28, r1
     a10:	eb e0       	ldi	r30, 0x0B	; 11
     a12:	de 07       	cpc	r29, r30
     a14:	21 f4       	brne	.+8      	; 0xa1e <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	86 e0       	ldi	r24, 0x06	; 6
     a1a:	39 dc       	rcall	.-1934   	; 0x28e <sysclk_enable_module>
     a1c:	bf c0       	rjmp	.+382    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     a1e:	c0 34       	cpi	r28, 0x40	; 64
     a20:	f8 e0       	ldi	r31, 0x08	; 8
     a22:	df 07       	cpc	r29, r31
     a24:	21 f4       	brne	.+8      	; 0xa2e <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     a26:	62 e0       	ldi	r22, 0x02	; 2
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	31 dc       	rcall	.-1950   	; 0x28e <sysclk_enable_module>
     a2c:	b7 c0       	rjmp	.+366    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     a2e:	c0 34       	cpi	r28, 0x40	; 64
     a30:	89 e0       	ldi	r24, 0x09	; 9
     a32:	d8 07       	cpc	r29, r24
     a34:	21 f4       	brne	.+8      	; 0xa3e <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     a36:	62 e0       	ldi	r22, 0x02	; 2
     a38:	84 e0       	ldi	r24, 0x04	; 4
     a3a:	29 dc       	rcall	.-1966   	; 0x28e <sysclk_enable_module>
     a3c:	af c0       	rjmp	.+350    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     a3e:	c0 34       	cpi	r28, 0x40	; 64
     a40:	ea e0       	ldi	r30, 0x0A	; 10
     a42:	de 07       	cpc	r29, r30
     a44:	21 f4       	brne	.+8      	; 0xa4e <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     a46:	62 e0       	ldi	r22, 0x02	; 2
     a48:	85 e0       	ldi	r24, 0x05	; 5
     a4a:	21 dc       	rcall	.-1982   	; 0x28e <sysclk_enable_module>
     a4c:	a7 c0       	rjmp	.+334    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     a4e:	c0 34       	cpi	r28, 0x40	; 64
     a50:	fb e0       	ldi	r31, 0x0B	; 11
     a52:	df 07       	cpc	r29, r31
     a54:	21 f4       	brne	.+8      	; 0xa5e <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     a56:	62 e0       	ldi	r22, 0x02	; 2
     a58:	86 e0       	ldi	r24, 0x06	; 6
     a5a:	19 dc       	rcall	.-1998   	; 0x28e <sysclk_enable_module>
     a5c:	9f c0       	rjmp	.+318    	; 0xb9c <usart_init_rs232+0x27e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     a5e:	c0 39       	cpi	r28, 0x90	; 144
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	d8 07       	cpc	r29, r24
     a64:	21 f4       	brne	.+8      	; 0xa6e <usart_init_rs232+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     a66:	64 e0       	ldi	r22, 0x04	; 4
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	11 dc       	rcall	.-2014   	; 0x28e <sysclk_enable_module>
     a6c:	97 c0       	rjmp	.+302    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     a6e:	c0 39       	cpi	r28, 0x90	; 144
     a70:	e9 e0       	ldi	r30, 0x09	; 9
     a72:	de 07       	cpc	r29, r30
     a74:	21 f4       	brne	.+8      	; 0xa7e <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     a76:	64 e0       	ldi	r22, 0x04	; 4
     a78:	84 e0       	ldi	r24, 0x04	; 4
     a7a:	09 dc       	rcall	.-2030   	; 0x28e <sysclk_enable_module>
     a7c:	8f c0       	rjmp	.+286    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     a7e:	c0 39       	cpi	r28, 0x90	; 144
     a80:	fa e0       	ldi	r31, 0x0A	; 10
     a82:	df 07       	cpc	r29, r31
     a84:	21 f4       	brne	.+8      	; 0xa8e <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     a86:	64 e0       	ldi	r22, 0x04	; 4
     a88:	85 e0       	ldi	r24, 0x05	; 5
     a8a:	01 dc       	rcall	.-2046   	; 0x28e <sysclk_enable_module>
     a8c:	87 c0       	rjmp	.+270    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     a8e:	c0 39       	cpi	r28, 0x90	; 144
     a90:	8b e0       	ldi	r24, 0x0B	; 11
     a92:	d8 07       	cpc	r29, r24
     a94:	21 f4       	brne	.+8      	; 0xa9e <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     a96:	64 e0       	ldi	r22, 0x04	; 4
     a98:	86 e0       	ldi	r24, 0x06	; 6
     a9a:	f9 db       	rcall	.-2062   	; 0x28e <sysclk_enable_module>
     a9c:	7f c0       	rjmp	.+254    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     a9e:	c0 3c       	cpi	r28, 0xC0	; 192
     aa0:	e8 e0       	ldi	r30, 0x08	; 8
     aa2:	de 07       	cpc	r29, r30
     aa4:	21 f4       	brne	.+8      	; 0xaae <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     aa6:	68 e0       	ldi	r22, 0x08	; 8
     aa8:	83 e0       	ldi	r24, 0x03	; 3
     aaa:	f1 db       	rcall	.-2078   	; 0x28e <sysclk_enable_module>
     aac:	77 c0       	rjmp	.+238    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     aae:	c0 3c       	cpi	r28, 0xC0	; 192
     ab0:	f9 e0       	ldi	r31, 0x09	; 9
     ab2:	df 07       	cpc	r29, r31
     ab4:	21 f4       	brne	.+8      	; 0xabe <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     ab6:	68 e0       	ldi	r22, 0x08	; 8
     ab8:	84 e0       	ldi	r24, 0x04	; 4
     aba:	e9 db       	rcall	.-2094   	; 0x28e <sysclk_enable_module>
     abc:	6f c0       	rjmp	.+222    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     abe:	c0 3c       	cpi	r28, 0xC0	; 192
     ac0:	8a e0       	ldi	r24, 0x0A	; 10
     ac2:	d8 07       	cpc	r29, r24
     ac4:	21 f4       	brne	.+8      	; 0xace <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     ac6:	68 e0       	ldi	r22, 0x08	; 8
     ac8:	85 e0       	ldi	r24, 0x05	; 5
     aca:	e1 db       	rcall	.-2110   	; 0x28e <sysclk_enable_module>
     acc:	67 c0       	rjmp	.+206    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     ace:	c0 3c       	cpi	r28, 0xC0	; 192
     ad0:	eb e0       	ldi	r30, 0x0B	; 11
     ad2:	de 07       	cpc	r29, r30
     ad4:	21 f4       	brne	.+8      	; 0xade <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     ad6:	68 e0       	ldi	r22, 0x08	; 8
     ad8:	86 e0       	ldi	r24, 0x06	; 6
     ada:	d9 db       	rcall	.-2126   	; 0x28e <sysclk_enable_module>
     adc:	5f c0       	rjmp	.+190    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     ade:	c0 3a       	cpi	r28, 0xA0	; 160
     ae0:	f8 e0       	ldi	r31, 0x08	; 8
     ae2:	df 07       	cpc	r29, r31
     ae4:	21 f4       	brne	.+8      	; 0xaee <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     ae6:	60 e1       	ldi	r22, 0x10	; 16
     ae8:	83 e0       	ldi	r24, 0x03	; 3
     aea:	d1 db       	rcall	.-2142   	; 0x28e <sysclk_enable_module>
     aec:	57 c0       	rjmp	.+174    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     aee:	c0 3a       	cpi	r28, 0xA0	; 160
     af0:	89 e0       	ldi	r24, 0x09	; 9
     af2:	d8 07       	cpc	r29, r24
     af4:	21 f4       	brne	.+8      	; 0xafe <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     af6:	60 e1       	ldi	r22, 0x10	; 16
     af8:	84 e0       	ldi	r24, 0x04	; 4
     afa:	c9 db       	rcall	.-2158   	; 0x28e <sysclk_enable_module>
     afc:	4f c0       	rjmp	.+158    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     afe:	c0 3a       	cpi	r28, 0xA0	; 160
     b00:	ea e0       	ldi	r30, 0x0A	; 10
     b02:	de 07       	cpc	r29, r30
     b04:	21 f4       	brne	.+8      	; 0xb0e <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     b06:	60 e1       	ldi	r22, 0x10	; 16
     b08:	85 e0       	ldi	r24, 0x05	; 5
     b0a:	c1 db       	rcall	.-2174   	; 0x28e <sysclk_enable_module>
     b0c:	47 c0       	rjmp	.+142    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     b0e:	c0 3a       	cpi	r28, 0xA0	; 160
     b10:	fb e0       	ldi	r31, 0x0B	; 11
     b12:	df 07       	cpc	r29, r31
     b14:	21 f4       	brne	.+8      	; 0xb1e <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     b16:	60 e1       	ldi	r22, 0x10	; 16
     b18:	86 e0       	ldi	r24, 0x06	; 6
     b1a:	b9 db       	rcall	.-2190   	; 0x28e <sysclk_enable_module>
     b1c:	3f c0       	rjmp	.+126    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     b1e:	c0 3b       	cpi	r28, 0xB0	; 176
     b20:	88 e0       	ldi	r24, 0x08	; 8
     b22:	d8 07       	cpc	r29, r24
     b24:	21 f4       	brne	.+8      	; 0xb2e <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     b26:	60 e2       	ldi	r22, 0x20	; 32
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	b1 db       	rcall	.-2206   	; 0x28e <sysclk_enable_module>
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     b2e:	c0 3b       	cpi	r28, 0xB0	; 176
     b30:	e9 e0       	ldi	r30, 0x09	; 9
     b32:	de 07       	cpc	r29, r30
     b34:	21 f4       	brne	.+8      	; 0xb3e <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     b36:	60 e2       	ldi	r22, 0x20	; 32
     b38:	84 e0       	ldi	r24, 0x04	; 4
     b3a:	a9 db       	rcall	.-2222   	; 0x28e <sysclk_enable_module>
     b3c:	2f c0       	rjmp	.+94     	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     b3e:	c0 3b       	cpi	r28, 0xB0	; 176
     b40:	fa e0       	ldi	r31, 0x0A	; 10
     b42:	df 07       	cpc	r29, r31
     b44:	21 f4       	brne	.+8      	; 0xb4e <usart_init_rs232+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     b46:	60 e2       	ldi	r22, 0x20	; 32
     b48:	85 e0       	ldi	r24, 0x05	; 5
     b4a:	a1 db       	rcall	.-2238   	; 0x28e <sysclk_enable_module>
     b4c:	27 c0       	rjmp	.+78     	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     b4e:	c0 3b       	cpi	r28, 0xB0	; 176
     b50:	8b e0       	ldi	r24, 0x0B	; 11
     b52:	d8 07       	cpc	r29, r24
     b54:	21 f4       	brne	.+8      	; 0xb5e <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     b56:	60 e2       	ldi	r22, 0x20	; 32
     b58:	86 e0       	ldi	r24, 0x06	; 6
     b5a:	99 db       	rcall	.-2254   	; 0x28e <sysclk_enable_module>
     b5c:	1f c0       	rjmp	.+62     	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     b5e:	c0 38       	cpi	r28, 0x80	; 128
     b60:	e4 e0       	ldi	r30, 0x04	; 4
     b62:	de 07       	cpc	r29, r30
     b64:	21 f4       	brne	.+8      	; 0xb6e <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     b66:	60 e4       	ldi	r22, 0x40	; 64
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	91 db       	rcall	.-2270   	; 0x28e <sysclk_enable_module>
     b6c:	17 c0       	rjmp	.+46     	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     b6e:	c0 39       	cpi	r28, 0x90	; 144
     b70:	f4 e0       	ldi	r31, 0x04	; 4
     b72:	df 07       	cpc	r29, r31
     b74:	21 f4       	brne	.+8      	; 0xb7e <usart_init_rs232+0x260>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     b76:	60 e4       	ldi	r22, 0x40	; 64
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	89 db       	rcall	.-2286   	; 0x28e <sysclk_enable_module>
     b7c:	0f c0       	rjmp	.+30     	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     b7e:	c0 3a       	cpi	r28, 0xA0	; 160
     b80:	84 e0       	ldi	r24, 0x04	; 4
     b82:	d8 07       	cpc	r29, r24
     b84:	21 f4       	brne	.+8      	; 0xb8e <usart_init_rs232+0x270>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     b86:	60 e4       	ldi	r22, 0x40	; 64
     b88:	85 e0       	ldi	r24, 0x05	; 5
     b8a:	81 db       	rcall	.-2302   	; 0x28e <sysclk_enable_module>
     b8c:	07 c0       	rjmp	.+14     	; 0xb9c <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     b8e:	c0 3b       	cpi	r28, 0xB0	; 176
     b90:	e4 e0       	ldi	r30, 0x04	; 4
     b92:	de 07       	cpc	r29, r30
     b94:	19 f4       	brne	.+6      	; 0xb9c <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     b96:	60 e4       	ldi	r22, 0x40	; 64
     b98:	86 e0       	ldi	r24, 0x06	; 6
     b9a:	79 db       	rcall	.-2318   	; 0x28e <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	8f 73       	andi	r24, 0x3F	; 63
     ba0:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     ba2:	f8 01       	movw	r30, r16
     ba4:	94 81       	ldd	r25, Z+4	; 0x04
     ba6:	85 81       	ldd	r24, Z+5	; 0x05
     ba8:	89 2b       	or	r24, r25
     baa:	96 81       	ldd	r25, Z+6	; 0x06
     bac:	91 11       	cpse	r25, r1
     bae:	98 e0       	ldi	r25, 0x08	; 8
     bb0:	89 2b       	or	r24, r25
     bb2:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     bb4:	f8 01       	movw	r30, r16
     bb6:	40 81       	ld	r20, Z
     bb8:	51 81       	ldd	r21, Z+1	; 0x01
     bba:	62 81       	ldd	r22, Z+2	; 0x02
     bbc:	73 81       	ldd	r23, Z+3	; 0x03
     bbe:	00 e0       	ldi	r16, 0x00	; 0
     bc0:	18 e4       	ldi	r17, 0x48	; 72
     bc2:	28 ee       	ldi	r18, 0xE8	; 232
     bc4:	31 e0       	ldi	r19, 0x01	; 1
     bc6:	ce 01       	movw	r24, r28
     bc8:	95 dd       	rcall	.-1238   	; 0x6f4 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	98 60       	ori	r25, 0x08	; 8
     bce:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	90 61       	ori	r25, 0x10	; 16
     bd4:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	08 95       	ret

00000be0 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     be6:	80 dd       	rcall	.-1280   	; 0x6e8 <usart_getchar>
     be8:	88 83       	st	Y, r24
}
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     bf0:	73 cd       	rjmp	.-1306   	; 0x6d8 <usart_putchar>
}
     bf2:	08 95       	ret

00000bf4 <UART_Comms_Init>:
   to start the uart communications */

#include "conf_usart_serial.h" //Includes the information in the config file
#include <asf.h>

void UART_Comms_Init(void){
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	27 97       	sbiw	r28, 0x07	; 7
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	de bf       	out	0x3e, r29	; 62
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};

	//Must set TX pin as output
	PORTC.DIRSET=0b00001000;
     c02:	e0 e4       	ldi	r30, 0x40	; 64
     c04:	f6 e0       	ldi	r31, 0x06	; 6
     c06:	88 e0       	ldi	r24, 0x08	; 8
     c08:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET=0b00001000;
     c0a:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUT=0xFF;
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	84 83       	std	Z+4, r24	; 0x04
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     c10:	80 ea       	ldi	r24, 0xA0	; 160
     c12:	98 e0       	ldi	r25, 0x08	; 8
     c14:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <stdio_base>
     c18:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     c1c:	88 ef       	ldi	r24, 0xF8	; 248
     c1e:	95 e0       	ldi	r25, 0x05	; 5
     c20:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <ptr_put>
     c24:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     c28:	80 ef       	ldi	r24, 0xF0	; 240
     c2a:	95 e0       	ldi	r25, 0x05	; 5
     c2c:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
     c30:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     c34:	e6 e0       	ldi	r30, 0x06	; 6
     c36:	f0 e2       	ldi	r31, 0x20	; 32
     c38:	84 81       	ldd	r24, Z+4	; 0x04
     c3a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     c3c:	85 81       	ldd	r24, Z+5	; 0x05
     c3e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     c40:	86 81       	ldd	r24, Z+6	; 0x06
     c42:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	a2 81       	ldd	r26, Z+2	; 0x02
     c4a:	b3 81       	ldd	r27, Z+3	; 0x03
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	ab 83       	std	Y+3, r26	; 0x03
     c52:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
     c54:	60 e1       	ldi	r22, 0x10	; 16
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	1a db       	rcall	.-2508   	; 0x28e <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     c5a:	be 01       	movw	r22, r28
     c5c:	6f 5f       	subi	r22, 0xFF	; 255
     c5e:	7f 4f       	sbci	r23, 0xFF	; 255
     c60:	80 ea       	ldi	r24, 0xA0	; 160
     c62:	98 e0       	ldi	r25, 0x08	; 8
     c64:	5c de       	rcall	.-840    	; 0x91e <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     c66:	63 e5       	ldi	r22, 0x53	; 83
     c68:	71 e0       	ldi	r23, 0x01	; 1
     c6a:	8c e6       	ldi	r24, 0x6C	; 108
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	d1 d1       	rcall	.+930    	; 0x1012 <fdevopen>

	stdio_serial_init(&USARTC0, &usart_options); //ASF function that initializes the UART peripheral
}
     c70:	27 96       	adiw	r28, 0x07	; 7
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	09 f4       	brne	.+2      	; 0xc82 <sysclk_enable_peripheral_clock+0x6>
     c80:	35 c1       	rjmp	.+618    	; 0xeec <sysclk_enable_peripheral_clock+0x270>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     c82:	80 3c       	cpi	r24, 0xC0	; 192
     c84:	91 05       	cpc	r25, r1
     c86:	21 f4       	brne	.+8      	; 0xc90 <sysclk_enable_peripheral_clock+0x14>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     c88:	60 e1       	ldi	r22, 0x10	; 16
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	00 cb       	rjmp	.-2560   	; 0x28e <sysclk_enable_module>
     c8e:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     c90:	80 34       	cpi	r24, 0x40	; 64
     c92:	24 e0       	ldi	r18, 0x04	; 4
     c94:	92 07       	cpc	r25, r18
     c96:	21 f4       	brne	.+8      	; 0xca0 <sysclk_enable_peripheral_clock+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     c98:	68 e0       	ldi	r22, 0x08	; 8
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	f8 ca       	rjmp	.-2576   	; 0x28e <sysclk_enable_module>
     c9e:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     ca0:	81 15       	cp	r24, r1
     ca2:	24 e0       	ldi	r18, 0x04	; 4
     ca4:	92 07       	cpc	r25, r18
     ca6:	21 f4       	brne	.+8      	; 0xcb0 <sysclk_enable_peripheral_clock+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     ca8:	64 e0       	ldi	r22, 0x04	; 4
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	f0 ca       	rjmp	.-2592   	; 0x28e <sysclk_enable_module>
     cae:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     cb0:	80 38       	cpi	r24, 0x80	; 128
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	92 07       	cpc	r25, r18
     cb6:	21 f4       	brne	.+8      	; 0xcc0 <sysclk_enable_peripheral_clock+0x44>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     cb8:	62 e0       	ldi	r22, 0x02	; 2
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	e8 ca       	rjmp	.-2608   	; 0x28e <sysclk_enable_module>
     cbe:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     cc0:	81 15       	cp	r24, r1
     cc2:	21 e0       	ldi	r18, 0x01	; 1
     cc4:	92 07       	cpc	r25, r18
     cc6:	21 f4       	brne	.+8      	; 0xcd0 <sysclk_enable_peripheral_clock+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	e0 ca       	rjmp	.-2624   	; 0x28e <sysclk_enable_module>
     cce:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     cd0:	80 38       	cpi	r24, 0x80	; 128
     cd2:	23 e0       	ldi	r18, 0x03	; 3
     cd4:	92 07       	cpc	r25, r18
     cd6:	21 f4       	brne	.+8      	; 0xce0 <sysclk_enable_peripheral_clock+0x64>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     cd8:	61 e0       	ldi	r22, 0x01	; 1
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	d8 ca       	rjmp	.-2640   	; 0x28e <sysclk_enable_module>
     cde:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     ce0:	80 39       	cpi	r24, 0x90	; 144
     ce2:	23 e0       	ldi	r18, 0x03	; 3
     ce4:	92 07       	cpc	r25, r18
     ce6:	21 f4       	brne	.+8      	; 0xcf0 <sysclk_enable_peripheral_clock+0x74>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	d0 ca       	rjmp	.-2656   	; 0x28e <sysclk_enable_module>
     cee:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     cf0:	81 15       	cp	r24, r1
     cf2:	22 e0       	ldi	r18, 0x02	; 2
     cf4:	92 07       	cpc	r25, r18
     cf6:	21 f4       	brne	.+8      	; 0xd00 <sysclk_enable_peripheral_clock+0x84>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     cf8:	62 e0       	ldi	r22, 0x02	; 2
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	c8 ca       	rjmp	.-2672   	; 0x28e <sysclk_enable_module>
     cfe:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     d00:	80 34       	cpi	r24, 0x40	; 64
     d02:	22 e0       	ldi	r18, 0x02	; 2
     d04:	92 07       	cpc	r25, r18
     d06:	21 f4       	brne	.+8      	; 0xd10 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d08:	62 e0       	ldi	r22, 0x02	; 2
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	c0 ca       	rjmp	.-2688   	; 0x28e <sysclk_enable_module>
     d0e:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     d10:	81 15       	cp	r24, r1
     d12:	23 e0       	ldi	r18, 0x03	; 3
     d14:	92 07       	cpc	r25, r18
     d16:	21 f4       	brne	.+8      	; 0xd20 <sysclk_enable_peripheral_clock+0xa4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     d18:	64 e0       	ldi	r22, 0x04	; 4
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	b8 ca       	rjmp	.-2704   	; 0x28e <sysclk_enable_module>
     d1e:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     d20:	80 32       	cpi	r24, 0x20	; 32
     d22:	23 e0       	ldi	r18, 0x03	; 3
     d24:	92 07       	cpc	r25, r18
     d26:	21 f4       	brne	.+8      	; 0xd30 <sysclk_enable_peripheral_clock+0xb4>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     d28:	64 e0       	ldi	r22, 0x04	; 4
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	b0 ca       	rjmp	.-2720   	; 0x28e <sysclk_enable_module>
     d2e:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     d30:	81 15       	cp	r24, r1
     d32:	28 e0       	ldi	r18, 0x08	; 8
     d34:	92 07       	cpc	r25, r18
     d36:	21 f4       	brne	.+8      	; 0xd40 <sysclk_enable_peripheral_clock+0xc4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	a8 ca       	rjmp	.-2736   	; 0x28e <sysclk_enable_module>
     d3e:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     d40:	81 15       	cp	r24, r1
     d42:	29 e0       	ldi	r18, 0x09	; 9
     d44:	92 07       	cpc	r25, r18
     d46:	21 f4       	brne	.+8      	; 0xd50 <sysclk_enable_peripheral_clock+0xd4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	84 e0       	ldi	r24, 0x04	; 4
     d4c:	a0 ca       	rjmp	.-2752   	; 0x28e <sysclk_enable_module>
     d4e:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     d50:	81 15       	cp	r24, r1
     d52:	2a e0       	ldi	r18, 0x0A	; 10
     d54:	92 07       	cpc	r25, r18
     d56:	21 f4       	brne	.+8      	; 0xd60 <sysclk_enable_peripheral_clock+0xe4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	85 e0       	ldi	r24, 0x05	; 5
     d5c:	98 ca       	rjmp	.-2768   	; 0x28e <sysclk_enable_module>
     d5e:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     d60:	81 15       	cp	r24, r1
     d62:	2b e0       	ldi	r18, 0x0B	; 11
     d64:	92 07       	cpc	r25, r18
     d66:	21 f4       	brne	.+8      	; 0xd70 <sysclk_enable_peripheral_clock+0xf4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	86 e0       	ldi	r24, 0x06	; 6
     d6c:	90 ca       	rjmp	.-2784   	; 0x28e <sysclk_enable_module>
     d6e:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     d70:	80 34       	cpi	r24, 0x40	; 64
     d72:	28 e0       	ldi	r18, 0x08	; 8
     d74:	92 07       	cpc	r25, r18
     d76:	21 f4       	brne	.+8      	; 0xd80 <sysclk_enable_peripheral_clock+0x104>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     d78:	62 e0       	ldi	r22, 0x02	; 2
     d7a:	83 e0       	ldi	r24, 0x03	; 3
     d7c:	88 ca       	rjmp	.-2800   	; 0x28e <sysclk_enable_module>
     d7e:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     d80:	80 34       	cpi	r24, 0x40	; 64
     d82:	29 e0       	ldi	r18, 0x09	; 9
     d84:	92 07       	cpc	r25, r18
     d86:	21 f4       	brne	.+8      	; 0xd90 <sysclk_enable_peripheral_clock+0x114>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     d88:	62 e0       	ldi	r22, 0x02	; 2
     d8a:	84 e0       	ldi	r24, 0x04	; 4
     d8c:	80 ca       	rjmp	.-2816   	; 0x28e <sysclk_enable_module>
     d8e:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     d90:	80 34       	cpi	r24, 0x40	; 64
     d92:	2a e0       	ldi	r18, 0x0A	; 10
     d94:	92 07       	cpc	r25, r18
     d96:	21 f4       	brne	.+8      	; 0xda0 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     d98:	62 e0       	ldi	r22, 0x02	; 2
     d9a:	85 e0       	ldi	r24, 0x05	; 5
     d9c:	78 ca       	rjmp	.-2832   	; 0x28e <sysclk_enable_module>
     d9e:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     da0:	80 34       	cpi	r24, 0x40	; 64
     da2:	2b e0       	ldi	r18, 0x0B	; 11
     da4:	92 07       	cpc	r25, r18
     da6:	21 f4       	brne	.+8      	; 0xdb0 <sysclk_enable_peripheral_clock+0x134>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     da8:	62 e0       	ldi	r22, 0x02	; 2
     daa:	86 e0       	ldi	r24, 0x06	; 6
     dac:	70 ca       	rjmp	.-2848   	; 0x28e <sysclk_enable_module>
     dae:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     db0:	80 39       	cpi	r24, 0x90	; 144
     db2:	28 e0       	ldi	r18, 0x08	; 8
     db4:	92 07       	cpc	r25, r18
     db6:	21 f4       	brne	.+8      	; 0xdc0 <sysclk_enable_peripheral_clock+0x144>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     db8:	64 e0       	ldi	r22, 0x04	; 4
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	68 ca       	rjmp	.-2864   	; 0x28e <sysclk_enable_module>
     dbe:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     dc0:	80 39       	cpi	r24, 0x90	; 144
     dc2:	29 e0       	ldi	r18, 0x09	; 9
     dc4:	92 07       	cpc	r25, r18
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <sysclk_enable_peripheral_clock+0x154>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     dc8:	64 e0       	ldi	r22, 0x04	; 4
     dca:	84 e0       	ldi	r24, 0x04	; 4
     dcc:	60 ca       	rjmp	.-2880   	; 0x28e <sysclk_enable_module>
     dce:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     dd0:	80 39       	cpi	r24, 0x90	; 144
     dd2:	2a e0       	ldi	r18, 0x0A	; 10
     dd4:	92 07       	cpc	r25, r18
     dd6:	21 f4       	brne	.+8      	; 0xde0 <sysclk_enable_peripheral_clock+0x164>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     dd8:	64 e0       	ldi	r22, 0x04	; 4
     dda:	85 e0       	ldi	r24, 0x05	; 5
     ddc:	58 ca       	rjmp	.-2896   	; 0x28e <sysclk_enable_module>
     dde:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     de0:	80 39       	cpi	r24, 0x90	; 144
     de2:	2b e0       	ldi	r18, 0x0B	; 11
     de4:	92 07       	cpc	r25, r18
     de6:	21 f4       	brne	.+8      	; 0xdf0 <sysclk_enable_peripheral_clock+0x174>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     de8:	64 e0       	ldi	r22, 0x04	; 4
     dea:	86 e0       	ldi	r24, 0x06	; 6
     dec:	50 ca       	rjmp	.-2912   	; 0x28e <sysclk_enable_module>
     dee:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     df0:	80 3c       	cpi	r24, 0xC0	; 192
     df2:	28 e0       	ldi	r18, 0x08	; 8
     df4:	92 07       	cpc	r25, r18
     df6:	21 f4       	brne	.+8      	; 0xe00 <sysclk_enable_peripheral_clock+0x184>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     df8:	68 e0       	ldi	r22, 0x08	; 8
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	48 ca       	rjmp	.-2928   	; 0x28e <sysclk_enable_module>
     dfe:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     e00:	80 3c       	cpi	r24, 0xC0	; 192
     e02:	29 e0       	ldi	r18, 0x09	; 9
     e04:	92 07       	cpc	r25, r18
     e06:	21 f4       	brne	.+8      	; 0xe10 <sysclk_enable_peripheral_clock+0x194>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     e08:	68 e0       	ldi	r22, 0x08	; 8
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	40 ca       	rjmp	.-2944   	; 0x28e <sysclk_enable_module>
     e0e:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     e10:	80 3c       	cpi	r24, 0xC0	; 192
     e12:	2a e0       	ldi	r18, 0x0A	; 10
     e14:	92 07       	cpc	r25, r18
     e16:	21 f4       	brne	.+8      	; 0xe20 <sysclk_enable_peripheral_clock+0x1a4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     e18:	68 e0       	ldi	r22, 0x08	; 8
     e1a:	85 e0       	ldi	r24, 0x05	; 5
     e1c:	38 ca       	rjmp	.-2960   	; 0x28e <sysclk_enable_module>
     e1e:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     e20:	80 3c       	cpi	r24, 0xC0	; 192
     e22:	2b e0       	ldi	r18, 0x0B	; 11
     e24:	92 07       	cpc	r25, r18
     e26:	21 f4       	brne	.+8      	; 0xe30 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     e28:	68 e0       	ldi	r22, 0x08	; 8
     e2a:	86 e0       	ldi	r24, 0x06	; 6
     e2c:	30 ca       	rjmp	.-2976   	; 0x28e <sysclk_enable_module>
     e2e:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     e30:	80 3a       	cpi	r24, 0xA0	; 160
     e32:	28 e0       	ldi	r18, 0x08	; 8
     e34:	92 07       	cpc	r25, r18
     e36:	21 f4       	brne	.+8      	; 0xe40 <sysclk_enable_peripheral_clock+0x1c4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     e38:	60 e1       	ldi	r22, 0x10	; 16
     e3a:	83 e0       	ldi	r24, 0x03	; 3
     e3c:	28 ca       	rjmp	.-2992   	; 0x28e <sysclk_enable_module>
     e3e:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     e40:	80 3a       	cpi	r24, 0xA0	; 160
     e42:	29 e0       	ldi	r18, 0x09	; 9
     e44:	92 07       	cpc	r25, r18
     e46:	21 f4       	brne	.+8      	; 0xe50 <sysclk_enable_peripheral_clock+0x1d4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     e48:	60 e1       	ldi	r22, 0x10	; 16
     e4a:	84 e0       	ldi	r24, 0x04	; 4
     e4c:	20 ca       	rjmp	.-3008   	; 0x28e <sysclk_enable_module>
     e4e:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     e50:	80 3a       	cpi	r24, 0xA0	; 160
     e52:	2a e0       	ldi	r18, 0x0A	; 10
     e54:	92 07       	cpc	r25, r18
     e56:	21 f4       	brne	.+8      	; 0xe60 <sysclk_enable_peripheral_clock+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     e58:	60 e1       	ldi	r22, 0x10	; 16
     e5a:	85 e0       	ldi	r24, 0x05	; 5
     e5c:	18 ca       	rjmp	.-3024   	; 0x28e <sysclk_enable_module>
     e5e:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     e60:	80 3a       	cpi	r24, 0xA0	; 160
     e62:	2b e0       	ldi	r18, 0x0B	; 11
     e64:	92 07       	cpc	r25, r18
     e66:	21 f4       	brne	.+8      	; 0xe70 <sysclk_enable_peripheral_clock+0x1f4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     e68:	60 e1       	ldi	r22, 0x10	; 16
     e6a:	86 e0       	ldi	r24, 0x06	; 6
     e6c:	10 ca       	rjmp	.-3040   	; 0x28e <sysclk_enable_module>
     e6e:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     e70:	80 3b       	cpi	r24, 0xB0	; 176
     e72:	28 e0       	ldi	r18, 0x08	; 8
     e74:	92 07       	cpc	r25, r18
     e76:	21 f4       	brne	.+8      	; 0xe80 <sysclk_enable_peripheral_clock+0x204>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     e78:	60 e2       	ldi	r22, 0x20	; 32
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	08 ca       	rjmp	.-3056   	; 0x28e <sysclk_enable_module>
     e7e:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     e80:	80 3b       	cpi	r24, 0xB0	; 176
     e82:	29 e0       	ldi	r18, 0x09	; 9
     e84:	92 07       	cpc	r25, r18
     e86:	21 f4       	brne	.+8      	; 0xe90 <sysclk_enable_peripheral_clock+0x214>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     e88:	60 e2       	ldi	r22, 0x20	; 32
     e8a:	84 e0       	ldi	r24, 0x04	; 4
     e8c:	00 ca       	rjmp	.-3072   	; 0x28e <sysclk_enable_module>
     e8e:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     e90:	80 3b       	cpi	r24, 0xB0	; 176
     e92:	2a e0       	ldi	r18, 0x0A	; 10
     e94:	92 07       	cpc	r25, r18
     e96:	21 f4       	brne	.+8      	; 0xea0 <sysclk_enable_peripheral_clock+0x224>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     e98:	60 e2       	ldi	r22, 0x20	; 32
     e9a:	85 e0       	ldi	r24, 0x05	; 5
     e9c:	f8 c9       	rjmp	.-3088   	; 0x28e <sysclk_enable_module>
     e9e:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     ea0:	80 3b       	cpi	r24, 0xB0	; 176
     ea2:	2b e0       	ldi	r18, 0x0B	; 11
     ea4:	92 07       	cpc	r25, r18
     ea6:	21 f4       	brne	.+8      	; 0xeb0 <sysclk_enable_peripheral_clock+0x234>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     ea8:	60 e2       	ldi	r22, 0x20	; 32
     eaa:	86 e0       	ldi	r24, 0x06	; 6
     eac:	f0 c9       	rjmp	.-3104   	; 0x28e <sysclk_enable_module>
     eae:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     eb0:	80 38       	cpi	r24, 0x80	; 128
     eb2:	24 e0       	ldi	r18, 0x04	; 4
     eb4:	92 07       	cpc	r25, r18
     eb6:	21 f4       	brne	.+8      	; 0xec0 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     eb8:	60 e4       	ldi	r22, 0x40	; 64
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	e8 c9       	rjmp	.-3120   	; 0x28e <sysclk_enable_module>
     ebe:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     ec0:	80 39       	cpi	r24, 0x90	; 144
     ec2:	24 e0       	ldi	r18, 0x04	; 4
     ec4:	92 07       	cpc	r25, r18
     ec6:	21 f4       	brne	.+8      	; 0xed0 <sysclk_enable_peripheral_clock+0x254>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     ec8:	60 e4       	ldi	r22, 0x40	; 64
     eca:	84 e0       	ldi	r24, 0x04	; 4
     ecc:	e0 c9       	rjmp	.-3136   	; 0x28e <sysclk_enable_module>
     ece:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     ed0:	80 3a       	cpi	r24, 0xA0	; 160
     ed2:	24 e0       	ldi	r18, 0x04	; 4
     ed4:	92 07       	cpc	r25, r18
     ed6:	21 f4       	brne	.+8      	; 0xee0 <sysclk_enable_peripheral_clock+0x264>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     ed8:	60 e4       	ldi	r22, 0x40	; 64
     eda:	85 e0       	ldi	r24, 0x05	; 5
     edc:	d8 c9       	rjmp	.-3152   	; 0x28e <sysclk_enable_module>
     ede:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     ee0:	80 3b       	cpi	r24, 0xB0	; 176
     ee2:	94 40       	sbci	r25, 0x04	; 4
     ee4:	19 f4       	brne	.+6      	; 0xeec <sysclk_enable_peripheral_clock+0x270>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     ee6:	60 e4       	ldi	r22, 0x40	; 64
     ee8:	86 e0       	ldi	r24, 0x06	; 6
     eea:	d1 c9       	rjmp	.-3166   	; 0x28e <sysclk_enable_module>
     eec:	08 95       	ret

00000eee <TCE0_init>:
		
	}
	
}
void TCE0_init(uint16_t period){
	PORTE.DIR = 0b11111111;
     eee:	2f ef       	ldi	r18, 0xFF	; 255
     ef0:	20 93 80 06 	sts	0x0680, r18	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
	TCE0.CTRLA = 0b00000110; //0110 is prescalar 256.
     ef4:	e0 e0       	ldi	r30, 0x00	; 0
     ef6:	fa e0       	ldi	r31, 0x0A	; 10
     ef8:	26 e0       	ldi	r18, 0x06	; 6
     efa:	20 83       	st	Z, r18
	TCE0.CTRLB = 0b11110011; //All LED outputs and Single Slope.
     efc:	23 ef       	ldi	r18, 0xF3	; 243
     efe:	21 83       	std	Z+1, r18	; 0x01
	TCE0.PER = period; //THis will make the LEDs blink at 10Hz.
     f00:	86 a3       	std	Z+38, r24	; 0x26
     f02:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.CCA = TCE0.PER - (TCE0.PER/10); //90% Duty cycle equates to 10% on time for LEDs.
     f04:	46 a1       	ldd	r20, Z+38	; 0x26
     f06:	57 a1       	ldd	r21, Z+39	; 0x27
     f08:	26 a1       	ldd	r18, Z+38	; 0x26
     f0a:	37 a1       	ldd	r19, Z+39	; 0x27
     f0c:	ad ec       	ldi	r26, 0xCD	; 205
     f0e:	bc ec       	ldi	r27, 0xCC	; 204
     f10:	71 d0       	rcall	.+226    	; 0xff4 <__umulhisi3>
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	96 95       	lsr	r25
     f18:	87 95       	ror	r24
     f1a:	96 95       	lsr	r25
     f1c:	87 95       	ror	r24
     f1e:	48 1b       	sub	r20, r24
     f20:	59 0b       	sbc	r21, r25
     f22:	40 a7       	std	Z+40, r20	; 0x28
     f24:	51 a7       	std	Z+41, r21	; 0x29
	TCE0.CCB = TCE0.PER - (TCE0.PER/10);
     f26:	46 a1       	ldd	r20, Z+38	; 0x26
     f28:	57 a1       	ldd	r21, Z+39	; 0x27
     f2a:	26 a1       	ldd	r18, Z+38	; 0x26
     f2c:	37 a1       	ldd	r19, Z+39	; 0x27
     f2e:	62 d0       	rcall	.+196    	; 0xff4 <__umulhisi3>
     f30:	96 95       	lsr	r25
     f32:	87 95       	ror	r24
     f34:	96 95       	lsr	r25
     f36:	87 95       	ror	r24
     f38:	96 95       	lsr	r25
     f3a:	87 95       	ror	r24
     f3c:	48 1b       	sub	r20, r24
     f3e:	59 0b       	sbc	r21, r25
     f40:	42 a7       	std	Z+42, r20	; 0x2a
     f42:	53 a7       	std	Z+43, r21	; 0x2b
	TCE0.CCC = TCE0.PER - (TCE0.PER/10);
     f44:	46 a1       	ldd	r20, Z+38	; 0x26
     f46:	57 a1       	ldd	r21, Z+39	; 0x27
     f48:	26 a1       	ldd	r18, Z+38	; 0x26
     f4a:	37 a1       	ldd	r19, Z+39	; 0x27
     f4c:	53 d0       	rcall	.+166    	; 0xff4 <__umulhisi3>
     f4e:	96 95       	lsr	r25
     f50:	87 95       	ror	r24
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	48 1b       	sub	r20, r24
     f5c:	59 0b       	sbc	r21, r25
     f5e:	44 a7       	std	Z+44, r20	; 0x2c
     f60:	55 a7       	std	Z+45, r21	; 0x2d
	TCE0.CCD = TCE0.PER - (TCE0.PER/10);
     f62:	46 a1       	ldd	r20, Z+38	; 0x26
     f64:	57 a1       	ldd	r21, Z+39	; 0x27
     f66:	26 a1       	ldd	r18, Z+38	; 0x26
     f68:	37 a1       	ldd	r19, Z+39	; 0x27
     f6a:	44 d0       	rcall	.+136    	; 0xff4 <__umulhisi3>
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	96 95       	lsr	r25
     f72:	87 95       	ror	r24
     f74:	96 95       	lsr	r25
     f76:	87 95       	ror	r24
     f78:	48 1b       	sub	r20, r24
     f7a:	59 0b       	sbc	r21, r25
     f7c:	46 a7       	std	Z+46, r20	; 0x2e
     f7e:	57 a7       	std	Z+47, r21	; 0x2f
     f80:	08 95       	ret

00000f82 <main>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int main (void)
{
	/* Initialize the system clock, 32MHz, this also turns off all peripheral clocks */
	sysclk_init();
     f82:	5e d9       	rcall	.-3396   	; 0x240 <sysclk_init>
	sysclk_enable_peripheral_clock(&USARTC0); //For every peripheral, you must enable the clock like shown here. Ex. Timer counters, SPI, ADCs
     f84:	80 ea       	ldi	r24, 0xA0	; 160
     f86:	98 e0       	ldi	r25, 0x08	; 8
     f88:	79 de       	rcall	.-782    	; 0xc7c <sysclk_enable_peripheral_clock>
	
	/* Example, Timer Counter on PORTE */
	sysclk_enable_peripheral_clock(&TCE0);
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	9a e0       	ldi	r25, 0x0A	; 10
     f8e:	76 de       	rcall	.-788    	; 0xc7c <sysclk_enable_peripheral_clock>
	sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES); //You must have this line for every timer counter due to a flaw in the design of the chip
     f90:	64 e0       	ldi	r22, 0x04	; 4
     f92:	85 e0       	ldi	r24, 0x05	; 5
     f94:	7c d9       	rcall	.-3336   	; 0x28e <sysclk_enable_module>
	
	/* Initializations */;
	UART_Comms_Init();
     f96:	2e de       	rcall	.-932    	; 0xbf4 <UART_Comms_Init>
	TCE0_init(12499);
     f98:	83 ed       	ldi	r24, 0xD3	; 211
     f9a:	90 e3       	ldi	r25, 0x30	; 48
     f9c:	a8 df       	rcall	.-176    	; 0xeee <TCE0_init>
	/* Flight Code */
	
	sysclk_enable_peripheral_clock(&ADCA);
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	6c de       	rcall	.-808    	; 0xc7c <sysclk_enable_peripheral_clock>
	
	PORTE.DIR = 0b11111111; //Sets all the pins on PORTE as an output.
     fa4:	e0 e8       	ldi	r30, 0x80	; 128
     fa6:	f6 e0       	ldi	r31, 0x06	; 6
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	80 83       	st	Z, r24
	PORTE.OUT = 0b00000000; //Sets all of the pins voltage levels to 0V, which is logic 0 in programming.
     fac:	14 82       	std	Z+4, r1	; 0x04
			lightChase <<= 1;
			delay_ms(100);
		}
		*/
		
	}
     fae:	ff cf       	rjmp	.-2      	; 0xfae <main+0x2c>

00000fb0 <__udivmodsi4>:
     fb0:	a1 e2       	ldi	r26, 0x21	; 33
     fb2:	1a 2e       	mov	r1, r26
     fb4:	aa 1b       	sub	r26, r26
     fb6:	bb 1b       	sub	r27, r27
     fb8:	fd 01       	movw	r30, r26
     fba:	0d c0       	rjmp	.+26     	; 0xfd6 <__udivmodsi4_ep>

00000fbc <__udivmodsi4_loop>:
     fbc:	aa 1f       	adc	r26, r26
     fbe:	bb 1f       	adc	r27, r27
     fc0:	ee 1f       	adc	r30, r30
     fc2:	ff 1f       	adc	r31, r31
     fc4:	a2 17       	cp	r26, r18
     fc6:	b3 07       	cpc	r27, r19
     fc8:	e4 07       	cpc	r30, r20
     fca:	f5 07       	cpc	r31, r21
     fcc:	20 f0       	brcs	.+8      	; 0xfd6 <__udivmodsi4_ep>
     fce:	a2 1b       	sub	r26, r18
     fd0:	b3 0b       	sbc	r27, r19
     fd2:	e4 0b       	sbc	r30, r20
     fd4:	f5 0b       	sbc	r31, r21

00000fd6 <__udivmodsi4_ep>:
     fd6:	66 1f       	adc	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	1a 94       	dec	r1
     fe0:	69 f7       	brne	.-38     	; 0xfbc <__udivmodsi4_loop>
     fe2:	60 95       	com	r22
     fe4:	70 95       	com	r23
     fe6:	80 95       	com	r24
     fe8:	90 95       	com	r25
     fea:	9b 01       	movw	r18, r22
     fec:	ac 01       	movw	r20, r24
     fee:	bd 01       	movw	r22, r26
     ff0:	cf 01       	movw	r24, r30
     ff2:	08 95       	ret

00000ff4 <__umulhisi3>:
     ff4:	a2 9f       	mul	r26, r18
     ff6:	b0 01       	movw	r22, r0
     ff8:	b3 9f       	mul	r27, r19
     ffa:	c0 01       	movw	r24, r0
     ffc:	a3 9f       	mul	r26, r19
     ffe:	70 0d       	add	r23, r0
    1000:	81 1d       	adc	r24, r1
    1002:	11 24       	eor	r1, r1
    1004:	91 1d       	adc	r25, r1
    1006:	b2 9f       	mul	r27, r18
    1008:	70 0d       	add	r23, r0
    100a:	81 1d       	adc	r24, r1
    100c:	11 24       	eor	r1, r1
    100e:	91 1d       	adc	r25, r1
    1010:	08 95       	ret

00001012 <fdevopen>:
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	31 f4       	brne	.+12     	; 0x102a <fdevopen+0x18>
    101e:	61 15       	cp	r22, r1
    1020:	71 05       	cpc	r23, r1
    1022:	19 f4       	brne	.+6      	; 0x102a <fdevopen+0x18>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	39 c0       	rjmp	.+114    	; 0x109c <fdevopen+0x8a>
    102a:	8b 01       	movw	r16, r22
    102c:	ec 01       	movw	r28, r24
    102e:	6e e0       	ldi	r22, 0x0E	; 14
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	37 d0       	rcall	.+110    	; 0x10a6 <calloc>
    1038:	fc 01       	movw	r30, r24
    103a:	89 2b       	or	r24, r25
    103c:	99 f3       	breq	.-26     	; 0x1024 <fdevopen+0x12>
    103e:	80 e8       	ldi	r24, 0x80	; 128
    1040:	83 83       	std	Z+3, r24	; 0x03
    1042:	01 15       	cp	r16, r1
    1044:	11 05       	cpc	r17, r1
    1046:	71 f0       	breq	.+28     	; 0x1064 <fdevopen+0x52>
    1048:	02 87       	std	Z+10, r16	; 0x0a
    104a:	13 87       	std	Z+11, r17	; 0x0b
    104c:	81 e8       	ldi	r24, 0x81	; 129
    104e:	83 83       	std	Z+3, r24	; 0x03
    1050:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <__iob>
    1054:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <__iob+0x1>
    1058:	89 2b       	or	r24, r25
    105a:	21 f4       	brne	.+8      	; 0x1064 <fdevopen+0x52>
    105c:	e0 93 18 20 	sts	0x2018, r30	; 0x802018 <__iob>
    1060:	f0 93 19 20 	sts	0x2019, r31	; 0x802019 <__iob+0x1>
    1064:	20 97       	sbiw	r28, 0x00	; 0
    1066:	c9 f0       	breq	.+50     	; 0x109a <fdevopen+0x88>
    1068:	c0 87       	std	Z+8, r28	; 0x08
    106a:	d1 87       	std	Z+9, r29	; 0x09
    106c:	83 81       	ldd	r24, Z+3	; 0x03
    106e:	82 60       	ori	r24, 0x02	; 2
    1070:	83 83       	std	Z+3, r24	; 0x03
    1072:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <__iob+0x2>
    1076:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <__iob+0x3>
    107a:	89 2b       	or	r24, r25
    107c:	71 f4       	brne	.+28     	; 0x109a <fdevopen+0x88>
    107e:	e0 93 1a 20 	sts	0x201A, r30	; 0x80201a <__iob+0x2>
    1082:	f0 93 1b 20 	sts	0x201B, r31	; 0x80201b <__iob+0x3>
    1086:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <__iob+0x4>
    108a:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <__iob+0x5>
    108e:	89 2b       	or	r24, r25
    1090:	21 f4       	brne	.+8      	; 0x109a <fdevopen+0x88>
    1092:	e0 93 1c 20 	sts	0x201C, r30	; 0x80201c <__iob+0x4>
    1096:	f0 93 1d 20 	sts	0x201D, r31	; 0x80201d <__iob+0x5>
    109a:	cf 01       	movw	r24, r30
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	08 95       	ret

000010a6 <calloc>:
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	86 9f       	mul	r24, r22
    10b0:	80 01       	movw	r16, r0
    10b2:	87 9f       	mul	r24, r23
    10b4:	10 0d       	add	r17, r0
    10b6:	96 9f       	mul	r25, r22
    10b8:	10 0d       	add	r17, r0
    10ba:	11 24       	eor	r1, r1
    10bc:	c8 01       	movw	r24, r16
    10be:	0d d0       	rcall	.+26     	; 0x10da <malloc>
    10c0:	ec 01       	movw	r28, r24
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	21 f0       	breq	.+8      	; 0x10ce <calloc+0x28>
    10c6:	a8 01       	movw	r20, r16
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	33 d1       	rcall	.+614    	; 0x1334 <memset>
    10ce:	ce 01       	movw	r24, r28
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret

000010da <malloc>:
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	82 30       	cpi	r24, 0x02	; 2
    10e0:	91 05       	cpc	r25, r1
    10e2:	10 f4       	brcc	.+4      	; 0x10e8 <malloc+0xe>
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	e0 91 20 20 	lds	r30, 0x2020	; 0x802020 <__flp>
    10ec:	f0 91 21 20 	lds	r31, 0x2021	; 0x802021 <__flp+0x1>
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	c0 e0       	ldi	r28, 0x00	; 0
    10f6:	d0 e0       	ldi	r29, 0x00	; 0
    10f8:	30 97       	sbiw	r30, 0x00	; 0
    10fa:	11 f1       	breq	.+68     	; 0x1140 <malloc+0x66>
    10fc:	40 81       	ld	r20, Z
    10fe:	51 81       	ldd	r21, Z+1	; 0x01
    1100:	48 17       	cp	r20, r24
    1102:	59 07       	cpc	r21, r25
    1104:	c0 f0       	brcs	.+48     	; 0x1136 <malloc+0x5c>
    1106:	48 17       	cp	r20, r24
    1108:	59 07       	cpc	r21, r25
    110a:	61 f4       	brne	.+24     	; 0x1124 <malloc+0x4a>
    110c:	82 81       	ldd	r24, Z+2	; 0x02
    110e:	93 81       	ldd	r25, Z+3	; 0x03
    1110:	20 97       	sbiw	r28, 0x00	; 0
    1112:	19 f0       	breq	.+6      	; 0x111a <malloc+0x40>
    1114:	8a 83       	std	Y+2, r24	; 0x02
    1116:	9b 83       	std	Y+3, r25	; 0x03
    1118:	2b c0       	rjmp	.+86     	; 0x1170 <malloc+0x96>
    111a:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__flp>
    111e:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <__flp+0x1>
    1122:	26 c0       	rjmp	.+76     	; 0x1170 <malloc+0x96>
    1124:	21 15       	cp	r18, r1
    1126:	31 05       	cpc	r19, r1
    1128:	19 f0       	breq	.+6      	; 0x1130 <malloc+0x56>
    112a:	42 17       	cp	r20, r18
    112c:	53 07       	cpc	r21, r19
    112e:	18 f4       	brcc	.+6      	; 0x1136 <malloc+0x5c>
    1130:	9a 01       	movw	r18, r20
    1132:	be 01       	movw	r22, r28
    1134:	df 01       	movw	r26, r30
    1136:	ef 01       	movw	r28, r30
    1138:	02 80       	ldd	r0, Z+2	; 0x02
    113a:	f3 81       	ldd	r31, Z+3	; 0x03
    113c:	e0 2d       	mov	r30, r0
    113e:	dc cf       	rjmp	.-72     	; 0x10f8 <malloc+0x1e>
    1140:	21 15       	cp	r18, r1
    1142:	31 05       	cpc	r19, r1
    1144:	09 f1       	breq	.+66     	; 0x1188 <malloc+0xae>
    1146:	28 1b       	sub	r18, r24
    1148:	39 0b       	sbc	r19, r25
    114a:	24 30       	cpi	r18, 0x04	; 4
    114c:	31 05       	cpc	r19, r1
    114e:	90 f4       	brcc	.+36     	; 0x1174 <malloc+0x9a>
    1150:	12 96       	adiw	r26, 0x02	; 2
    1152:	8d 91       	ld	r24, X+
    1154:	9c 91       	ld	r25, X
    1156:	13 97       	sbiw	r26, 0x03	; 3
    1158:	61 15       	cp	r22, r1
    115a:	71 05       	cpc	r23, r1
    115c:	21 f0       	breq	.+8      	; 0x1166 <malloc+0x8c>
    115e:	fb 01       	movw	r30, r22
    1160:	82 83       	std	Z+2, r24	; 0x02
    1162:	93 83       	std	Z+3, r25	; 0x03
    1164:	04 c0       	rjmp	.+8      	; 0x116e <malloc+0x94>
    1166:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__flp>
    116a:	90 93 21 20 	sts	0x2021, r25	; 0x802021 <__flp+0x1>
    116e:	fd 01       	movw	r30, r26
    1170:	32 96       	adiw	r30, 0x02	; 2
    1172:	44 c0       	rjmp	.+136    	; 0x11fc <malloc+0x122>
    1174:	fd 01       	movw	r30, r26
    1176:	e2 0f       	add	r30, r18
    1178:	f3 1f       	adc	r31, r19
    117a:	81 93       	st	Z+, r24
    117c:	91 93       	st	Z+, r25
    117e:	22 50       	subi	r18, 0x02	; 2
    1180:	31 09       	sbc	r19, r1
    1182:	2d 93       	st	X+, r18
    1184:	3c 93       	st	X, r19
    1186:	3a c0       	rjmp	.+116    	; 0x11fc <malloc+0x122>
    1188:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <__brkval>
    118c:	30 91 1f 20 	lds	r19, 0x201F	; 0x80201f <__brkval+0x1>
    1190:	23 2b       	or	r18, r19
    1192:	41 f4       	brne	.+16     	; 0x11a4 <malloc+0xca>
    1194:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    1198:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    119c:	20 93 1e 20 	sts	0x201E, r18	; 0x80201e <__brkval>
    11a0:	30 93 1f 20 	sts	0x201F, r19	; 0x80201f <__brkval+0x1>
    11a4:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    11a8:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    11ac:	21 15       	cp	r18, r1
    11ae:	31 05       	cpc	r19, r1
    11b0:	41 f4       	brne	.+16     	; 0x11c2 <malloc+0xe8>
    11b2:	2d b7       	in	r18, 0x3d	; 61
    11b4:	3e b7       	in	r19, 0x3e	; 62
    11b6:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    11ba:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    11be:	24 1b       	sub	r18, r20
    11c0:	35 0b       	sbc	r19, r21
    11c2:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <__brkval>
    11c6:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <__brkval+0x1>
    11ca:	e2 17       	cp	r30, r18
    11cc:	f3 07       	cpc	r31, r19
    11ce:	a0 f4       	brcc	.+40     	; 0x11f8 <malloc+0x11e>
    11d0:	2e 1b       	sub	r18, r30
    11d2:	3f 0b       	sbc	r19, r31
    11d4:	28 17       	cp	r18, r24
    11d6:	39 07       	cpc	r19, r25
    11d8:	78 f0       	brcs	.+30     	; 0x11f8 <malloc+0x11e>
    11da:	ac 01       	movw	r20, r24
    11dc:	4e 5f       	subi	r20, 0xFE	; 254
    11de:	5f 4f       	sbci	r21, 0xFF	; 255
    11e0:	24 17       	cp	r18, r20
    11e2:	35 07       	cpc	r19, r21
    11e4:	48 f0       	brcs	.+18     	; 0x11f8 <malloc+0x11e>
    11e6:	4e 0f       	add	r20, r30
    11e8:	5f 1f       	adc	r21, r31
    11ea:	40 93 1e 20 	sts	0x201E, r20	; 0x80201e <__brkval>
    11ee:	50 93 1f 20 	sts	0x201F, r21	; 0x80201f <__brkval+0x1>
    11f2:	81 93       	st	Z+, r24
    11f4:	91 93       	st	Z+, r25
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <malloc+0x122>
    11f8:	e0 e0       	ldi	r30, 0x00	; 0
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	cf 01       	movw	r24, r30
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <free>:
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	09 f4       	brne	.+2      	; 0x1212 <free+0xe>
    1210:	8c c0       	rjmp	.+280    	; 0x132a <free+0x126>
    1212:	fc 01       	movw	r30, r24
    1214:	32 97       	sbiw	r30, 0x02	; 2
    1216:	12 82       	std	Z+2, r1	; 0x02
    1218:	13 82       	std	Z+3, r1	; 0x03
    121a:	00 91 20 20 	lds	r16, 0x2020	; 0x802020 <__flp>
    121e:	10 91 21 20 	lds	r17, 0x2021	; 0x802021 <__flp+0x1>
    1222:	01 15       	cp	r16, r1
    1224:	11 05       	cpc	r17, r1
    1226:	81 f4       	brne	.+32     	; 0x1248 <free+0x44>
    1228:	20 81       	ld	r18, Z
    122a:	31 81       	ldd	r19, Z+1	; 0x01
    122c:	82 0f       	add	r24, r18
    122e:	93 1f       	adc	r25, r19
    1230:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <__brkval>
    1234:	30 91 1f 20 	lds	r19, 0x201F	; 0x80201f <__brkval+0x1>
    1238:	28 17       	cp	r18, r24
    123a:	39 07       	cpc	r19, r25
    123c:	79 f5       	brne	.+94     	; 0x129c <free+0x98>
    123e:	e0 93 1e 20 	sts	0x201E, r30	; 0x80201e <__brkval>
    1242:	f0 93 1f 20 	sts	0x201F, r31	; 0x80201f <__brkval+0x1>
    1246:	71 c0       	rjmp	.+226    	; 0x132a <free+0x126>
    1248:	d8 01       	movw	r26, r16
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	ae 17       	cp	r26, r30
    1250:	bf 07       	cpc	r27, r31
    1252:	50 f4       	brcc	.+20     	; 0x1268 <free+0x64>
    1254:	12 96       	adiw	r26, 0x02	; 2
    1256:	2d 91       	ld	r18, X+
    1258:	3c 91       	ld	r19, X
    125a:	13 97       	sbiw	r26, 0x03	; 3
    125c:	ad 01       	movw	r20, r26
    125e:	21 15       	cp	r18, r1
    1260:	31 05       	cpc	r19, r1
    1262:	09 f1       	breq	.+66     	; 0x12a6 <free+0xa2>
    1264:	d9 01       	movw	r26, r18
    1266:	f3 cf       	rjmp	.-26     	; 0x124e <free+0x4a>
    1268:	9d 01       	movw	r18, r26
    126a:	da 01       	movw	r26, r20
    126c:	22 83       	std	Z+2, r18	; 0x02
    126e:	33 83       	std	Z+3, r19	; 0x03
    1270:	60 81       	ld	r22, Z
    1272:	71 81       	ldd	r23, Z+1	; 0x01
    1274:	86 0f       	add	r24, r22
    1276:	97 1f       	adc	r25, r23
    1278:	82 17       	cp	r24, r18
    127a:	93 07       	cpc	r25, r19
    127c:	69 f4       	brne	.+26     	; 0x1298 <free+0x94>
    127e:	ec 01       	movw	r28, r24
    1280:	28 81       	ld	r18, Y
    1282:	39 81       	ldd	r19, Y+1	; 0x01
    1284:	26 0f       	add	r18, r22
    1286:	37 1f       	adc	r19, r23
    1288:	2e 5f       	subi	r18, 0xFE	; 254
    128a:	3f 4f       	sbci	r19, 0xFF	; 255
    128c:	20 83       	st	Z, r18
    128e:	31 83       	std	Z+1, r19	; 0x01
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	9b 81       	ldd	r25, Y+3	; 0x03
    1294:	82 83       	std	Z+2, r24	; 0x02
    1296:	93 83       	std	Z+3, r25	; 0x03
    1298:	45 2b       	or	r20, r21
    129a:	29 f4       	brne	.+10     	; 0x12a6 <free+0xa2>
    129c:	e0 93 20 20 	sts	0x2020, r30	; 0x802020 <__flp>
    12a0:	f0 93 21 20 	sts	0x2021, r31	; 0x802021 <__flp+0x1>
    12a4:	42 c0       	rjmp	.+132    	; 0x132a <free+0x126>
    12a6:	12 96       	adiw	r26, 0x02	; 2
    12a8:	ed 93       	st	X+, r30
    12aa:	fc 93       	st	X, r31
    12ac:	13 97       	sbiw	r26, 0x03	; 3
    12ae:	ed 01       	movw	r28, r26
    12b0:	49 91       	ld	r20, Y+
    12b2:	59 91       	ld	r21, Y+
    12b4:	9e 01       	movw	r18, r28
    12b6:	24 0f       	add	r18, r20
    12b8:	35 1f       	adc	r19, r21
    12ba:	e2 17       	cp	r30, r18
    12bc:	f3 07       	cpc	r31, r19
    12be:	71 f4       	brne	.+28     	; 0x12dc <free+0xd8>
    12c0:	80 81       	ld	r24, Z
    12c2:	91 81       	ldd	r25, Z+1	; 0x01
    12c4:	84 0f       	add	r24, r20
    12c6:	95 1f       	adc	r25, r21
    12c8:	02 96       	adiw	r24, 0x02	; 2
    12ca:	8d 93       	st	X+, r24
    12cc:	9c 93       	st	X, r25
    12ce:	11 97       	sbiw	r26, 0x01	; 1
    12d0:	82 81       	ldd	r24, Z+2	; 0x02
    12d2:	93 81       	ldd	r25, Z+3	; 0x03
    12d4:	12 96       	adiw	r26, 0x02	; 2
    12d6:	8d 93       	st	X+, r24
    12d8:	9c 93       	st	X, r25
    12da:	13 97       	sbiw	r26, 0x03	; 3
    12dc:	e0 e0       	ldi	r30, 0x00	; 0
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	d8 01       	movw	r26, r16
    12e2:	12 96       	adiw	r26, 0x02	; 2
    12e4:	8d 91       	ld	r24, X+
    12e6:	9c 91       	ld	r25, X
    12e8:	13 97       	sbiw	r26, 0x03	; 3
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	19 f0       	breq	.+6      	; 0x12f4 <free+0xf0>
    12ee:	f8 01       	movw	r30, r16
    12f0:	8c 01       	movw	r16, r24
    12f2:	f6 cf       	rjmp	.-20     	; 0x12e0 <free+0xdc>
    12f4:	8d 91       	ld	r24, X+
    12f6:	9c 91       	ld	r25, X
    12f8:	98 01       	movw	r18, r16
    12fa:	2e 5f       	subi	r18, 0xFE	; 254
    12fc:	3f 4f       	sbci	r19, 0xFF	; 255
    12fe:	82 0f       	add	r24, r18
    1300:	93 1f       	adc	r25, r19
    1302:	20 91 1e 20 	lds	r18, 0x201E	; 0x80201e <__brkval>
    1306:	30 91 1f 20 	lds	r19, 0x201F	; 0x80201f <__brkval+0x1>
    130a:	28 17       	cp	r18, r24
    130c:	39 07       	cpc	r19, r25
    130e:	69 f4       	brne	.+26     	; 0x132a <free+0x126>
    1310:	30 97       	sbiw	r30, 0x00	; 0
    1312:	29 f4       	brne	.+10     	; 0x131e <free+0x11a>
    1314:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <__flp>
    1318:	10 92 21 20 	sts	0x2021, r1	; 0x802021 <__flp+0x1>
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <free+0x11e>
    131e:	12 82       	std	Z+2, r1	; 0x02
    1320:	13 82       	std	Z+3, r1	; 0x03
    1322:	00 93 1e 20 	sts	0x201E, r16	; 0x80201e <__brkval>
    1326:	10 93 1f 20 	sts	0x201F, r17	; 0x80201f <__brkval+0x1>
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	08 95       	ret

00001334 <memset>:
    1334:	dc 01       	movw	r26, r24
    1336:	01 c0       	rjmp	.+2      	; 0x133a <memset+0x6>
    1338:	6d 93       	st	X+, r22
    133a:	41 50       	subi	r20, 0x01	; 1
    133c:	50 40       	sbci	r21, 0x00	; 0
    133e:	e0 f7       	brcc	.-8      	; 0x1338 <memset+0x4>
    1340:	08 95       	ret

00001342 <_exit>:
    1342:	f8 94       	cli

00001344 <__stop_program>:
    1344:	ff cf       	rjmp	.-2      	; 0x1344 <__stop_program>
